Shader "Hidden/Amplify Occlusion/Occlusion" {
	Properties {
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 57901
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _ZBufferParams      c0       1
					//   _CameraDepthTexture s0       1
					//
					
					    ps_3_0
					    def c1, 1, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mul_pp r0, c1.xxyy, v0.xyxx
					    texldl r0, r0, s0
					    mad r0.x, c0.z, r0.x, c0.w
					    rcp oC0, r0.x
					
					// approximately 5 instruction slots used (2 texture, 3 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[7];
						vec4 _ZBufferParams;
						vec4 unused_0_2;
					};
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = textureLod(_CameraDepthTexture, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
					    SV_Target0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0.xxxx;
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 107009
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _AO_Buffer_PadScale;
					//   float4 _AO_Buffer_TexelSize;
					//   float4 _AO_UVToView;
					//   sampler2D _CameraDepthTexture;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _ZBufferParams       c0       1
					//   _AO_Buffer_PadScale  c1       1
					//   _AO_Buffer_TexelSize c2       1
					//   _AO_UVToView         c3       1
					//   _CameraDepthTexture  s0       1
					//
					
					    ps_3_0
					    def c4, 0, 1, -1, 0.5
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mov r0.zw, c4.x
					    mov r1.xyz, c4
					    mad r2.xy, c2.x, r1.yxzw, v0
					    mul r0.xy, r2, c1
					    mad r2.xy, r2, c3, c3.zwzw
					    texldl r0, r0, s0
					    mad r0.x, c0.z, r0.x, c0.w
					    rcp r0.x, r0.x
					    mul r0.yz, r0.x, r2.xxyw
					    mul r2.xy, c1, v0
					    mov r2.zw, c4.x
					    texldl r2, r2, s0
					    mad r0.w, c0.z, r2.x, c0.w
					    rcp r2.y, r0.w
					    mad r3.xy, v0.yxzw, c3.yxzw, c3.wzzw
					    mul r2.xz, r2.y, r3.xyyw
					    add r0.xyz, r0, -r2.yzxw
					    dp3 r0.w, r0, r0
					    mov r3.zw, c4.x
					    mad r4.xy, c2.x, r1.zxzw, v0
					    mul r3.xy, r4, c1
					    mad r4.xy, r4, c3, c3.zwzw
					    texldl r3, r3, s0
					    mad r1.w, c0.z, r3.x, c0.w
					    rcp r3.x, r1.w
					    mul r3.yz, r3.x, r4.xxyw
					    add r3.xyz, r2.yzxw, -r3
					    dp3 r1.w, r3, r3
					    add r0.w, r0.w, -r1.w
					    cmp r0.xyz, r0.w, r3, r0
					    mov r3.zw, c4.x
					    mad r1.yw, c2.xyzx, r1.xyzx, v0.xyzx
					    mul r3.xy, r1.wyzw, c1
					    mad r1.yw, r1, c3.xyzx, c3.xwzz
					    texldl r3, r3, s0
					    mad r0.w, c0.z, r3.x, c0.w
					    rcp r3.y, r0.w
					    mul r3.xz, r1.yyww, r3.y
					    add r3.xyz, -r2, r3
					    dp3 r0.w, r3, r3
					    mov r4.zw, c4.x
					    mad r1.xy, c2.yxzw, r1.zxzw, v0.yxzw
					    mul r4.xy, r1.yxzw, c1
					    mad r1.xy, r1, c3.yxzw, c3.wzzw
					    texldl r4, r4, s0
					    mad r1.z, c0.z, r4.x, c0.w
					    rcp r4.y, r1.z
					    mul r4.xz, r1.xyyw, r4.y
					    add r1.xyz, r2, -r4
					    dp3 r1.w, r1, r1
					    add r0.w, r0.w, -r1.w
					    cmp r1.xyz, r0.w, r1, r3
					    mul r2.xyz, r0, r1
					    mad r0.xyz, r0.zxyw, r1.yzxw, -r2
					    nrm_pp r1.xyz, r0
					    mad_pp oC0.xyz, r1, c4.w, c4.w
					    mov_pp oC0.w, c4.x
					
					// approximately 64 instruction slots used (10 texture, 54 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[19];
						vec4 _AO_Buffer_PadScale;
						vec4 _AO_Buffer_TexelSize;
						vec4 unused_0_3;
						vec4 _AO_UVToView;
						vec4 unused_0_5[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec2 u_xlat5;
					vec2 u_xlat7;
					vec2 u_xlat10;
					vec2 u_xlat12;
					vec2 u_xlat13;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					void main()
					{
					    u_xlat5.x = _AO_Buffer_TexelSize.x;
					    u_xlat5.y = 0.0;
					    u_xlat0.xy = u_xlat5.xy + vs_TEXCOORD0.xy;
					    u_xlat10.xy = u_xlat0.xy * _AO_Buffer_PadScale.xy;
					    u_xlat0.xy = u_xlat0.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					    u_xlat1 = textureLod(_CameraDepthTexture, u_xlat10.xy, 0.0);
					    u_xlat10.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat10.x;
					    u_xlat1.yz = u_xlat0.xy * u_xlat1.xx;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _AO_Buffer_PadScale.xy;
					    u_xlat0 = textureLod(_CameraDepthTexture, u_xlat0.xy, 0.0);
					    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
					    u_xlat0.y = float(1.0) / u_xlat0.x;
					    u_xlat2.xy = vs_TEXCOORD0.yx * _AO_UVToView.yx + _AO_UVToView.wz;
					    u_xlat0.xz = u_xlat0.yy * u_xlat2.xy;
					    u_xlat1.xyz = (-u_xlat0.yzx) + u_xlat1.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7.x = (-_AO_Buffer_TexelSize.x);
					    u_xlat7.y = 0.0;
					    u_xlat2.xy = u_xlat7.xy + vs_TEXCOORD0.xy;
					    u_xlat12.xy = u_xlat2.xy * _AO_Buffer_PadScale.xy;
					    u_xlat2.xy = u_xlat2.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					    u_xlat3 = textureLod(_CameraDepthTexture, u_xlat12.xy, 0.0);
					    u_xlat16 = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat16;
					    u_xlat3.yz = u_xlat2.xy * u_xlat3.xx;
					    u_xlat2.xyz = u_xlat0.yzx + (-u_xlat3.xyz);
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb15 = u_xlat15<u_xlat16;
					    u_xlat1.xyz = (bool(u_xlatb15)) ? u_xlat1.xyz : u_xlat2.xyz;
					    u_xlat2.z = 0.0;
					    u_xlat2.x = _AO_Buffer_TexelSize.y;
					    u_xlat2.xy = u_xlat2.xz + vs_TEXCOORD0.yx;
					    u_xlat12.xy = u_xlat2.yx * _AO_Buffer_PadScale.xy;
					    u_xlat2.xy = u_xlat2.xy * _AO_UVToView.yx + _AO_UVToView.wz;
					    u_xlat3 = textureLod(_CameraDepthTexture, u_xlat12.xy, 0.0);
					    u_xlat15 = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.y = float(1.0) / u_xlat15;
					    u_xlat3.xz = u_xlat2.xy * u_xlat3.yy;
					    u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat3.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.z = 0.0;
					    u_xlat3.x = (-_AO_Buffer_TexelSize.y);
					    u_xlat3.xy = u_xlat3.xz + vs_TEXCOORD0.yx;
					    u_xlat13.xy = u_xlat3.yx * _AO_Buffer_PadScale.xy;
					    u_xlat3.xy = u_xlat3.xy * _AO_UVToView.yx + _AO_UVToView.wz;
					    u_xlat4 = textureLod(_CameraDepthTexture, u_xlat13.xy, 0.0);
					    u_xlat16 = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.y = float(1.0) / u_xlat16;
					    u_xlat4.xz = u_xlat3.xy * u_xlat4.yy;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat4.xyz);
					    u_xlat16 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlatb15 = u_xlat15<u_xlat16;
					    u_xlat0.xyz = (bool(u_xlatb15)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.zxy * u_xlat0.yzx + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 181520
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _AO_Buffer_PadScale;
					//   sampler2D _CameraDepthNormalsTexture;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   _AO_Buffer_PadScale        c0       1
					//   _CameraDepthNormalsTexture s0       1
					//
					
					    ps_3_0
					    def c1, 3.55539989, 0, -1.77769995, 1
					    def c2, 2, -1, 0.5, -0.5
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mul r0.xy, c0, v0
					    texld r0, r0, s0
					    mad r0.xyz, r0, c1.xxyw, c1.zzww
					    dp3 r0.z, r0, r0
					    rcp r0.z, r0.z
					    add r0.w, r0.z, r0.z
					    mad_pp r1.z, r0.z, c2.x, c2.y
					    mul_pp r1.xy, r0, r0.w
					    mad_pp oC0.xyz, r1, c2.zwww, c2.z
					    mov_pp oC0.w, c1.y
					
					// approximately 10 instruction slots used (1 texture, 9 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[19];
						vec4 _AO_Buffer_PadScale;
						vec4 unused_0_2[7];
					};
					uniform  sampler2D _CameraDepthNormalsTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat4;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _AO_Buffer_PadScale.xy;
					    u_xlat0 = texture(_CameraDepthNormalsTexture, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					    u_xlat4 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat4 = 2.0 / u_xlat4;
					    u_xlat1.xy = u_xlat0.xy * vec2(u_xlat4);
					    u_xlat1.z = u_xlat4 + -1.0;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, -0.5, -0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 255136
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _AO_Buffer_PadScale;
					//   row_major float4x4 _AO_CameraView;
					//   sampler2D _CameraGBufferTexture2;
					//
					//
					// Registers:
					//
					//   Name                   Reg   Size
					//   ---------------------- ----- ----
					//   _AO_CameraView         c0       3
					//   _AO_Buffer_PadScale    c3       1
					//   _CameraGBufferTexture2 s0       1
					//
					
					    ps_3_0
					    def c4, 2, -1, 0.5, -0.5
					    def c5, 0, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mul r0.xy, c3, v0
					    texld_pp r0, r0, s0
					    mad_pp r0.xyz, r0, c4.x, c4.y
					    dp3 r1.x, c0, r0
					    dp3 r1.y, c1, r0
					    dp3 r1.z, c2, r0
					    nrm_pp r0.xyz, r1
					    mad_pp oC0.xyz, r0, c4.zwww, c4.z
					    mov_pp oC0.w, c5.x
					
					// approximately 11 instruction slots used (1 texture, 10 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						mat4x4 _AO_CameraView;
						vec4 unused_0_2[8];
						vec4 _AO_Buffer_PadScale;
						vec4 unused_0_4[7];
					};
					uniform  sampler2D _CameraGBufferTexture2;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _AO_Buffer_PadScale.xy;
					    u_xlat0 = texture(_CameraGBufferTexture2, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat1.xyz = u_xlat0.yyy * _AO_CameraView[1].xyz;
					    u_xlat0.xyw = _AO_CameraView[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _AO_CameraView[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, -0.5, -0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 321690
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _AO_Buffer_PadScale;
					//   row_major float4x4 _AO_CameraView;
					//   sampler2D _CameraGBufferTexture2;
					//
					//
					// Registers:
					//
					//   Name                   Reg   Size
					//   ---------------------- ----- ----
					//   _AO_CameraView         c0       3
					//   _AO_Buffer_PadScale    c3       1
					//   _CameraGBufferTexture2 s0       1
					//
					
					    ps_3_0
					    def c4, 0.5, -0.5, 0, 0
					    def c5, 2, -1, 1, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mul r0.xy, c3, v0
					    texld_pp r0, r0, s0
					    mad_pp r0.xyz, r0, c5.x, c5.y
					    add r0.w, r0.w, c5.y
					    cmp_pp r1.xy, -r0, c5.w, c5.z
					    cmp_pp r1.zw, r0.xyxy, -c5.w, -c5.z
					    add r1.xy, r1.zwzw, r1
					    add r2.xyz, -r0_abs.xyxw, c5.z
					    mul_pp r1.xy, r1, r2.yzzw
					    add_pp r2.z, -r0_abs.y, r2.x
					    cmp_pp r2.xy, r2.z, r0, r1
					    cmp r0.xyz, r0.w, r0, r2
					    dp3 r1.x, c0, r0
					    dp3 r1.y, c1, r0
					    dp3 r1.z, c2, r0
					    nrm_pp r0.xyz, r1
					    mad_pp oC0.xyz, r0, c4.xyyw, c4.x
					    mov_pp oC0.w, c5.w
					
					// approximately 20 instruction slots used (1 texture, 19 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						mat4x4 _AO_CameraView;
						vec4 unused_0_2[8];
						vec4 _AO_Buffer_PadScale;
						vec4 unused_0_4[7];
					};
					uniform  sampler2D _CameraGBufferTexture2;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					ivec2 u_xlati1;
					vec3 u_xlat2;
					ivec2 u_xlati7;
					bool u_xlatb7;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _AO_Buffer_PadScale.xy;
					    u_xlat0 = texture(_CameraGBufferTexture2, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlatb9 = u_xlat0.w<1.0;
					    u_xlati1.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxx).xy) * 0xFFFFFFFFu);
					    u_xlati7.xy = ivec2(uvec2(lessThan(u_xlat0.xyxy, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					    u_xlati1.xy = (-u_xlati1.xy) + u_xlati7.xy;
					    u_xlat1.xy = vec2(u_xlati1.xy);
					    u_xlat2.xyz = -abs(u_xlat0.xyx) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat2.yz;
					    u_xlat2.z = -abs(u_xlat0.y) + u_xlat2.x;
					    u_xlatb7 = u_xlat2.z>=0.0;
					    u_xlat2.xy = (bool(u_xlatb7)) ? u_xlat0.xy : u_xlat1.xy;
					    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * _AO_CameraView[1].xyz;
					    u_xlat0.xyw = _AO_CameraView[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _AO_CameraView[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, -0.5, -0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 390544
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _AO_Buffer_PadScale;
					//   float4 _AO_Buffer_TexelSize;
					//   float2 _AO_LayerOffset0;
					//   float4 _AO_QuarterBuffer_TexelSize;
					//   sampler2D _CameraDepthTexture;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                        Reg   Size
					//   --------------------------- ----- ----
					//   _ZBufferParams              c0       1
					//   _AO_LayerOffset0            c1       1
					//   _AO_Buffer_PadScale         c2       1
					//   _AO_Buffer_TexelSize        c3       1
					//   _AO_QuarterBuffer_TexelSize c4       1
					//   _CameraDepthTexture         s0       1
					//
					
					    ps_3_0
					    def c5, 4, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mul r0.xy, c4.zwzw, v0
					    frc r0.zw, r0.xyxy
					    add r0.xy, -r0.zwzw, r0
					    mov r1.x, c5.x
					    mad r0.xy, r0, r1.x, c1
					    mul r0.xy, r0, c3
					    mul r0.xy, r0, c2
					    mov r0.zw, c5.y
					    texldl r0, r0, s0
					    mad r0.x, c0.z, r0.x, c0.w
					    rcp oC0, r0.x
					
					// approximately 12 instruction slots used (2 texture, 10 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[15];
						vec2 _AO_LayerOffset0;
						vec4 unused_0_2[3];
						vec4 _AO_Buffer_PadScale;
						vec4 _AO_Buffer_TexelSize;
						vec4 _AO_QuarterBuffer_TexelSize;
						vec4 unused_0_6[5];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _AO_QuarterBuffer_TexelSize.zw;
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0) + _AO_LayerOffset0.xy;
					    u_xlat0.xy = u_xlat0.xy * _AO_Buffer_TexelSize.xy;
					    u_xlat0.xy = u_xlat0.xy * _AO_Buffer_PadScale.xy;
					    u_xlat0 = textureLod(_CameraDepthTexture, u_xlat0.xy, 0.0);
					    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
					    SV_Target0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0.xxxx;
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 414009
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _AO_Buffer_PadScale;
					//   float4 _AO_Buffer_TexelSize;
					//   float2 _AO_LayerOffset0;
					//   float4 _AO_QuarterBuffer_TexelSize;
					//   float4 _AO_UVToView;
					//   sampler2D _CameraDepthTexture;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                        Reg   Size
					//   --------------------------- ----- ----
					//   _ZBufferParams              c0       1
					//   _AO_LayerOffset0            c1       1
					//   _AO_Buffer_PadScale         c2       1
					//   _AO_Buffer_TexelSize        c3       1
					//   _AO_QuarterBuffer_TexelSize c4       1
					//   _AO_UVToView                c5       1
					//   _CameraDepthTexture         s0       1
					//
					
					    ps_3_0
					    def c6, 4, 0, 1, -1
					    def c7, 0.5, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mov r0.zw, c6.y
					    mul r1.xy, c4.wzzw, v0.yxzw
					    frc r1.zw, r1.xyxy
					    add r1.xy, -r1.zwzw, r1
					    mov r2, c6
					    mad r1.xy, r1, r2.x, c1.yxzw
					    mul r1.xy, r1, c3.yxzw
					    mad r1.zw, c3.x, r2.xyzy, r1.xyyx
					    mul r0.xy, r1.zwzw, c2
					    mad r1.zw, r1, c5.xyxy, c5
					    texldl r0, r0, s0
					    mad r0.x, c0.z, r0.x, c0.w
					    rcp r0.x, r0.x
					    mul r0.yz, r0.x, r1.xzww
					    mov r3.zw, c6.y
					    mul r3.xy, r1.yxzw, c2
					    texldl r3, r3, s0
					    mad r0.w, c0.z, r3.x, c0.w
					    rcp r3.y, r0.w
					    mad r1.zw, r1.xyxy, c5.xyyx, c5.xywz
					    mul r3.xz, r3.y, r1.zyww
					    add r0.xyz, r0, -r3.yzxw
					    dp3 r0.w, r0, r0
					    mad r1.zw, c3.x, r2.xywy, r1.xyyx
					    mul r4.xy, r1.zwzw, c2
					    mad r1.zw, r1, c5.xyxy, c5
					    mov r4.zw, c6.y
					    texldl r4, r4, s0
					    mad r2.x, c0.z, r4.x, c0.w
					    rcp r4.x, r2.x
					    mul r4.yz, r1.xzww, r4.x
					    add r4.xyz, r3.yzxw, -r4
					    dp3 r1.z, r4, r4
					    add r0.w, r0.w, -r1.z
					    cmp r0.xyz, r0.w, r4, r0
					    mad r1.zw, c3.xyyx, r2.xyzy, r1.xyxy
					    mad r1.xy, c3.yxzw, r2.wyzw, r1
					    mul r2.xy, r1.wzzw, c2
					    mad r1.zw, r1, c5.xyyx, c5.xywz
					    mov r2.zw, c6.y
					    texldl r2, r2, s0
					    mad r0.w, c0.z, r2.x, c0.w
					    rcp r2.y, r0.w
					    mul r2.xz, r1.zyww, r2.y
					    add r2.xyz, -r3, r2
					    dp3 r0.w, r2, r2
					    mad r1.zw, r1.xyxy, c5.xyyx, c5.xywz
					    mul r4.xy, r1.yxzw, c2
					    mov r4.zw, c6.y
					    texldl r4, r4, s0
					    mad r1.x, c0.z, r4.x, c0.w
					    rcp r4.y, r1.x
					    mul r4.xz, r1.zyww, r4.y
					    add r1.xyz, r3, -r4
					    dp3 r1.w, r1, r1
					    add r0.w, r0.w, -r1.w
					    cmp r1.xyz, r0.w, r1, r2
					    mul r2.xyz, r0, r1
					    mad r0.xyz, r0.zxyw, r1.yzxw, -r2
					    nrm_pp r1.xyz, r0
					    mad_pp oC0.xyz, r1, c7.x, c7.x
					    mov_pp oC0.w, c6.y
					
					// approximately 69 instruction slots used (10 texture, 59 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[15];
						vec2 _AO_LayerOffset0;
						vec4 unused_0_2[3];
						vec4 _AO_Buffer_PadScale;
						vec4 _AO_Buffer_TexelSize;
						vec4 _AO_QuarterBuffer_TexelSize;
						vec4 _AO_UVToView;
						vec4 unused_0_7[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec2 u_xlat6;
					bool u_xlatb6;
					vec2 u_xlat8;
					float u_xlat12;
					vec2 u_xlat14;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat6.x = _AO_Buffer_TexelSize.x;
					    u_xlat6.y = 0.0;
					    u_xlat0.xw = vs_TEXCOORD0.yx * _AO_QuarterBuffer_TexelSize.wz;
					    u_xlat0.xw = floor(u_xlat0.xw);
					    u_xlat0.xw = u_xlat0.xw * vec2(4.0, 4.0) + _AO_LayerOffset0.yx;
					    u_xlat6.xy = u_xlat0.wx * _AO_Buffer_TexelSize.xy + u_xlat6.xy;
					    u_xlat1.xy = u_xlat6.xy * _AO_Buffer_PadScale.xy;
					    u_xlat6.xy = u_xlat6.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					    u_xlat1 = textureLod(_CameraDepthTexture, u_xlat1.xy, 0.0);
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat1.yz = u_xlat6.xy * u_xlat1.xx;
					    u_xlat6.xy = u_xlat0.xw * _AO_Buffer_TexelSize.yx;
					    u_xlat2.xy = u_xlat6.xy * _AO_UVToView.yx + _AO_UVToView.wz;
					    u_xlat6.xy = u_xlat6.yx * _AO_Buffer_PadScale.xy;
					    u_xlat3 = textureLod(_CameraDepthTexture, u_xlat6.xy, 0.0);
					    u_xlat6.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.y = float(1.0) / u_xlat6.x;
					    u_xlat3.xz = u_xlat2.xy * u_xlat3.yy;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat3.yzx);
					    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8.x = (-_AO_Buffer_TexelSize.x);
					    u_xlat8.y = 0.0;
					    u_xlat2.xy = u_xlat0.wx * _AO_Buffer_TexelSize.xy + u_xlat8.xy;
					    u_xlat14.xy = u_xlat2.xy * _AO_Buffer_PadScale.xy;
					    u_xlat2.xy = u_xlat2.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					    u_xlat4 = textureLod(_CameraDepthTexture, u_xlat14.xy, 0.0);
					    u_xlat12 = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat12;
					    u_xlat4.yz = u_xlat2.xy * u_xlat4.xx;
					    u_xlat2.xyz = u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb6 = u_xlat6.x<u_xlat12;
					    u_xlat1.xyz = (bool(u_xlatb6)) ? u_xlat1.xyz : u_xlat2.xyz;
					    u_xlat2.z = 0.0;
					    u_xlat2.x = _AO_Buffer_TexelSize.y;
					    u_xlat6.xy = u_xlat0.xw * _AO_Buffer_TexelSize.yx + u_xlat2.xz;
					    u_xlat2.xy = u_xlat6.xy * _AO_UVToView.yx + _AO_UVToView.wz;
					    u_xlat6.xy = u_xlat6.yx * _AO_Buffer_PadScale.xy;
					    u_xlat4 = textureLod(_CameraDepthTexture, u_xlat6.xy, 0.0);
					    u_xlat6.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.y = float(1.0) / u_xlat6.x;
					    u_xlat4.xz = u_xlat2.xy * u_xlat4.yy;
					    u_xlat2.xyz = (-u_xlat3.xyz) + u_xlat4.xyz;
					    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat4.z = 0.0;
					    u_xlat4.x = (-_AO_Buffer_TexelSize.y);
					    u_xlat0.xz = u_xlat0.xw * _AO_Buffer_TexelSize.yx + u_xlat4.xz;
					    u_xlat4.xy = u_xlat0.xz * _AO_UVToView.yx + _AO_UVToView.wz;
					    u_xlat0.xz = u_xlat0.zx * _AO_Buffer_PadScale.xy;
					    u_xlat5 = textureLod(_CameraDepthTexture, u_xlat0.xz, 0.0);
					    u_xlat0.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.y = float(1.0) / u_xlat0.x;
					    u_xlat5.xz = u_xlat4.xy * u_xlat5.yy;
					    u_xlat0.xzw = u_xlat3.xyz + (-u_xlat5.xyz);
					    u_xlat19 = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlatb6 = u_xlat6.x<u_xlat19;
					    u_xlat0.xyz = (bool(u_xlatb6)) ? u_xlat2.xyz : u_xlat0.xzw;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.zxy * u_xlat0.yzx + (-u_xlat2.xyz);
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 516372
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _AO_Buffer_PadScale;
					//   float4 _AO_Buffer_TexelSize;
					//   float2 _AO_LayerOffset0;
					//   float4 _AO_QuarterBuffer_TexelSize;
					//   sampler2D _CameraDepthNormalsTexture;
					//
					//
					// Registers:
					//
					//   Name                        Reg   Size
					//   --------------------------- ----- ----
					//   _AO_LayerOffset0            c0       1
					//   _AO_Buffer_PadScale         c1       1
					//   _AO_Buffer_TexelSize        c2       1
					//   _AO_QuarterBuffer_TexelSize c3       1
					//   _CameraDepthNormalsTexture  s0       1
					//
					
					    ps_3_0
					    def c4, 4, 2, -1, 0
					    def c5, 3.55539989, 0, -1.77769995, 1
					    def c6, 0.5, -0.5, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mul r0.xy, c3.zwzw, v0
					    frc r0.zw, r0.xyxy
					    add r0.xy, -r0.zwzw, r0
					    mov r1.x, c4.x
					    mad r0.xy, r0, r1.x, c0
					    mul r0.xy, r0, c2
					    mul r0.xy, r0, c1
					    texld r0, r0, s0
					    mad r0.xyz, r0, c5.xxyw, c5.zzww
					    dp3 r0.z, r0, r0
					    rcp r0.z, r0.z
					    add r0.w, r0.z, r0.z
					    mad_pp r1.z, r0.z, c4.y, c4.z
					    mul_pp r1.xy, r0, r0.w
					    mad_pp oC0.xyz, r1, c6.xyyw, c6.x
					    mov_pp oC0.w, c4.w
					
					// approximately 16 instruction slots used (1 texture, 15 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[15];
						vec2 _AO_LayerOffset0;
						vec4 unused_0_2[3];
						vec4 _AO_Buffer_PadScale;
						vec4 _AO_Buffer_TexelSize;
						vec4 _AO_QuarterBuffer_TexelSize;
						vec4 unused_0_6[5];
					};
					uniform  sampler2D _CameraDepthNormalsTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat4;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _AO_QuarterBuffer_TexelSize.zw;
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0) + _AO_LayerOffset0.xy;
					    u_xlat0.xy = u_xlat0.xy * _AO_Buffer_TexelSize.xy;
					    u_xlat0.xy = u_xlat0.xy * _AO_Buffer_PadScale.xy;
					    u_xlat0 = texture(_CameraDepthNormalsTexture, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					    u_xlat4 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat4 = 2.0 / u_xlat4;
					    u_xlat1.xy = u_xlat0.xy * vec2(u_xlat4);
					    u_xlat1.z = u_xlat4 + -1.0;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, -0.5, -0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 525424
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _AO_Buffer_PadScale;
					//   float4 _AO_Buffer_TexelSize;
					//   row_major float4x4 _AO_CameraView;
					//   float2 _AO_LayerOffset0;
					//   float4 _AO_QuarterBuffer_TexelSize;
					//   sampler2D _CameraGBufferTexture2;
					//
					//
					// Registers:
					//
					//   Name                        Reg   Size
					//   --------------------------- ----- ----
					//   _AO_CameraView              c0       3
					//   _AO_LayerOffset0            c3       1
					//   _AO_Buffer_PadScale         c4       1
					//   _AO_Buffer_TexelSize        c5       1
					//   _AO_QuarterBuffer_TexelSize c6       1
					//   _CameraGBufferTexture2      s0       1
					//
					
					    ps_3_0
					    def c7, 4, 2, -1, 0
					    def c8, 0.5, -0.5, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mul r0.xy, c6.zwzw, v0
					    frc r0.zw, r0.xyxy
					    add r0.xy, -r0.zwzw, r0
					    mov r1.x, c7.x
					    mad r0.xy, r0, r1.x, c3
					    mul r0.xy, r0, c5
					    mul r0.xy, r0, c4
					    texld_pp r0, r0, s0
					    mad_pp r0.xyz, r0, c7.y, c7.z
					    dp3 r1.x, c0, r0
					    dp3 r1.y, c1, r0
					    dp3 r1.z, c2, r0
					    nrm_pp r0.xyz, r1
					    mad_pp oC0.xyz, r0, c8.xyyw, c8.x
					    mov_pp oC0.w, c7.w
					
					// approximately 17 instruction slots used (1 texture, 16 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						mat4x4 _AO_CameraView;
						vec4 unused_0_2[4];
						vec2 _AO_LayerOffset0;
						vec4 unused_0_4[3];
						vec4 _AO_Buffer_PadScale;
						vec4 _AO_Buffer_TexelSize;
						vec4 _AO_QuarterBuffer_TexelSize;
						vec4 unused_0_8[5];
					};
					uniform  sampler2D _CameraGBufferTexture2;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _AO_QuarterBuffer_TexelSize.zw;
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0) + _AO_LayerOffset0.xy;
					    u_xlat0.xy = u_xlat0.xy * _AO_Buffer_TexelSize.xy;
					    u_xlat0.xy = u_xlat0.xy * _AO_Buffer_PadScale.xy;
					    u_xlat0 = texture(_CameraGBufferTexture2, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat1.xyz = u_xlat0.yyy * _AO_CameraView[1].xyz;
					    u_xlat0.xyw = _AO_CameraView[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _AO_CameraView[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, -0.5, -0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 630324
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _AO_Buffer_PadScale;
					//   float4 _AO_Buffer_TexelSize;
					//   row_major float4x4 _AO_CameraView;
					//   float2 _AO_LayerOffset0;
					//   float4 _AO_QuarterBuffer_TexelSize;
					//   sampler2D _CameraGBufferTexture2;
					//
					//
					// Registers:
					//
					//   Name                        Reg   Size
					//   --------------------------- ----- ----
					//   _AO_CameraView              c0       3
					//   _AO_LayerOffset0            c3       1
					//   _AO_Buffer_PadScale         c4       1
					//   _AO_Buffer_TexelSize        c5       1
					//   _AO_QuarterBuffer_TexelSize c6       1
					//   _CameraGBufferTexture2      s0       1
					//
					
					    ps_3_0
					    def c7, 4, 2, -1, 1
					    def c8, 0.5, -0.5, 0, 0
					    def c9, 0, 1, -0, -1
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mul r0.xy, c6.zwzw, v0
					    frc r0.zw, r0.xyxy
					    add r0.xy, -r0.zwzw, r0
					    mov r1.x, c7.x
					    mad r0.xy, r0, r1.x, c3
					    mul r0.xy, r0, c5
					    mul r0.xy, r0, c4
					    texld_pp r0, r0, s0
					    add r0.w, r0.w, c7.z
					    mad_pp r0.xyz, r0, c7.y, c7.z
					    cmp_pp r1.xy, -r0, c9.x, c9.y
					    cmp_pp r1.zw, r0.xyxy, c9.z, c9.w
					    add r1.xy, r1.zwzw, r1
					    add r2.xyz, -r0_abs.xyxw, c7.w
					    mul_pp r1.xy, r1, r2.yzzw
					    add_pp r2.z, -r0_abs.y, r2.x
					    cmp_pp r2.xy, r2.z, r0, r1
					    cmp r0.xyz, r0.w, r0, r2
					    dp3 r1.x, c0, r0
					    dp3 r1.y, c1, r0
					    dp3 r1.z, c2, r0
					    nrm_pp r0.xyz, r1
					    mad_pp oC0.xyz, r0, c8.xyyw, c8.x
					    mov_pp oC0.w, c9.x
					
					// approximately 26 instruction slots used (1 texture, 25 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						mat4x4 _AO_CameraView;
						vec4 unused_0_2[4];
						vec2 _AO_LayerOffset0;
						vec4 unused_0_4[3];
						vec4 _AO_Buffer_PadScale;
						vec4 _AO_Buffer_TexelSize;
						vec4 _AO_QuarterBuffer_TexelSize;
						vec4 unused_0_8[5];
					};
					uniform  sampler2D _CameraGBufferTexture2;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					ivec2 u_xlati1;
					vec3 u_xlat2;
					ivec2 u_xlati7;
					bool u_xlatb7;
					float u_xlat9;
					bool u_xlatb9;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _AO_QuarterBuffer_TexelSize.zw;
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0) + _AO_LayerOffset0.xy;
					    u_xlat0.xy = u_xlat0.xy * _AO_Buffer_TexelSize.xy;
					    u_xlat0.xy = u_xlat0.xy * _AO_Buffer_PadScale.xy;
					    u_xlat0 = texture(_CameraGBufferTexture2, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlatb9 = u_xlat0.w<1.0;
					    u_xlati1.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxx).xy) * 0xFFFFFFFFu);
					    u_xlati7.xy = ivec2(uvec2(lessThan(u_xlat0.xyxy, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					    u_xlati1.xy = (-u_xlati1.xy) + u_xlati7.xy;
					    u_xlat1.xy = vec2(u_xlati1.xy);
					    u_xlat2.xyz = -abs(u_xlat0.xyx) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat2.yz;
					    u_xlat2.z = -abs(u_xlat0.y) + u_xlat2.x;
					    u_xlatb7 = u_xlat2.z>=0.0;
					    u_xlat2.xy = (bool(u_xlatb7)) ? u_xlat0.xy : u_xlat1.xy;
					    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * _AO_CameraView[1].xyz;
					    u_xlat0.xyw = _AO_CameraView[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _AO_CameraView[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(0.5, -0.5, -0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 692716
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _AO_Buffer_PadScale;
					//   float4 _AO_Buffer_TexelSize;
					//   float2 _AO_LayerOffset0;
					//   float2 _AO_LayerOffset1;
					//   float2 _AO_LayerOffset2;
					//   float2 _AO_LayerOffset3;
					//   float4 _AO_QuarterBuffer_TexelSize;
					//   sampler2D _CameraDepthTexture;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                        Reg   Size
					//   --------------------------- ----- ----
					//   _ZBufferParams              c0       1
					//   _AO_LayerOffset0            c1       1
					//   _AO_LayerOffset1            c2       1
					//   _AO_LayerOffset2            c3       1
					//   _AO_LayerOffset3            c4       1
					//   _AO_Buffer_PadScale         c5       1
					//   _AO_Buffer_TexelSize        c6       1
					//   _AO_QuarterBuffer_TexelSize c7       1
					//   _CameraDepthTexture         s0       1
					//
					
					    ps_3_0
					    def c8, 4, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mov r0.zw, c8.y
					    mul r1.xy, c7.zwzw, v0
					    frc r1.zw, r1.xyxy
					    add r1.xy, -r1.zwzw, r1
					    mov r2.x, c8.x
					    mad r1.zw, r1.xyxy, r2.x, c2.xyxy
					    mul r1.zw, r1, c6.xyxy
					    mul r0.xy, r1.zwzw, c5
					    texldl r0, r0, s0
					    mad r0.x, c0.z, r0.x, c0.w
					    rcp oC1, r0.x
					    mad r0.xy, r1, r2.x, c3
					    mul r0.xy, r0, c6
					    mul r0.xy, r0, c5
					    mov r0.zw, c8.y
					    texldl r0, r0, s0
					    mad r0.x, c0.z, r0.x, c0.w
					    rcp oC2, r0.x
					    mad r0.xy, r1, r2.x, c4
					    mad r0.zw, r1.xyxy, r2.x, c1.xyxy
					    mul r0, r0, c6.xyxy
					    mul r1.xy, r0.zwzw, c5
					    mul r0.xy, r0, c5
					    mov r0.zw, c8.y
					    texldl r0, r0, s0
					    mad r0.x, c0.z, r0.x, c0.w
					    rcp oC3, r0.x
					    mov r1.zw, c8.y
					    texldl r0, r1, s0
					    mad r0.x, c0.z, r0.x, c0.w
					    rcp oC0, r0.x
					
					// approximately 35 instruction slots used (8 texture, 27 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[15];
						vec2 _AO_LayerOffset0;
						vec2 _AO_LayerOffset1;
						vec2 _AO_LayerOffset2;
						vec2 _AO_LayerOffset3;
						vec4 unused_0_5[2];
						vec4 _AO_Buffer_PadScale;
						vec4 _AO_Buffer_TexelSize;
						vec4 _AO_QuarterBuffer_TexelSize;
						vec4 unused_0_9[5];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD0.xyxy * _AO_QuarterBuffer_TexelSize.zwzw;
					    u_xlat0 = floor(u_xlat0);
					    u_xlat1 = u_xlat0.zwzw * vec4(4.0, 4.0, 4.0, 4.0) + vec4(_AO_LayerOffset0.x, _AO_LayerOffset0.y, _AO_LayerOffset1.x, _AO_LayerOffset1.y);
					    u_xlat0 = u_xlat0 * vec4(4.0, 4.0, 4.0, 4.0) + vec4(_AO_LayerOffset2.x, _AO_LayerOffset2.y, _AO_LayerOffset3.x, _AO_LayerOffset3.y);
					    u_xlat0 = u_xlat0 * _AO_Buffer_TexelSize.xyxy;
					    u_xlat0 = u_xlat0 * _AO_Buffer_PadScale.xyxy;
					    u_xlat1 = u_xlat1 * _AO_Buffer_TexelSize.xyxy;
					    u_xlat1 = u_xlat1 * _AO_Buffer_PadScale.xyxy;
					    u_xlat2 = textureLod(_CameraDepthTexture, u_xlat1.xy, 0.0);
					    u_xlat1 = textureLod(_CameraDepthTexture, u_xlat1.zw, 0.0);
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    SV_Target1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1.xxxx;
					    u_xlat1.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
					    SV_Target0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1.xxxx;
					    u_xlat1 = textureLod(_CameraDepthTexture, u_xlat0.xy, 0.0);
					    u_xlat0 = textureLod(_CameraDepthTexture, u_xlat0.zw, 0.0);
					    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
					    SV_Target3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0.xxxx;
					    u_xlat0.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    SV_Target2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0.xxxx;
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 721215
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _AO_Buffer_PadScale;
					//   float4 _AO_Buffer_TexelSize;
					//   float2 _AO_LayerOffset0;
					//   float2 _AO_LayerOffset1;
					//   float2 _AO_LayerOffset2;
					//   float2 _AO_LayerOffset3;
					//   float4 _AO_QuarterBuffer_TexelSize;
					//   float4 _AO_UVToView;
					//   sampler2D _CameraDepthTexture;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                        Reg   Size
					//   --------------------------- ----- ----
					//   _ZBufferParams              c0       1
					//   _AO_LayerOffset0            c1       1
					//   _AO_LayerOffset1            c2       1
					//   _AO_LayerOffset2            c3       1
					//   _AO_LayerOffset3            c4       1
					//   _AO_Buffer_PadScale         c5       1
					//   _AO_Buffer_TexelSize        c6       1
					//   _AO_QuarterBuffer_TexelSize c7       1
					//   _AO_UVToView                c8       1
					//   _CameraDepthTexture         s0       1
					//
					
					    ps_3_0
					    def c9, 4, 0, 1, -1
					    def c10, 0.5, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mov r0.zw, c9.y
					    mul r1.xy, c7.wzzw, v0.yxzw
					    frc r1.zw, r1.xyxy
					    add r1.xy, -r1.zwzw, r1
					    mov r2, c9
					    mad r1.zw, r1.xyxy, r2.x, c1.xyyx
					    mul r3.xy, r2.zyzw, c6.x
					    mad r3.zw, r1.xywz, c6.xyxy, r3.xyxy
					    mul r0.xy, r3.zwzw, c5
					    mad r3.zw, r3, c8.xyxy, c8
					    texldl r0, r0, s0
					    mad r0.x, c0.z, r0.x, c0.w
					    rcp r0.x, r0.x
					    mul r0.yz, r0.x, r3.xzww
					    mov r4.zw, c9.y
					    mul r3.zw, r1, c6.xyyx
					    mul r4.xy, r3.wzzw, c5
					    mad r3.zw, r3, c8.xyyx, c8.xywz
					    texldl r4, r4, s0
					    mad r0.w, c0.z, r4.x, c0.w
					    rcp r4.y, r0.w
					    mul r4.xz, r3.zyww, r4.y
					    add r0.xyz, r0, -r4.yzxw
					    dp3 r0.w, r0, r0
					    mov r5.zw, c9.y
					    mul r3.zw, r2.xywy, c6.x
					    mad r6.xy, r1.wzzw, c6, r3.zwzw
					    mul r5.xy, r6, c5
					    mad r6.xy, r6, c8, c8.zwzw
					    texldl r5, r5, s0
					    mad r4.w, c0.z, r5.x, c0.w
					    rcp r5.x, r4.w
					    mul r5.yz, r5.x, r6.xxyw
					    add r5.xyz, r4.yzxw, -r5
					    dp3 r4.w, r5, r5
					    add r0.w, r0.w, -r4.w
					    cmp r0.xyz, r0.w, r5, r0
					    mov r5.zw, c9.y
					    mul r6.xy, r2.zyzw, c6.yxzw
					    mad r6.zw, r1, c6.xyyx, r6.xyxy
					    mul r5.xy, r6.wzzw, c5
					    mad r6.zw, r6, c8.xyyx, c8.xywz
					    texldl r5, r5, s0
					    mad r0.w, c0.z, r5.x, c0.w
					    rcp r5.y, r0.w
					    mul r5.xz, r5.y, r6.zyww
					    add r5.xyz, -r4, r5
					    dp3 r0.w, r5, r5
					    mov r7.zw, c9.y
					    mul r2.yz, r2.xwyw, c6.xyxw
					    mad r1.zw, r1, c6.xyyx, r2.xyyz
					    mul r7.xy, r1.wzzw, c5
					    mad r1.zw, r1, c8.xyyx, c8.xywz
					    texldl r7, r7, s0
					    mad r2.w, c0.z, r7.x, c0.w
					    rcp r7.y, r2.w
					    mul r7.xz, r1.zyww, r7.y
					    add r4.xyz, r4, -r7
					    dp3 r1.z, r4, r4
					    add r0.w, r0.w, -r1.z
					    cmp r4.xyz, r0.w, r4, r5
					    mul r5.xyz, r0, r4
					    mad r0.xyz, r0.zxyw, r4.yzxw, -r5
					    nrm_pp r4.xyz, r0
					    mad_pp oC0.xyz, r4, c10.x, c10.x
					    mov r0.zw, c9.y
					    mad r1.zw, r1.xyxy, r2.x, c2.xyyx
					    mad r4.xy, r1.wzzw, c6, r3
					    mul r0.xy, r4, c5
					    mad r4.xy, r4, c8, c8.zwzw
					    texldl r0, r0, s0
					    mad r0.x, c0.z, r0.x, c0.w
					    rcp r0.x, r0.x
					    mul r0.yz, r0.x, r4.xxyw
					    mov r4.zw, c9.y
					    mul r5.xy, r1.zwzw, c6.yxzw
					    mul r4.xy, r5.yxzw, c5
					    mad r5.xy, r5, c8.yxzw, c8.wzzw
					    texldl r4, r4, s0
					    mad r0.w, c0.z, r4.x, c0.w
					    rcp r4.y, r0.w
					    mul r4.xz, r4.y, r5.xyyw
					    add r0.xyz, r0, -r4.yzxw
					    dp3 r0.w, r0, r0
					    mov r5.zw, c9.y
					    mad r6.zw, r1.xywz, c6.xyxy, r3
					    mul r5.xy, r6.zwzw, c5
					    mad r6.zw, r6, c8.xyxy, c8
					    texldl r5, r5, s0
					    mad r2.w, c0.z, r5.x, c0.w
					    rcp r5.x, r2.w
					    mul r5.yz, r5.x, r6.xzww
					    add r5.xyz, r4.yzxw, -r5
					    dp3 r2.w, r5, r5
					    add r0.w, r0.w, -r2.w
					    cmp r0.xyz, r0.w, r5, r0
					    mov r5.zw, c9.y
					    mad r6.zw, r1, c6.xyyx, r6.xyxy
					    mad r1.zw, r1, c6.xyyx, r2.xyyz
					    mul r5.xy, r6.wzzw, c5
					    mad r6.zw, r6, c8.xyyx, c8.xywz
					    texldl r5, r5, s0
					    mad r0.w, c0.z, r5.x, c0.w
					    rcp r5.y, r0.w
					    mul r5.xz, r5.y, r6.zyww
					    add r5.xyz, -r4, r5
					    dp3 r0.w, r5, r5
					    mov r7.zw, c9.y
					    mul r7.xy, r1.wzzw, c5
					    mad r1.zw, r1, c8.xyyx, c8.xywz
					    texldl r7, r7, s0
					    mad r2.w, c0.z, r7.x, c0.w
					    rcp r7.y, r2.w
					    mul r7.xz, r1.zyww, r7.y
					    add r4.xyz, r4, -r7
					    dp3 r1.z, r4, r4
					    add r0.w, r0.w, -r1.z
					    cmp r4.xyz, r0.w, r4, r5
					    mul r5.xyz, r0, r4
					    mad r0.xyz, r0.zxyw, r4.yzxw, -r5
					    nrm_pp r4.xyz, r0
					    mad_pp oC1.xyz, r4, c10.x, c10.x
					    mov r0.zw, c9.y
					    mad r1.zw, r1.xyxy, r2.x, c3.xyyx
					    mad r1.xy, r1, r2.x, c4.yxzw
					    mad r2.xw, r1.wyzz, c6.xyzy, r3.xyzy
					    mad r3.xy, r1.yxzw, c6, r3
					    mul r0.xy, r2.xwzw, c5
					    mad r2.xw, r2, c8.xyzy, c8.zyzw
					    texldl r0, r0, s0
					    mad r0.x, c0.z, r0.x, c0.w
					    rcp r0.x, r0.x
					    mul r0.yz, r0.x, r2.xxww
					    mov r4.zw, c9.y
					    mul r2.xw, r1.zyzw, c6.yyzx
					    mul r4.xy, r2.wxzw, c5
					    mad r2.xw, r2, c8.yyzx, c8.wyzz
					    texldl r4, r4, s0
					    mad r0.w, c0.z, r4.x, c0.w
					    rcp r4.y, r0.w
					    mul r4.xz, r2.xyww, r4.y
					    add r0.xyz, r0, -r4.yzxw
					    dp3 r0.w, r0, r0
					    mad r2.xw, r1.wyzz, c6.xyzy, r3.zyzw
					    mad r3.zw, r1.xyyx, c6.xyxy, r3
					    mul r5.xy, r2.xwzw, c5
					    mad r2.xw, r2, c8.xyzy, c8.zyzw
					    mov r5.zw, c9.y
					    texldl r5, r5, s0
					    mad r4.w, c0.z, r5.x, c0.w
					    rcp r5.x, r4.w
					    mul r5.yz, r2.xxww, r5.x
					    add r5.xyz, r4.yzxw, -r5
					    dp3 r2.x, r5, r5
					    add r0.w, r0.w, -r2.x
					    cmp r0.xyz, r0.w, r5, r0
					    mad r2.xw, r1.zyzw, c6.yyzx, r6.xyzy
					    mad r1.zw, r1, c6.xyyx, r2.xyyz
					    mad r2.yz, r1.xxyw, c6.xyxw, r2
					    mad r5.xy, r1, c6.yxzw, r6
					    mul r1.xy, r1, c6.yxzw
					    mul r6.xy, r2.wxzw, c5
					    mad r2.xw, r2, c8.yyzx, c8.wyzz
					    mov r6.zw, c9.y
					    texldl r6, r6, s0
					    mad r0.w, c0.z, r6.x, c0.w
					    rcp r6.y, r0.w
					    mul r6.xz, r2.xyww, r6.y
					    add r6.xyz, -r4, r6
					    dp3 r0.w, r6, r6
					    mad r2.xw, r1.zyzw, c8.yyzx, c8.wyzz
					    mul r7.xy, r1.wzzw, c5
					    mov r7.zw, c9.y
					    texldl r7, r7, s0
					    mad r1.z, c0.z, r7.x, c0.w
					    rcp r7.y, r1.z
					    mul r7.xz, r2.xyww, r7.y
					    add r4.xyz, r4, -r7
					    dp3 r1.z, r4, r4
					    add r0.w, r0.w, -r1.z
					    cmp r4.xyz, r0.w, r4, r6
					    mul r6.xyz, r0, r4
					    mad r0.xyz, r0.zxyw, r4.yzxw, -r6
					    nrm_pp r4.xyz, r0
					    mad_pp oC2.xyz, r4, c10.x, c10.x
					    mad r0.xy, r3, c8, c8.zwzw
					    mul r4.xy, r3, c5
					    mov r4.zw, c9.y
					    texldl r4, r4, s0
					    mad r0.z, c0.z, r4.x, c0.w
					    rcp r4.x, r0.z
					    mul r4.yz, r0.xxyw, r4.x
					    mul r0.xy, r1.yxzw, c5
					    mad r1.xy, r1, c8.yxzw, c8.wzzw
					    mov r0.zw, c9.y
					    texldl r0, r0, s0
					    mad r0.x, c0.z, r0.x, c0.w
					    rcp r0.y, r0.x
					    mul r0.xz, r0.y, r1.xyyw
					    add r1.xyz, -r0.yzxw, r4
					    dp3 r0.w, r1, r1
					    mad r2.xw, r3.zyzw, c8.xyzy, c8.zyzw
					    mul r3.xy, r3.zwzw, c5
					    mov r3.zw, c9.y
					    texldl r3, r3, s0
					    mad r1.w, c0.z, r3.x, c0.w
					    rcp r3.x, r1.w
					    mul r3.yz, r2.xxww, r3.x
					    add r3.xyz, r0.yzxw, -r3
					    dp3 r1.w, r3, r3
					    add r0.w, r0.w, -r1.w
					    cmp r1.xyz, r0.w, r3, r1
					    mad r2.xw, r5.xyzy, c8.yyzx, c8.wyzz
					    mul r3.xy, r5.yxzw, c5
					    mov r3.zw, c9.y
					    texldl r3, r3, s0
					    mad r0.w, c0.z, r3.x, c0.w
					    rcp r3.y, r0.w
					    mul r3.xz, r2.xyww, r3.y
					    add r3.xyz, -r0, r3
					    dp3 r0.w, r3, r3
					    mad r2.xw, r2.yyzz, c8.yyzx, c8.wyzz
					    mul r4.xy, r2.zyzw, c5
					    mov r4.zw, c9.y
					    texldl r4, r4, s0
					    mad r1.w, c0.z, r4.x, c0.w
					    rcp r4.y, r1.w
					    mul r4.xz, r2.xyww, r4.y
					    add r0.xyz, r0, -r4
					    dp3 r1.w, r0, r0
					    add r0.w, r0.w, -r1.w
					    cmp r0.xyz, r0.w, r0, r3
					    mul r2.xyz, r0, r1
					    mad r0.xyz, r1.zxyw, r0.yzxw, -r2
					    nrm_pp r1.xyz, r0
					    mad_pp oC3.xyz, r1, c10.x, c10.x
					    mov_pp oC0.w, c9.y
					    mov_pp oC1.w, c9.y
					    mov_pp oC2.w, c9.y
					    mov_pp oC3.w, c9.y
					
					// approximately 268 instruction slots used (40 texture, 228 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[15];
						vec2 _AO_LayerOffset0;
						vec2 _AO_LayerOffset1;
						vec2 _AO_LayerOffset2;
						vec2 _AO_LayerOffset3;
						vec4 unused_0_5[2];
						vec4 _AO_Buffer_PadScale;
						vec4 _AO_Buffer_TexelSize;
						vec4 _AO_QuarterBuffer_TexelSize;
						vec4 _AO_UVToView;
						vec4 unused_0_10[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec4 u_xlat10;
					vec2 u_xlat11;
					vec2 u_xlat15;
					vec2 u_xlat23;
					vec2 u_xlat24;
					vec2 u_xlat25;
					float u_xlat33;
					bool u_xlatb33;
					float u_xlat34;
					float u_xlat35;
					float u_xlat36;
					void main()
					{
					    u_xlat11.x = _AO_Buffer_TexelSize.x;
					    u_xlat11.y = 0.0;
					    u_xlat1 = vs_TEXCOORD0.xyxy * _AO_QuarterBuffer_TexelSize.zwzw;
					    u_xlat1 = floor(u_xlat1);
					    u_xlat2 = u_xlat1.zwzw * vec4(4.0, 4.0, 4.0, 4.0) + vec4(_AO_LayerOffset0.x, _AO_LayerOffset0.y, _AO_LayerOffset1.x, _AO_LayerOffset1.y);
					    u_xlat1 = u_xlat1 * vec4(4.0, 4.0, 4.0, 4.0) + vec4(_AO_LayerOffset2.x, _AO_LayerOffset2.y, _AO_LayerOffset3.x, _AO_LayerOffset3.y);
					    u_xlat0.xw = u_xlat2.xy * _AO_Buffer_TexelSize.xy + u_xlat11.xy;
					    u_xlat3.xy = u_xlat0.xw * _AO_Buffer_PadScale.xy;
					    u_xlat0.xw = u_xlat0.xw * _AO_UVToView.xy + _AO_UVToView.zw;
					    u_xlat3 = textureLod(_CameraDepthTexture, u_xlat3.xy, 0.0);
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat3.yz = u_xlat0.xw * u_xlat3.xx;
					    u_xlat4 = u_xlat2 * _AO_Buffer_TexelSize.xyxy;
					    u_xlat5 = u_xlat4 * _AO_Buffer_PadScale.xyxy;
					    u_xlat4 = u_xlat4 * _AO_UVToView.xyxy + _AO_UVToView.zwzw;
					    u_xlat6 = textureLod(_CameraDepthTexture, u_xlat5.xy, 0.0);
					    u_xlat5 = textureLod(_CameraDepthTexture, u_xlat5.zw, 0.0);
					    u_xlat0.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.y = float(1.0) / u_xlat0.x;
					    u_xlat0.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.y = float(1.0) / u_xlat0.x;
					    u_xlat6.xz = u_xlat4.yx * u_xlat6.yy;
					    u_xlat5.xz = u_xlat4.wz * u_xlat5.yy;
					    u_xlat3.xyz = u_xlat3.xyz + (-u_xlat6.yzx);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15.x = (-_AO_Buffer_TexelSize.x);
					    u_xlat15.y = 0.0;
					    u_xlat4.xw = u_xlat2.xy * _AO_Buffer_TexelSize.xy + u_xlat15.xy;
					    u_xlat7.xy = u_xlat4.xw * _AO_Buffer_PadScale.xy;
					    u_xlat4.xw = u_xlat4.xw * _AO_UVToView.xy + _AO_UVToView.zw;
					    u_xlat7 = textureLod(_CameraDepthTexture, u_xlat7.xy, 0.0);
					    u_xlat33 = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat7.x = float(1.0) / u_xlat33;
					    u_xlat7.yz = u_xlat4.xw * u_xlat7.xx;
					    u_xlat7.xyz = u_xlat6.yzx + (-u_xlat7.xyz);
					    u_xlat33 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlatb0 = u_xlat0.x<u_xlat33;
					    u_xlat3.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : u_xlat7.xyz;
					    u_xlat7.z = 0.0;
					    u_xlat7.x = _AO_Buffer_TexelSize.y;
					    u_xlat0.xw = u_xlat2.yx * _AO_Buffer_TexelSize.yx + u_xlat7.xz;
					    u_xlat4.xw = u_xlat0.wx * _AO_Buffer_PadScale.xy;
					    u_xlat0.xw = u_xlat0.xw * _AO_UVToView.yx + _AO_UVToView.wz;
					    u_xlat8 = textureLod(_CameraDepthTexture, u_xlat4.xw, 0.0);
					    u_xlat36 = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
					    u_xlat8.y = float(1.0) / u_xlat36;
					    u_xlat8.xz = u_xlat0.xw * u_xlat8.yy;
					    u_xlat8.xyz = (-u_xlat6.xyz) + u_xlat8.xyz;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat9.z = 0.0;
					    u_xlat9.x = (-_AO_Buffer_TexelSize.y);
					    u_xlat2.xy = u_xlat2.yx * _AO_Buffer_TexelSize.yx + u_xlat9.xz;
					    u_xlat4.xw = u_xlat2.yx * _AO_Buffer_PadScale.xy;
					    u_xlat2.xy = u_xlat2.xy * _AO_UVToView.yx + _AO_UVToView.wz;
					    u_xlat10 = textureLod(_CameraDepthTexture, u_xlat4.xw, 0.0);
					    u_xlat33 = _ZBufferParams.z * u_xlat10.x + _ZBufferParams.w;
					    u_xlat10.y = float(1.0) / u_xlat33;
					    u_xlat10.xz = u_xlat2.xy * u_xlat10.yy;
					    u_xlat6.xyz = u_xlat6.xyz + (-u_xlat10.xyz);
					    u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlatb0 = u_xlat0.x<u_xlat33;
					    u_xlat6.xyz = (bool(u_xlatb0)) ? u_xlat8.xyz : u_xlat6.xyz;
					    u_xlat8.xyz = u_xlat3.xyz * u_xlat6.xyz;
					    u_xlat3.xyz = u_xlat3.zxy * u_xlat6.yzx + (-u_xlat8.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat3.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0.w = 0.0;
					    u_xlat0.xw = u_xlat2.zw * _AO_Buffer_TexelSize.xy + u_xlat11.xy;
					    u_xlat2.xy = u_xlat0.xw * _AO_Buffer_PadScale.xy;
					    u_xlat0.xw = u_xlat0.xw * _AO_UVToView.xy + _AO_UVToView.zw;
					    u_xlat3 = textureLod(_CameraDepthTexture, u_xlat2.xy, 0.0);
					    u_xlat2.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat2.x;
					    u_xlat3.yz = u_xlat0.xw * u_xlat3.xx;
					    u_xlat3.xyz = (-u_xlat5.yzx) + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat2.xy = u_xlat2.zw * _AO_Buffer_TexelSize.xy + u_xlat15.xy;
					    u_xlat4.xw = u_xlat2.xy * _AO_Buffer_PadScale.xy;
					    u_xlat2.xy = u_xlat2.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					    u_xlat6 = textureLod(_CameraDepthTexture, u_xlat4.xw, 0.0);
					    u_xlat33 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat33;
					    u_xlat6.yz = u_xlat2.xy * u_xlat6.xx;
					    u_xlat6.xyz = u_xlat5.yzx + (-u_xlat6.xyz);
					    u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlatb0 = u_xlat0.x<u_xlat33;
					    u_xlat3.xyz = (bool(u_xlatb0)) ? u_xlat3.xyz : u_xlat6.xyz;
					    u_xlat0.xw = u_xlat2.wz * _AO_Buffer_TexelSize.yx + u_xlat7.xz;
					    u_xlat2.xy = u_xlat2.wz * _AO_Buffer_TexelSize.yx + u_xlat9.xz;
					    u_xlat24.xy = u_xlat0.wx * _AO_Buffer_PadScale.xy;
					    u_xlat0.xw = u_xlat0.xw * _AO_UVToView.yx + _AO_UVToView.wz;
					    u_xlat6 = textureLod(_CameraDepthTexture, u_xlat24.xy, 0.0);
					    u_xlat24.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.y = float(1.0) / u_xlat24.x;
					    u_xlat6.xz = u_xlat0.xw * u_xlat6.yy;
					    u_xlat6.xyz = (-u_xlat5.xyz) + u_xlat6.xyz;
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat24.xy = u_xlat2.yx * _AO_Buffer_PadScale.xy;
					    u_xlat2.xy = u_xlat2.xy * _AO_UVToView.yx + _AO_UVToView.wz;
					    u_xlat8 = textureLod(_CameraDepthTexture, u_xlat24.xy, 0.0);
					    u_xlat33 = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
					    u_xlat8.y = float(1.0) / u_xlat33;
					    u_xlat8.xz = u_xlat2.xy * u_xlat8.yy;
					    u_xlat2.xyz = u_xlat5.xyz + (-u_xlat8.xyz);
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb0 = u_xlat0.x<u_xlat33;
					    u_xlat2.xyz = (bool(u_xlatb0)) ? u_xlat6.xyz : u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat3.zxy * u_xlat2.yzx + (-u_xlat5.xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target1.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target1.w = 0.0;
					    u_xlat0.xw = u_xlat1.xy * _AO_Buffer_TexelSize.xy + u_xlat11.xy;
					    u_xlat11.xy = u_xlat1.zw * _AO_Buffer_TexelSize.xy + u_xlat11.xy;
					    u_xlat2.xy = u_xlat0.xw * _AO_Buffer_PadScale.xy;
					    u_xlat0.xw = u_xlat0.xw * _AO_UVToView.xy + _AO_UVToView.zw;
					    u_xlat2 = textureLod(_CameraDepthTexture, u_xlat2.xy, 0.0);
					    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.yz = u_xlat0.xw * u_xlat2.xx;
					    u_xlat3 = u_xlat1 * _AO_Buffer_TexelSize.xyxy;
					    u_xlat5 = u_xlat3 * _AO_Buffer_PadScale.xyxy;
					    u_xlat3 = u_xlat3 * _AO_UVToView.xyxy + _AO_UVToView.zwzw;
					    u_xlat6 = textureLod(_CameraDepthTexture, u_xlat5.xy, 0.0);
					    u_xlat5 = textureLod(_CameraDepthTexture, u_xlat5.zw, 0.0);
					    u_xlat0.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.y = float(1.0) / u_xlat0.x;
					    u_xlat0.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.y = float(1.0) / u_xlat0.x;
					    u_xlat6.xz = u_xlat3.yx * u_xlat6.yy;
					    u_xlat5.xz = u_xlat3.wz * u_xlat5.yy;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat6.yzx);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat3.xy = u_xlat1.xy * _AO_Buffer_TexelSize.xy + u_xlat15.xy;
					    u_xlat25.xy = u_xlat1.zw * _AO_Buffer_TexelSize.xy + u_xlat15.xy;
					    u_xlat4.xy = u_xlat3.xy * _AO_Buffer_PadScale.xy;
					    u_xlat3.xy = u_xlat3.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					    u_xlat4 = textureLod(_CameraDepthTexture, u_xlat4.xy, 0.0);
					    u_xlat33 = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat33;
					    u_xlat4.yz = u_xlat3.xy * u_xlat4.xx;
					    u_xlat4.xyz = (-u_xlat4.xyz) + u_xlat6.yzx;
					    u_xlat33 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlatb0 = u_xlat0.x<u_xlat33;
					    u_xlat2.xyz = (bool(u_xlatb0)) ? u_xlat2.xyz : u_xlat4.xyz;
					    u_xlat0.xw = u_xlat1.yx * _AO_Buffer_TexelSize.yx + u_xlat7.xz;
					    u_xlat3.xy = u_xlat1.wz * _AO_Buffer_TexelSize.yx + u_xlat7.xz;
					    u_xlat4.xy = u_xlat0.wx * _AO_Buffer_PadScale.xy;
					    u_xlat0.xw = u_xlat0.xw * _AO_UVToView.yx + _AO_UVToView.wz;
					    u_xlat4 = textureLod(_CameraDepthTexture, u_xlat4.xy, 0.0);
					    u_xlat35 = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.y = float(1.0) / u_xlat35;
					    u_xlat4.xz = u_xlat0.xw * u_xlat4.yy;
					    u_xlat4.xyz = (-u_xlat6.xyz) + u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat1.xy = u_xlat1.yx * _AO_Buffer_TexelSize.yx + u_xlat9.xz;
					    u_xlat23.xy = u_xlat1.wz * _AO_Buffer_TexelSize.yx + u_xlat9.xz;
					    u_xlat7.xy = u_xlat1.xy * _AO_UVToView.yx + _AO_UVToView.wz;
					    u_xlat1.xy = u_xlat1.yx * _AO_Buffer_PadScale.xy;
					    u_xlat8 = textureLod(_CameraDepthTexture, u_xlat1.xy, 0.0);
					    u_xlat33 = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
					    u_xlat8.y = float(1.0) / u_xlat33;
					    u_xlat8.xz = u_xlat7.xy * u_xlat8.yy;
					    u_xlat6.xyz = u_xlat6.xyz + (-u_xlat8.xyz);
					    u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlatb0 = u_xlat0.x<u_xlat33;
					    u_xlat4.xyz = (bool(u_xlatb0)) ? u_xlat4.xyz : u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat2.zxy * u_xlat4.yzx + (-u_xlat6.xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 0.0;
					    u_xlat0.xw = u_xlat11.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					    u_xlat11.xy = u_xlat11.xy * _AO_Buffer_PadScale.xy;
					    u_xlat2 = textureLod(_CameraDepthTexture, u_xlat11.xy, 0.0);
					    u_xlat11.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
					    u_xlat2.x = float(1.0) / u_xlat11.x;
					    u_xlat2.yz = u_xlat0.xw * u_xlat2.xx;
					    u_xlat0.xyz = (-u_xlat5.yzx) + u_xlat2.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat1.xy = u_xlat25.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					    u_xlat2.xy = u_xlat25.xy * _AO_Buffer_PadScale.xy;
					    u_xlat2 = textureLod(_CameraDepthTexture, u_xlat2.xy, 0.0);
					    u_xlat2.x = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.yz = u_xlat1.xy * u_xlat2.xx;
					    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.yzx;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlatb33 = u_xlat33<u_xlat1.x;
					    u_xlat0.xyz = (bool(u_xlatb33)) ? u_xlat0.xyz : u_xlat2.xyz;
					    u_xlat1.xy = u_xlat3.xy * _AO_UVToView.yx + _AO_UVToView.wz;
					    u_xlat2.xy = u_xlat3.yx * _AO_Buffer_PadScale.xy;
					    u_xlat2 = textureLod(_CameraDepthTexture, u_xlat2.xy, 0.0);
					    u_xlat33 = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
					    u_xlat2.y = float(1.0) / u_xlat33;
					    u_xlat2.xz = u_xlat1.xy * u_xlat2.yy;
					    u_xlat2.xyz = (-u_xlat5.xyz) + u_xlat2.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.xy = u_xlat23.xy * _AO_UVToView.yx + _AO_UVToView.wz;
					    u_xlat23.xy = u_xlat23.yx * _AO_Buffer_PadScale.xy;
					    u_xlat3 = textureLod(_CameraDepthTexture, u_xlat23.xy, 0.0);
					    u_xlat23.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.y = float(1.0) / u_xlat23.x;
					    u_xlat3.xz = u_xlat1.xy * u_xlat3.yy;
					    u_xlat1.xyz = (-u_xlat3.xyz) + u_xlat5.xyz;
					    u_xlat34 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlatb33 = u_xlat33<u_xlat34;
					    u_xlat1.xyz = (bool(u_xlatb33)) ? u_xlat2.xyz : u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target3.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 851567
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _AO_Buffer_PadScale;
					//   float4 _AO_Buffer_TexelSize;
					//   float2 _AO_LayerOffset0;
					//   float2 _AO_LayerOffset1;
					//   float2 _AO_LayerOffset2;
					//   float2 _AO_LayerOffset3;
					//   float4 _AO_QuarterBuffer_TexelSize;
					//   sampler2D _CameraDepthNormalsTexture;
					//
					//
					// Registers:
					//
					//   Name                        Reg   Size
					//   --------------------------- ----- ----
					//   _AO_LayerOffset0            c0       1
					//   _AO_LayerOffset1            c1       1
					//   _AO_LayerOffset2            c2       1
					//   _AO_LayerOffset3            c3       1
					//   _AO_Buffer_PadScale         c4       1
					//   _AO_Buffer_TexelSize        c5       1
					//   _AO_QuarterBuffer_TexelSize c6       1
					//   _CameraDepthNormalsTexture  s0       1
					//
					
					    ps_3_0
					    def c7, 4, 2, -1, 0
					    def c8, 3.55539989, 0, -1.77769995, 1
					    def c9, 0.5, -0.5, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mul r0.xy, c6.zwzw, v0
					    frc r0.zw, r0.xyxy
					    add r0.xy, -r0.zwzw, r0
					    mov r1.x, c7.x
					    mad r0.zw, r0.xyxy, r1.x, c0.xyxy
					    mul r0.zw, r0, c5.xyxy
					    mul r0.zw, r0, c4.xyxy
					    texld r2, r0.zwzw, s0
					    mad r1.yzw, r2.xxyz, c8.xxxy, c8.xzzw
					    dp3 r0.z, r1.yzww, r1.yzww
					    rcp r0.z, r0.z
					    add r0.w, r0.z, r0.z
					    mad_pp r2.z, r0.z, c7.y, c7.z
					    mul_pp r2.xy, r1.yzzw, r0.w
					    mad_pp oC0.xyz, r2, c9.xyyw, c9.x
					    mad r0.zw, r0.xyxy, r1.x, c1.xyxy
					    mul r0.zw, r0, c5.xyxy
					    mul r0.zw, r0, c4.xyxy
					    texld r2, r0.zwzw, s0
					    mad r1.yzw, r2.xxyz, c8.xxxy, c8.xzzw
					    dp3 r0.z, r1.yzww, r1.yzww
					    rcp r0.z, r0.z
					    add r0.w, r0.z, r0.z
					    mad_pp r2.z, r0.z, c7.y, c7.z
					    mul_pp r2.xy, r1.yzzw, r0.w
					    mad_pp oC1.xyz, r2, c9.xyyw, c9.x
					    mad r0.zw, r0.xyxy, r1.x, c2.xyxy
					    mad r0.xy, r0, r1.x, c3
					    mul r0.xy, r0, c5
					    mul r0.xy, r0, c4
					    texld r1, r0, s0
					    mad r1.xyz, r1, c8.xxyw, c8.zzww
					    mul r0.xy, r0.zwzw, c5
					    mul r0.xy, r0, c4
					    texld r0, r0, s0
					    mad r0.xyz, r0, c8.xxyw, c8.zzww
					    dp3 r0.z, r0, r0
					    rcp r0.z, r0.z
					    add r0.w, r0.z, r0.z
					    mad_pp r2.z, r0.z, c7.y, c7.z
					    mul_pp r2.xy, r0, r0.w
					    mad_pp oC2.xyz, r2, c9.xyyw, c9.x
					    dp3 r0.x, r1, r1
					    rcp r0.x, r0.x
					    add r0.y, r0.x, r0.x
					    mad_pp r2.z, r0.x, c7.y, c7.z
					    mul_pp r2.xy, r1, r0.y
					    mad_pp oC3.xyz, r2, c9.xyyw, c9.x
					    mov_pp oC0.w, c7.w
					    mov_pp oC1.w, c7.w
					    mov_pp oC2.w, c7.w
					    mov_pp oC3.w, c7.w
					
					// approximately 52 instruction slots used (4 texture, 48 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[15];
						vec2 _AO_LayerOffset0;
						vec2 _AO_LayerOffset1;
						vec2 _AO_LayerOffset2;
						vec2 _AO_LayerOffset3;
						vec4 unused_0_5[2];
						vec4 _AO_Buffer_PadScale;
						vec4 _AO_Buffer_TexelSize;
						vec4 _AO_QuarterBuffer_TexelSize;
						vec4 unused_0_9[5];
					};
					uniform  sampler2D _CameraDepthNormalsTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat6;
					float u_xlat7;
					float u_xlat9;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD0.xyxy * _AO_QuarterBuffer_TexelSize.zwzw;
					    u_xlat0 = floor(u_xlat0);
					    u_xlat1 = u_xlat0.zwzw * vec4(4.0, 4.0, 4.0, 4.0) + vec4(_AO_LayerOffset0.x, _AO_LayerOffset0.y, _AO_LayerOffset1.x, _AO_LayerOffset1.y);
					    u_xlat0 = u_xlat0 * vec4(4.0, 4.0, 4.0, 4.0) + vec4(_AO_LayerOffset2.x, _AO_LayerOffset2.y, _AO_LayerOffset3.x, _AO_LayerOffset3.y);
					    u_xlat0 = u_xlat0 * _AO_Buffer_TexelSize.xyxy;
					    u_xlat0 = u_xlat0 * _AO_Buffer_PadScale.xyxy;
					    u_xlat1 = u_xlat1 * _AO_Buffer_TexelSize.xyxy;
					    u_xlat1 = u_xlat1 * _AO_Buffer_PadScale.xyxy;
					    u_xlat2 = texture(_CameraDepthNormalsTexture, u_xlat1.xy);
					    u_xlat1 = texture(_CameraDepthNormalsTexture, u_xlat1.zw);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = 2.0 / u_xlat10;
					    u_xlat2.xy = u_xlat2.xy * vec2(u_xlat10);
					    u_xlat2.z = u_xlat10 + -1.0;
					    SV_Target0.xyz = u_xlat2.xyz * vec3(0.5, -0.5, -0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0.w = 0.0;
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = 2.0 / u_xlat7;
					    u_xlat2.xy = u_xlat1.xy * vec2(u_xlat7);
					    u_xlat2.z = u_xlat7 + -1.0;
					    SV_Target1.xyz = u_xlat2.xyz * vec3(0.5, -0.5, -0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target1.w = 0.0;
					    u_xlat1 = texture(_CameraDepthNormalsTexture, u_xlat0.xy);
					    u_xlat0 = texture(_CameraDepthNormalsTexture, u_xlat0.zw);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = 2.0 / u_xlat9;
					    u_xlat1.xy = u_xlat1.xy * vec2(u_xlat9);
					    u_xlat1.z = u_xlat9 + -1.0;
					    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, -0.5, -0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 0.0;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = 2.0 / u_xlat6;
					    u_xlat1.xy = u_xlat0.xy * vec2(u_xlat6);
					    u_xlat1.z = u_xlat6 + -1.0;
					    SV_Target3.xyz = u_xlat1.xyz * vec3(0.5, -0.5, -0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target3.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 904563
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _AO_Buffer_PadScale;
					//   float4 _AO_Buffer_TexelSize;
					//   row_major float4x4 _AO_CameraView;
					//   float2 _AO_LayerOffset0;
					//   float2 _AO_LayerOffset1;
					//   float2 _AO_LayerOffset2;
					//   float2 _AO_LayerOffset3;
					//   float4 _AO_QuarterBuffer_TexelSize;
					//   sampler2D _CameraGBufferTexture2;
					//
					//
					// Registers:
					//
					//   Name                        Reg   Size
					//   --------------------------- ----- ----
					//   _AO_CameraView              c0       3
					//   _AO_LayerOffset0            c3       1
					//   _AO_LayerOffset1            c4       1
					//   _AO_LayerOffset2            c5       1
					//   _AO_LayerOffset3            c6       1
					//   _AO_Buffer_PadScale         c7       1
					//   _AO_Buffer_TexelSize        c8       1
					//   _AO_QuarterBuffer_TexelSize c9       1
					//   _CameraGBufferTexture2      s0       1
					//
					
					    ps_3_0
					    def c10, 4, 2, -1, 0
					    def c11, 0.5, -0.5, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mul r0.xy, c9.zwzw, v0
					    frc r0.zw, r0.xyxy
					    add r0.xy, -r0.zwzw, r0
					    mov r1.x, c10.x
					    mad r0.zw, r0.xyxy, r1.x, c3.xyxy
					    mul r0.zw, r0, c8.xyxy
					    mul r0.zw, r0, c7.xyxy
					    texld_pp r2, r0.zwzw, s0
					    mad_pp r1.yzw, r2.xxyz, c10.y, c10.z
					    dp3 r2.x, c0, r1.yzww
					    dp3 r2.y, c1, r1.yzww
					    dp3 r2.z, c2, r1.yzww
					    nrm_pp r3.xyz, r2
					    mad_pp oC0.xyz, r3, c11.xyyw, c11.x
					    mad r0.zw, r0.xyxy, r1.x, c4.xyxy
					    mul r0.zw, r0, c8.xyxy
					    mul r0.zw, r0, c7.xyxy
					    texld_pp r2, r0.zwzw, s0
					    mad_pp r1.yzw, r2.xxyz, c10.y, c10.z
					    dp3 r2.x, c0, r1.yzww
					    dp3 r2.y, c1, r1.yzww
					    dp3 r2.z, c2, r1.yzww
					    nrm_pp r3.xyz, r2
					    mad_pp oC1.xyz, r3, c11.xyyw, c11.x
					    mad r0.zw, r0.xyxy, r1.x, c5.xyxy
					    mad r0.xy, r0, r1.x, c6
					    mul r0.xy, r0, c8
					    mul r0.xy, r0, c7
					    texld_pp r1, r0, s0
					    mad_pp r1.xyz, r1, c10.y, c10.z
					    mul r0.xy, r0.zwzw, c8
					    mul r0.xy, r0, c7
					    texld_pp r0, r0, s0
					    mad_pp r0.xyz, r0, c10.y, c10.z
					    dp3 r2.x, c0, r0
					    dp3 r2.y, c1, r0
					    dp3 r2.z, c2, r0
					    nrm_pp r0.xyz, r2
					    mad_pp oC2.xyz, r0, c11.xyyw, c11.x
					    dp3 r0.x, c0, r1
					    dp3 r0.y, c1, r1
					    dp3 r0.z, c2, r1
					    nrm_pp r1.xyz, r0
					    mad_pp oC3.xyz, r1, c11.xyyw, c11.x
					    mov_pp oC0.w, c10.w
					    mov_pp oC1.w, c10.w
					    mov_pp oC2.w, c10.w
					    mov_pp oC3.w, c10.w
					
					// approximately 56 instruction slots used (4 texture, 52 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						mat4x4 _AO_CameraView;
						vec4 unused_0_2[4];
						vec2 _AO_LayerOffset0;
						vec2 _AO_LayerOffset1;
						vec2 _AO_LayerOffset2;
						vec2 _AO_LayerOffset3;
						vec4 unused_0_7[2];
						vec4 _AO_Buffer_PadScale;
						vec4 _AO_Buffer_TexelSize;
						vec4 _AO_QuarterBuffer_TexelSize;
						vec4 unused_0_11[5];
					};
					uniform  sampler2D _CameraGBufferTexture2;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD0.xyxy * _AO_QuarterBuffer_TexelSize.zwzw;
					    u_xlat0 = floor(u_xlat0);
					    u_xlat1 = u_xlat0.zwzw * vec4(4.0, 4.0, 4.0, 4.0) + vec4(_AO_LayerOffset0.x, _AO_LayerOffset0.y, _AO_LayerOffset1.x, _AO_LayerOffset1.y);
					    u_xlat0 = u_xlat0 * vec4(4.0, 4.0, 4.0, 4.0) + vec4(_AO_LayerOffset2.x, _AO_LayerOffset2.y, _AO_LayerOffset3.x, _AO_LayerOffset3.y);
					    u_xlat0 = u_xlat0 * _AO_Buffer_TexelSize.xyxy;
					    u_xlat0 = u_xlat0 * _AO_Buffer_PadScale.xyxy;
					    u_xlat1 = u_xlat1 * _AO_Buffer_TexelSize.xyxy;
					    u_xlat1 = u_xlat1 * _AO_Buffer_PadScale.xyxy;
					    u_xlat2 = texture(_CameraGBufferTexture2, u_xlat1.xy);
					    u_xlat1 = texture(_CameraGBufferTexture2, u_xlat1.zw);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = u_xlat2.yyy * _AO_CameraView[1].xyz;
					    u_xlat2.xyw = _AO_CameraView[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = _AO_CameraView[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * vec3(0.5, -0.5, -0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0.w = 0.0;
					    u_xlat2.xyz = u_xlat1.yyy * _AO_CameraView[1].xyz;
					    u_xlat1.xyw = _AO_CameraView[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = _AO_CameraView[2].xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    SV_Target1.xyz = u_xlat1.xyz * vec3(0.5, -0.5, -0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target1.w = 0.0;
					    u_xlat1 = texture(_CameraGBufferTexture2, u_xlat0.xy);
					    u_xlat0 = texture(_CameraGBufferTexture2, u_xlat0.zw);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat2.xyz = u_xlat1.yyy * _AO_CameraView[1].xyz;
					    u_xlat1.xyw = _AO_CameraView[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = _AO_CameraView[2].xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, -0.5, -0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 0.0;
					    u_xlat1.xyz = u_xlat0.yyy * _AO_CameraView[1].xyz;
					    u_xlat0.xyw = _AO_CameraView[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _AO_CameraView[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * vec3(0.5, -0.5, -0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target3.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 964802
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _AO_Buffer_PadScale;
					//   float4 _AO_Buffer_TexelSize;
					//   row_major float4x4 _AO_CameraView;
					//   float2 _AO_LayerOffset0;
					//   float2 _AO_LayerOffset1;
					//   float2 _AO_LayerOffset2;
					//   float2 _AO_LayerOffset3;
					//   float4 _AO_QuarterBuffer_TexelSize;
					//   sampler2D _CameraGBufferTexture2;
					//
					//
					// Registers:
					//
					//   Name                        Reg   Size
					//   --------------------------- ----- ----
					//   _AO_CameraView              c0       3
					//   _AO_LayerOffset0            c3       1
					//   _AO_LayerOffset1            c4       1
					//   _AO_LayerOffset2            c5       1
					//   _AO_LayerOffset3            c6       1
					//   _AO_Buffer_PadScale         c7       1
					//   _AO_Buffer_TexelSize        c8       1
					//   _AO_QuarterBuffer_TexelSize c9       1
					//   _CameraGBufferTexture2      s0       1
					//
					
					    ps_3_0
					    def c10, 4, 2, -1, 1
					    def c11, 0.5, -0.5, 0, 0
					    def c12, 0, 1, -0, -1
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mul r0.xy, c9.zwzw, v0
					    frc r0.zw, r0.xyxy
					    add r0.xy, -r0.zwzw, r0
					    mov r1.x, c10.x
					    mad r0.zw, r0.xyxy, r1.x, c3.xyxy
					    mul r0.zw, r0, c8.xyxy
					    mul r0.zw, r0, c7.xyxy
					    texld_pp r2, r0.zwzw, s0
					    mad_pp r1.yzw, r2.xxyz, c10.y, c10.z
					    add r0.z, r2.w, c10.z
					    cmp_pp r2.xy, -r1.yzzw, c12.x, c12.y
					    cmp_pp r2.zw, r1.xyyz, c12.z, c12.w
					    add r2.xy, r2.zwzw, r2
					    add r3.xyz, -r1_abs.yzyw, c10.w
					    mul_pp r2.xy, r2, r3.yzzw
					    add_pp r3.z, -r1_abs.z, r3.x
					    cmp_pp r3.xy, r3.z, r1.yzzw, r2
					    cmp r1.yzw, r0.z, r1, r3.xxyz
					    dp3 r2.x, c0, r1.yzww
					    dp3 r2.y, c1, r1.yzww
					    dp3 r2.z, c2, r1.yzww
					    nrm_pp r3.xyz, r2
					    mad_pp oC0.xyz, r3, c11.xyyw, c11.x
					    mad r0.zw, r0.xyxy, r1.x, c4.xyxy
					    mul r0.zw, r0, c8.xyxy
					    mul r0.zw, r0, c7.xyxy
					    texld_pp r2, r0.zwzw, s0
					    mad_pp r1.yzw, r2.xxyz, c10.y, c10.z
					    add r0.z, r2.w, c10.z
					    cmp_pp r2.xy, -r1.yzzw, c12.x, c12.y
					    cmp_pp r2.zw, r1.xyyz, c12.z, c12.w
					    add r2.xy, r2.zwzw, r2
					    add r3.xyz, -r1_abs.yzyw, c10.w
					    mul_pp r2.xy, r2, r3.yzzw
					    add_pp r3.z, -r1_abs.z, r3.x
					    cmp_pp r3.xy, r3.z, r1.yzzw, r2
					    cmp r1.yzw, r0.z, r1, r3.xxyz
					    dp3 r2.x, c0, r1.yzww
					    dp3 r2.y, c1, r1.yzww
					    dp3 r2.z, c2, r1.yzww
					    nrm_pp r3.xyz, r2
					    mad_pp oC1.xyz, r3, c11.xyyw, c11.x
					    mad r0.zw, r0.xyxy, r1.x, c5.xyxy
					    mad r0.xy, r0, r1.x, c6
					    mul r0.xy, r0, c8
					    mul r0.xy, r0, c7
					    texld_pp r1, r0, s0
					    mul r0.xy, r0.zwzw, c8
					    mul r0.xy, r0, c7
					    texld_pp r0, r0, s0
					    add r0.w, r0.w, c10.z
					    mad_pp r0.xyz, r0, c10.y, c10.z
					    cmp_pp r2.xy, -r0, c12.x, c12.y
					    cmp_pp r2.zw, r0.xyxy, c12.z, c12.w
					    add r2.xy, r2.zwzw, r2
					    add r3.xyz, -r0_abs.xyxw, c10.w
					    mul_pp r2.xy, r2, r3.yzzw
					    add_pp r3.z, -r0_abs.y, r3.x
					    cmp_pp r3.xy, r3.z, r0, r2
					    cmp r0.xyz, r0.w, r0, r3
					    dp3 r2.x, c0, r0
					    dp3 r2.y, c1, r0
					    dp3 r2.z, c2, r0
					    nrm_pp r0.xyz, r2
					    mad_pp oC2.xyz, r0, c11.xyyw, c11.x
					    add r0.x, r1.w, c10.z
					    mad_pp r0.yzw, r1.xxyz, c10.y, c10.z
					    cmp_pp r1.xy, -r0.yzzw, c12.x, c12.y
					    cmp_pp r1.zw, r0.xyyz, c12.z, c12.w
					    add r1.xy, r1.zwzw, r1
					    add r2.xyz, -r0_abs.yzyw, c10.w
					    mul_pp r1.xy, r1, r2.yzzw
					    add_pp r2.z, -r0_abs.z, r2.x
					    cmp_pp r2.xy, r2.z, r0.yzzw, r1
					    cmp r0.xyz, r0.x, r0.yzww, r2
					    dp3 r1.x, c0, r0
					    dp3 r1.y, c1, r0
					    dp3 r1.z, c2, r0
					    nrm_pp r0.xyz, r1
					    mad_pp oC3.xyz, r0, c11.xyyw, c11.x
					    mov_pp oC0.w, c12.x
					    mov_pp oC1.w, c12.x
					    mov_pp oC2.w, c12.x
					    mov_pp oC3.w, c12.x
					
					// approximately 92 instruction slots used (4 texture, 88 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						mat4x4 _AO_CameraView;
						vec4 unused_0_2[4];
						vec2 _AO_LayerOffset0;
						vec2 _AO_LayerOffset1;
						vec2 _AO_LayerOffset2;
						vec2 _AO_LayerOffset3;
						vec4 unused_0_7[2];
						vec4 _AO_Buffer_PadScale;
						vec4 _AO_Buffer_TexelSize;
						vec4 _AO_QuarterBuffer_TexelSize;
						vec4 unused_0_11[5];
					};
					uniform  sampler2D _CameraGBufferTexture2;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					ivec2 u_xlati1;
					vec4 u_xlat2;
					ivec2 u_xlati2;
					vec3 u_xlat3;
					ivec2 u_xlati3;
					vec3 u_xlat4;
					ivec2 u_xlati11;
					bool u_xlatb11;
					ivec2 u_xlati12;
					bool u_xlatb12;
					ivec2 u_xlati13;
					bool u_xlatb13;
					float u_xlat15;
					bool u_xlatb15;
					float u_xlat16;
					bool u_xlatb16;
					float u_xlat17;
					bool u_xlatb17;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD0.xyxy * _AO_QuarterBuffer_TexelSize.zwzw;
					    u_xlat0 = floor(u_xlat0);
					    u_xlat1 = u_xlat0.zwzw * vec4(4.0, 4.0, 4.0, 4.0) + vec4(_AO_LayerOffset0.x, _AO_LayerOffset0.y, _AO_LayerOffset1.x, _AO_LayerOffset1.y);
					    u_xlat0 = u_xlat0 * vec4(4.0, 4.0, 4.0, 4.0) + vec4(_AO_LayerOffset2.x, _AO_LayerOffset2.y, _AO_LayerOffset3.x, _AO_LayerOffset3.y);
					    u_xlat0 = u_xlat0 * _AO_Buffer_TexelSize.xyxy;
					    u_xlat0 = u_xlat0 * _AO_Buffer_PadScale.xyxy;
					    u_xlat1 = u_xlat1 * _AO_Buffer_TexelSize.xyxy;
					    u_xlat1 = u_xlat1 * _AO_Buffer_PadScale.xyxy;
					    u_xlat2 = texture(_CameraGBufferTexture2, u_xlat1.xy);
					    u_xlat1 = texture(_CameraGBufferTexture2, u_xlat1.zw);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlatb17 = u_xlat2.w<1.0;
					    u_xlati3.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat2.xyxx).xy) * 0xFFFFFFFFu);
					    u_xlati13.xy = ivec2(uvec2(lessThan(u_xlat2.xyxy, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					    u_xlati3.xy = (-u_xlati3.xy) + u_xlati13.xy;
					    u_xlat3.xy = vec2(u_xlati3.xy);
					    u_xlat4.xyz = -abs(u_xlat2.xyx) + vec3(1.0, 1.0, 1.0);
					    u_xlat3.xy = u_xlat3.xy * u_xlat4.yz;
					    u_xlat4.z = -abs(u_xlat2.y) + u_xlat4.x;
					    u_xlatb13 = u_xlat4.z>=0.0;
					    u_xlat4.xy = (bool(u_xlatb13)) ? u_xlat2.xy : u_xlat3.xy;
					    u_xlat2.xyz = (bool(u_xlatb17)) ? u_xlat4.xyz : u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * _AO_CameraView[1].xyz;
					    u_xlat2.xyw = _AO_CameraView[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = _AO_CameraView[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat17 = inversesqrt(u_xlat17);
					    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * vec3(0.5, -0.5, -0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0.w = 0.0;
					    u_xlatb16 = u_xlat1.w<1.0;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlati2.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat1.xyxx).xy) * 0xFFFFFFFFu);
					    u_xlati12.xy = ivec2(uvec2(lessThan(u_xlat1.xyxy, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					    u_xlati2.xy = (-u_xlati2.xy) + u_xlati12.xy;
					    u_xlat2.xy = vec2(u_xlati2.xy);
					    u_xlat3.xyz = -abs(u_xlat1.xyx) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.yz;
					    u_xlat3.z = -abs(u_xlat1.y) + u_xlat3.x;
					    u_xlatb12 = u_xlat3.z>=0.0;
					    u_xlat3.xy = (bool(u_xlatb12)) ? u_xlat1.xy : u_xlat2.xy;
					    u_xlat1.xyz = (bool(u_xlatb16)) ? u_xlat3.xyz : u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * _AO_CameraView[1].xyz;
					    u_xlat1.xyw = _AO_CameraView[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = _AO_CameraView[2].xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    SV_Target1.xyz = u_xlat1.xyz * vec3(0.5, -0.5, -0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target1.w = 0.0;
					    u_xlat1 = texture(_CameraGBufferTexture2, u_xlat0.xy);
					    u_xlat0 = texture(_CameraGBufferTexture2, u_xlat0.zw);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlatb16 = u_xlat1.w<1.0;
					    u_xlati2.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat1.xyxx).xy) * 0xFFFFFFFFu);
					    u_xlati12.xy = ivec2(uvec2(lessThan(u_xlat1.xyxy, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					    u_xlati2.xy = (-u_xlati2.xy) + u_xlati12.xy;
					    u_xlat2.xy = vec2(u_xlati2.xy);
					    u_xlat3.xyz = -abs(u_xlat1.xyx) + vec3(1.0, 1.0, 1.0);
					    u_xlat2.xy = u_xlat2.xy * u_xlat3.yz;
					    u_xlat3.z = -abs(u_xlat1.y) + u_xlat3.x;
					    u_xlatb12 = u_xlat3.z>=0.0;
					    u_xlat3.xy = (bool(u_xlatb12)) ? u_xlat1.xy : u_xlat2.xy;
					    u_xlat1.xyz = (bool(u_xlatb16)) ? u_xlat3.xyz : u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * _AO_CameraView[1].xyz;
					    u_xlat1.xyw = _AO_CameraView[0].xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = _AO_CameraView[2].xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    SV_Target2.xyz = u_xlat1.xyz * vec3(0.5, -0.5, -0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target2.w = 0.0;
					    u_xlatb15 = u_xlat0.w<1.0;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlati1.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxx).xy) * 0xFFFFFFFFu);
					    u_xlati11.xy = ivec2(uvec2(lessThan(u_xlat0.xyxy, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					    u_xlati1.xy = (-u_xlati1.xy) + u_xlati11.xy;
					    u_xlat1.xy = vec2(u_xlati1.xy);
					    u_xlat2.xyz = -abs(u_xlat0.xyx) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xy = u_xlat1.xy * u_xlat2.yz;
					    u_xlat2.z = -abs(u_xlat0.y) + u_xlat2.x;
					    u_xlatb11 = u_xlat2.z>=0.0;
					    u_xlat2.xy = (bool(u_xlatb11)) ? u_xlat0.xy : u_xlat1.xy;
					    u_xlat0.xyz = (bool(u_xlatb15)) ? u_xlat2.xyz : u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * _AO_CameraView[1].xyz;
					    u_xlat0.xyw = _AO_CameraView[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = _AO_CameraView[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    SV_Target3.xyz = u_xlat0.xyz * vec3(0.5, -0.5, -0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target3.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 990538
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AO_Bias;
					//   float4 _AO_Buffer_TexelSize;
					//   sampler2D _AO_DepthTexture;
					//   float2 _AO_FadeParams;
					//   float3 _AO_FadeValues;
					//   float _AO_HalfProjScale;
					//   float2 _AO_LayerOffset;
					//   float4 _AO_LayerRandom;
					//   float _AO_Multiplier;
					//   sampler2D _AO_NormalTexture;
					//   float _AO_PowExponent;
					//   float4 _AO_QuarterBuffer_TexelSize;
					//   float _AO_Radius;
					//   float4 _AO_UVToView;
					//
					//
					// Registers:
					//
					//   Name                        Reg   Size
					//   --------------------------- ----- ----
					//   _AO_LayerOffset             c0       1
					//   _AO_LayerRandom             c1       1
					//   _AO_Buffer_TexelSize        c2       1
					//   _AO_QuarterBuffer_TexelSize c3       1
					//   _AO_UVToView                c4       1
					//   _AO_HalfProjScale           c5       1
					//   _AO_Radius                  c6       1
					//   _AO_PowExponent             c7       1
					//   _AO_Bias                    c8       1
					//   _AO_Multiplier              c9       1
					//   _AO_FadeParams              c10      1
					//   _AO_FadeValues              c11      1
					//   _AO_DepthTexture            s0       1
					//   _AO_NormalTexture           s1       1
					//
					
					    ps_3_0
					    def c12, 4, 0, 2, -1
					    def c13, 6.28318548, -3.14159274, 0.125, 1
					    def c14, 0.0500000007, 0.25, 0.5, 0
					    defi i0, 4, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mul r0.xy, c3.zwzw, v0
					    frc r0.zw, r0.xyxy
					    add r0.xy, -r0.zwzw, r0
					    mov r1.xyw, c12
					    mad r0.xy, r0, r1.x, c0
					    mul r0.xy, r0, c2
					    mov r0.zw, c12.y
					    texldl_pp r2, r0.xyww, s0
					    mad r1.xz, r0.xyyw, c4.xyyw, c4.zyww
					    mul r3.xy, r2.x, r1.xzzw
					    texldl r4, r0, s1
					    mad r2.yzw, r4.xxyz, c12.z, c12.w
					    add r0.z, r2.x, -c10.x
					    mul_sat r0.w, r0.z, c10.y
					    mov r4.x, c6.x
					    mov r4.y, c7.x
					    add r1.xz, -r4.xyyw, c11.yyzw
					    mul r1.xz, r0.w, r1
					    cmp r0.zw, r0.z, r1.xyxz, c12.y
					    add r0.zw, r0, r4.xyxy
					    mul r1.x, r0.z, c5.x
					    mul r0.z, r0.z, r0.z
					    rcp r0.z, r0.z
					    rcp r1.z, r2.x
					    mul r1.x, r1.z, r1.x
					    mul r1.z, r1.x, c14.x
					    mad r1.z, c1.z, r1.z, -r1.w
					    mov_pp r3.z, r2.x
					    mov r4.zw, c12.y
					    mov r1.w, c12.y
					    mov r2.x, c12.y
					    rep i0
					      mad r3.w, r2.x, c14.y, c14.z
					      frc r3.w, r3.w
					      mad r3.w, r3.w, c13.x, c13.y
					      sincos r5.xy, r3.w
					      mul r3.w, r5.y, c1.y
					      mad r6.x, r5.x, c1.x, -r3.w
					      dp2add r6.y, r5, c1.yxzw, r1.y
					      mov r5.x, r1.w
					      mov r5.y, r1.z
					      rep i0
					        mad r5.zw, r5.y, r6.xyxy, c14.z
					        frc r6.zw, r5
					        add r5.zw, r5, -r6
					        mad r4.xy, r5.zwzw, c3, r0
					        texldl r7, r4, s0
					        mad r4.xy, r4, c4, c4.zwzw
					        mul r8.xy, r7.x, r4
					        mad r5.y, r1.x, c14.x, r5.y
					        mov r8.z, r7.x
					        add r7.xyz, -r3, r8
					        dp3 r3.w, r7, r7
					        dp3 r4.x, r2.yzww, r7
					        rsq r4.y, r3.w
					        mad_sat r4.x, r4.x, r4.y, -c8.x
					        mad_sat r3.w, r3.w, -r0.z, -c12.w
					        mad r5.x, r4.x, r3.w, r5.x
					      endrep
					      mov r1.w, r5.x
					      add r2.x, r2.x, -c12.w
					    endrep
					    mul r0.x, r1.w, c9.x
					    mad_sat r0.x, r0.x, -c13.z, c13.w
					    log r0.x, r0.x
					    mul r0.x, r0.x, r0.w
					    exp_sat_pp oC0.x, r0.x
					    mul_pp oC0.yzw, r3.z, c12_abs.xwyy
					
					// approximately 85 instruction slots used (6 texture, 79 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[13];
						vec2 _AO_LayerOffset;
						vec4 _AO_LayerRandom;
						vec4 unused_0_3[5];
						vec4 _AO_Buffer_TexelSize;
						vec4 _AO_QuarterBuffer_TexelSize;
						vec4 _AO_UVToView;
						vec4 unused_0_7;
						float _AO_HalfProjScale;
						float _AO_Radius;
						float _AO_PowExponent;
						float _AO_Bias;
						float _AO_Multiplier;
						vec2 _AO_FadeParams;
						vec3 _AO_FadeValues;
					};
					uniform  sampler2D _AO_DepthTexture;
					uniform  sampler2D _AO_NormalTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec2 u_xlat3;
					vec2 u_xlat4;
					float u_xlat5;
					vec4 u_xlat6;
					int u_xlati10;
					float u_xlat12;
					vec2 u_xlat14;
					vec2 u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					vec2 u_xlat18;
					float u_xlat22;
					float u_xlat23;
					float u_xlat24;
					bool u_xlatb24;
					float u_xlat25;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _AO_QuarterBuffer_TexelSize.zw;
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0) + _AO_LayerOffset.xy;
					    u_xlat0.xy = u_xlat0.xy * _AO_Buffer_TexelSize.xy;
					    u_xlat1 = textureLod(_AO_DepthTexture, u_xlat0.xy, 0.0).yzxw;
					    u_xlat14.xy = u_xlat0.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					    u_xlat1.xy = u_xlat1.zz * u_xlat14.xy;
					    u_xlat2 = textureLod(_AO_NormalTexture, u_xlat0.xy, 0.0);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat14.x = u_xlat1.z + (-_AO_FadeParams.xxyx.y);
					    u_xlat14.x = max(u_xlat14.x, 0.0);
					    u_xlat14.x = u_xlat14.x * _AO_FadeParams.xxyx.z;
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat3.xy = (-vec2(_AO_Radius, _AO_PowExponent)) + _AO_FadeValues.yz;
					    u_xlat14.xy = u_xlat14.xx * u_xlat3.xy + vec2(_AO_Radius, _AO_PowExponent);
					    u_xlat22 = u_xlat14.x * _AO_HalfProjScale;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat14.x = -1.0 / u_xlat14.x;
					    u_xlat22 = u_xlat22 / u_xlat1.z;
					    u_xlat23 = u_xlat22 * 0.0500000007;
					    u_xlat23 = _AO_LayerRandom.z * u_xlat23 + 1.0;
					    u_xlat3.x = float(0.0);
					    for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<4 ; u_xlati_loop_1++)
					    {
					        u_xlat17.x = float(u_xlati_loop_1);
					        u_xlat17.x = u_xlat17.x * 1.57079637;
					        u_xlat4.x = sin(u_xlat17.x);
					        u_xlat5 = cos(u_xlat17.x);
					        u_xlat17.xy = u_xlat4.xx * _AO_LayerRandom.yx;
					        u_xlat4.x = u_xlat5 * _AO_LayerRandom.x + (-u_xlat17.x);
					        u_xlat4.y = u_xlat5 * _AO_LayerRandom.y + u_xlat17.y;
					        u_xlat5 = u_xlat3.x;
					        u_xlat12 = u_xlat23;
					        for(int u_xlati_loop_2 = 0 ; u_xlati_loop_2<4 ; u_xlati_loop_2++)
					        {
					            u_xlat18.xy = u_xlat4.xy * vec2(u_xlat12);
					            u_xlat18.xy = roundEven(u_xlat18.xy);
					            u_xlat18.xy = u_xlat18.xy * _AO_QuarterBuffer_TexelSize.xy + u_xlat0.xy;
					            u_xlat6 = textureLod(_AO_DepthTexture, u_xlat18.xy, 0.0).yzxw;
					            u_xlat18.xy = u_xlat18.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					            u_xlat6.xy = u_xlat6.zz * u_xlat18.xy;
					            u_xlat12 = u_xlat22 * 0.0500000007 + u_xlat12;
					            u_xlat6.xyz = (-u_xlat1.xyz) + u_xlat6.xyz;
					            u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat18.x = dot(u_xlat2.xyz, u_xlat6.xyz);
					            u_xlat25 = inversesqrt(u_xlat24);
					            u_xlat18.x = u_xlat18.x * u_xlat25 + (-_AO_Bias);
					            u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
					            u_xlat24 = u_xlat24 * u_xlat14.x + 1.0;
					            u_xlat24 = max(u_xlat24, 0.0);
					            u_xlat5 = u_xlat18.x * u_xlat24 + u_xlat5;
					        }
					        u_xlat3.x = u_xlat5;
					    }
					    u_xlat0.x = u_xlat3.x * _AO_Multiplier;
					    u_xlat0.x = (-u_xlat0.x) * 0.125 + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat14.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    SV_Target0.x = min(u_xlat0.x, 1.0);
					    SV_Target0.y = u_xlat1.z;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1070614
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AO_Bias;
					//   float4 _AO_Buffer_TexelSize;
					//   sampler2D _AO_DepthTexture;
					//   float2 _AO_FadeParams;
					//   float3 _AO_FadeValues;
					//   float _AO_HalfProjScale;
					//   float2 _AO_LayerOffset;
					//   float4 _AO_LayerRandom;
					//   float _AO_Multiplier;
					//   sampler2D _AO_NormalTexture;
					//   float _AO_PowExponent;
					//   float4 _AO_QuarterBuffer_TexelSize;
					//   float _AO_Radius;
					//   float4 _AO_UVToView;
					//
					//
					// Registers:
					//
					//   Name                        Reg   Size
					//   --------------------------- ----- ----
					//   _AO_LayerOffset             c0       1
					//   _AO_LayerRandom             c1       1
					//   _AO_Buffer_TexelSize        c2       1
					//   _AO_QuarterBuffer_TexelSize c3       1
					//   _AO_UVToView                c4       1
					//   _AO_HalfProjScale           c5       1
					//   _AO_Radius                  c6       1
					//   _AO_PowExponent             c7       1
					//   _AO_Bias                    c8       1
					//   _AO_Multiplier              c9       1
					//   _AO_FadeParams              c10      1
					//   _AO_FadeValues              c11      1
					//   _AO_DepthTexture            s0       1
					//   _AO_NormalTexture           s1       1
					//
					
					    ps_3_0
					    def c12, 4, 0, 2, -1
					    def c13, 6.28318548, -3.14159274, 0.0833333358, 1
					    def c14, 0.0500000007, 0, 0.166666672, 0.5
					    defi i0, 6, 0, 0, 0
					    defi i1, 4, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mul r0.xy, c3.zwzw, v0
					    frc r0.zw, r0.xyxy
					    add r0.xy, -r0.zwzw, r0
					    mov r1.xyw, c12
					    mad r0.xy, r0, r1.x, c0
					    mul r0.xy, r0, c2
					    mov r0.zw, c12.y
					    texldl_pp r2, r0.xyww, s0
					    mad r1.xz, r0.xyyw, c4.xyyw, c4.zyww
					    mul r3.xy, r2.x, r1.xzzw
					    texldl r4, r0, s1
					    mad r2.yzw, r4.xxyz, c12.z, c12.w
					    add r0.z, r2.x, -c10.x
					    mul_sat r0.w, r0.z, c10.y
					    mov r4.x, c6.x
					    mov r4.y, c7.x
					    add r1.xz, -r4.xyyw, c11.yyzw
					    mul r1.xz, r0.w, r1
					    cmp r0.zw, r0.z, r1.xyxz, c12.y
					    add r0.zw, r0, r4.xyxy
					    mul r1.x, r0.z, c5.x
					    mul r0.z, r0.z, r0.z
					    rcp r0.z, r0.z
					    rcp r1.z, r2.x
					    mul r1.x, r1.z, r1.x
					    mul r1.z, r1.x, c14.x
					    mad r1.z, c1.z, r1.z, -r1.w
					    mov_pp r3.z, r2.x
					    mov r4.zw, c12.y
					    mov r1.w, c12.y
					    mov r2.x, c12.y
					    rep i0
					      mad r3.w, r2.x, c14.z, c14.w
					      frc r3.w, r3.w
					      mad r3.w, r3.w, c13.x, c13.y
					      sincos r5.xy, r3.w
					      mul r3.w, r5.y, c1.y
					      mad r6.x, r5.x, c1.x, -r3.w
					      dp2add r6.y, r5, c1.yxzw, r1.y
					      mov r5.x, r1.w
					      mov r5.y, r1.z
					      rep i1
					        mad r5.zw, r5.y, r6.xyxy, c14.w
					        frc r6.zw, r5
					        add r5.zw, r5, -r6
					        mad r4.xy, r5.zwzw, c3, r0
					        texldl r7, r4, s0
					        mad r4.xy, r4, c4, c4.zwzw
					        mul r8.xy, r7.x, r4
					        mad r5.y, r1.x, c14.x, r5.y
					        mov r8.z, r7.x
					        add r7.xyz, -r3, r8
					        dp3 r3.w, r7, r7
					        dp3 r4.x, r2.yzww, r7
					        rsq r4.y, r3.w
					        mad_sat r4.x, r4.x, r4.y, -c8.x
					        mad_sat r3.w, r3.w, -r0.z, -c12.w
					        mad r5.x, r4.x, r3.w, r5.x
					      endrep
					      mov r1.w, r5.x
					      add r2.x, r2.x, -c12.w
					    endrep
					    mul r0.x, r1.w, c9.x
					    mad_sat r0.x, r0.x, -c13.z, c13.w
					    log r0.x, r0.x
					    mul r0.x, r0.x, r0.w
					    exp_sat_pp oC0.x, r0.x
					    mul_pp oC0.yzw, r3.z, c12_abs.xwyy
					
					// approximately 85 instruction slots used (6 texture, 79 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[13];
						vec2 _AO_LayerOffset;
						vec4 _AO_LayerRandom;
						vec4 unused_0_3[5];
						vec4 _AO_Buffer_TexelSize;
						vec4 _AO_QuarterBuffer_TexelSize;
						vec4 _AO_UVToView;
						vec4 unused_0_7;
						float _AO_HalfProjScale;
						float _AO_Radius;
						float _AO_PowExponent;
						float _AO_Bias;
						float _AO_Multiplier;
						vec2 _AO_FadeParams;
						vec3 _AO_FadeValues;
					};
					uniform  sampler2D _AO_DepthTexture;
					uniform  sampler2D _AO_NormalTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec2 u_xlat3;
					vec2 u_xlat4;
					float u_xlat5;
					vec4 u_xlat6;
					int u_xlati10;
					float u_xlat12;
					vec2 u_xlat14;
					vec2 u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					vec2 u_xlat18;
					float u_xlat22;
					float u_xlat23;
					float u_xlat24;
					bool u_xlatb24;
					float u_xlat25;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _AO_QuarterBuffer_TexelSize.zw;
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0) + _AO_LayerOffset.xy;
					    u_xlat0.xy = u_xlat0.xy * _AO_Buffer_TexelSize.xy;
					    u_xlat1 = textureLod(_AO_DepthTexture, u_xlat0.xy, 0.0).yzxw;
					    u_xlat14.xy = u_xlat0.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					    u_xlat1.xy = u_xlat1.zz * u_xlat14.xy;
					    u_xlat2 = textureLod(_AO_NormalTexture, u_xlat0.xy, 0.0);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat14.x = u_xlat1.z + (-_AO_FadeParams.xxyx.y);
					    u_xlat14.x = max(u_xlat14.x, 0.0);
					    u_xlat14.x = u_xlat14.x * _AO_FadeParams.xxyx.z;
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat3.xy = (-vec2(_AO_Radius, _AO_PowExponent)) + _AO_FadeValues.yz;
					    u_xlat14.xy = u_xlat14.xx * u_xlat3.xy + vec2(_AO_Radius, _AO_PowExponent);
					    u_xlat22 = u_xlat14.x * _AO_HalfProjScale;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat14.x = -1.0 / u_xlat14.x;
					    u_xlat22 = u_xlat22 / u_xlat1.z;
					    u_xlat23 = u_xlat22 * 0.0500000007;
					    u_xlat23 = _AO_LayerRandom.z * u_xlat23 + 1.0;
					    u_xlat3.x = float(0.0);
					    for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					    {
					        u_xlat17.x = float(u_xlati_loop_1);
					        u_xlat17.x = u_xlat17.x * 1.04719758;
					        u_xlat4.x = sin(u_xlat17.x);
					        u_xlat5 = cos(u_xlat17.x);
					        u_xlat17.xy = u_xlat4.xx * _AO_LayerRandom.yx;
					        u_xlat4.x = u_xlat5 * _AO_LayerRandom.x + (-u_xlat17.x);
					        u_xlat4.y = u_xlat5 * _AO_LayerRandom.y + u_xlat17.y;
					        u_xlat5 = u_xlat3.x;
					        u_xlat12 = u_xlat23;
					        for(int u_xlati_loop_2 = 0 ; u_xlati_loop_2<4 ; u_xlati_loop_2++)
					        {
					            u_xlat18.xy = u_xlat4.xy * vec2(u_xlat12);
					            u_xlat18.xy = roundEven(u_xlat18.xy);
					            u_xlat18.xy = u_xlat18.xy * _AO_QuarterBuffer_TexelSize.xy + u_xlat0.xy;
					            u_xlat6 = textureLod(_AO_DepthTexture, u_xlat18.xy, 0.0).yzxw;
					            u_xlat18.xy = u_xlat18.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					            u_xlat6.xy = u_xlat6.zz * u_xlat18.xy;
					            u_xlat12 = u_xlat22 * 0.0500000007 + u_xlat12;
					            u_xlat6.xyz = (-u_xlat1.xyz) + u_xlat6.xyz;
					            u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat18.x = dot(u_xlat2.xyz, u_xlat6.xyz);
					            u_xlat25 = inversesqrt(u_xlat24);
					            u_xlat18.x = u_xlat18.x * u_xlat25 + (-_AO_Bias);
					            u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
					            u_xlat24 = u_xlat24 * u_xlat14.x + 1.0;
					            u_xlat24 = max(u_xlat24, 0.0);
					            u_xlat5 = u_xlat18.x * u_xlat24 + u_xlat5;
					        }
					        u_xlat3.x = u_xlat5;
					    }
					    u_xlat0.x = u_xlat3.x * _AO_Multiplier;
					    u_xlat0.x = (-u_xlat0.x) * 0.0833333358 + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat14.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    SV_Target0.x = min(u_xlat0.x, 1.0);
					    SV_Target0.y = u_xlat1.z;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1145925
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AO_Bias;
					//   float4 _AO_Buffer_TexelSize;
					//   sampler2D _AO_DepthTexture;
					//   float2 _AO_FadeParams;
					//   float3 _AO_FadeValues;
					//   float _AO_HalfProjScale;
					//   float2 _AO_LayerOffset;
					//   float4 _AO_LayerRandom;
					//   float _AO_Multiplier;
					//   sampler2D _AO_NormalTexture;
					//   float _AO_PowExponent;
					//   float4 _AO_QuarterBuffer_TexelSize;
					//   float _AO_Radius;
					//   float4 _AO_UVToView;
					//
					//
					// Registers:
					//
					//   Name                        Reg   Size
					//   --------------------------- ----- ----
					//   _AO_LayerOffset             c0       1
					//   _AO_LayerRandom             c1       1
					//   _AO_Buffer_TexelSize        c2       1
					//   _AO_QuarterBuffer_TexelSize c3       1
					//   _AO_UVToView                c4       1
					//   _AO_HalfProjScale           c5       1
					//   _AO_Radius                  c6       1
					//   _AO_PowExponent             c7       1
					//   _AO_Bias                    c8       1
					//   _AO_Multiplier              c9       1
					//   _AO_FadeParams              c10      1
					//   _AO_FadeValues              c11      1
					//   _AO_DepthTexture            s0       1
					//   _AO_NormalTexture           s1       1
					//
					
					    ps_3_0
					    def c12, 4, 0, 2, -1
					    def c13, 6.28318548, -3.14159274, 0.0625, 1
					    def c14, 0.0500000007, 0, 0.125, 0.5
					    defi i0, 8, 0, 0, 0
					    defi i1, 4, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mul r0.xy, c3.zwzw, v0
					    frc r0.zw, r0.xyxy
					    add r0.xy, -r0.zwzw, r0
					    mov r1.xyw, c12
					    mad r0.xy, r0, r1.x, c0
					    mul r0.xy, r0, c2
					    mov r0.zw, c12.y
					    texldl_pp r2, r0.xyww, s0
					    mad r1.xz, r0.xyyw, c4.xyyw, c4.zyww
					    mul r3.xy, r2.x, r1.xzzw
					    texldl r4, r0, s1
					    mad r2.yzw, r4.xxyz, c12.z, c12.w
					    add r0.z, r2.x, -c10.x
					    mul_sat r0.w, r0.z, c10.y
					    mov r4.x, c6.x
					    mov r4.y, c7.x
					    add r1.xz, -r4.xyyw, c11.yyzw
					    mul r1.xz, r0.w, r1
					    cmp r0.zw, r0.z, r1.xyxz, c12.y
					    add r0.zw, r0, r4.xyxy
					    mul r1.x, r0.z, c5.x
					    mul r0.z, r0.z, r0.z
					    rcp r0.z, r0.z
					    rcp r1.z, r2.x
					    mul r1.x, r1.z, r1.x
					    mul r1.z, r1.x, c14.x
					    mad r1.z, c1.z, r1.z, -r1.w
					    mov_pp r3.z, r2.x
					    mov r4.zw, c12.y
					    mov r1.w, c12.y
					    mov r2.x, c12.y
					    rep i0
					      mad r3.w, r2.x, c14.z, c14.w
					      frc r3.w, r3.w
					      mad r3.w, r3.w, c13.x, c13.y
					      sincos r5.xy, r3.w
					      mul r3.w, r5.y, c1.y
					      mad r6.x, r5.x, c1.x, -r3.w
					      dp2add r6.y, r5, c1.yxzw, r1.y
					      mov r5.x, r1.w
					      mov r5.y, r1.z
					      rep i1
					        mad r5.zw, r5.y, r6.xyxy, c14.w
					        frc r6.zw, r5
					        add r5.zw, r5, -r6
					        mad r4.xy, r5.zwzw, c3, r0
					        texldl r7, r4, s0
					        mad r4.xy, r4, c4, c4.zwzw
					        mul r8.xy, r7.x, r4
					        mad r5.y, r1.x, c14.x, r5.y
					        mov r8.z, r7.x
					        add r7.xyz, -r3, r8
					        dp3 r3.w, r7, r7
					        dp3 r4.x, r2.yzww, r7
					        rsq r4.y, r3.w
					        mad_sat r4.x, r4.x, r4.y, -c8.x
					        mad_sat r3.w, r3.w, -r0.z, -c12.w
					        mad r5.x, r4.x, r3.w, r5.x
					      endrep
					      mov r1.w, r5.x
					      add r2.x, r2.x, -c12.w
					    endrep
					    mul r0.x, r1.w, c9.x
					    mad_sat r0.x, r0.x, -c13.z, c13.w
					    log r0.x, r0.x
					    mul r0.x, r0.x, r0.w
					    exp_sat_pp oC0.x, r0.x
					    mul_pp oC0.yzw, r3.z, c12_abs.xwyy
					
					// approximately 85 instruction slots used (6 texture, 79 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[13];
						vec2 _AO_LayerOffset;
						vec4 _AO_LayerRandom;
						vec4 unused_0_3[5];
						vec4 _AO_Buffer_TexelSize;
						vec4 _AO_QuarterBuffer_TexelSize;
						vec4 _AO_UVToView;
						vec4 unused_0_7;
						float _AO_HalfProjScale;
						float _AO_Radius;
						float _AO_PowExponent;
						float _AO_Bias;
						float _AO_Multiplier;
						vec2 _AO_FadeParams;
						vec3 _AO_FadeValues;
					};
					uniform  sampler2D _AO_DepthTexture;
					uniform  sampler2D _AO_NormalTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec2 u_xlat3;
					vec2 u_xlat4;
					float u_xlat5;
					vec4 u_xlat6;
					int u_xlati10;
					float u_xlat12;
					vec2 u_xlat14;
					vec2 u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					vec2 u_xlat18;
					float u_xlat22;
					float u_xlat23;
					float u_xlat24;
					bool u_xlatb24;
					float u_xlat25;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _AO_QuarterBuffer_TexelSize.zw;
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0) + _AO_LayerOffset.xy;
					    u_xlat0.xy = u_xlat0.xy * _AO_Buffer_TexelSize.xy;
					    u_xlat1 = textureLod(_AO_DepthTexture, u_xlat0.xy, 0.0).yzxw;
					    u_xlat14.xy = u_xlat0.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					    u_xlat1.xy = u_xlat1.zz * u_xlat14.xy;
					    u_xlat2 = textureLod(_AO_NormalTexture, u_xlat0.xy, 0.0);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat14.x = u_xlat1.z + (-_AO_FadeParams.xxyx.y);
					    u_xlat14.x = max(u_xlat14.x, 0.0);
					    u_xlat14.x = u_xlat14.x * _AO_FadeParams.xxyx.z;
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat3.xy = (-vec2(_AO_Radius, _AO_PowExponent)) + _AO_FadeValues.yz;
					    u_xlat14.xy = u_xlat14.xx * u_xlat3.xy + vec2(_AO_Radius, _AO_PowExponent);
					    u_xlat22 = u_xlat14.x * _AO_HalfProjScale;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat14.x = -1.0 / u_xlat14.x;
					    u_xlat22 = u_xlat22 / u_xlat1.z;
					    u_xlat23 = u_xlat22 * 0.0500000007;
					    u_xlat23 = _AO_LayerRandom.z * u_xlat23 + 1.0;
					    u_xlat3.x = float(0.0);
					    for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<8 ; u_xlati_loop_1++)
					    {
					        u_xlat17.x = float(u_xlati_loop_1);
					        u_xlat17.x = u_xlat17.x * 0.785398185;
					        u_xlat4.x = sin(u_xlat17.x);
					        u_xlat5 = cos(u_xlat17.x);
					        u_xlat17.xy = u_xlat4.xx * _AO_LayerRandom.yx;
					        u_xlat4.x = u_xlat5 * _AO_LayerRandom.x + (-u_xlat17.x);
					        u_xlat4.y = u_xlat5 * _AO_LayerRandom.y + u_xlat17.y;
					        u_xlat5 = u_xlat3.x;
					        u_xlat12 = u_xlat23;
					        for(int u_xlati_loop_2 = 0 ; u_xlati_loop_2<4 ; u_xlati_loop_2++)
					        {
					            u_xlat18.xy = u_xlat4.xy * vec2(u_xlat12);
					            u_xlat18.xy = roundEven(u_xlat18.xy);
					            u_xlat18.xy = u_xlat18.xy * _AO_QuarterBuffer_TexelSize.xy + u_xlat0.xy;
					            u_xlat6 = textureLod(_AO_DepthTexture, u_xlat18.xy, 0.0).yzxw;
					            u_xlat18.xy = u_xlat18.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					            u_xlat6.xy = u_xlat6.zz * u_xlat18.xy;
					            u_xlat12 = u_xlat22 * 0.0500000007 + u_xlat12;
					            u_xlat6.xyz = (-u_xlat1.xyz) + u_xlat6.xyz;
					            u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat18.x = dot(u_xlat2.xyz, u_xlat6.xyz);
					            u_xlat25 = inversesqrt(u_xlat24);
					            u_xlat18.x = u_xlat18.x * u_xlat25 + (-_AO_Bias);
					            u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
					            u_xlat24 = u_xlat24 * u_xlat14.x + 1.0;
					            u_xlat24 = max(u_xlat24, 0.0);
					            u_xlat5 = u_xlat18.x * u_xlat24 + u_xlat5;
					        }
					        u_xlat3.x = u_xlat5;
					    }
					    u_xlat0.x = u_xlat3.x * _AO_Multiplier;
					    u_xlat0.x = (-u_xlat0.x) * 0.0625 + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat14.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    SV_Target0.x = min(u_xlat0.x, 1.0);
					    SV_Target0.y = u_xlat1.z;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1234647
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AO_Bias;
					//   float4 _AO_Buffer_TexelSize;
					//   sampler2D _AO_DepthTexture;
					//   float2 _AO_FadeParams;
					//   float3 _AO_FadeValues;
					//   float _AO_HalfProjScale;
					//   float2 _AO_LayerOffset;
					//   float4 _AO_LayerRandom;
					//   float _AO_Multiplier;
					//   sampler2D _AO_NormalTexture;
					//   float _AO_PowExponent;
					//   float4 _AO_QuarterBuffer_TexelSize;
					//   float _AO_Radius;
					//   float4 _AO_UVToView;
					//
					//
					// Registers:
					//
					//   Name                        Reg   Size
					//   --------------------------- ----- ----
					//   _AO_LayerOffset             c0       1
					//   _AO_LayerRandom             c1       1
					//   _AO_Buffer_TexelSize        c2       1
					//   _AO_QuarterBuffer_TexelSize c3       1
					//   _AO_UVToView                c4       1
					//   _AO_HalfProjScale           c5       1
					//   _AO_Radius                  c6       1
					//   _AO_PowExponent             c7       1
					//   _AO_Bias                    c8       1
					//   _AO_Multiplier              c9       1
					//   _AO_FadeParams              c10      1
					//   _AO_FadeValues              c11      1
					//   _AO_DepthTexture            s0       1
					//   _AO_NormalTexture           s1       1
					//
					
					    ps_3_0
					    def c12, 4, 0, 2, -1
					    def c13, 6.28318548, -3.14159274, 0, 0
					    def c14, 0.0357142873, 0, 0.100000001, 0.5
					    def c15, 0.0333333351, 1, 0, 0
					    defi i0, 10, 0, 0, 0
					    defi i1, 6, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mul r0.xy, c3.zwzw, v0
					    frc r0.zw, r0.xyxy
					    add r0.xy, -r0.zwzw, r0
					    mov r1.xyw, c12
					    mad r0.xy, r0, r1.x, c0
					    mul r0.xy, r0, c2
					    mov r0.zw, c12.y
					    texldl_pp r2, r0.xyww, s0
					    mad r1.xz, r0.xyyw, c4.xyyw, c4.zyww
					    mul r3.xy, r2.x, r1.xzzw
					    texldl r4, r0, s1
					    mad r2.yzw, r4.xxyz, c12.z, c12.w
					    add r0.z, r2.x, -c10.x
					    mul_sat r0.w, r0.z, c10.y
					    mov r4.x, c6.x
					    mov r4.y, c7.x
					    add r1.xz, -r4.xyyw, c11.yyzw
					    mul r1.xz, r0.w, r1
					    cmp r0.zw, r0.z, r1.xyxz, c12.y
					    add r0.zw, r0, r4.xyxy
					    mul r1.x, r0.z, c5.x
					    mul r0.z, r0.z, r0.z
					    rcp r0.z, r0.z
					    rcp r1.z, r2.x
					    mul r1.x, r1.z, r1.x
					    mul r1.z, r1.x, c14.x
					    mad r1.z, c1.z, r1.z, -r1.w
					    mov_pp r3.z, r2.x
					    mov r4.zw, c12.y
					    mov r1.w, c12.y
					    mov r2.x, c12.y
					    rep i0
					      mad r3.w, r2.x, c14.z, c14.w
					      frc r3.w, r3.w
					      mad r3.w, r3.w, c13.x, c13.y
					      sincos r5.xy, r3.w
					      mul r3.w, r5.y, c1.y
					      mad r6.x, r5.x, c1.x, -r3.w
					      dp2add r6.y, r5, c1.yxzw, r1.y
					      mov r5.x, r1.w
					      mov r5.y, r1.z
					      rep i1
					        mad r5.zw, r5.y, r6.xyxy, c14.w
					        frc r6.zw, r5
					        add r5.zw, r5, -r6
					        mad r4.xy, r5.zwzw, c3, r0
					        texldl r7, r4, s0
					        mad r4.xy, r4, c4, c4.zwzw
					        mul r8.xy, r7.x, r4
					        mad r5.y, r1.x, c14.x, r5.y
					        mov r8.z, r7.x
					        add r7.xyz, -r3, r8
					        dp3 r3.w, r7, r7
					        dp3 r4.x, r2.yzww, r7
					        rsq r4.y, r3.w
					        mad_sat r4.x, r4.x, r4.y, -c8.x
					        mad_sat r3.w, r3.w, -r0.z, -c12.w
					        mad r5.x, r4.x, r3.w, r5.x
					      endrep
					      mov r1.w, r5.x
					      add r2.x, r2.x, -c12.w
					    endrep
					    mul r0.x, r1.w, c9.x
					    mad_sat r0.x, r0.x, -c15.x, c15.y
					    log r0.x, r0.x
					    mul r0.x, r0.x, r0.w
					    exp_sat_pp oC0.x, r0.x
					    mul_pp oC0.yzw, r3.z, c12_abs.xwyy
					
					// approximately 85 instruction slots used (6 texture, 79 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[13];
						vec2 _AO_LayerOffset;
						vec4 _AO_LayerRandom;
						vec4 unused_0_3[5];
						vec4 _AO_Buffer_TexelSize;
						vec4 _AO_QuarterBuffer_TexelSize;
						vec4 _AO_UVToView;
						vec4 unused_0_7;
						float _AO_HalfProjScale;
						float _AO_Radius;
						float _AO_PowExponent;
						float _AO_Bias;
						float _AO_Multiplier;
						vec2 _AO_FadeParams;
						vec3 _AO_FadeValues;
					};
					uniform  sampler2D _AO_DepthTexture;
					uniform  sampler2D _AO_NormalTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec2 u_xlat3;
					vec2 u_xlat4;
					float u_xlat5;
					vec4 u_xlat6;
					int u_xlati10;
					float u_xlat12;
					vec2 u_xlat14;
					vec2 u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					vec2 u_xlat18;
					float u_xlat22;
					float u_xlat23;
					float u_xlat24;
					bool u_xlatb24;
					float u_xlat25;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _AO_QuarterBuffer_TexelSize.zw;
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0) + _AO_LayerOffset.xy;
					    u_xlat0.xy = u_xlat0.xy * _AO_Buffer_TexelSize.xy;
					    u_xlat1 = textureLod(_AO_DepthTexture, u_xlat0.xy, 0.0).yzxw;
					    u_xlat14.xy = u_xlat0.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					    u_xlat1.xy = u_xlat1.zz * u_xlat14.xy;
					    u_xlat2 = textureLod(_AO_NormalTexture, u_xlat0.xy, 0.0);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat14.x = u_xlat1.z + (-_AO_FadeParams.xxyx.y);
					    u_xlat14.x = max(u_xlat14.x, 0.0);
					    u_xlat14.x = u_xlat14.x * _AO_FadeParams.xxyx.z;
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat3.xy = (-vec2(_AO_Radius, _AO_PowExponent)) + _AO_FadeValues.yz;
					    u_xlat14.xy = u_xlat14.xx * u_xlat3.xy + vec2(_AO_Radius, _AO_PowExponent);
					    u_xlat22 = u_xlat14.x * _AO_HalfProjScale;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat14.x = -1.0 / u_xlat14.x;
					    u_xlat22 = u_xlat22 / u_xlat1.z;
					    u_xlat23 = u_xlat22 * 0.0357142873;
					    u_xlat23 = _AO_LayerRandom.z * u_xlat23 + 1.0;
					    u_xlat3.x = float(0.0);
					    for(int u_xlati_loop_1 = int(0) ; u_xlati_loop_1<10 ; u_xlati_loop_1++)
					    {
					        u_xlat17.x = float(u_xlati_loop_1);
					        u_xlat17.x = u_xlat17.x * 0.628318548;
					        u_xlat4.x = sin(u_xlat17.x);
					        u_xlat5 = cos(u_xlat17.x);
					        u_xlat17.xy = u_xlat4.xx * _AO_LayerRandom.yx;
					        u_xlat4.x = u_xlat5 * _AO_LayerRandom.x + (-u_xlat17.x);
					        u_xlat4.y = u_xlat5 * _AO_LayerRandom.y + u_xlat17.y;
					        u_xlat5 = u_xlat3.x;
					        u_xlat12 = u_xlat23;
					        for(int u_xlati_loop_2 = 0 ; u_xlati_loop_2<6 ; u_xlati_loop_2++)
					        {
					            u_xlat18.xy = u_xlat4.xy * vec2(u_xlat12);
					            u_xlat18.xy = roundEven(u_xlat18.xy);
					            u_xlat18.xy = u_xlat18.xy * _AO_QuarterBuffer_TexelSize.xy + u_xlat0.xy;
					            u_xlat6 = textureLod(_AO_DepthTexture, u_xlat18.xy, 0.0).yzxw;
					            u_xlat18.xy = u_xlat18.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					            u_xlat6.xy = u_xlat6.zz * u_xlat18.xy;
					            u_xlat12 = u_xlat22 * 0.0357142873 + u_xlat12;
					            u_xlat6.xyz = (-u_xlat1.xyz) + u_xlat6.xyz;
					            u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat18.x = dot(u_xlat2.xyz, u_xlat6.xyz);
					            u_xlat25 = inversesqrt(u_xlat24);
					            u_xlat18.x = u_xlat18.x * u_xlat25 + (-_AO_Bias);
					            u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
					            u_xlat24 = u_xlat24 * u_xlat14.x + 1.0;
					            u_xlat24 = max(u_xlat24, 0.0);
					            u_xlat5 = u_xlat18.x * u_xlat24 + u_xlat5;
					        }
					        u_xlat3.x = u_xlat5;
					    }
					    u_xlat0.x = u_xlat3.x * _AO_Multiplier;
					    u_xlat0.x = (-u_xlat0.x) * 0.0333333351 + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat14.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    SV_Target0.x = min(u_xlat0.x, 1.0);
					    SV_Target0.y = u_xlat1.z;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1294463
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _AO_Buffer_TexelSize;
					//   sampler2D _AO_OcclusionAtlas;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _AO_Buffer_TexelSize c0       1
					//   _AO_OcclusionAtlas   s0       1
					//
					
					    ps_3_0
					    def c1, 0.25, 4, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    mul r0.xy, c0.zwzw, v0
					    frc r0.zw, r0.xyxy
					    add r0.xy, -r0.zwzw, r0
					    mul r0.zw, r0.xyxy, c1.x
					    frc r0.zw, r0_abs
					    cmp r0.xy, r0, r0.zwzw, -r0.zwzw
					    mad r0.xy, r0, c1.y, v0
					    mul r0.xy, r0, c1.x
					    mov r0.zw, c1.z
					    texldl_pp oC0, r0, s0
					
					// approximately 11 instruction slots used (2 texture, 9 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[20];
						vec4 _AO_Buffer_TexelSize;
						vec4 unused_0_2[6];
					};
					uniform  sampler2D _AO_OcclusionAtlas;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					bvec2 u_xlatb2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _AO_Buffer_TexelSize.zw;
					    u_xlat0.xy = floor(u_xlat0.xy);
					    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
					    u_xlatb2.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
					    u_xlat0.xy = fract(abs(u_xlat0.xy));
					    {
					        vec2 hlslcc_movcTemp = u_xlat0;
					        hlslcc_movcTemp.x = (u_xlatb2.x) ? u_xlat0.x : (-u_xlat0.x);
					        hlslcc_movcTemp.y = (u_xlatb2.y) ? u_xlat0.y : (-u_xlat0.y);
					        u_xlat0 = hlslcc_movcTemp;
					    }
					    u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0) + vs_TEXCOORD0.xy;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
					    SV_Target0 = textureLod(_AO_OcclusionAtlas, u_xlat0.xy, 0.0);
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1320210
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AO_Bias;
					//   float4 _AO_Buffer_PadScale;
					//   float4 _AO_Buffer_TexelSize;
					//   float2 _AO_FadeParams;
					//   float3 _AO_FadeValues;
					//   float _AO_HalfProjScale;
					//   float _AO_Multiplier;
					//   float _AO_PowExponent;
					//   float _AO_Radius;
					//   sampler2D _AO_RandomTexture;
					//   float4 _AO_UVToView;
					//   sampler2D _CameraDepthTexture;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _ZBufferParams       c0       1
					//   _AO_Buffer_PadScale  c1       1
					//   _AO_Buffer_TexelSize c2       1
					//   _AO_UVToView         c3       1
					//   _AO_HalfProjScale    c4       1
					//   _AO_Radius           c5       1
					//   _AO_PowExponent      c6       1
					//   _AO_Bias             c7       1
					//   _AO_Multiplier       c8       1
					//   _AO_FadeParams       c9       1
					//   _AO_FadeValues       c10      1
					//   _CameraDepthTexture  s0       1
					//   _AO_RandomTexture    s1       1
					//
					
					    ps_3_0
					    def c11, 0.25, 0, 1, -1
					    def c12, 0.200000003, 0, 0.25, 0.5
					    def c13, 6.28318548, -3.14159274, 0.125, 1
					    defi i0, 4, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mov r0, c11
					    mul r1.xy, r0.x, c2.zwzw
					    mul r1.xy, r1, v0
					    mov r1.zw, c11.y
					    texldl r1, r1, s1
					    mul r2.xy, c1, v0
					    mov r2.zw, c11.y
					    texldl r2, r2, s0
					    mad r0.x, c0.z, r2.x, c0.w
					    rcp_pp r2.y, r0.x
					    mad r3.xy, v0.yxzw, c3.yxzw, c3.wzzw
					    mul r2.xz, r2.y, r3.xyyw
					    mad r3.xy, c2.x, r0.zyzw, v0
					    mul r4.xy, r3, c1
					    mov r4.zw, c11.y
					    texldl r4, r4, s0
					    mad r1.w, c0.z, r4.x, c0.w
					    rcp r4.x, r1.w
					    mad r3.xy, r3, c3, c3.zwzw
					    mul r4.yz, r4.x, r3.xxyw
					    mad r3.xy, c2.x, r0.wyzw, v0
					    mul r5.xy, r3, c1
					    mov r5.zw, c11.y
					    texldl r5, r5, s0
					    mad r1.w, c0.z, r5.x, c0.w
					    rcp r5.x, r1.w
					    mad r3.xy, r3, c3, c3.zwzw
					    mul r5.yz, r5.x, r3.xxyw
					    mad r3.xy, c2.yxzw, r0.zyzw, v0.yxzw
					    mul r6.xy, r3.yxzw, c1
					    mov r6.zw, c11.y
					    texldl r6, r6, s0
					    mad r0.z, c0.z, r6.x, c0.w
					    rcp r6.y, r0.z
					    mad r3.xy, r3, c3.yxzw, c3.wzzw
					    mul r6.xz, r6.y, r3.xyyw
					    mad r0.yz, c2.xyxw, r0.xwyw, v0.xyxw
					    mul r3.xy, r0.zyzw, c1
					    mov r3.zw, c11.y
					    texldl r3, r3, s0
					    mad r0.w, c0.z, r3.x, c0.w
					    rcp r3.y, r0.w
					    mad r0.yz, r0, c3.xyxw, c3.xwzw
					    mul r3.xz, r3.y, r0.yyzw
					    add r0.yzw, -r2.xyzx, r4.xxyz
					    add r4.xyz, r2.yzxw, -r5
					    add r5.xyz, -r2, r6
					    add r3.xyz, r2, -r3
					    dp3 r1.w, r0.yzww, r0.yzww
					    dp3 r2.w, r4, r4
					    add r1.w, r1.w, -r2.w
					    cmp r0.yzw, r1.w, r4.xxyz, r0
					    dp3 r1.w, r5, r5
					    dp3 r2.w, r3, r3
					    add r1.w, r1.w, -r2.w
					    cmp r3.xyz, r1.w, r3, r5
					    mul r4.xyz, r0.yzww, r3
					    mad r0.yzw, r0.xwyz, r3.xyzx, -r4.xxyz
					    nrm_pp r3.xyz, r0.yzww
					    add r0.y, r2.y, -c9.x
					    mul_sat r0.z, r0.y, c9.y
					    mov r4.x, c5.x
					    mov r4.y, c6.x
					    add r4.zw, -r4.xyxy, c10.xyyz
					    mul r0.zw, r0.z, r4
					    cmp r0.yz, r0.y, r0.xzww, c11.y
					    add r0.yz, r0, r4.xxyw
					    mul r0.w, r0.y, c4.x
					    mul r0.xy, r0, r0.wyzw
					    rcp r0.y, r0.y
					    mul r0.w, r0.x, c12.x
					    mad r0.w, r1.z, r0.w, c11.z
					    mov r4.zw, c11.y
					    mov r1.zw, c11.y
					    rep i0
					      mad r2.w, r1.w, c12.z, c12.w
					      frc r2.w, r2.w
					      mad r2.w, r2.w, c13.x, c13.y
					      sincos r5.xy, r2.w
					      mul r2.w, r1.y, r5.y
					      mad r6.x, r5.x, r1.x, -r2.w
					      dp2add r6.y, r5, r1.yxzw, c11.y
					      mov r5.x, r1.z
					      mov r5.y, r0.w
					      rep i0
					        mad r5.zw, r5.y, r6.xyxy, c12.w
					        frc r6.zw, r5
					        add r5.zw, r5, -r6
					        mad r5.zw, r5, c2.xyxy, v0.xyxy
					        mul r4.xy, r5.zwzw, c1
					        texldl r7, r4, s0
					        mad r2.w, c0.z, r7.x, c0.w
					        rcp r7.z, r2.w
					        mad r4.xy, r5.zwzw, c3, c3.zwzw
					        mul r7.xy, r7.z, r4
					        mad r5.y, r0.x, c12.x, r5.y
					        add r7.xyz, -r2.zxyw, r7
					        dp3 r2.w, r7, r7
					        dp3 r3.w, r3, r7
					        rsq r4.x, r2.w
					        mad_sat r3.w, r3.w, r4.x, -c7.x
					        mad_sat r2.w, r2.w, -r0.y, c11.z
					        mad r5.x, r3.w, r2.w, r5.x
					      endrep
					      mov r1.z, r5.x
					      add r1.w, r1.w, c11.z
					    endrep
					    mul r0.x, r1.z, c8.x
					    mad_sat r0.x, r0.x, -c13.z, c13.w
					    log r0.x, r0.x
					    mul r0.x, r0.x, r0.z
					    exp_sat_pp oC0.x, r0.x
					    mul_pp oC0.yzw, r2.y, c11.xzyy
					
					// approximately 136 instruction slots used (14 texture, 122 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[19];
						vec4 _AO_Buffer_PadScale;
						vec4 _AO_Buffer_TexelSize;
						vec4 unused_0_3;
						vec4 _AO_UVToView;
						vec4 unused_0_5;
						float _AO_HalfProjScale;
						float _AO_Radius;
						float _AO_PowExponent;
						float _AO_Bias;
						float _AO_Multiplier;
						vec2 _AO_FadeParams;
						vec3 _AO_FadeValues;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _AO_RandomTexture;
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					int u_xlati3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec2 u_xlat9;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat16;
					vec2 u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					vec2 u_xlat18;
					vec2 u_xlat19;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					float u_xlat23;
					float u_xlat24;
					bool u_xlatb24;
					float u_xlat25;
					void main()
					{
					    u_xlat0.xy = _AO_Buffer_TexelSize.zw * vec2(0.25, 0.25);
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0 = textureLod(_AO_RandomTexture, u_xlat0.xy, 0.0);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _AO_Buffer_PadScale.xy;
					    u_xlat1 = textureLod(_CameraDepthTexture, u_xlat1.xy, 0.0);
					    u_xlat21 = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.y = float(1.0) / u_xlat21;
					    u_xlat2.xy = vs_TEXCOORD0.yx * _AO_UVToView.yx + _AO_UVToView.wz;
					    u_xlat1.xz = u_xlat1.yy * u_xlat2.xy;
					    u_xlat9.x = _AO_Buffer_TexelSize.x;
					    u_xlat9.y = 0.0;
					    u_xlat2.xy = u_xlat9.xy + vs_TEXCOORD0.xy;
					    u_xlat16.xy = u_xlat2.xy * _AO_Buffer_PadScale.xy;
					    u_xlat3 = textureLod(_CameraDepthTexture, u_xlat16.xy, 0.0);
					    u_xlat21 = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat21;
					    u_xlat2.xy = u_xlat2.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					    u_xlat3.yz = u_xlat3.xx * u_xlat2.xy;
					    u_xlat9.x = (-_AO_Buffer_TexelSize.x);
					    u_xlat9.y = 0.0;
					    u_xlat2.xy = u_xlat9.xy + vs_TEXCOORD0.xy;
					    u_xlat16.xy = u_xlat2.xy * _AO_Buffer_PadScale.xy;
					    u_xlat4 = textureLod(_CameraDepthTexture, u_xlat16.xy, 0.0);
					    u_xlat21 = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat21;
					    u_xlat2.xy = u_xlat2.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					    u_xlat4.yz = u_xlat4.xx * u_xlat2.xy;
					    u_xlat2.z = 0.0;
					    u_xlat2.x = _AO_Buffer_TexelSize.y;
					    u_xlat2.xy = u_xlat2.xz + vs_TEXCOORD0.yx;
					    u_xlat16.xy = u_xlat2.yx * _AO_Buffer_PadScale.xy;
					    u_xlat5 = textureLod(_CameraDepthTexture, u_xlat16.xy, 0.0);
					    u_xlat21 = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.y = float(1.0) / u_xlat21;
					    u_xlat2.xy = u_xlat2.xy * _AO_UVToView.yx + _AO_UVToView.wz;
					    u_xlat5.xz = u_xlat5.yy * u_xlat2.xy;
					    u_xlat2.z = 0.0;
					    u_xlat2.x = (-_AO_Buffer_TexelSize.y);
					    u_xlat2.xy = u_xlat2.xz + vs_TEXCOORD0.yx;
					    u_xlat16.xy = u_xlat2.yx * _AO_Buffer_PadScale.xy;
					    u_xlat6 = textureLod(_CameraDepthTexture, u_xlat16.xy, 0.0);
					    u_xlat21 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.y = float(1.0) / u_xlat21;
					    u_xlat2.xy = u_xlat2.xy * _AO_UVToView.yx + _AO_UVToView.wz;
					    u_xlat6.xz = u_xlat6.yy * u_xlat2.xy;
					    u_xlat2.xyz = (-u_xlat1.yzx) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = (-u_xlat1.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.xyz + (-u_xlat6.xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb21 = u_xlat21<u_xlat22;
					    u_xlat2.xyz = (bool(u_xlatb21)) ? u_xlat2.xyz : u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlatb21 = u_xlat21<u_xlat22;
					    u_xlat3.xyz = (bool(u_xlatb21)) ? u_xlat4.xyz : u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat21 = u_xlat1.y + (-_AO_FadeParams.xxyx.y);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = u_xlat21 * _AO_FadeParams.xxyx.z;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat3.xy = (-vec2(_AO_Radius, _AO_PowExponent)) + _AO_FadeValues.yz;
					    u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy + vec2(_AO_Radius, _AO_PowExponent);
					    u_xlat21 = u_xlat3.x * _AO_HalfProjScale;
					    u_xlat22 = u_xlat3.x * u_xlat3.x;
					    u_xlat22 = -1.0 / u_xlat22;
					    u_xlat21 = u_xlat21 / u_xlat1.y;
					    u_xlat23 = u_xlat21 * 0.200000003;
					    u_xlat14 = u_xlat0.z * u_xlat23 + 1.0;
					    u_xlat23 = 0.0;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<4 ; u_xlati_loop_1++)
					    {
					        u_xlat17.x = float(u_xlati_loop_1);
					        u_xlat17.x = u_xlat17.x * 1.57079637;
					        u_xlat4.x = sin(u_xlat17.x);
					        u_xlat5.x = cos(u_xlat17.x);
					        u_xlat17.xy = u_xlat0.yx * u_xlat4.xx;
					        u_xlat4.x = u_xlat5.x * u_xlat0.x + (-u_xlat17.x);
					        u_xlat4.y = u_xlat5.x * u_xlat0.y + u_xlat17.y;
					        u_xlat5.x = u_xlat23;
					        u_xlat12 = u_xlat14;
					        for(int u_xlati_loop_2 = 0 ; u_xlati_loop_2<4 ; u_xlati_loop_2++)
					        {
					            u_xlat18.xy = u_xlat4.xy * vec2(u_xlat12);
					            u_xlat18.xy = roundEven(u_xlat18.xy);
					            u_xlat18.xy = u_xlat18.xy * _AO_Buffer_TexelSize.xy + vs_TEXCOORD0.xy;
					            u_xlat19.xy = u_xlat18.xy * _AO_Buffer_PadScale.xy;
					            u_xlat6 = textureLod(_CameraDepthTexture, u_xlat19.xy, 0.0);
					            u_xlat24 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					            u_xlat6.z = float(1.0) / u_xlat24;
					            u_xlat18.xy = u_xlat18.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					            u_xlat6.xy = u_xlat6.zz * u_xlat18.xy;
					            u_xlat12 = u_xlat21 * 0.200000003 + u_xlat12;
					            u_xlat6.xyz = (-u_xlat1.zxy) + u_xlat6.xyz;
					            u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat18.x = dot(u_xlat2.xyz, u_xlat6.xyz);
					            u_xlat25 = inversesqrt(u_xlat24);
					            u_xlat18.x = u_xlat18.x * u_xlat25 + (-_AO_Bias);
					            u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
					            u_xlat24 = u_xlat24 * u_xlat22 + 1.0;
					            u_xlat24 = max(u_xlat24, 0.0);
					            u_xlat5.x = u_xlat18.x * u_xlat24 + u_xlat5.x;
					        }
					        u_xlat23 = u_xlat5.x;
					    }
					    u_xlat0.x = u_xlat23 * _AO_Multiplier;
					    u_xlat0.x = (-u_xlat0.x) * 0.125 + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat3.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    SV_Target0.x = min(u_xlat0.x, 1.0);
					    SV_Target0.y = u_xlat1.y;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1387891
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AO_Bias;
					//   float4 _AO_Buffer_PadScale;
					//   float4 _AO_Buffer_TexelSize;
					//   float2 _AO_FadeParams;
					//   float3 _AO_FadeValues;
					//   float _AO_HalfProjScale;
					//   float _AO_Multiplier;
					//   float _AO_PowExponent;
					//   float _AO_Radius;
					//   sampler2D _AO_RandomTexture;
					//   float4 _AO_UVToView;
					//   sampler2D _CameraDepthNormalsTexture;
					//   sampler2D _CameraDepthTexture;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   _ZBufferParams             c0       1
					//   _AO_Buffer_PadScale        c1       1
					//   _AO_Buffer_TexelSize       c2       1
					//   _AO_UVToView               c3       1
					//   _AO_HalfProjScale          c4       1
					//   _AO_Radius                 c5       1
					//   _AO_PowExponent            c6       1
					//   _AO_Bias                   c7       1
					//   _AO_Multiplier             c8       1
					//   _AO_FadeParams             c9       1
					//   _AO_FadeValues             c10      1
					//   _CameraDepthTexture        s0       1
					//   _CameraDepthNormalsTexture s1       1
					//   _AO_RandomTexture          s2       1
					//
					
					    ps_3_0
					    def c11, 3.55539989, 0, -1.77769995, 1
					    def c12, 0.200000003, 1, -1, 0
					    def c13, 0.25, 0.5, 6.28318548, -3.14159274
					    def c14, 0.25, 0, 2, -1
					    def c15, 0.125, 1, 0, 0
					    defi i0, 4, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mov r0.xzw, c14.xyyy
					    mul r0.xy, r0.x, c2.zwzw
					    mul r0.xy, r0, v0
					    texldl r0, r0, s2
					    mul r1.xy, c1, v0
					    mov r1.zw, c14.y
					    texldl r2, r1, s0
					    mad r0.w, c0.z, r2.x, c0.w
					    rcp_pp r2.z, r0.w
					    mad r1.zw, v0.xyxy, c3.xyxy, c3
					    mul r2.xy, r2.z, r1.zwzw
					    texld r1, r1, s1
					    mad r1.xyz, r1, c11.xxyw, c11.zzww
					    dp3 r1.z, r1, r1
					    rcp r1.z, r1.z
					    add r1.w, r1.z, r1.z
					    mul_pp r3.xy, r1, r1.w
					    mad_pp r3.z, r1.z, c14.z, c14.w
					    add r1.x, r2.z, -c9.x
					    mul_sat r1.y, r1.x, c9.y
					    mov r4.x, c5.x
					    mov r4.y, c6.x
					    add r1.zw, -r4.xyxy, c10.xyyz
					    mul r1.yz, r1.xzww, r1.y
					    cmp r1.xy, r1.x, r1.yzzw, c14.y
					    add r1.xy, r1, r4
					    mul r1.z, r1.x, c4.x
					    mul r1.x, r1.x, r1.x
					    rcp r1.x, r1.x
					    mul r0.w, r0.w, r1.z
					    mul r1.z, r0.w, c12.x
					    mad r0.z, r0.z, r1.z, -c14.w
					    mov r4.zw, c14.y
					    mul_pp r3.xyz, r3, c12.yzzw
					    mov r1.zw, c14.y
					    rep i0
					      mad r2.w, r1.w, c13.x, c13.y
					      frc r2.w, r2.w
					      mad r2.w, r2.w, c13.z, c13.w
					      sincos r5.xy, r2.w
					      mul r2.w, r0.y, r5.y
					      mad r6.x, r5.x, r0.x, -r2.w
					      dp2add r6.y, r5, r0.yxzw, c14.y
					      mov r5.x, r1.z
					      mov r5.y, r0.z
					      rep i0
					        mad r5.zw, r5.y, r6.xyxy, c13.y
					        frc r6.zw, r5
					        add r5.zw, r5, -r6
					        mad r5.zw, r5, c2.xyxy, v0.xyxy
					        mul r4.xy, r5.zwzw, c1
					        texldl r7, r4, s0
					        mad r2.w, c0.z, r7.x, c0.w
					        rcp r7.z, r2.w
					        mad r4.xy, r5.zwzw, c3, c3.zwzw
					        mul r7.xy, r7.z, r4
					        mad r5.y, r0.w, c12.x, r5.y
					        add r7.xyz, -r2, r7
					        dp3 r2.w, r7, r7
					        dp3 r3.w, r3, r7
					        rsq r4.x, r2.w
					        mad_sat r3.w, r3.w, r4.x, -c7.x
					        mad_sat r2.w, r2.w, -r1.x, -c14.w
					        mad r5.x, r3.w, r2.w, r5.x
					      endrep
					      mov r1.z, r5.x
					      add r1.w, r1.w, -c14.w
					    endrep
					    mul r0.x, r1.z, c8.x
					    mad_sat r0.x, r0.x, -c15.x, c15.y
					    log r0.x, r0.x
					    mul r0.x, r0.x, r1.y
					    exp_sat_pp oC0.x, r0.x
					    mul_pp oC0.yzw, r2.z, c14_abs.xwyy
					
					// approximately 91 instruction slots used (7 texture, 84 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[19];
						vec4 _AO_Buffer_PadScale;
						vec4 _AO_Buffer_TexelSize;
						vec4 unused_0_3;
						vec4 _AO_UVToView;
						vec4 unused_0_5;
						float _AO_HalfProjScale;
						float _AO_Radius;
						float _AO_PowExponent;
						float _AO_Bias;
						float _AO_Multiplier;
						vec2 _AO_FadeParams;
						vec3 _AO_FadeValues;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _AO_RandomTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _CameraDepthNormalsTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec2 u_xlat3;
					int u_xlati3;
					vec2 u_xlat4;
					float u_xlat5;
					vec4 u_xlat6;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat15;
					vec2 u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					vec2 u_xlat18;
					vec2 u_xlat19;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					float u_xlat24;
					bool u_xlatb24;
					float u_xlat25;
					void main()
					{
					    u_xlat0.xy = _AO_Buffer_TexelSize.zw * vec2(0.25, 0.25);
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0 = textureLod(_AO_RandomTexture, u_xlat0.xy, 0.0);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _AO_Buffer_PadScale.xy;
					    u_xlat2 = textureLod(_CameraDepthTexture, u_xlat1.xy, 0.0);
					    u_xlat21 = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
					    u_xlat2.z = float(1.0) / u_xlat21;
					    u_xlat15.xy = vs_TEXCOORD0.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					    u_xlat2.xy = u_xlat2.zz * u_xlat15.xy;
					    u_xlat1 = texture(_CameraDepthNormalsTexture, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = 2.0 / u_xlat21;
					    u_xlat1.xy = u_xlat1.xy * vec2(u_xlat21);
					    u_xlat1.z = u_xlat21 + -1.0;
					    u_xlat21 = u_xlat2.z + (-_AO_FadeParams.xxyx.y);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = u_xlat21 * _AO_FadeParams.xxyx.z;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat3.xy = (-vec2(_AO_Radius, _AO_PowExponent)) + _AO_FadeValues.yz;
					    u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy + vec2(_AO_Radius, _AO_PowExponent);
					    u_xlat21 = u_xlat3.x * _AO_HalfProjScale;
					    u_xlat22 = u_xlat3.x * u_xlat3.x;
					    u_xlat22 = -1.0 / u_xlat22;
					    u_xlat21 = u_xlat21 / u_xlat2.z;
					    u_xlat23 = u_xlat21 * 0.200000003;
					    u_xlat14 = u_xlat0.z * u_xlat23 + 1.0;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.0, -1.0, -1.0);
					    u_xlat23 = 0.0;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<4 ; u_xlati_loop_1++)
					    {
					        u_xlat17.x = float(u_xlati_loop_1);
					        u_xlat17.x = u_xlat17.x * 1.57079637;
					        u_xlat4.x = sin(u_xlat17.x);
					        u_xlat5 = cos(u_xlat17.x);
					        u_xlat17.xy = u_xlat0.yx * u_xlat4.xx;
					        u_xlat4.x = u_xlat5 * u_xlat0.x + (-u_xlat17.x);
					        u_xlat4.y = u_xlat5 * u_xlat0.y + u_xlat17.y;
					        u_xlat5 = u_xlat23;
					        u_xlat12 = u_xlat14;
					        for(int u_xlati_loop_2 = 0 ; u_xlati_loop_2<4 ; u_xlati_loop_2++)
					        {
					            u_xlat18.xy = u_xlat4.xy * vec2(u_xlat12);
					            u_xlat18.xy = roundEven(u_xlat18.xy);
					            u_xlat18.xy = u_xlat18.xy * _AO_Buffer_TexelSize.xy + vs_TEXCOORD0.xy;
					            u_xlat19.xy = u_xlat18.xy * _AO_Buffer_PadScale.xy;
					            u_xlat6 = textureLod(_CameraDepthTexture, u_xlat19.xy, 0.0);
					            u_xlat24 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					            u_xlat6.z = float(1.0) / u_xlat24;
					            u_xlat18.xy = u_xlat18.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					            u_xlat6.xy = u_xlat6.zz * u_xlat18.xy;
					            u_xlat12 = u_xlat21 * 0.200000003 + u_xlat12;
					            u_xlat6.xyz = (-u_xlat2.xyz) + u_xlat6.xyz;
					            u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat18.x = dot(u_xlat1.xyz, u_xlat6.xyz);
					            u_xlat25 = inversesqrt(u_xlat24);
					            u_xlat18.x = u_xlat18.x * u_xlat25 + (-_AO_Bias);
					            u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
					            u_xlat24 = u_xlat24 * u_xlat22 + 1.0;
					            u_xlat24 = max(u_xlat24, 0.0);
					            u_xlat5 = u_xlat18.x * u_xlat24 + u_xlat5;
					        }
					        u_xlat23 = u_xlat5;
					    }
					    u_xlat0.x = u_xlat23 * _AO_Multiplier;
					    u_xlat0.x = (-u_xlat0.x) * 0.125 + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat3.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    SV_Target0.x = min(u_xlat0.x, 1.0);
					    SV_Target0.y = u_xlat2.z;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1457879
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AO_Bias;
					//   float4 _AO_Buffer_PadScale;
					//   float4 _AO_Buffer_TexelSize;
					//   row_major float4x4 _AO_CameraView;
					//   float2 _AO_FadeParams;
					//   float3 _AO_FadeValues;
					//   float _AO_HalfProjScale;
					//   float _AO_Multiplier;
					//   float _AO_PowExponent;
					//   float _AO_Radius;
					//   sampler2D _AO_RandomTexture;
					//   float4 _AO_UVToView;
					//   sampler2D _CameraDepthTexture;
					//   sampler2D _CameraGBufferTexture2;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                   Reg   Size
					//   ---------------------- ----- ----
					//   _AO_CameraView         c0       3
					//   _ZBufferParams         c3       1
					//   _AO_Buffer_PadScale    c4       1
					//   _AO_Buffer_TexelSize   c5       1
					//   _AO_UVToView           c6       1
					//   _AO_HalfProjScale      c7       1
					//   _AO_Radius             c8       1
					//   _AO_PowExponent        c9       1
					//   _AO_Bias               c10      1
					//   _AO_Multiplier         c11      1
					//   _AO_FadeParams         c12      1
					//   _AO_FadeValues         c13      1
					//   _CameraGBufferTexture2 s0       1
					//   _CameraDepthTexture    s1       1
					//   _AO_RandomTexture      s2       1
					//
					
					    ps_3_0
					    def c14, 0.25, 0, 2, -1
					    def c15, 0.200000003, 1, -1, 0
					    def c16, 0.25, 0.5, 6.28318548, -3.14159274
					    def c17, 0.125, 1, 0, 0
					    defi i0, 4, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mov r0.xzw, c14.xyyy
					    mul r0.xy, r0.x, c5.zwzw
					    mul r0.xy, r0, v0
					    texldl r0, r0, s2
					    mul r1.xy, c4, v0
					    mov r1.zw, c14.y
					    texldl r2, r1, s1
					    mad r0.w, c3.z, r2.x, c3.w
					    rcp_pp r2.z, r0.w
					    mad r1.zw, v0.xyxy, c6.xyxy, c6
					    mul r2.xy, r2.z, r1.zwzw
					    texld_pp r1, r1, s0
					    mad_pp r1.xyz, r1, c14.z, c14.w
					    dp3 r3.x, c0, r1
					    dp3 r3.y, c1, r1
					    dp3 r3.z, c2, r1
					    nrm_pp r1.xyz, r3
					    add r1.w, r2.z, -c12.x
					    mul_sat r2.w, r1.w, c12.y
					    mov r3.x, c8.x
					    mov r3.y, c9.x
					    add r3.zw, -r3.xyxy, c13.xyyz
					    mul r3.zw, r2.w, r3
					    cmp r3.zw, r1.w, r3, c14.y
					    add r3.xy, r3.zwzw, r3
					    mul r1.w, r3.x, c7.x
					    mul r2.w, r3.x, r3.x
					    rcp r2.w, r2.w
					    mul r0.w, r0.w, r1.w
					    mul r1.w, r0.w, c15.x
					    mad r0.z, r0.z, r1.w, -c14.w
					    mov r4.zw, c14.y
					    mul_pp r1.xyz, r1, c15.yzzw
					    mov r1.w, c14.y
					    mov r3.x, c14.y
					    rep i0
					      mad r3.z, r3.x, c16.x, c16.y
					      frc r3.z, r3.z
					      mad r3.z, r3.z, c16.z, c16.w
					      sincos r5.xy, r3.z
					      mul r3.z, r0.y, r5.y
					      mad r6.x, r5.x, r0.x, -r3.z
					      dp2add r6.y, r5, r0.yxzw, c14.y
					      mov r5.x, r1.w
					      mov r5.y, r0.z
					      rep i0
					        mad r3.zw, r5.y, r6.xyxy, c16.y
					        frc r5.zw, r3
					        add r3.zw, r3, -r5
					        mad r3.zw, r3, c5.xyxy, v0.xyxy
					        mul r4.xy, r3.zwzw, c4
					        texldl r7, r4, s1
					        mad r4.x, c3.z, r7.x, c3.w
					        rcp r7.z, r4.x
					        mad r3.zw, r3, c6.xyxy, c6
					        mul r7.xy, r7.z, r3.zwzw
					        mad r5.y, r0.w, c15.x, r5.y
					        add r7.xyz, -r2, r7
					        dp3 r3.z, r7, r7
					        dp3 r3.w, r1, r7
					        rsq r4.x, r3.z
					        mad_sat r3.w, r3.w, r4.x, -c10.x
					        mad_sat r3.z, r3.z, -r2.w, -c14.w
					        mad r5.x, r3.w, r3.z, r5.x
					      endrep
					      mov r1.w, r5.x
					      add r3.x, r3.x, -c14.w
					    endrep
					    mul r0.x, r1.w, c11.x
					    mad_sat r0.x, r0.x, -c17.x, c17.y
					    log r0.x, r0.x
					    mul r0.x, r0.x, r3.y
					    exp_sat_pp oC0.x, r0.x
					    mul_pp oC0.yzw, r2.z, c14_abs.xwyy
					
					// approximately 93 instruction slots used (7 texture, 86 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						mat4x4 _AO_CameraView;
						vec4 unused_0_2[8];
						vec4 _AO_Buffer_PadScale;
						vec4 _AO_Buffer_TexelSize;
						vec4 unused_0_5;
						vec4 _AO_UVToView;
						vec4 unused_0_7;
						float _AO_HalfProjScale;
						float _AO_Radius;
						float _AO_PowExponent;
						float _AO_Bias;
						float _AO_Multiplier;
						vec2 _AO_FadeParams;
						vec3 _AO_FadeValues;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _AO_RandomTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _CameraGBufferTexture2;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati3;
					vec2 u_xlat4;
					float u_xlat5;
					vec4 u_xlat6;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat15;
					vec2 u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					vec2 u_xlat18;
					vec2 u_xlat19;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					float u_xlat24;
					bool u_xlatb24;
					float u_xlat25;
					void main()
					{
					    u_xlat0.xy = _AO_Buffer_TexelSize.zw * vec2(0.25, 0.25);
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0 = textureLod(_AO_RandomTexture, u_xlat0.xy, 0.0);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _AO_Buffer_PadScale.xy;
					    u_xlat2 = textureLod(_CameraDepthTexture, u_xlat1.xy, 0.0);
					    u_xlat21 = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
					    u_xlat2.z = float(1.0) / u_xlat21;
					    u_xlat15.xy = vs_TEXCOORD0.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					    u_xlat2.xy = u_xlat2.zz * u_xlat15.xy;
					    u_xlat1 = texture(_CameraGBufferTexture2, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = u_xlat1.yyy * _AO_CameraView[1].xyz;
					    u_xlat1.xyw = _AO_CameraView[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = _AO_CameraView[2].xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = u_xlat2.z + (-_AO_FadeParams.xxyx.y);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = u_xlat21 * _AO_FadeParams.xxyx.z;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat3.xy = (-vec2(_AO_Radius, _AO_PowExponent)) + _AO_FadeValues.yz;
					    u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy + vec2(_AO_Radius, _AO_PowExponent);
					    u_xlat21 = u_xlat3.x * _AO_HalfProjScale;
					    u_xlat22 = u_xlat3.x * u_xlat3.x;
					    u_xlat22 = -1.0 / u_xlat22;
					    u_xlat21 = u_xlat21 / u_xlat2.z;
					    u_xlat23 = u_xlat21 * 0.200000003;
					    u_xlat14 = u_xlat0.z * u_xlat23 + 1.0;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.0, -1.0, -1.0);
					    u_xlat23 = 0.0;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<4 ; u_xlati_loop_1++)
					    {
					        u_xlat17.x = float(u_xlati_loop_1);
					        u_xlat17.x = u_xlat17.x * 1.57079637;
					        u_xlat4.x = sin(u_xlat17.x);
					        u_xlat5 = cos(u_xlat17.x);
					        u_xlat17.xy = u_xlat0.yx * u_xlat4.xx;
					        u_xlat4.x = u_xlat5 * u_xlat0.x + (-u_xlat17.x);
					        u_xlat4.y = u_xlat5 * u_xlat0.y + u_xlat17.y;
					        u_xlat5 = u_xlat23;
					        u_xlat12 = u_xlat14;
					        for(int u_xlati_loop_2 = 0 ; u_xlati_loop_2<4 ; u_xlati_loop_2++)
					        {
					            u_xlat18.xy = u_xlat4.xy * vec2(u_xlat12);
					            u_xlat18.xy = roundEven(u_xlat18.xy);
					            u_xlat18.xy = u_xlat18.xy * _AO_Buffer_TexelSize.xy + vs_TEXCOORD0.xy;
					            u_xlat19.xy = u_xlat18.xy * _AO_Buffer_PadScale.xy;
					            u_xlat6 = textureLod(_CameraDepthTexture, u_xlat19.xy, 0.0);
					            u_xlat24 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					            u_xlat6.z = float(1.0) / u_xlat24;
					            u_xlat18.xy = u_xlat18.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					            u_xlat6.xy = u_xlat6.zz * u_xlat18.xy;
					            u_xlat12 = u_xlat21 * 0.200000003 + u_xlat12;
					            u_xlat6.xyz = (-u_xlat2.xyz) + u_xlat6.xyz;
					            u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat18.x = dot(u_xlat1.xyz, u_xlat6.xyz);
					            u_xlat25 = inversesqrt(u_xlat24);
					            u_xlat18.x = u_xlat18.x * u_xlat25 + (-_AO_Bias);
					            u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
					            u_xlat24 = u_xlat24 * u_xlat22 + 1.0;
					            u_xlat24 = max(u_xlat24, 0.0);
					            u_xlat5 = u_xlat18.x * u_xlat24 + u_xlat5;
					        }
					        u_xlat23 = u_xlat5;
					    }
					    u_xlat0.x = u_xlat23 * _AO_Multiplier;
					    u_xlat0.x = (-u_xlat0.x) * 0.125 + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat3.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    SV_Target0.x = min(u_xlat0.x, 1.0);
					    SV_Target0.y = u_xlat2.z;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1558943
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AO_Bias;
					//   float4 _AO_Buffer_PadScale;
					//   float4 _AO_Buffer_TexelSize;
					//   row_major float4x4 _AO_CameraView;
					//   float2 _AO_FadeParams;
					//   float3 _AO_FadeValues;
					//   float _AO_HalfProjScale;
					//   float _AO_Multiplier;
					//   float _AO_PowExponent;
					//   float _AO_Radius;
					//   sampler2D _AO_RandomTexture;
					//   float4 _AO_UVToView;
					//   sampler2D _CameraDepthTexture;
					//   sampler2D _CameraGBufferTexture2;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                   Reg   Size
					//   ---------------------- ----- ----
					//   _AO_CameraView         c0       3
					//   _ZBufferParams         c3       1
					//   _AO_Buffer_PadScale    c4       1
					//   _AO_Buffer_TexelSize   c5       1
					//   _AO_UVToView           c6       1
					//   _AO_HalfProjScale      c7       1
					//   _AO_Radius             c8       1
					//   _AO_PowExponent        c9       1
					//   _AO_Bias               c10      1
					//   _AO_Multiplier         c11      1
					//   _AO_FadeParams         c12      1
					//   _AO_FadeValues         c13      1
					//   _CameraGBufferTexture2 s0       1
					//   _CameraDepthTexture    s1       1
					//   _AO_RandomTexture      s2       1
					//
					
					    ps_3_0
					    def c14, 0.200000003, 1, -1, 0
					    def c15, 0.25, 0.5, 6.28318548, -3.14159274
					    def c16, 0.25, 0, 2, -1
					    def c17, 0.125, 1, 0, 0
					    defi i0, 4, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mov r0.xzw, c16.xyyy
					    mul r0.xy, r0.x, c5.zwzw
					    mul r0.xy, r0, v0
					    texldl r0, r0, s2
					    mul r1.xy, c4, v0
					    mov r1.zw, c16.y
					    texldl r2, r1, s1
					    mad r0.w, c3.z, r2.x, c3.w
					    rcp_pp r2.z, r0.w
					    mad r1.zw, v0.xyxy, c6.xyxy, c6
					    mul r2.xy, r2.z, r1.zwzw
					    texld_pp r1, r1, s0
					    mad_pp r1.xyz, r1, c16.z, c16.w
					    add r1.w, r1.w, c16.w
					    add r3.xyz, -r1_abs.xyxw, -c16.w
					    add_pp r4.z, -r1_abs.y, r3.x
					    cmp_pp r3.xw, -r1.xyzy, c16_abs.y, c16_abs.w
					    cmp_pp r5.xy, r1, -c16_abs.y, -c16_abs.w
					    add r3.xw, r3, r5.xyzy
					    mul_pp r3.xy, r3.xwzw, r3.yzzw
					    cmp_pp r4.xy, r4.z, r1, r3
					    cmp r1.xyz, r1.w, r1, r4
					    dp3 r3.x, c0, r1
					    dp3 r3.y, c1, r1
					    dp3 r3.z, c2, r1
					    nrm_pp r1.xyz, r3
					    add r1.w, r2.z, -c12.x
					    mul_sat r2.w, r1.w, c12.y
					    mov r3.x, c8.x
					    mov r3.y, c9.x
					    add r3.zw, -r3.xyxy, c13.xyyz
					    mul r3.zw, r2.w, r3
					    cmp r3.zw, r1.w, r3, c16.y
					    add r3.xy, r3.zwzw, r3
					    mul r1.w, r3.x, c7.x
					    mul r2.w, r3.x, r3.x
					    rcp r2.w, r2.w
					    mul r0.w, r0.w, r1.w
					    mul r1.w, r0.w, c14.x
					    mad r0.z, r0.z, r1.w, -c16.w
					    mov r4.zw, c16.y
					    mul_pp r1.xyz, r1, c14.yzzw
					    mov r1.w, c16.y
					    mov r3.x, c16.y
					    rep i0
					      mad r3.z, r3.x, c15.x, c15.y
					      frc r3.z, r3.z
					      mad r3.z, r3.z, c15.z, c15.w
					      sincos r5.xy, r3.z
					      mul r3.z, r0.y, r5.y
					      mad r6.x, r5.x, r0.x, -r3.z
					      dp2add r6.y, r5, r0.yxzw, c16.y
					      mov r5.x, r1.w
					      mov r5.y, r0.z
					      rep i0
					        mad r3.zw, r5.y, r6.xyxy, c15.y
					        frc r5.zw, r3
					        add r3.zw, r3, -r5
					        mad r3.zw, r3, c5.xyxy, v0.xyxy
					        mul r4.xy, r3.zwzw, c4
					        texldl r7, r4, s1
					        mad r4.x, c3.z, r7.x, c3.w
					        rcp r7.z, r4.x
					        mad r3.zw, r3, c6.xyxy, c6
					        mul r7.xy, r7.z, r3.zwzw
					        mad r5.y, r0.w, c14.x, r5.y
					        add r7.xyz, -r2, r7
					        dp3 r3.z, r7, r7
					        dp3 r3.w, r1, r7
					        rsq r4.x, r3.z
					        mad_sat r3.w, r3.w, r4.x, -c10.x
					        mad_sat r3.z, r3.z, -r2.w, -c16.w
					        mad r5.x, r3.w, r3.z, r5.x
					      endrep
					      mov r1.w, r5.x
					      add r3.x, r3.x, -c16.w
					    endrep
					    mul r0.x, r1.w, c11.x
					    mad_sat r0.x, r0.x, -c17.x, c17.y
					    log r0.x, r0.x
					    mul r0.x, r0.x, r3.y
					    exp_sat_pp oC0.x, r0.x
					    mul_pp oC0.yzw, r2.z, c16_abs.xwyy
					
					// approximately 102 instruction slots used (7 texture, 95 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						mat4x4 _AO_CameraView;
						vec4 unused_0_2[8];
						vec4 _AO_Buffer_PadScale;
						vec4 _AO_Buffer_TexelSize;
						vec4 unused_0_5;
						vec4 _AO_UVToView;
						vec4 unused_0_7;
						float _AO_HalfProjScale;
						float _AO_Radius;
						float _AO_PowExponent;
						float _AO_Bias;
						float _AO_Multiplier;
						vec2 _AO_FadeParams;
						vec3 _AO_FadeValues;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _AO_RandomTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _CameraGBufferTexture2;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					ivec4 u_xlati3;
					vec3 u_xlat4;
					float u_xlat5;
					ivec2 u_xlati5;
					vec4 u_xlat6;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat15;
					vec2 u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					vec2 u_xlat18;
					vec2 u_xlat19;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					bool u_xlatb22;
					float u_xlat23;
					float u_xlat24;
					bool u_xlatb24;
					float u_xlat25;
					void main()
					{
					    u_xlat0.xy = _AO_Buffer_TexelSize.zw * vec2(0.25, 0.25);
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0 = textureLod(_AO_RandomTexture, u_xlat0.xy, 0.0);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _AO_Buffer_PadScale.xy;
					    u_xlat2 = textureLod(_CameraDepthTexture, u_xlat1.xy, 0.0);
					    u_xlat21 = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
					    u_xlat2.z = float(1.0) / u_xlat21;
					    u_xlat15.xy = vs_TEXCOORD0.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					    u_xlat2.xy = u_xlat2.zz * u_xlat15.xy;
					    u_xlat1 = texture(_CameraGBufferTexture2, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlatb21 = u_xlat1.w<1.0;
					    u_xlat3.xyz = -abs(u_xlat1.xyx) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.z = -abs(u_xlat1.y) + u_xlat3.x;
					    u_xlatb22 = u_xlat4.z>=0.0;
					    u_xlati3.xw = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat1.xxxy).xw) * 0xFFFFFFFFu);
					    u_xlati5.xy = ivec2(uvec2(lessThan(u_xlat1.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					    u_xlati3.xw = (-u_xlati3.xw) + u_xlati5.xy;
					    u_xlat3.xw = vec2(u_xlati3.xw);
					    u_xlat3.xy = u_xlat3.xw * u_xlat3.yz;
					    u_xlat4.xy = (bool(u_xlatb22)) ? u_xlat1.xy : u_xlat3.xy;
					    u_xlat1.xyz = (bool(u_xlatb21)) ? u_xlat4.xyz : u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * _AO_CameraView[1].xyz;
					    u_xlat1.xyw = _AO_CameraView[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = _AO_CameraView[2].xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = u_xlat2.z + (-_AO_FadeParams.xxyx.y);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = u_xlat21 * _AO_FadeParams.xxyx.z;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat3.xy = (-vec2(_AO_Radius, _AO_PowExponent)) + _AO_FadeValues.yz;
					    u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy + vec2(_AO_Radius, _AO_PowExponent);
					    u_xlat21 = u_xlat3.x * _AO_HalfProjScale;
					    u_xlat22 = u_xlat3.x * u_xlat3.x;
					    u_xlat22 = -1.0 / u_xlat22;
					    u_xlat21 = u_xlat21 / u_xlat2.z;
					    u_xlat23 = u_xlat21 * 0.200000003;
					    u_xlat14 = u_xlat0.z * u_xlat23 + 1.0;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.0, -1.0, -1.0);
					    u_xlat23 = 0.0;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<4 ; u_xlati_loop_1++)
					    {
					        u_xlat17.x = float(u_xlati_loop_1);
					        u_xlat17.x = u_xlat17.x * 1.57079637;
					        u_xlat4.x = sin(u_xlat17.x);
					        u_xlat5 = cos(u_xlat17.x);
					        u_xlat17.xy = u_xlat0.yx * u_xlat4.xx;
					        u_xlat4.x = u_xlat5 * u_xlat0.x + (-u_xlat17.x);
					        u_xlat4.y = u_xlat5 * u_xlat0.y + u_xlat17.y;
					        u_xlat5 = u_xlat23;
					        u_xlat12 = u_xlat14;
					        for(int u_xlati_loop_2 = 0 ; u_xlati_loop_2<4 ; u_xlati_loop_2++)
					        {
					            u_xlat18.xy = u_xlat4.xy * vec2(u_xlat12);
					            u_xlat18.xy = roundEven(u_xlat18.xy);
					            u_xlat18.xy = u_xlat18.xy * _AO_Buffer_TexelSize.xy + vs_TEXCOORD0.xy;
					            u_xlat19.xy = u_xlat18.xy * _AO_Buffer_PadScale.xy;
					            u_xlat6 = textureLod(_CameraDepthTexture, u_xlat19.xy, 0.0);
					            u_xlat24 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					            u_xlat6.z = float(1.0) / u_xlat24;
					            u_xlat18.xy = u_xlat18.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					            u_xlat6.xy = u_xlat6.zz * u_xlat18.xy;
					            u_xlat12 = u_xlat21 * 0.200000003 + u_xlat12;
					            u_xlat6.xyz = (-u_xlat2.xyz) + u_xlat6.xyz;
					            u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat18.x = dot(u_xlat1.xyz, u_xlat6.xyz);
					            u_xlat25 = inversesqrt(u_xlat24);
					            u_xlat18.x = u_xlat18.x * u_xlat25 + (-_AO_Bias);
					            u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
					            u_xlat24 = u_xlat24 * u_xlat22 + 1.0;
					            u_xlat24 = max(u_xlat24, 0.0);
					            u_xlat5 = u_xlat18.x * u_xlat24 + u_xlat5;
					        }
					        u_xlat23 = u_xlat5;
					    }
					    u_xlat0.x = u_xlat23 * _AO_Multiplier;
					    u_xlat0.x = (-u_xlat0.x) * 0.125 + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat3.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    SV_Target0.x = min(u_xlat0.x, 1.0);
					    SV_Target0.y = u_xlat2.z;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1587807
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AO_Bias;
					//   float4 _AO_Buffer_PadScale;
					//   float4 _AO_Buffer_TexelSize;
					//   float2 _AO_FadeParams;
					//   float3 _AO_FadeValues;
					//   float _AO_HalfProjScale;
					//   float _AO_Multiplier;
					//   float _AO_PowExponent;
					//   float _AO_Radius;
					//   sampler2D _AO_RandomTexture;
					//   float4 _AO_UVToView;
					//   sampler2D _CameraDepthTexture;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _ZBufferParams       c0       1
					//   _AO_Buffer_PadScale  c1       1
					//   _AO_Buffer_TexelSize c2       1
					//   _AO_UVToView         c3       1
					//   _AO_HalfProjScale    c4       1
					//   _AO_Radius           c5       1
					//   _AO_PowExponent      c6       1
					//   _AO_Bias             c7       1
					//   _AO_Multiplier       c8       1
					//   _AO_FadeParams       c9       1
					//   _AO_FadeValues       c10      1
					//   _CameraDepthTexture  s0       1
					//   _AO_RandomTexture    s1       1
					//
					
					    ps_3_0
					    def c11, 0.25, 0, 1, -1
					    def c12, 0.200000003, 0, 0.166666672, 0.5
					    def c13, 6.28318548, -3.14159274, 0, 0
					    def c14, 0.0833333358, 1, 0, 0
					    defi i0, 6, 0, 0, 0
					    defi i1, 4, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mov r0, c11
					    mul r1.xy, r0.x, c2.zwzw
					    mul r1.xy, r1, v0
					    mov r1.zw, c11.y
					    texldl r1, r1, s1
					    mul r2.xy, c1, v0
					    mov r2.zw, c11.y
					    texldl r2, r2, s0
					    mad r0.x, c0.z, r2.x, c0.w
					    rcp_pp r2.y, r0.x
					    mad r3.xy, v0.yxzw, c3.yxzw, c3.wzzw
					    mul r2.xz, r2.y, r3.xyyw
					    mad r3.xy, c2.x, r0.zyzw, v0
					    mul r4.xy, r3, c1
					    mov r4.zw, c11.y
					    texldl r4, r4, s0
					    mad r1.w, c0.z, r4.x, c0.w
					    rcp r4.x, r1.w
					    mad r3.xy, r3, c3, c3.zwzw
					    mul r4.yz, r4.x, r3.xxyw
					    mad r3.xy, c2.x, r0.wyzw, v0
					    mul r5.xy, r3, c1
					    mov r5.zw, c11.y
					    texldl r5, r5, s0
					    mad r1.w, c0.z, r5.x, c0.w
					    rcp r5.x, r1.w
					    mad r3.xy, r3, c3, c3.zwzw
					    mul r5.yz, r5.x, r3.xxyw
					    mad r3.xy, c2.yxzw, r0.zyzw, v0.yxzw
					    mul r6.xy, r3.yxzw, c1
					    mov r6.zw, c11.y
					    texldl r6, r6, s0
					    mad r0.z, c0.z, r6.x, c0.w
					    rcp r6.y, r0.z
					    mad r3.xy, r3, c3.yxzw, c3.wzzw
					    mul r6.xz, r6.y, r3.xyyw
					    mad r0.yz, c2.xyxw, r0.xwyw, v0.xyxw
					    mul r3.xy, r0.zyzw, c1
					    mov r3.zw, c11.y
					    texldl r3, r3, s0
					    mad r0.w, c0.z, r3.x, c0.w
					    rcp r3.y, r0.w
					    mad r0.yz, r0, c3.xyxw, c3.xwzw
					    mul r3.xz, r3.y, r0.yyzw
					    add r0.yzw, -r2.xyzx, r4.xxyz
					    add r4.xyz, r2.yzxw, -r5
					    add r5.xyz, -r2, r6
					    add r3.xyz, r2, -r3
					    dp3 r1.w, r0.yzww, r0.yzww
					    dp3 r2.w, r4, r4
					    add r1.w, r1.w, -r2.w
					    cmp r0.yzw, r1.w, r4.xxyz, r0
					    dp3 r1.w, r5, r5
					    dp3 r2.w, r3, r3
					    add r1.w, r1.w, -r2.w
					    cmp r3.xyz, r1.w, r3, r5
					    mul r4.xyz, r0.yzww, r3
					    mad r0.yzw, r0.xwyz, r3.xyzx, -r4.xxyz
					    nrm_pp r3.xyz, r0.yzww
					    add r0.y, r2.y, -c9.x
					    mul_sat r0.z, r0.y, c9.y
					    mov r4.x, c5.x
					    mov r4.y, c6.x
					    add r4.zw, -r4.xyxy, c10.xyyz
					    mul r0.zw, r0.z, r4
					    cmp r0.yz, r0.y, r0.xzww, c11.y
					    add r0.yz, r0, r4.xxyw
					    mul r0.w, r0.y, c4.x
					    mul r0.xy, r0, r0.wyzw
					    rcp r0.y, r0.y
					    mul r0.w, r0.x, c12.x
					    mad r0.w, r1.z, r0.w, c11.z
					    mov r4.zw, c11.y
					    mov r1.zw, c11.y
					    rep i0
					      mad r2.w, r1.w, c12.z, c12.w
					      frc r2.w, r2.w
					      mad r2.w, r2.w, c13.x, c13.y
					      sincos r5.xy, r2.w
					      mul r2.w, r1.y, r5.y
					      mad r6.x, r5.x, r1.x, -r2.w
					      dp2add r6.y, r5, r1.yxzw, c11.y
					      mov r5.x, r1.z
					      mov r5.y, r0.w
					      rep i1
					        mad r5.zw, r5.y, r6.xyxy, c12.w
					        frc r6.zw, r5
					        add r5.zw, r5, -r6
					        mad r5.zw, r5, c2.xyxy, v0.xyxy
					        mul r4.xy, r5.zwzw, c1
					        texldl r7, r4, s0
					        mad r2.w, c0.z, r7.x, c0.w
					        rcp r7.z, r2.w
					        mad r4.xy, r5.zwzw, c3, c3.zwzw
					        mul r7.xy, r7.z, r4
					        mad r5.y, r0.x, c12.x, r5.y
					        add r7.xyz, -r2.zxyw, r7
					        dp3 r2.w, r7, r7
					        dp3 r3.w, r3, r7
					        rsq r4.x, r2.w
					        mad_sat r3.w, r3.w, r4.x, -c7.x
					        mad_sat r2.w, r2.w, -r0.y, c11.z
					        mad r5.x, r3.w, r2.w, r5.x
					      endrep
					      mov r1.z, r5.x
					      add r1.w, r1.w, c11.z
					    endrep
					    mul r0.x, r1.z, c8.x
					    mad_sat r0.x, r0.x, -c14.x, c14.y
					    log r0.x, r0.x
					    mul r0.x, r0.x, r0.z
					    exp_sat_pp oC0.x, r0.x
					    mul_pp oC0.yzw, r2.y, c11.xzyy
					
					// approximately 136 instruction slots used (14 texture, 122 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[19];
						vec4 _AO_Buffer_PadScale;
						vec4 _AO_Buffer_TexelSize;
						vec4 unused_0_3;
						vec4 _AO_UVToView;
						vec4 unused_0_5;
						float _AO_HalfProjScale;
						float _AO_Radius;
						float _AO_PowExponent;
						float _AO_Bias;
						float _AO_Multiplier;
						vec2 _AO_FadeParams;
						vec3 _AO_FadeValues;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _AO_RandomTexture;
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					int u_xlati3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec2 u_xlat9;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat16;
					vec2 u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					vec2 u_xlat18;
					vec2 u_xlat19;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					float u_xlat23;
					float u_xlat24;
					bool u_xlatb24;
					float u_xlat25;
					void main()
					{
					    u_xlat0.xy = _AO_Buffer_TexelSize.zw * vec2(0.25, 0.25);
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0 = textureLod(_AO_RandomTexture, u_xlat0.xy, 0.0);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _AO_Buffer_PadScale.xy;
					    u_xlat1 = textureLod(_CameraDepthTexture, u_xlat1.xy, 0.0);
					    u_xlat21 = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.y = float(1.0) / u_xlat21;
					    u_xlat2.xy = vs_TEXCOORD0.yx * _AO_UVToView.yx + _AO_UVToView.wz;
					    u_xlat1.xz = u_xlat1.yy * u_xlat2.xy;
					    u_xlat9.x = _AO_Buffer_TexelSize.x;
					    u_xlat9.y = 0.0;
					    u_xlat2.xy = u_xlat9.xy + vs_TEXCOORD0.xy;
					    u_xlat16.xy = u_xlat2.xy * _AO_Buffer_PadScale.xy;
					    u_xlat3 = textureLod(_CameraDepthTexture, u_xlat16.xy, 0.0);
					    u_xlat21 = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat21;
					    u_xlat2.xy = u_xlat2.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					    u_xlat3.yz = u_xlat3.xx * u_xlat2.xy;
					    u_xlat9.x = (-_AO_Buffer_TexelSize.x);
					    u_xlat9.y = 0.0;
					    u_xlat2.xy = u_xlat9.xy + vs_TEXCOORD0.xy;
					    u_xlat16.xy = u_xlat2.xy * _AO_Buffer_PadScale.xy;
					    u_xlat4 = textureLod(_CameraDepthTexture, u_xlat16.xy, 0.0);
					    u_xlat21 = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat21;
					    u_xlat2.xy = u_xlat2.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					    u_xlat4.yz = u_xlat4.xx * u_xlat2.xy;
					    u_xlat2.z = 0.0;
					    u_xlat2.x = _AO_Buffer_TexelSize.y;
					    u_xlat2.xy = u_xlat2.xz + vs_TEXCOORD0.yx;
					    u_xlat16.xy = u_xlat2.yx * _AO_Buffer_PadScale.xy;
					    u_xlat5 = textureLod(_CameraDepthTexture, u_xlat16.xy, 0.0);
					    u_xlat21 = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.y = float(1.0) / u_xlat21;
					    u_xlat2.xy = u_xlat2.xy * _AO_UVToView.yx + _AO_UVToView.wz;
					    u_xlat5.xz = u_xlat5.yy * u_xlat2.xy;
					    u_xlat2.z = 0.0;
					    u_xlat2.x = (-_AO_Buffer_TexelSize.y);
					    u_xlat2.xy = u_xlat2.xz + vs_TEXCOORD0.yx;
					    u_xlat16.xy = u_xlat2.yx * _AO_Buffer_PadScale.xy;
					    u_xlat6 = textureLod(_CameraDepthTexture, u_xlat16.xy, 0.0);
					    u_xlat21 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.y = float(1.0) / u_xlat21;
					    u_xlat2.xy = u_xlat2.xy * _AO_UVToView.yx + _AO_UVToView.wz;
					    u_xlat6.xz = u_xlat6.yy * u_xlat2.xy;
					    u_xlat2.xyz = (-u_xlat1.yzx) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = (-u_xlat1.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.xyz + (-u_xlat6.xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb21 = u_xlat21<u_xlat22;
					    u_xlat2.xyz = (bool(u_xlatb21)) ? u_xlat2.xyz : u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlatb21 = u_xlat21<u_xlat22;
					    u_xlat3.xyz = (bool(u_xlatb21)) ? u_xlat4.xyz : u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat21 = u_xlat1.y + (-_AO_FadeParams.xxyx.y);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = u_xlat21 * _AO_FadeParams.xxyx.z;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat3.xy = (-vec2(_AO_Radius, _AO_PowExponent)) + _AO_FadeValues.yz;
					    u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy + vec2(_AO_Radius, _AO_PowExponent);
					    u_xlat21 = u_xlat3.x * _AO_HalfProjScale;
					    u_xlat22 = u_xlat3.x * u_xlat3.x;
					    u_xlat22 = -1.0 / u_xlat22;
					    u_xlat21 = u_xlat21 / u_xlat1.y;
					    u_xlat23 = u_xlat21 * 0.200000003;
					    u_xlat14 = u_xlat0.z * u_xlat23 + 1.0;
					    u_xlat23 = 0.0;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					    {
					        u_xlat17.x = float(u_xlati_loop_1);
					        u_xlat17.x = u_xlat17.x * 1.04719758;
					        u_xlat4.x = sin(u_xlat17.x);
					        u_xlat5.x = cos(u_xlat17.x);
					        u_xlat17.xy = u_xlat0.yx * u_xlat4.xx;
					        u_xlat4.x = u_xlat5.x * u_xlat0.x + (-u_xlat17.x);
					        u_xlat4.y = u_xlat5.x * u_xlat0.y + u_xlat17.y;
					        u_xlat5.x = u_xlat23;
					        u_xlat12 = u_xlat14;
					        for(int u_xlati_loop_2 = 0 ; u_xlati_loop_2<4 ; u_xlati_loop_2++)
					        {
					            u_xlat18.xy = u_xlat4.xy * vec2(u_xlat12);
					            u_xlat18.xy = roundEven(u_xlat18.xy);
					            u_xlat18.xy = u_xlat18.xy * _AO_Buffer_TexelSize.xy + vs_TEXCOORD0.xy;
					            u_xlat19.xy = u_xlat18.xy * _AO_Buffer_PadScale.xy;
					            u_xlat6 = textureLod(_CameraDepthTexture, u_xlat19.xy, 0.0);
					            u_xlat24 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					            u_xlat6.z = float(1.0) / u_xlat24;
					            u_xlat18.xy = u_xlat18.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					            u_xlat6.xy = u_xlat6.zz * u_xlat18.xy;
					            u_xlat12 = u_xlat21 * 0.200000003 + u_xlat12;
					            u_xlat6.xyz = (-u_xlat1.zxy) + u_xlat6.xyz;
					            u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat18.x = dot(u_xlat2.xyz, u_xlat6.xyz);
					            u_xlat25 = inversesqrt(u_xlat24);
					            u_xlat18.x = u_xlat18.x * u_xlat25 + (-_AO_Bias);
					            u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
					            u_xlat24 = u_xlat24 * u_xlat22 + 1.0;
					            u_xlat24 = max(u_xlat24, 0.0);
					            u_xlat5.x = u_xlat18.x * u_xlat24 + u_xlat5.x;
					        }
					        u_xlat23 = u_xlat5.x;
					    }
					    u_xlat0.x = u_xlat23 * _AO_Multiplier;
					    u_xlat0.x = (-u_xlat0.x) * 0.0833333358 + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat3.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    SV_Target0.x = min(u_xlat0.x, 1.0);
					    SV_Target0.y = u_xlat1.y;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1641775
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AO_Bias;
					//   float4 _AO_Buffer_PadScale;
					//   float4 _AO_Buffer_TexelSize;
					//   float2 _AO_FadeParams;
					//   float3 _AO_FadeValues;
					//   float _AO_HalfProjScale;
					//   float _AO_Multiplier;
					//   float _AO_PowExponent;
					//   float _AO_Radius;
					//   sampler2D _AO_RandomTexture;
					//   float4 _AO_UVToView;
					//   sampler2D _CameraDepthNormalsTexture;
					//   sampler2D _CameraDepthTexture;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   _ZBufferParams             c0       1
					//   _AO_Buffer_PadScale        c1       1
					//   _AO_Buffer_TexelSize       c2       1
					//   _AO_UVToView               c3       1
					//   _AO_HalfProjScale          c4       1
					//   _AO_Radius                 c5       1
					//   _AO_PowExponent            c6       1
					//   _AO_Bias                   c7       1
					//   _AO_Multiplier             c8       1
					//   _AO_FadeParams             c9       1
					//   _AO_FadeValues             c10      1
					//   _CameraDepthTexture        s0       1
					//   _CameraDepthNormalsTexture s1       1
					//   _AO_RandomTexture          s2       1
					//
					
					    ps_3_0
					    def c11, 0.25, 0, 2, -1
					    def c12, 3.55539989, 0, -1.77769995, 1
					    def c13, 0.200000003, 1, -1, 0
					    def c14, 0.166666672, 0.5, 6.28318548, -3.14159274
					    def c15, 0, 0.0833333358, 1, 0
					    defi i0, 6, 0, 0, 0
					    defi i1, 4, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mov r0.xzw, c11.xyyy
					    mul r0.xy, r0.x, c2.zwzw
					    mul r0.xy, r0, v0
					    texldl r0, r0, s2
					    mul r1.xy, c1, v0
					    mov r1.zw, c11.y
					    texldl r2, r1, s0
					    mad r0.w, c0.z, r2.x, c0.w
					    rcp_pp r2.z, r0.w
					    mad r1.zw, v0.xyxy, c3.xyxy, c3
					    mul r2.xy, r2.z, r1.zwzw
					    texld r1, r1, s1
					    mad r1.xyz, r1, c12.xxyw, c12.zzww
					    dp3 r1.z, r1, r1
					    rcp r1.z, r1.z
					    add r1.w, r1.z, r1.z
					    mul_pp r3.xy, r1, r1.w
					    mad_pp r3.z, r1.z, c11.z, c11.w
					    add r1.x, r2.z, -c9.x
					    mul_sat r1.y, r1.x, c9.y
					    mov r4.x, c5.x
					    mov r4.y, c6.x
					    add r1.zw, -r4.xyxy, c10.xyyz
					    mul r1.yz, r1.xzww, r1.y
					    cmp r1.xy, r1.x, r1.yzzw, c11.y
					    add r1.xy, r1, r4
					    mul r1.z, r1.x, c4.x
					    mul r1.x, r1.x, r1.x
					    rcp r1.x, r1.x
					    mul r0.w, r0.w, r1.z
					    mul r1.z, r0.w, c13.x
					    mad r0.z, r0.z, r1.z, -c11.w
					    mov r4.zw, c11.y
					    mul_pp r3.xyz, r3, c13.yzzw
					    mov r1.zw, c11.y
					    rep i0
					      mad r2.w, r1.w, c14.x, c14.y
					      frc r2.w, r2.w
					      mad r2.w, r2.w, c14.z, c14.w
					      sincos r5.xy, r2.w
					      mul r2.w, r0.y, r5.y
					      mad r6.x, r5.x, r0.x, -r2.w
					      dp2add r6.y, r5, r0.yxzw, c11.y
					      mov r5.x, r1.z
					      mov r5.y, r0.z
					      rep i1
					        mad r5.zw, r5.y, r6.xyxy, c14.y
					        frc r6.zw, r5
					        add r5.zw, r5, -r6
					        mad r5.zw, r5, c2.xyxy, v0.xyxy
					        mul r4.xy, r5.zwzw, c1
					        texldl r7, r4, s0
					        mad r2.w, c0.z, r7.x, c0.w
					        rcp r7.z, r2.w
					        mad r4.xy, r5.zwzw, c3, c3.zwzw
					        mul r7.xy, r7.z, r4
					        mad r5.y, r0.w, c13.x, r5.y
					        add r7.xyz, -r2, r7
					        dp3 r2.w, r7, r7
					        dp3 r3.w, r3, r7
					        rsq r4.x, r2.w
					        mad_sat r3.w, r3.w, r4.x, -c7.x
					        mad_sat r2.w, r2.w, -r1.x, -c11.w
					        mad r5.x, r3.w, r2.w, r5.x
					      endrep
					      mov r1.z, r5.x
					      add r1.w, r1.w, -c11.w
					    endrep
					    mul r0.x, r1.z, c8.x
					    mad_sat r0.x, r0.x, -c15.y, c15.z
					    log r0.x, r0.x
					    mul r0.x, r0.x, r1.y
					    exp_sat_pp oC0.x, r0.x
					    mul_pp oC0.yzw, r2.z, c11_abs.xwyy
					
					// approximately 91 instruction slots used (7 texture, 84 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[19];
						vec4 _AO_Buffer_PadScale;
						vec4 _AO_Buffer_TexelSize;
						vec4 unused_0_3;
						vec4 _AO_UVToView;
						vec4 unused_0_5;
						float _AO_HalfProjScale;
						float _AO_Radius;
						float _AO_PowExponent;
						float _AO_Bias;
						float _AO_Multiplier;
						vec2 _AO_FadeParams;
						vec3 _AO_FadeValues;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _AO_RandomTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _CameraDepthNormalsTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec2 u_xlat3;
					int u_xlati3;
					vec2 u_xlat4;
					float u_xlat5;
					vec4 u_xlat6;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat15;
					vec2 u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					vec2 u_xlat18;
					vec2 u_xlat19;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					float u_xlat24;
					bool u_xlatb24;
					float u_xlat25;
					void main()
					{
					    u_xlat0.xy = _AO_Buffer_TexelSize.zw * vec2(0.25, 0.25);
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0 = textureLod(_AO_RandomTexture, u_xlat0.xy, 0.0);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _AO_Buffer_PadScale.xy;
					    u_xlat2 = textureLod(_CameraDepthTexture, u_xlat1.xy, 0.0);
					    u_xlat21 = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
					    u_xlat2.z = float(1.0) / u_xlat21;
					    u_xlat15.xy = vs_TEXCOORD0.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					    u_xlat2.xy = u_xlat2.zz * u_xlat15.xy;
					    u_xlat1 = texture(_CameraDepthNormalsTexture, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = 2.0 / u_xlat21;
					    u_xlat1.xy = u_xlat1.xy * vec2(u_xlat21);
					    u_xlat1.z = u_xlat21 + -1.0;
					    u_xlat21 = u_xlat2.z + (-_AO_FadeParams.xxyx.y);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = u_xlat21 * _AO_FadeParams.xxyx.z;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat3.xy = (-vec2(_AO_Radius, _AO_PowExponent)) + _AO_FadeValues.yz;
					    u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy + vec2(_AO_Radius, _AO_PowExponent);
					    u_xlat21 = u_xlat3.x * _AO_HalfProjScale;
					    u_xlat22 = u_xlat3.x * u_xlat3.x;
					    u_xlat22 = -1.0 / u_xlat22;
					    u_xlat21 = u_xlat21 / u_xlat2.z;
					    u_xlat23 = u_xlat21 * 0.200000003;
					    u_xlat14 = u_xlat0.z * u_xlat23 + 1.0;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.0, -1.0, -1.0);
					    u_xlat23 = 0.0;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					    {
					        u_xlat17.x = float(u_xlati_loop_1);
					        u_xlat17.x = u_xlat17.x * 1.04719758;
					        u_xlat4.x = sin(u_xlat17.x);
					        u_xlat5 = cos(u_xlat17.x);
					        u_xlat17.xy = u_xlat0.yx * u_xlat4.xx;
					        u_xlat4.x = u_xlat5 * u_xlat0.x + (-u_xlat17.x);
					        u_xlat4.y = u_xlat5 * u_xlat0.y + u_xlat17.y;
					        u_xlat5 = u_xlat23;
					        u_xlat12 = u_xlat14;
					        for(int u_xlati_loop_2 = 0 ; u_xlati_loop_2<4 ; u_xlati_loop_2++)
					        {
					            u_xlat18.xy = u_xlat4.xy * vec2(u_xlat12);
					            u_xlat18.xy = roundEven(u_xlat18.xy);
					            u_xlat18.xy = u_xlat18.xy * _AO_Buffer_TexelSize.xy + vs_TEXCOORD0.xy;
					            u_xlat19.xy = u_xlat18.xy * _AO_Buffer_PadScale.xy;
					            u_xlat6 = textureLod(_CameraDepthTexture, u_xlat19.xy, 0.0);
					            u_xlat24 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					            u_xlat6.z = float(1.0) / u_xlat24;
					            u_xlat18.xy = u_xlat18.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					            u_xlat6.xy = u_xlat6.zz * u_xlat18.xy;
					            u_xlat12 = u_xlat21 * 0.200000003 + u_xlat12;
					            u_xlat6.xyz = (-u_xlat2.xyz) + u_xlat6.xyz;
					            u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat18.x = dot(u_xlat1.xyz, u_xlat6.xyz);
					            u_xlat25 = inversesqrt(u_xlat24);
					            u_xlat18.x = u_xlat18.x * u_xlat25 + (-_AO_Bias);
					            u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
					            u_xlat24 = u_xlat24 * u_xlat22 + 1.0;
					            u_xlat24 = max(u_xlat24, 0.0);
					            u_xlat5 = u_xlat18.x * u_xlat24 + u_xlat5;
					        }
					        u_xlat23 = u_xlat5;
					    }
					    u_xlat0.x = u_xlat23 * _AO_Multiplier;
					    u_xlat0.x = (-u_xlat0.x) * 0.0833333358 + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat3.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    SV_Target0.x = min(u_xlat0.x, 1.0);
					    SV_Target0.y = u_xlat2.z;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1732142
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AO_Bias;
					//   float4 _AO_Buffer_PadScale;
					//   float4 _AO_Buffer_TexelSize;
					//   row_major float4x4 _AO_CameraView;
					//   float2 _AO_FadeParams;
					//   float3 _AO_FadeValues;
					//   float _AO_HalfProjScale;
					//   float _AO_Multiplier;
					//   float _AO_PowExponent;
					//   float _AO_Radius;
					//   sampler2D _AO_RandomTexture;
					//   float4 _AO_UVToView;
					//   sampler2D _CameraDepthTexture;
					//   sampler2D _CameraGBufferTexture2;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                   Reg   Size
					//   ---------------------- ----- ----
					//   _AO_CameraView         c0       3
					//   _ZBufferParams         c3       1
					//   _AO_Buffer_PadScale    c4       1
					//   _AO_Buffer_TexelSize   c5       1
					//   _AO_UVToView           c6       1
					//   _AO_HalfProjScale      c7       1
					//   _AO_Radius             c8       1
					//   _AO_PowExponent        c9       1
					//   _AO_Bias               c10      1
					//   _AO_Multiplier         c11      1
					//   _AO_FadeParams         c12      1
					//   _AO_FadeValues         c13      1
					//   _CameraGBufferTexture2 s0       1
					//   _CameraDepthTexture    s1       1
					//   _AO_RandomTexture      s2       1
					//
					
					    ps_3_0
					    def c14, 0.25, 0, 2, -1
					    def c15, 0.200000003, 1, -1, 0
					    def c16, 0.166666672, 0.5, 6.28318548, -3.14159274
					    def c17, 0, 0.0833333358, 1, 0
					    defi i0, 6, 0, 0, 0
					    defi i1, 4, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mov r0.xzw, c14.xyyy
					    mul r0.xy, r0.x, c5.zwzw
					    mul r0.xy, r0, v0
					    texldl r0, r0, s2
					    mul r1.xy, c4, v0
					    mov r1.zw, c14.y
					    texldl r2, r1, s1
					    mad r0.w, c3.z, r2.x, c3.w
					    rcp_pp r2.z, r0.w
					    mad r1.zw, v0.xyxy, c6.xyxy, c6
					    mul r2.xy, r2.z, r1.zwzw
					    texld_pp r1, r1, s0
					    mad_pp r1.xyz, r1, c14.z, c14.w
					    dp3 r3.x, c0, r1
					    dp3 r3.y, c1, r1
					    dp3 r3.z, c2, r1
					    nrm_pp r1.xyz, r3
					    add r1.w, r2.z, -c12.x
					    mul_sat r2.w, r1.w, c12.y
					    mov r3.x, c8.x
					    mov r3.y, c9.x
					    add r3.zw, -r3.xyxy, c13.xyyz
					    mul r3.zw, r2.w, r3
					    cmp r3.zw, r1.w, r3, c14.y
					    add r3.xy, r3.zwzw, r3
					    mul r1.w, r3.x, c7.x
					    mul r2.w, r3.x, r3.x
					    rcp r2.w, r2.w
					    mul r0.w, r0.w, r1.w
					    mul r1.w, r0.w, c15.x
					    mad r0.z, r0.z, r1.w, -c14.w
					    mov r4.zw, c14.y
					    mul_pp r1.xyz, r1, c15.yzzw
					    mov r1.w, c14.y
					    mov r3.x, c14.y
					    rep i0
					      mad r3.z, r3.x, c16.x, c16.y
					      frc r3.z, r3.z
					      mad r3.z, r3.z, c16.z, c16.w
					      sincos r5.xy, r3.z
					      mul r3.z, r0.y, r5.y
					      mad r6.x, r5.x, r0.x, -r3.z
					      dp2add r6.y, r5, r0.yxzw, c14.y
					      mov r5.x, r1.w
					      mov r5.y, r0.z
					      rep i1
					        mad r3.zw, r5.y, r6.xyxy, c16.y
					        frc r5.zw, r3
					        add r3.zw, r3, -r5
					        mad r3.zw, r3, c5.xyxy, v0.xyxy
					        mul r4.xy, r3.zwzw, c4
					        texldl r7, r4, s1
					        mad r4.x, c3.z, r7.x, c3.w
					        rcp r7.z, r4.x
					        mad r3.zw, r3, c6.xyxy, c6
					        mul r7.xy, r7.z, r3.zwzw
					        mad r5.y, r0.w, c15.x, r5.y
					        add r7.xyz, -r2, r7
					        dp3 r3.z, r7, r7
					        dp3 r3.w, r1, r7
					        rsq r4.x, r3.z
					        mad_sat r3.w, r3.w, r4.x, -c10.x
					        mad_sat r3.z, r3.z, -r2.w, -c14.w
					        mad r5.x, r3.w, r3.z, r5.x
					      endrep
					      mov r1.w, r5.x
					      add r3.x, r3.x, -c14.w
					    endrep
					    mul r0.x, r1.w, c11.x
					    mad_sat r0.x, r0.x, -c17.y, c17.z
					    log r0.x, r0.x
					    mul r0.x, r0.x, r3.y
					    exp_sat_pp oC0.x, r0.x
					    mul_pp oC0.yzw, r2.z, c14_abs.xwyy
					
					// approximately 93 instruction slots used (7 texture, 86 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						mat4x4 _AO_CameraView;
						vec4 unused_0_2[8];
						vec4 _AO_Buffer_PadScale;
						vec4 _AO_Buffer_TexelSize;
						vec4 unused_0_5;
						vec4 _AO_UVToView;
						vec4 unused_0_7;
						float _AO_HalfProjScale;
						float _AO_Radius;
						float _AO_PowExponent;
						float _AO_Bias;
						float _AO_Multiplier;
						vec2 _AO_FadeParams;
						vec3 _AO_FadeValues;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _AO_RandomTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _CameraGBufferTexture2;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati3;
					vec2 u_xlat4;
					float u_xlat5;
					vec4 u_xlat6;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat15;
					vec2 u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					vec2 u_xlat18;
					vec2 u_xlat19;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					float u_xlat24;
					bool u_xlatb24;
					float u_xlat25;
					void main()
					{
					    u_xlat0.xy = _AO_Buffer_TexelSize.zw * vec2(0.25, 0.25);
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0 = textureLod(_AO_RandomTexture, u_xlat0.xy, 0.0);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _AO_Buffer_PadScale.xy;
					    u_xlat2 = textureLod(_CameraDepthTexture, u_xlat1.xy, 0.0);
					    u_xlat21 = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
					    u_xlat2.z = float(1.0) / u_xlat21;
					    u_xlat15.xy = vs_TEXCOORD0.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					    u_xlat2.xy = u_xlat2.zz * u_xlat15.xy;
					    u_xlat1 = texture(_CameraGBufferTexture2, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = u_xlat1.yyy * _AO_CameraView[1].xyz;
					    u_xlat1.xyw = _AO_CameraView[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = _AO_CameraView[2].xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = u_xlat2.z + (-_AO_FadeParams.xxyx.y);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = u_xlat21 * _AO_FadeParams.xxyx.z;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat3.xy = (-vec2(_AO_Radius, _AO_PowExponent)) + _AO_FadeValues.yz;
					    u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy + vec2(_AO_Radius, _AO_PowExponent);
					    u_xlat21 = u_xlat3.x * _AO_HalfProjScale;
					    u_xlat22 = u_xlat3.x * u_xlat3.x;
					    u_xlat22 = -1.0 / u_xlat22;
					    u_xlat21 = u_xlat21 / u_xlat2.z;
					    u_xlat23 = u_xlat21 * 0.200000003;
					    u_xlat14 = u_xlat0.z * u_xlat23 + 1.0;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.0, -1.0, -1.0);
					    u_xlat23 = 0.0;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					    {
					        u_xlat17.x = float(u_xlati_loop_1);
					        u_xlat17.x = u_xlat17.x * 1.04719758;
					        u_xlat4.x = sin(u_xlat17.x);
					        u_xlat5 = cos(u_xlat17.x);
					        u_xlat17.xy = u_xlat0.yx * u_xlat4.xx;
					        u_xlat4.x = u_xlat5 * u_xlat0.x + (-u_xlat17.x);
					        u_xlat4.y = u_xlat5 * u_xlat0.y + u_xlat17.y;
					        u_xlat5 = u_xlat23;
					        u_xlat12 = u_xlat14;
					        for(int u_xlati_loop_2 = 0 ; u_xlati_loop_2<4 ; u_xlati_loop_2++)
					        {
					            u_xlat18.xy = u_xlat4.xy * vec2(u_xlat12);
					            u_xlat18.xy = roundEven(u_xlat18.xy);
					            u_xlat18.xy = u_xlat18.xy * _AO_Buffer_TexelSize.xy + vs_TEXCOORD0.xy;
					            u_xlat19.xy = u_xlat18.xy * _AO_Buffer_PadScale.xy;
					            u_xlat6 = textureLod(_CameraDepthTexture, u_xlat19.xy, 0.0);
					            u_xlat24 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					            u_xlat6.z = float(1.0) / u_xlat24;
					            u_xlat18.xy = u_xlat18.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					            u_xlat6.xy = u_xlat6.zz * u_xlat18.xy;
					            u_xlat12 = u_xlat21 * 0.200000003 + u_xlat12;
					            u_xlat6.xyz = (-u_xlat2.xyz) + u_xlat6.xyz;
					            u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat18.x = dot(u_xlat1.xyz, u_xlat6.xyz);
					            u_xlat25 = inversesqrt(u_xlat24);
					            u_xlat18.x = u_xlat18.x * u_xlat25 + (-_AO_Bias);
					            u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
					            u_xlat24 = u_xlat24 * u_xlat22 + 1.0;
					            u_xlat24 = max(u_xlat24, 0.0);
					            u_xlat5 = u_xlat18.x * u_xlat24 + u_xlat5;
					        }
					        u_xlat23 = u_xlat5;
					    }
					    u_xlat0.x = u_xlat23 * _AO_Multiplier;
					    u_xlat0.x = (-u_xlat0.x) * 0.0833333358 + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat3.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    SV_Target0.x = min(u_xlat0.x, 1.0);
					    SV_Target0.y = u_xlat2.z;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1807462
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AO_Bias;
					//   float4 _AO_Buffer_PadScale;
					//   float4 _AO_Buffer_TexelSize;
					//   row_major float4x4 _AO_CameraView;
					//   float2 _AO_FadeParams;
					//   float3 _AO_FadeValues;
					//   float _AO_HalfProjScale;
					//   float _AO_Multiplier;
					//   float _AO_PowExponent;
					//   float _AO_Radius;
					//   sampler2D _AO_RandomTexture;
					//   float4 _AO_UVToView;
					//   sampler2D _CameraDepthTexture;
					//   sampler2D _CameraGBufferTexture2;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                   Reg   Size
					//   ---------------------- ----- ----
					//   _AO_CameraView         c0       3
					//   _ZBufferParams         c3       1
					//   _AO_Buffer_PadScale    c4       1
					//   _AO_Buffer_TexelSize   c5       1
					//   _AO_UVToView           c6       1
					//   _AO_HalfProjScale      c7       1
					//   _AO_Radius             c8       1
					//   _AO_PowExponent        c9       1
					//   _AO_Bias               c10      1
					//   _AO_Multiplier         c11      1
					//   _AO_FadeParams         c12      1
					//   _AO_FadeValues         c13      1
					//   _CameraGBufferTexture2 s0       1
					//   _CameraDepthTexture    s1       1
					//   _AO_RandomTexture      s2       1
					//
					
					    ps_3_0
					    def c14, 0.25, 0, 2, -1
					    def c15, 0.200000003, 1, -1, 0
					    def c16, 0.166666672, 0.5, 6.28318548, -3.14159274
					    def c17, 0, 0.0833333358, 1, 0
					    defi i0, 6, 0, 0, 0
					    defi i1, 4, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mov r0.xzw, c14.xyyy
					    mul r0.xy, r0.x, c5.zwzw
					    mul r0.xy, r0, v0
					    texldl r0, r0, s2
					    mul r1.xy, c4, v0
					    mov r1.zw, c14.y
					    texldl r2, r1, s1
					    mad r0.w, c3.z, r2.x, c3.w
					    rcp_pp r2.z, r0.w
					    mad r1.zw, v0.xyxy, c6.xyxy, c6
					    mul r2.xy, r2.z, r1.zwzw
					    texld_pp r1, r1, s0
					    mad_pp r1.xyz, r1, c14.z, c14.w
					    add r1.w, r1.w, c14.w
					    add r3.xyz, -r1_abs.xyxw, -c14.w
					    add_pp r4.z, -r1_abs.y, r3.x
					    cmp_pp r3.xw, -r1.xyzy, c14_abs.y, c14_abs.w
					    cmp_pp r5.xy, r1, -c14_abs.y, -c14_abs.w
					    add r3.xw, r3, r5.xyzy
					    mul_pp r3.xy, r3.xwzw, r3.yzzw
					    cmp_pp r4.xy, r4.z, r1, r3
					    cmp r1.xyz, r1.w, r1, r4
					    dp3 r3.x, c0, r1
					    dp3 r3.y, c1, r1
					    dp3 r3.z, c2, r1
					    nrm_pp r1.xyz, r3
					    add r1.w, r2.z, -c12.x
					    mul_sat r2.w, r1.w, c12.y
					    mov r3.x, c8.x
					    mov r3.y, c9.x
					    add r3.zw, -r3.xyxy, c13.xyyz
					    mul r3.zw, r2.w, r3
					    cmp r3.zw, r1.w, r3, c14.y
					    add r3.xy, r3.zwzw, r3
					    mul r1.w, r3.x, c7.x
					    mul r2.w, r3.x, r3.x
					    rcp r2.w, r2.w
					    mul r0.w, r0.w, r1.w
					    mul r1.w, r0.w, c15.x
					    mad r0.z, r0.z, r1.w, -c14.w
					    mov r4.zw, c14.y
					    mul_pp r1.xyz, r1, c15.yzzw
					    mov r1.w, c14.y
					    mov r3.x, c14.y
					    rep i0
					      mad r3.z, r3.x, c16.x, c16.y
					      frc r3.z, r3.z
					      mad r3.z, r3.z, c16.z, c16.w
					      sincos r5.xy, r3.z
					      mul r3.z, r0.y, r5.y
					      mad r6.x, r5.x, r0.x, -r3.z
					      dp2add r6.y, r5, r0.yxzw, c14.y
					      mov r5.x, r1.w
					      mov r5.y, r0.z
					      rep i1
					        mad r3.zw, r5.y, r6.xyxy, c16.y
					        frc r5.zw, r3
					        add r3.zw, r3, -r5
					        mad r3.zw, r3, c5.xyxy, v0.xyxy
					        mul r4.xy, r3.zwzw, c4
					        texldl r7, r4, s1
					        mad r4.x, c3.z, r7.x, c3.w
					        rcp r7.z, r4.x
					        mad r3.zw, r3, c6.xyxy, c6
					        mul r7.xy, r7.z, r3.zwzw
					        mad r5.y, r0.w, c15.x, r5.y
					        add r7.xyz, -r2, r7
					        dp3 r3.z, r7, r7
					        dp3 r3.w, r1, r7
					        rsq r4.x, r3.z
					        mad_sat r3.w, r3.w, r4.x, -c10.x
					        mad_sat r3.z, r3.z, -r2.w, -c14.w
					        mad r5.x, r3.w, r3.z, r5.x
					      endrep
					      mov r1.w, r5.x
					      add r3.x, r3.x, -c14.w
					    endrep
					    mul r0.x, r1.w, c11.x
					    mad_sat r0.x, r0.x, -c17.y, c17.z
					    log r0.x, r0.x
					    mul r0.x, r0.x, r3.y
					    exp_sat_pp oC0.x, r0.x
					    mul_pp oC0.yzw, r2.z, c14_abs.xwyy
					
					// approximately 102 instruction slots used (7 texture, 95 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						mat4x4 _AO_CameraView;
						vec4 unused_0_2[8];
						vec4 _AO_Buffer_PadScale;
						vec4 _AO_Buffer_TexelSize;
						vec4 unused_0_5;
						vec4 _AO_UVToView;
						vec4 unused_0_7;
						float _AO_HalfProjScale;
						float _AO_Radius;
						float _AO_PowExponent;
						float _AO_Bias;
						float _AO_Multiplier;
						vec2 _AO_FadeParams;
						vec3 _AO_FadeValues;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _AO_RandomTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _CameraGBufferTexture2;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					ivec4 u_xlati3;
					vec3 u_xlat4;
					float u_xlat5;
					ivec2 u_xlati5;
					vec4 u_xlat6;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat15;
					vec2 u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					vec2 u_xlat18;
					vec2 u_xlat19;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					bool u_xlatb22;
					float u_xlat23;
					float u_xlat24;
					bool u_xlatb24;
					float u_xlat25;
					void main()
					{
					    u_xlat0.xy = _AO_Buffer_TexelSize.zw * vec2(0.25, 0.25);
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0 = textureLod(_AO_RandomTexture, u_xlat0.xy, 0.0);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _AO_Buffer_PadScale.xy;
					    u_xlat2 = textureLod(_CameraDepthTexture, u_xlat1.xy, 0.0);
					    u_xlat21 = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
					    u_xlat2.z = float(1.0) / u_xlat21;
					    u_xlat15.xy = vs_TEXCOORD0.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					    u_xlat2.xy = u_xlat2.zz * u_xlat15.xy;
					    u_xlat1 = texture(_CameraGBufferTexture2, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlatb21 = u_xlat1.w<1.0;
					    u_xlat3.xyz = -abs(u_xlat1.xyx) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.z = -abs(u_xlat1.y) + u_xlat3.x;
					    u_xlatb22 = u_xlat4.z>=0.0;
					    u_xlati3.xw = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat1.xxxy).xw) * 0xFFFFFFFFu);
					    u_xlati5.xy = ivec2(uvec2(lessThan(u_xlat1.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					    u_xlati3.xw = (-u_xlati3.xw) + u_xlati5.xy;
					    u_xlat3.xw = vec2(u_xlati3.xw);
					    u_xlat3.xy = u_xlat3.xw * u_xlat3.yz;
					    u_xlat4.xy = (bool(u_xlatb22)) ? u_xlat1.xy : u_xlat3.xy;
					    u_xlat1.xyz = (bool(u_xlatb21)) ? u_xlat4.xyz : u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * _AO_CameraView[1].xyz;
					    u_xlat1.xyw = _AO_CameraView[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = _AO_CameraView[2].xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = u_xlat2.z + (-_AO_FadeParams.xxyx.y);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = u_xlat21 * _AO_FadeParams.xxyx.z;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat3.xy = (-vec2(_AO_Radius, _AO_PowExponent)) + _AO_FadeValues.yz;
					    u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy + vec2(_AO_Radius, _AO_PowExponent);
					    u_xlat21 = u_xlat3.x * _AO_HalfProjScale;
					    u_xlat22 = u_xlat3.x * u_xlat3.x;
					    u_xlat22 = -1.0 / u_xlat22;
					    u_xlat21 = u_xlat21 / u_xlat2.z;
					    u_xlat23 = u_xlat21 * 0.200000003;
					    u_xlat14 = u_xlat0.z * u_xlat23 + 1.0;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.0, -1.0, -1.0);
					    u_xlat23 = 0.0;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<6 ; u_xlati_loop_1++)
					    {
					        u_xlat17.x = float(u_xlati_loop_1);
					        u_xlat17.x = u_xlat17.x * 1.04719758;
					        u_xlat4.x = sin(u_xlat17.x);
					        u_xlat5 = cos(u_xlat17.x);
					        u_xlat17.xy = u_xlat0.yx * u_xlat4.xx;
					        u_xlat4.x = u_xlat5 * u_xlat0.x + (-u_xlat17.x);
					        u_xlat4.y = u_xlat5 * u_xlat0.y + u_xlat17.y;
					        u_xlat5 = u_xlat23;
					        u_xlat12 = u_xlat14;
					        for(int u_xlati_loop_2 = 0 ; u_xlati_loop_2<4 ; u_xlati_loop_2++)
					        {
					            u_xlat18.xy = u_xlat4.xy * vec2(u_xlat12);
					            u_xlat18.xy = roundEven(u_xlat18.xy);
					            u_xlat18.xy = u_xlat18.xy * _AO_Buffer_TexelSize.xy + vs_TEXCOORD0.xy;
					            u_xlat19.xy = u_xlat18.xy * _AO_Buffer_PadScale.xy;
					            u_xlat6 = textureLod(_CameraDepthTexture, u_xlat19.xy, 0.0);
					            u_xlat24 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					            u_xlat6.z = float(1.0) / u_xlat24;
					            u_xlat18.xy = u_xlat18.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					            u_xlat6.xy = u_xlat6.zz * u_xlat18.xy;
					            u_xlat12 = u_xlat21 * 0.200000003 + u_xlat12;
					            u_xlat6.xyz = (-u_xlat2.xyz) + u_xlat6.xyz;
					            u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat18.x = dot(u_xlat1.xyz, u_xlat6.xyz);
					            u_xlat25 = inversesqrt(u_xlat24);
					            u_xlat18.x = u_xlat18.x * u_xlat25 + (-_AO_Bias);
					            u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
					            u_xlat24 = u_xlat24 * u_xlat22 + 1.0;
					            u_xlat24 = max(u_xlat24, 0.0);
					            u_xlat5 = u_xlat18.x * u_xlat24 + u_xlat5;
					        }
					        u_xlat23 = u_xlat5;
					    }
					    u_xlat0.x = u_xlat23 * _AO_Multiplier;
					    u_xlat0.x = (-u_xlat0.x) * 0.0833333358 + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat3.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    SV_Target0.x = min(u_xlat0.x, 1.0);
					    SV_Target0.y = u_xlat2.z;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1859833
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AO_Bias;
					//   float4 _AO_Buffer_PadScale;
					//   float4 _AO_Buffer_TexelSize;
					//   float2 _AO_FadeParams;
					//   float3 _AO_FadeValues;
					//   float _AO_HalfProjScale;
					//   float _AO_Multiplier;
					//   float _AO_PowExponent;
					//   float _AO_Radius;
					//   sampler2D _AO_RandomTexture;
					//   float4 _AO_UVToView;
					//   sampler2D _CameraDepthTexture;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _ZBufferParams       c0       1
					//   _AO_Buffer_PadScale  c1       1
					//   _AO_Buffer_TexelSize c2       1
					//   _AO_UVToView         c3       1
					//   _AO_HalfProjScale    c4       1
					//   _AO_Radius           c5       1
					//   _AO_PowExponent      c6       1
					//   _AO_Bias             c7       1
					//   _AO_Multiplier       c8       1
					//   _AO_FadeParams       c9       1
					//   _AO_FadeValues       c10      1
					//   _CameraDepthTexture  s0       1
					//   _AO_RandomTexture    s1       1
					//
					
					    ps_3_0
					    def c11, 0.25, 0, 1, -1
					    def c12, 0.200000003, 0, 0.125, 0.5
					    def c13, 6.28318548, -3.14159274, 0, 0
					    def c14, 0.0625, 1, 0, 0
					    defi i0, 8, 0, 0, 0
					    defi i1, 4, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mov r0, c11
					    mul r1.xy, r0.x, c2.zwzw
					    mul r1.xy, r1, v0
					    mov r1.zw, c11.y
					    texldl r1, r1, s1
					    mul r2.xy, c1, v0
					    mov r2.zw, c11.y
					    texldl r2, r2, s0
					    mad r0.x, c0.z, r2.x, c0.w
					    rcp_pp r2.y, r0.x
					    mad r3.xy, v0.yxzw, c3.yxzw, c3.wzzw
					    mul r2.xz, r2.y, r3.xyyw
					    mad r3.xy, c2.x, r0.zyzw, v0
					    mul r4.xy, r3, c1
					    mov r4.zw, c11.y
					    texldl r4, r4, s0
					    mad r1.w, c0.z, r4.x, c0.w
					    rcp r4.x, r1.w
					    mad r3.xy, r3, c3, c3.zwzw
					    mul r4.yz, r4.x, r3.xxyw
					    mad r3.xy, c2.x, r0.wyzw, v0
					    mul r5.xy, r3, c1
					    mov r5.zw, c11.y
					    texldl r5, r5, s0
					    mad r1.w, c0.z, r5.x, c0.w
					    rcp r5.x, r1.w
					    mad r3.xy, r3, c3, c3.zwzw
					    mul r5.yz, r5.x, r3.xxyw
					    mad r3.xy, c2.yxzw, r0.zyzw, v0.yxzw
					    mul r6.xy, r3.yxzw, c1
					    mov r6.zw, c11.y
					    texldl r6, r6, s0
					    mad r0.z, c0.z, r6.x, c0.w
					    rcp r6.y, r0.z
					    mad r3.xy, r3, c3.yxzw, c3.wzzw
					    mul r6.xz, r6.y, r3.xyyw
					    mad r0.yz, c2.xyxw, r0.xwyw, v0.xyxw
					    mul r3.xy, r0.zyzw, c1
					    mov r3.zw, c11.y
					    texldl r3, r3, s0
					    mad r0.w, c0.z, r3.x, c0.w
					    rcp r3.y, r0.w
					    mad r0.yz, r0, c3.xyxw, c3.xwzw
					    mul r3.xz, r3.y, r0.yyzw
					    add r0.yzw, -r2.xyzx, r4.xxyz
					    add r4.xyz, r2.yzxw, -r5
					    add r5.xyz, -r2, r6
					    add r3.xyz, r2, -r3
					    dp3 r1.w, r0.yzww, r0.yzww
					    dp3 r2.w, r4, r4
					    add r1.w, r1.w, -r2.w
					    cmp r0.yzw, r1.w, r4.xxyz, r0
					    dp3 r1.w, r5, r5
					    dp3 r2.w, r3, r3
					    add r1.w, r1.w, -r2.w
					    cmp r3.xyz, r1.w, r3, r5
					    mul r4.xyz, r0.yzww, r3
					    mad r0.yzw, r0.xwyz, r3.xyzx, -r4.xxyz
					    nrm_pp r3.xyz, r0.yzww
					    add r0.y, r2.y, -c9.x
					    mul_sat r0.z, r0.y, c9.y
					    mov r4.x, c5.x
					    mov r4.y, c6.x
					    add r4.zw, -r4.xyxy, c10.xyyz
					    mul r0.zw, r0.z, r4
					    cmp r0.yz, r0.y, r0.xzww, c11.y
					    add r0.yz, r0, r4.xxyw
					    mul r0.w, r0.y, c4.x
					    mul r0.xy, r0, r0.wyzw
					    rcp r0.y, r0.y
					    mul r0.w, r0.x, c12.x
					    mad r0.w, r1.z, r0.w, c11.z
					    mov r4.zw, c11.y
					    mov r1.zw, c11.y
					    rep i0
					      mad r2.w, r1.w, c12.z, c12.w
					      frc r2.w, r2.w
					      mad r2.w, r2.w, c13.x, c13.y
					      sincos r5.xy, r2.w
					      mul r2.w, r1.y, r5.y
					      mad r6.x, r5.x, r1.x, -r2.w
					      dp2add r6.y, r5, r1.yxzw, c11.y
					      mov r5.x, r1.z
					      mov r5.y, r0.w
					      rep i1
					        mad r5.zw, r5.y, r6.xyxy, c12.w
					        frc r6.zw, r5
					        add r5.zw, r5, -r6
					        mad r5.zw, r5, c2.xyxy, v0.xyxy
					        mul r4.xy, r5.zwzw, c1
					        texldl r7, r4, s0
					        mad r2.w, c0.z, r7.x, c0.w
					        rcp r7.z, r2.w
					        mad r4.xy, r5.zwzw, c3, c3.zwzw
					        mul r7.xy, r7.z, r4
					        mad r5.y, r0.x, c12.x, r5.y
					        add r7.xyz, -r2.zxyw, r7
					        dp3 r2.w, r7, r7
					        dp3 r3.w, r3, r7
					        rsq r4.x, r2.w
					        mad_sat r3.w, r3.w, r4.x, -c7.x
					        mad_sat r2.w, r2.w, -r0.y, c11.z
					        mad r5.x, r3.w, r2.w, r5.x
					      endrep
					      mov r1.z, r5.x
					      add r1.w, r1.w, c11.z
					    endrep
					    mul r0.x, r1.z, c8.x
					    mad_sat r0.x, r0.x, -c14.x, c14.y
					    log r0.x, r0.x
					    mul r0.x, r0.x, r0.z
					    exp_sat_pp oC0.x, r0.x
					    mul_pp oC0.yzw, r2.y, c11.xzyy
					
					// approximately 136 instruction slots used (14 texture, 122 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[19];
						vec4 _AO_Buffer_PadScale;
						vec4 _AO_Buffer_TexelSize;
						vec4 unused_0_3;
						vec4 _AO_UVToView;
						vec4 unused_0_5;
						float _AO_HalfProjScale;
						float _AO_Radius;
						float _AO_PowExponent;
						float _AO_Bias;
						float _AO_Multiplier;
						vec2 _AO_FadeParams;
						vec3 _AO_FadeValues;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _AO_RandomTexture;
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					int u_xlati3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec2 u_xlat9;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat16;
					vec2 u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					vec2 u_xlat18;
					vec2 u_xlat19;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					float u_xlat23;
					float u_xlat24;
					bool u_xlatb24;
					float u_xlat25;
					void main()
					{
					    u_xlat0.xy = _AO_Buffer_TexelSize.zw * vec2(0.25, 0.25);
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0 = textureLod(_AO_RandomTexture, u_xlat0.xy, 0.0);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _AO_Buffer_PadScale.xy;
					    u_xlat1 = textureLod(_CameraDepthTexture, u_xlat1.xy, 0.0);
					    u_xlat21 = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.y = float(1.0) / u_xlat21;
					    u_xlat2.xy = vs_TEXCOORD0.yx * _AO_UVToView.yx + _AO_UVToView.wz;
					    u_xlat1.xz = u_xlat1.yy * u_xlat2.xy;
					    u_xlat9.x = _AO_Buffer_TexelSize.x;
					    u_xlat9.y = 0.0;
					    u_xlat2.xy = u_xlat9.xy + vs_TEXCOORD0.xy;
					    u_xlat16.xy = u_xlat2.xy * _AO_Buffer_PadScale.xy;
					    u_xlat3 = textureLod(_CameraDepthTexture, u_xlat16.xy, 0.0);
					    u_xlat21 = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat21;
					    u_xlat2.xy = u_xlat2.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					    u_xlat3.yz = u_xlat3.xx * u_xlat2.xy;
					    u_xlat9.x = (-_AO_Buffer_TexelSize.x);
					    u_xlat9.y = 0.0;
					    u_xlat2.xy = u_xlat9.xy + vs_TEXCOORD0.xy;
					    u_xlat16.xy = u_xlat2.xy * _AO_Buffer_PadScale.xy;
					    u_xlat4 = textureLod(_CameraDepthTexture, u_xlat16.xy, 0.0);
					    u_xlat21 = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat21;
					    u_xlat2.xy = u_xlat2.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					    u_xlat4.yz = u_xlat4.xx * u_xlat2.xy;
					    u_xlat2.z = 0.0;
					    u_xlat2.x = _AO_Buffer_TexelSize.y;
					    u_xlat2.xy = u_xlat2.xz + vs_TEXCOORD0.yx;
					    u_xlat16.xy = u_xlat2.yx * _AO_Buffer_PadScale.xy;
					    u_xlat5 = textureLod(_CameraDepthTexture, u_xlat16.xy, 0.0);
					    u_xlat21 = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.y = float(1.0) / u_xlat21;
					    u_xlat2.xy = u_xlat2.xy * _AO_UVToView.yx + _AO_UVToView.wz;
					    u_xlat5.xz = u_xlat5.yy * u_xlat2.xy;
					    u_xlat2.z = 0.0;
					    u_xlat2.x = (-_AO_Buffer_TexelSize.y);
					    u_xlat2.xy = u_xlat2.xz + vs_TEXCOORD0.yx;
					    u_xlat16.xy = u_xlat2.yx * _AO_Buffer_PadScale.xy;
					    u_xlat6 = textureLod(_CameraDepthTexture, u_xlat16.xy, 0.0);
					    u_xlat21 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.y = float(1.0) / u_xlat21;
					    u_xlat2.xy = u_xlat2.xy * _AO_UVToView.yx + _AO_UVToView.wz;
					    u_xlat6.xz = u_xlat6.yy * u_xlat2.xy;
					    u_xlat2.xyz = (-u_xlat1.yzx) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = (-u_xlat1.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.xyz + (-u_xlat6.xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb21 = u_xlat21<u_xlat22;
					    u_xlat2.xyz = (bool(u_xlatb21)) ? u_xlat2.xyz : u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlatb21 = u_xlat21<u_xlat22;
					    u_xlat3.xyz = (bool(u_xlatb21)) ? u_xlat4.xyz : u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat21 = u_xlat1.y + (-_AO_FadeParams.xxyx.y);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = u_xlat21 * _AO_FadeParams.xxyx.z;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat3.xy = (-vec2(_AO_Radius, _AO_PowExponent)) + _AO_FadeValues.yz;
					    u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy + vec2(_AO_Radius, _AO_PowExponent);
					    u_xlat21 = u_xlat3.x * _AO_HalfProjScale;
					    u_xlat22 = u_xlat3.x * u_xlat3.x;
					    u_xlat22 = -1.0 / u_xlat22;
					    u_xlat21 = u_xlat21 / u_xlat1.y;
					    u_xlat23 = u_xlat21 * 0.200000003;
					    u_xlat14 = u_xlat0.z * u_xlat23 + 1.0;
					    u_xlat23 = 0.0;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<8 ; u_xlati_loop_1++)
					    {
					        u_xlat17.x = float(u_xlati_loop_1);
					        u_xlat17.x = u_xlat17.x * 0.785398185;
					        u_xlat4.x = sin(u_xlat17.x);
					        u_xlat5.x = cos(u_xlat17.x);
					        u_xlat17.xy = u_xlat0.yx * u_xlat4.xx;
					        u_xlat4.x = u_xlat5.x * u_xlat0.x + (-u_xlat17.x);
					        u_xlat4.y = u_xlat5.x * u_xlat0.y + u_xlat17.y;
					        u_xlat5.x = u_xlat23;
					        u_xlat12 = u_xlat14;
					        for(int u_xlati_loop_2 = 0 ; u_xlati_loop_2<4 ; u_xlati_loop_2++)
					        {
					            u_xlat18.xy = u_xlat4.xy * vec2(u_xlat12);
					            u_xlat18.xy = roundEven(u_xlat18.xy);
					            u_xlat18.xy = u_xlat18.xy * _AO_Buffer_TexelSize.xy + vs_TEXCOORD0.xy;
					            u_xlat19.xy = u_xlat18.xy * _AO_Buffer_PadScale.xy;
					            u_xlat6 = textureLod(_CameraDepthTexture, u_xlat19.xy, 0.0);
					            u_xlat24 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					            u_xlat6.z = float(1.0) / u_xlat24;
					            u_xlat18.xy = u_xlat18.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					            u_xlat6.xy = u_xlat6.zz * u_xlat18.xy;
					            u_xlat12 = u_xlat21 * 0.200000003 + u_xlat12;
					            u_xlat6.xyz = (-u_xlat1.zxy) + u_xlat6.xyz;
					            u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat18.x = dot(u_xlat2.xyz, u_xlat6.xyz);
					            u_xlat25 = inversesqrt(u_xlat24);
					            u_xlat18.x = u_xlat18.x * u_xlat25 + (-_AO_Bias);
					            u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
					            u_xlat24 = u_xlat24 * u_xlat22 + 1.0;
					            u_xlat24 = max(u_xlat24, 0.0);
					            u_xlat5.x = u_xlat18.x * u_xlat24 + u_xlat5.x;
					        }
					        u_xlat23 = u_xlat5.x;
					    }
					    u_xlat0.x = u_xlat23 * _AO_Multiplier;
					    u_xlat0.x = (-u_xlat0.x) * 0.0625 + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat3.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    SV_Target0.x = min(u_xlat0.x, 1.0);
					    SV_Target0.y = u_xlat1.y;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1918131
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AO_Bias;
					//   float4 _AO_Buffer_PadScale;
					//   float4 _AO_Buffer_TexelSize;
					//   float2 _AO_FadeParams;
					//   float3 _AO_FadeValues;
					//   float _AO_HalfProjScale;
					//   float _AO_Multiplier;
					//   float _AO_PowExponent;
					//   float _AO_Radius;
					//   sampler2D _AO_RandomTexture;
					//   float4 _AO_UVToView;
					//   sampler2D _CameraDepthNormalsTexture;
					//   sampler2D _CameraDepthTexture;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   _ZBufferParams             c0       1
					//   _AO_Buffer_PadScale        c1       1
					//   _AO_Buffer_TexelSize       c2       1
					//   _AO_UVToView               c3       1
					//   _AO_HalfProjScale          c4       1
					//   _AO_Radius                 c5       1
					//   _AO_PowExponent            c6       1
					//   _AO_Bias                   c7       1
					//   _AO_Multiplier             c8       1
					//   _AO_FadeParams             c9       1
					//   _AO_FadeValues             c10      1
					//   _CameraDepthTexture        s0       1
					//   _CameraDepthNormalsTexture s1       1
					//   _AO_RandomTexture          s2       1
					//
					
					    ps_3_0
					    def c11, 0.25, 0, 2, -1
					    def c12, 3.55539989, 0, -1.77769995, 1
					    def c13, 0.200000003, 1, -1, 0
					    def c14, 0.125, 0.5, 6.28318548, -3.14159274
					    def c15, 0, 0.0625, 1, 0
					    defi i0, 8, 0, 0, 0
					    defi i1, 4, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mov r0.xzw, c11.xyyy
					    mul r0.xy, r0.x, c2.zwzw
					    mul r0.xy, r0, v0
					    texldl r0, r0, s2
					    mul r1.xy, c1, v0
					    mov r1.zw, c11.y
					    texldl r2, r1, s0
					    mad r0.w, c0.z, r2.x, c0.w
					    rcp_pp r2.z, r0.w
					    mad r1.zw, v0.xyxy, c3.xyxy, c3
					    mul r2.xy, r2.z, r1.zwzw
					    texld r1, r1, s1
					    mad r1.xyz, r1, c12.xxyw, c12.zzww
					    dp3 r1.z, r1, r1
					    rcp r1.z, r1.z
					    add r1.w, r1.z, r1.z
					    mul_pp r3.xy, r1, r1.w
					    mad_pp r3.z, r1.z, c11.z, c11.w
					    add r1.x, r2.z, -c9.x
					    mul_sat r1.y, r1.x, c9.y
					    mov r4.x, c5.x
					    mov r4.y, c6.x
					    add r1.zw, -r4.xyxy, c10.xyyz
					    mul r1.yz, r1.xzww, r1.y
					    cmp r1.xy, r1.x, r1.yzzw, c11.y
					    add r1.xy, r1, r4
					    mul r1.z, r1.x, c4.x
					    mul r1.x, r1.x, r1.x
					    rcp r1.x, r1.x
					    mul r0.w, r0.w, r1.z
					    mul r1.z, r0.w, c13.x
					    mad r0.z, r0.z, r1.z, -c11.w
					    mov r4.zw, c11.y
					    mul_pp r3.xyz, r3, c13.yzzw
					    mov r1.zw, c11.y
					    rep i0
					      mad r2.w, r1.w, c14.x, c14.y
					      frc r2.w, r2.w
					      mad r2.w, r2.w, c14.z, c14.w
					      sincos r5.xy, r2.w
					      mul r2.w, r0.y, r5.y
					      mad r6.x, r5.x, r0.x, -r2.w
					      dp2add r6.y, r5, r0.yxzw, c11.y
					      mov r5.x, r1.z
					      mov r5.y, r0.z
					      rep i1
					        mad r5.zw, r5.y, r6.xyxy, c14.y
					        frc r6.zw, r5
					        add r5.zw, r5, -r6
					        mad r5.zw, r5, c2.xyxy, v0.xyxy
					        mul r4.xy, r5.zwzw, c1
					        texldl r7, r4, s0
					        mad r2.w, c0.z, r7.x, c0.w
					        rcp r7.z, r2.w
					        mad r4.xy, r5.zwzw, c3, c3.zwzw
					        mul r7.xy, r7.z, r4
					        mad r5.y, r0.w, c13.x, r5.y
					        add r7.xyz, -r2, r7
					        dp3 r2.w, r7, r7
					        dp3 r3.w, r3, r7
					        rsq r4.x, r2.w
					        mad_sat r3.w, r3.w, r4.x, -c7.x
					        mad_sat r2.w, r2.w, -r1.x, -c11.w
					        mad r5.x, r3.w, r2.w, r5.x
					      endrep
					      mov r1.z, r5.x
					      add r1.w, r1.w, -c11.w
					    endrep
					    mul r0.x, r1.z, c8.x
					    mad_sat r0.x, r0.x, -c15.y, c15.z
					    log r0.x, r0.x
					    mul r0.x, r0.x, r1.y
					    exp_sat_pp oC0.x, r0.x
					    mul_pp oC0.yzw, r2.z, c11_abs.xwyy
					
					// approximately 91 instruction slots used (7 texture, 84 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[19];
						vec4 _AO_Buffer_PadScale;
						vec4 _AO_Buffer_TexelSize;
						vec4 unused_0_3;
						vec4 _AO_UVToView;
						vec4 unused_0_5;
						float _AO_HalfProjScale;
						float _AO_Radius;
						float _AO_PowExponent;
						float _AO_Bias;
						float _AO_Multiplier;
						vec2 _AO_FadeParams;
						vec3 _AO_FadeValues;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _AO_RandomTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _CameraDepthNormalsTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec2 u_xlat3;
					int u_xlati3;
					vec2 u_xlat4;
					float u_xlat5;
					vec4 u_xlat6;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat15;
					vec2 u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					vec2 u_xlat18;
					vec2 u_xlat19;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					float u_xlat24;
					bool u_xlatb24;
					float u_xlat25;
					void main()
					{
					    u_xlat0.xy = _AO_Buffer_TexelSize.zw * vec2(0.25, 0.25);
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0 = textureLod(_AO_RandomTexture, u_xlat0.xy, 0.0);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _AO_Buffer_PadScale.xy;
					    u_xlat2 = textureLod(_CameraDepthTexture, u_xlat1.xy, 0.0);
					    u_xlat21 = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
					    u_xlat2.z = float(1.0) / u_xlat21;
					    u_xlat15.xy = vs_TEXCOORD0.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					    u_xlat2.xy = u_xlat2.zz * u_xlat15.xy;
					    u_xlat1 = texture(_CameraDepthNormalsTexture, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = 2.0 / u_xlat21;
					    u_xlat1.xy = u_xlat1.xy * vec2(u_xlat21);
					    u_xlat1.z = u_xlat21 + -1.0;
					    u_xlat21 = u_xlat2.z + (-_AO_FadeParams.xxyx.y);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = u_xlat21 * _AO_FadeParams.xxyx.z;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat3.xy = (-vec2(_AO_Radius, _AO_PowExponent)) + _AO_FadeValues.yz;
					    u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy + vec2(_AO_Radius, _AO_PowExponent);
					    u_xlat21 = u_xlat3.x * _AO_HalfProjScale;
					    u_xlat22 = u_xlat3.x * u_xlat3.x;
					    u_xlat22 = -1.0 / u_xlat22;
					    u_xlat21 = u_xlat21 / u_xlat2.z;
					    u_xlat23 = u_xlat21 * 0.200000003;
					    u_xlat14 = u_xlat0.z * u_xlat23 + 1.0;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.0, -1.0, -1.0);
					    u_xlat23 = 0.0;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<8 ; u_xlati_loop_1++)
					    {
					        u_xlat17.x = float(u_xlati_loop_1);
					        u_xlat17.x = u_xlat17.x * 0.785398185;
					        u_xlat4.x = sin(u_xlat17.x);
					        u_xlat5 = cos(u_xlat17.x);
					        u_xlat17.xy = u_xlat0.yx * u_xlat4.xx;
					        u_xlat4.x = u_xlat5 * u_xlat0.x + (-u_xlat17.x);
					        u_xlat4.y = u_xlat5 * u_xlat0.y + u_xlat17.y;
					        u_xlat5 = u_xlat23;
					        u_xlat12 = u_xlat14;
					        for(int u_xlati_loop_2 = 0 ; u_xlati_loop_2<4 ; u_xlati_loop_2++)
					        {
					            u_xlat18.xy = u_xlat4.xy * vec2(u_xlat12);
					            u_xlat18.xy = roundEven(u_xlat18.xy);
					            u_xlat18.xy = u_xlat18.xy * _AO_Buffer_TexelSize.xy + vs_TEXCOORD0.xy;
					            u_xlat19.xy = u_xlat18.xy * _AO_Buffer_PadScale.xy;
					            u_xlat6 = textureLod(_CameraDepthTexture, u_xlat19.xy, 0.0);
					            u_xlat24 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					            u_xlat6.z = float(1.0) / u_xlat24;
					            u_xlat18.xy = u_xlat18.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					            u_xlat6.xy = u_xlat6.zz * u_xlat18.xy;
					            u_xlat12 = u_xlat21 * 0.200000003 + u_xlat12;
					            u_xlat6.xyz = (-u_xlat2.xyz) + u_xlat6.xyz;
					            u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat18.x = dot(u_xlat1.xyz, u_xlat6.xyz);
					            u_xlat25 = inversesqrt(u_xlat24);
					            u_xlat18.x = u_xlat18.x * u_xlat25 + (-_AO_Bias);
					            u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
					            u_xlat24 = u_xlat24 * u_xlat22 + 1.0;
					            u_xlat24 = max(u_xlat24, 0.0);
					            u_xlat5 = u_xlat18.x * u_xlat24 + u_xlat5;
					        }
					        u_xlat23 = u_xlat5;
					    }
					    u_xlat0.x = u_xlat23 * _AO_Multiplier;
					    u_xlat0.x = (-u_xlat0.x) * 0.0625 + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat3.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    SV_Target0.x = min(u_xlat0.x, 1.0);
					    SV_Target0.y = u_xlat2.z;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 1974711
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AO_Bias;
					//   float4 _AO_Buffer_PadScale;
					//   float4 _AO_Buffer_TexelSize;
					//   row_major float4x4 _AO_CameraView;
					//   float2 _AO_FadeParams;
					//   float3 _AO_FadeValues;
					//   float _AO_HalfProjScale;
					//   float _AO_Multiplier;
					//   float _AO_PowExponent;
					//   float _AO_Radius;
					//   sampler2D _AO_RandomTexture;
					//   float4 _AO_UVToView;
					//   sampler2D _CameraDepthTexture;
					//   sampler2D _CameraGBufferTexture2;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                   Reg   Size
					//   ---------------------- ----- ----
					//   _AO_CameraView         c0       3
					//   _ZBufferParams         c3       1
					//   _AO_Buffer_PadScale    c4       1
					//   _AO_Buffer_TexelSize   c5       1
					//   _AO_UVToView           c6       1
					//   _AO_HalfProjScale      c7       1
					//   _AO_Radius             c8       1
					//   _AO_PowExponent        c9       1
					//   _AO_Bias               c10      1
					//   _AO_Multiplier         c11      1
					//   _AO_FadeParams         c12      1
					//   _AO_FadeValues         c13      1
					//   _CameraGBufferTexture2 s0       1
					//   _CameraDepthTexture    s1       1
					//   _AO_RandomTexture      s2       1
					//
					
					    ps_3_0
					    def c14, 0.25, 0, 2, -1
					    def c15, 0.200000003, 1, -1, 0
					    def c16, 0.125, 0.5, 6.28318548, -3.14159274
					    def c17, 0, 0.0625, 1, 0
					    defi i0, 8, 0, 0, 0
					    defi i1, 4, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mov r0.xzw, c14.xyyy
					    mul r0.xy, r0.x, c5.zwzw
					    mul r0.xy, r0, v0
					    texldl r0, r0, s2
					    mul r1.xy, c4, v0
					    mov r1.zw, c14.y
					    texldl r2, r1, s1
					    mad r0.w, c3.z, r2.x, c3.w
					    rcp_pp r2.z, r0.w
					    mad r1.zw, v0.xyxy, c6.xyxy, c6
					    mul r2.xy, r2.z, r1.zwzw
					    texld_pp r1, r1, s0
					    mad_pp r1.xyz, r1, c14.z, c14.w
					    dp3 r3.x, c0, r1
					    dp3 r3.y, c1, r1
					    dp3 r3.z, c2, r1
					    nrm_pp r1.xyz, r3
					    add r1.w, r2.z, -c12.x
					    mul_sat r2.w, r1.w, c12.y
					    mov r3.x, c8.x
					    mov r3.y, c9.x
					    add r3.zw, -r3.xyxy, c13.xyyz
					    mul r3.zw, r2.w, r3
					    cmp r3.zw, r1.w, r3, c14.y
					    add r3.xy, r3.zwzw, r3
					    mul r1.w, r3.x, c7.x
					    mul r2.w, r3.x, r3.x
					    rcp r2.w, r2.w
					    mul r0.w, r0.w, r1.w
					    mul r1.w, r0.w, c15.x
					    mad r0.z, r0.z, r1.w, -c14.w
					    mov r4.zw, c14.y
					    mul_pp r1.xyz, r1, c15.yzzw
					    mov r1.w, c14.y
					    mov r3.x, c14.y
					    rep i0
					      mad r3.z, r3.x, c16.x, c16.y
					      frc r3.z, r3.z
					      mad r3.z, r3.z, c16.z, c16.w
					      sincos r5.xy, r3.z
					      mul r3.z, r0.y, r5.y
					      mad r6.x, r5.x, r0.x, -r3.z
					      dp2add r6.y, r5, r0.yxzw, c14.y
					      mov r5.x, r1.w
					      mov r5.y, r0.z
					      rep i1
					        mad r3.zw, r5.y, r6.xyxy, c16.y
					        frc r5.zw, r3
					        add r3.zw, r3, -r5
					        mad r3.zw, r3, c5.xyxy, v0.xyxy
					        mul r4.xy, r3.zwzw, c4
					        texldl r7, r4, s1
					        mad r4.x, c3.z, r7.x, c3.w
					        rcp r7.z, r4.x
					        mad r3.zw, r3, c6.xyxy, c6
					        mul r7.xy, r7.z, r3.zwzw
					        mad r5.y, r0.w, c15.x, r5.y
					        add r7.xyz, -r2, r7
					        dp3 r3.z, r7, r7
					        dp3 r3.w, r1, r7
					        rsq r4.x, r3.z
					        mad_sat r3.w, r3.w, r4.x, -c10.x
					        mad_sat r3.z, r3.z, -r2.w, -c14.w
					        mad r5.x, r3.w, r3.z, r5.x
					      endrep
					      mov r1.w, r5.x
					      add r3.x, r3.x, -c14.w
					    endrep
					    mul r0.x, r1.w, c11.x
					    mad_sat r0.x, r0.x, -c17.y, c17.z
					    log r0.x, r0.x
					    mul r0.x, r0.x, r3.y
					    exp_sat_pp oC0.x, r0.x
					    mul_pp oC0.yzw, r2.z, c14_abs.xwyy
					
					// approximately 93 instruction slots used (7 texture, 86 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						mat4x4 _AO_CameraView;
						vec4 unused_0_2[8];
						vec4 _AO_Buffer_PadScale;
						vec4 _AO_Buffer_TexelSize;
						vec4 unused_0_5;
						vec4 _AO_UVToView;
						vec4 unused_0_7;
						float _AO_HalfProjScale;
						float _AO_Radius;
						float _AO_PowExponent;
						float _AO_Bias;
						float _AO_Multiplier;
						vec2 _AO_FadeParams;
						vec3 _AO_FadeValues;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _AO_RandomTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _CameraGBufferTexture2;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati3;
					vec2 u_xlat4;
					float u_xlat5;
					vec4 u_xlat6;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat15;
					vec2 u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					vec2 u_xlat18;
					vec2 u_xlat19;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					float u_xlat24;
					bool u_xlatb24;
					float u_xlat25;
					void main()
					{
					    u_xlat0.xy = _AO_Buffer_TexelSize.zw * vec2(0.25, 0.25);
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0 = textureLod(_AO_RandomTexture, u_xlat0.xy, 0.0);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _AO_Buffer_PadScale.xy;
					    u_xlat2 = textureLod(_CameraDepthTexture, u_xlat1.xy, 0.0);
					    u_xlat21 = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
					    u_xlat2.z = float(1.0) / u_xlat21;
					    u_xlat15.xy = vs_TEXCOORD0.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					    u_xlat2.xy = u_xlat2.zz * u_xlat15.xy;
					    u_xlat1 = texture(_CameraGBufferTexture2, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = u_xlat1.yyy * _AO_CameraView[1].xyz;
					    u_xlat1.xyw = _AO_CameraView[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = _AO_CameraView[2].xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = u_xlat2.z + (-_AO_FadeParams.xxyx.y);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = u_xlat21 * _AO_FadeParams.xxyx.z;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat3.xy = (-vec2(_AO_Radius, _AO_PowExponent)) + _AO_FadeValues.yz;
					    u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy + vec2(_AO_Radius, _AO_PowExponent);
					    u_xlat21 = u_xlat3.x * _AO_HalfProjScale;
					    u_xlat22 = u_xlat3.x * u_xlat3.x;
					    u_xlat22 = -1.0 / u_xlat22;
					    u_xlat21 = u_xlat21 / u_xlat2.z;
					    u_xlat23 = u_xlat21 * 0.200000003;
					    u_xlat14 = u_xlat0.z * u_xlat23 + 1.0;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.0, -1.0, -1.0);
					    u_xlat23 = 0.0;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<8 ; u_xlati_loop_1++)
					    {
					        u_xlat17.x = float(u_xlati_loop_1);
					        u_xlat17.x = u_xlat17.x * 0.785398185;
					        u_xlat4.x = sin(u_xlat17.x);
					        u_xlat5 = cos(u_xlat17.x);
					        u_xlat17.xy = u_xlat0.yx * u_xlat4.xx;
					        u_xlat4.x = u_xlat5 * u_xlat0.x + (-u_xlat17.x);
					        u_xlat4.y = u_xlat5 * u_xlat0.y + u_xlat17.y;
					        u_xlat5 = u_xlat23;
					        u_xlat12 = u_xlat14;
					        for(int u_xlati_loop_2 = 0 ; u_xlati_loop_2<4 ; u_xlati_loop_2++)
					        {
					            u_xlat18.xy = u_xlat4.xy * vec2(u_xlat12);
					            u_xlat18.xy = roundEven(u_xlat18.xy);
					            u_xlat18.xy = u_xlat18.xy * _AO_Buffer_TexelSize.xy + vs_TEXCOORD0.xy;
					            u_xlat19.xy = u_xlat18.xy * _AO_Buffer_PadScale.xy;
					            u_xlat6 = textureLod(_CameraDepthTexture, u_xlat19.xy, 0.0);
					            u_xlat24 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					            u_xlat6.z = float(1.0) / u_xlat24;
					            u_xlat18.xy = u_xlat18.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					            u_xlat6.xy = u_xlat6.zz * u_xlat18.xy;
					            u_xlat12 = u_xlat21 * 0.200000003 + u_xlat12;
					            u_xlat6.xyz = (-u_xlat2.xyz) + u_xlat6.xyz;
					            u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat18.x = dot(u_xlat1.xyz, u_xlat6.xyz);
					            u_xlat25 = inversesqrt(u_xlat24);
					            u_xlat18.x = u_xlat18.x * u_xlat25 + (-_AO_Bias);
					            u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
					            u_xlat24 = u_xlat24 * u_xlat22 + 1.0;
					            u_xlat24 = max(u_xlat24, 0.0);
					            u_xlat5 = u_xlat18.x * u_xlat24 + u_xlat5;
					        }
					        u_xlat23 = u_xlat5;
					    }
					    u_xlat0.x = u_xlat23 * _AO_Multiplier;
					    u_xlat0.x = (-u_xlat0.x) * 0.0625 + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat3.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    SV_Target0.x = min(u_xlat0.x, 1.0);
					    SV_Target0.y = u_xlat2.z;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 2066326
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AO_Bias;
					//   float4 _AO_Buffer_PadScale;
					//   float4 _AO_Buffer_TexelSize;
					//   row_major float4x4 _AO_CameraView;
					//   float2 _AO_FadeParams;
					//   float3 _AO_FadeValues;
					//   float _AO_HalfProjScale;
					//   float _AO_Multiplier;
					//   float _AO_PowExponent;
					//   float _AO_Radius;
					//   sampler2D _AO_RandomTexture;
					//   float4 _AO_UVToView;
					//   sampler2D _CameraDepthTexture;
					//   sampler2D _CameraGBufferTexture2;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                   Reg   Size
					//   ---------------------- ----- ----
					//   _AO_CameraView         c0       3
					//   _ZBufferParams         c3       1
					//   _AO_Buffer_PadScale    c4       1
					//   _AO_Buffer_TexelSize   c5       1
					//   _AO_UVToView           c6       1
					//   _AO_HalfProjScale      c7       1
					//   _AO_Radius             c8       1
					//   _AO_PowExponent        c9       1
					//   _AO_Bias               c10      1
					//   _AO_Multiplier         c11      1
					//   _AO_FadeParams         c12      1
					//   _AO_FadeValues         c13      1
					//   _CameraGBufferTexture2 s0       1
					//   _CameraDepthTexture    s1       1
					//   _AO_RandomTexture      s2       1
					//
					
					    ps_3_0
					    def c14, 0.25, 0, 2, -1
					    def c15, 0.200000003, 1, -1, 0
					    def c16, 0.125, 0.5, 6.28318548, -3.14159274
					    def c17, 0, 0.0625, 1, 0
					    defi i0, 8, 0, 0, 0
					    defi i1, 4, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mov r0.xzw, c14.xyyy
					    mul r0.xy, r0.x, c5.zwzw
					    mul r0.xy, r0, v0
					    texldl r0, r0, s2
					    mul r1.xy, c4, v0
					    mov r1.zw, c14.y
					    texldl r2, r1, s1
					    mad r0.w, c3.z, r2.x, c3.w
					    rcp_pp r2.z, r0.w
					    mad r1.zw, v0.xyxy, c6.xyxy, c6
					    mul r2.xy, r2.z, r1.zwzw
					    texld_pp r1, r1, s0
					    mad_pp r1.xyz, r1, c14.z, c14.w
					    add r1.w, r1.w, c14.w
					    add r3.xyz, -r1_abs.xyxw, -c14.w
					    add_pp r4.z, -r1_abs.y, r3.x
					    cmp_pp r3.xw, -r1.xyzy, c14_abs.y, c14_abs.w
					    cmp_pp r5.xy, r1, -c14_abs.y, -c14_abs.w
					    add r3.xw, r3, r5.xyzy
					    mul_pp r3.xy, r3.xwzw, r3.yzzw
					    cmp_pp r4.xy, r4.z, r1, r3
					    cmp r1.xyz, r1.w, r1, r4
					    dp3 r3.x, c0, r1
					    dp3 r3.y, c1, r1
					    dp3 r3.z, c2, r1
					    nrm_pp r1.xyz, r3
					    add r1.w, r2.z, -c12.x
					    mul_sat r2.w, r1.w, c12.y
					    mov r3.x, c8.x
					    mov r3.y, c9.x
					    add r3.zw, -r3.xyxy, c13.xyyz
					    mul r3.zw, r2.w, r3
					    cmp r3.zw, r1.w, r3, c14.y
					    add r3.xy, r3.zwzw, r3
					    mul r1.w, r3.x, c7.x
					    mul r2.w, r3.x, r3.x
					    rcp r2.w, r2.w
					    mul r0.w, r0.w, r1.w
					    mul r1.w, r0.w, c15.x
					    mad r0.z, r0.z, r1.w, -c14.w
					    mov r4.zw, c14.y
					    mul_pp r1.xyz, r1, c15.yzzw
					    mov r1.w, c14.y
					    mov r3.x, c14.y
					    rep i0
					      mad r3.z, r3.x, c16.x, c16.y
					      frc r3.z, r3.z
					      mad r3.z, r3.z, c16.z, c16.w
					      sincos r5.xy, r3.z
					      mul r3.z, r0.y, r5.y
					      mad r6.x, r5.x, r0.x, -r3.z
					      dp2add r6.y, r5, r0.yxzw, c14.y
					      mov r5.x, r1.w
					      mov r5.y, r0.z
					      rep i1
					        mad r3.zw, r5.y, r6.xyxy, c16.y
					        frc r5.zw, r3
					        add r3.zw, r3, -r5
					        mad r3.zw, r3, c5.xyxy, v0.xyxy
					        mul r4.xy, r3.zwzw, c4
					        texldl r7, r4, s1
					        mad r4.x, c3.z, r7.x, c3.w
					        rcp r7.z, r4.x
					        mad r3.zw, r3, c6.xyxy, c6
					        mul r7.xy, r7.z, r3.zwzw
					        mad r5.y, r0.w, c15.x, r5.y
					        add r7.xyz, -r2, r7
					        dp3 r3.z, r7, r7
					        dp3 r3.w, r1, r7
					        rsq r4.x, r3.z
					        mad_sat r3.w, r3.w, r4.x, -c10.x
					        mad_sat r3.z, r3.z, -r2.w, -c14.w
					        mad r5.x, r3.w, r3.z, r5.x
					      endrep
					      mov r1.w, r5.x
					      add r3.x, r3.x, -c14.w
					    endrep
					    mul r0.x, r1.w, c11.x
					    mad_sat r0.x, r0.x, -c17.y, c17.z
					    log r0.x, r0.x
					    mul r0.x, r0.x, r3.y
					    exp_sat_pp oC0.x, r0.x
					    mul_pp oC0.yzw, r2.z, c14_abs.xwyy
					
					// approximately 102 instruction slots used (7 texture, 95 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						mat4x4 _AO_CameraView;
						vec4 unused_0_2[8];
						vec4 _AO_Buffer_PadScale;
						vec4 _AO_Buffer_TexelSize;
						vec4 unused_0_5;
						vec4 _AO_UVToView;
						vec4 unused_0_7;
						float _AO_HalfProjScale;
						float _AO_Radius;
						float _AO_PowExponent;
						float _AO_Bias;
						float _AO_Multiplier;
						vec2 _AO_FadeParams;
						vec3 _AO_FadeValues;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _AO_RandomTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _CameraGBufferTexture2;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					ivec4 u_xlati3;
					vec3 u_xlat4;
					float u_xlat5;
					ivec2 u_xlati5;
					vec4 u_xlat6;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat15;
					vec2 u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					vec2 u_xlat18;
					vec2 u_xlat19;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					bool u_xlatb22;
					float u_xlat23;
					float u_xlat24;
					bool u_xlatb24;
					float u_xlat25;
					void main()
					{
					    u_xlat0.xy = _AO_Buffer_TexelSize.zw * vec2(0.25, 0.25);
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0 = textureLod(_AO_RandomTexture, u_xlat0.xy, 0.0);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _AO_Buffer_PadScale.xy;
					    u_xlat2 = textureLod(_CameraDepthTexture, u_xlat1.xy, 0.0);
					    u_xlat21 = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
					    u_xlat2.z = float(1.0) / u_xlat21;
					    u_xlat15.xy = vs_TEXCOORD0.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					    u_xlat2.xy = u_xlat2.zz * u_xlat15.xy;
					    u_xlat1 = texture(_CameraGBufferTexture2, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlatb21 = u_xlat1.w<1.0;
					    u_xlat3.xyz = -abs(u_xlat1.xyx) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.z = -abs(u_xlat1.y) + u_xlat3.x;
					    u_xlatb22 = u_xlat4.z>=0.0;
					    u_xlati3.xw = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat1.xxxy).xw) * 0xFFFFFFFFu);
					    u_xlati5.xy = ivec2(uvec2(lessThan(u_xlat1.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					    u_xlati3.xw = (-u_xlati3.xw) + u_xlati5.xy;
					    u_xlat3.xw = vec2(u_xlati3.xw);
					    u_xlat3.xy = u_xlat3.xw * u_xlat3.yz;
					    u_xlat4.xy = (bool(u_xlatb22)) ? u_xlat1.xy : u_xlat3.xy;
					    u_xlat1.xyz = (bool(u_xlatb21)) ? u_xlat4.xyz : u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * _AO_CameraView[1].xyz;
					    u_xlat1.xyw = _AO_CameraView[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = _AO_CameraView[2].xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = u_xlat2.z + (-_AO_FadeParams.xxyx.y);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = u_xlat21 * _AO_FadeParams.xxyx.z;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat3.xy = (-vec2(_AO_Radius, _AO_PowExponent)) + _AO_FadeValues.yz;
					    u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy + vec2(_AO_Radius, _AO_PowExponent);
					    u_xlat21 = u_xlat3.x * _AO_HalfProjScale;
					    u_xlat22 = u_xlat3.x * u_xlat3.x;
					    u_xlat22 = -1.0 / u_xlat22;
					    u_xlat21 = u_xlat21 / u_xlat2.z;
					    u_xlat23 = u_xlat21 * 0.200000003;
					    u_xlat14 = u_xlat0.z * u_xlat23 + 1.0;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.0, -1.0, -1.0);
					    u_xlat23 = 0.0;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<8 ; u_xlati_loop_1++)
					    {
					        u_xlat17.x = float(u_xlati_loop_1);
					        u_xlat17.x = u_xlat17.x * 0.785398185;
					        u_xlat4.x = sin(u_xlat17.x);
					        u_xlat5 = cos(u_xlat17.x);
					        u_xlat17.xy = u_xlat0.yx * u_xlat4.xx;
					        u_xlat4.x = u_xlat5 * u_xlat0.x + (-u_xlat17.x);
					        u_xlat4.y = u_xlat5 * u_xlat0.y + u_xlat17.y;
					        u_xlat5 = u_xlat23;
					        u_xlat12 = u_xlat14;
					        for(int u_xlati_loop_2 = 0 ; u_xlati_loop_2<4 ; u_xlati_loop_2++)
					        {
					            u_xlat18.xy = u_xlat4.xy * vec2(u_xlat12);
					            u_xlat18.xy = roundEven(u_xlat18.xy);
					            u_xlat18.xy = u_xlat18.xy * _AO_Buffer_TexelSize.xy + vs_TEXCOORD0.xy;
					            u_xlat19.xy = u_xlat18.xy * _AO_Buffer_PadScale.xy;
					            u_xlat6 = textureLod(_CameraDepthTexture, u_xlat19.xy, 0.0);
					            u_xlat24 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					            u_xlat6.z = float(1.0) / u_xlat24;
					            u_xlat18.xy = u_xlat18.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					            u_xlat6.xy = u_xlat6.zz * u_xlat18.xy;
					            u_xlat12 = u_xlat21 * 0.200000003 + u_xlat12;
					            u_xlat6.xyz = (-u_xlat2.xyz) + u_xlat6.xyz;
					            u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat18.x = dot(u_xlat1.xyz, u_xlat6.xyz);
					            u_xlat25 = inversesqrt(u_xlat24);
					            u_xlat18.x = u_xlat18.x * u_xlat25 + (-_AO_Bias);
					            u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
					            u_xlat24 = u_xlat24 * u_xlat22 + 1.0;
					            u_xlat24 = max(u_xlat24, 0.0);
					            u_xlat5 = u_xlat18.x * u_xlat24 + u_xlat5;
					        }
					        u_xlat23 = u_xlat5;
					    }
					    u_xlat0.x = u_xlat23 * _AO_Multiplier;
					    u_xlat0.x = (-u_xlat0.x) * 0.0625 + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat3.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    SV_Target0.x = min(u_xlat0.x, 1.0);
					    SV_Target0.y = u_xlat2.z;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 2122308
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AO_Bias;
					//   float4 _AO_Buffer_PadScale;
					//   float4 _AO_Buffer_TexelSize;
					//   float2 _AO_FadeParams;
					//   float3 _AO_FadeValues;
					//   float _AO_HalfProjScale;
					//   float _AO_Multiplier;
					//   float _AO_PowExponent;
					//   float _AO_Radius;
					//   sampler2D _AO_RandomTexture;
					//   float4 _AO_UVToView;
					//   sampler2D _CameraDepthTexture;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _ZBufferParams       c0       1
					//   _AO_Buffer_PadScale  c1       1
					//   _AO_Buffer_TexelSize c2       1
					//   _AO_UVToView         c3       1
					//   _AO_HalfProjScale    c4       1
					//   _AO_Radius           c5       1
					//   _AO_PowExponent      c6       1
					//   _AO_Bias             c7       1
					//   _AO_Multiplier       c8       1
					//   _AO_FadeParams       c9       1
					//   _AO_FadeValues       c10      1
					//   _CameraDepthTexture  s0       1
					//   _AO_RandomTexture    s1       1
					//
					
					    ps_3_0
					    def c11, 0.25, 0, 1, -1
					    def c12, 0.142857149, 0, 0.100000001, 0.5
					    def c13, 6.28318548, -3.14159274, 0, 0
					    def c14, 0.0333333351, 1, 0, 0
					    defi i0, 10, 0, 0, 0
					    defi i1, 6, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mov r0, c11
					    mul r1.xy, r0.x, c2.zwzw
					    mul r1.xy, r1, v0
					    mov r1.zw, c11.y
					    texldl r1, r1, s1
					    mul r2.xy, c1, v0
					    mov r2.zw, c11.y
					    texldl r2, r2, s0
					    mad r0.x, c0.z, r2.x, c0.w
					    rcp_pp r2.y, r0.x
					    mad r3.xy, v0.yxzw, c3.yxzw, c3.wzzw
					    mul r2.xz, r2.y, r3.xyyw
					    mad r3.xy, c2.x, r0.zyzw, v0
					    mul r4.xy, r3, c1
					    mov r4.zw, c11.y
					    texldl r4, r4, s0
					    mad r1.w, c0.z, r4.x, c0.w
					    rcp r4.x, r1.w
					    mad r3.xy, r3, c3, c3.zwzw
					    mul r4.yz, r4.x, r3.xxyw
					    mad r3.xy, c2.x, r0.wyzw, v0
					    mul r5.xy, r3, c1
					    mov r5.zw, c11.y
					    texldl r5, r5, s0
					    mad r1.w, c0.z, r5.x, c0.w
					    rcp r5.x, r1.w
					    mad r3.xy, r3, c3, c3.zwzw
					    mul r5.yz, r5.x, r3.xxyw
					    mad r3.xy, c2.yxzw, r0.zyzw, v0.yxzw
					    mul r6.xy, r3.yxzw, c1
					    mov r6.zw, c11.y
					    texldl r6, r6, s0
					    mad r0.z, c0.z, r6.x, c0.w
					    rcp r6.y, r0.z
					    mad r3.xy, r3, c3.yxzw, c3.wzzw
					    mul r6.xz, r6.y, r3.xyyw
					    mad r0.yz, c2.xyxw, r0.xwyw, v0.xyxw
					    mul r3.xy, r0.zyzw, c1
					    mov r3.zw, c11.y
					    texldl r3, r3, s0
					    mad r0.w, c0.z, r3.x, c0.w
					    rcp r3.y, r0.w
					    mad r0.yz, r0, c3.xyxw, c3.xwzw
					    mul r3.xz, r3.y, r0.yyzw
					    add r0.yzw, -r2.xyzx, r4.xxyz
					    add r4.xyz, r2.yzxw, -r5
					    add r5.xyz, -r2, r6
					    add r3.xyz, r2, -r3
					    dp3 r1.w, r0.yzww, r0.yzww
					    dp3 r2.w, r4, r4
					    add r1.w, r1.w, -r2.w
					    cmp r0.yzw, r1.w, r4.xxyz, r0
					    dp3 r1.w, r5, r5
					    dp3 r2.w, r3, r3
					    add r1.w, r1.w, -r2.w
					    cmp r3.xyz, r1.w, r3, r5
					    mul r4.xyz, r0.yzww, r3
					    mad r0.yzw, r0.xwyz, r3.xyzx, -r4.xxyz
					    nrm_pp r3.xyz, r0.yzww
					    add r0.y, r2.y, -c9.x
					    mul_sat r0.z, r0.y, c9.y
					    mov r4.x, c5.x
					    mov r4.y, c6.x
					    add r4.zw, -r4.xyxy, c10.xyyz
					    mul r0.zw, r0.z, r4
					    cmp r0.yz, r0.y, r0.xzww, c11.y
					    add r0.yz, r0, r4.xxyw
					    mul r0.w, r0.y, c4.x
					    mul r0.xy, r0, r0.wyzw
					    rcp r0.y, r0.y
					    mul r0.w, r0.x, c12.x
					    mad r0.w, r1.z, r0.w, c11.z
					    mov r4.zw, c11.y
					    mov r1.zw, c11.y
					    rep i0
					      mad r2.w, r1.w, c12.z, c12.w
					      frc r2.w, r2.w
					      mad r2.w, r2.w, c13.x, c13.y
					      sincos r5.xy, r2.w
					      mul r2.w, r1.y, r5.y
					      mad r6.x, r5.x, r1.x, -r2.w
					      dp2add r6.y, r5, r1.yxzw, c11.y
					      mov r5.x, r1.z
					      mov r5.y, r0.w
					      rep i1
					        mad r5.zw, r5.y, r6.xyxy, c12.w
					        frc r6.zw, r5
					        add r5.zw, r5, -r6
					        mad r5.zw, r5, c2.xyxy, v0.xyxy
					        mul r4.xy, r5.zwzw, c1
					        texldl r7, r4, s0
					        mad r2.w, c0.z, r7.x, c0.w
					        rcp r7.z, r2.w
					        mad r4.xy, r5.zwzw, c3, c3.zwzw
					        mul r7.xy, r7.z, r4
					        mad r5.y, r0.x, c12.x, r5.y
					        add r7.xyz, -r2.zxyw, r7
					        dp3 r2.w, r7, r7
					        dp3 r3.w, r3, r7
					        rsq r4.x, r2.w
					        mad_sat r3.w, r3.w, r4.x, -c7.x
					        mad_sat r2.w, r2.w, -r0.y, c11.z
					        mad r5.x, r3.w, r2.w, r5.x
					      endrep
					      mov r1.z, r5.x
					      add r1.w, r1.w, c11.z
					    endrep
					    mul r0.x, r1.z, c8.x
					    mad_sat r0.x, r0.x, -c14.x, c14.y
					    log r0.x, r0.x
					    mul r0.x, r0.x, r0.z
					    exp_sat_pp oC0.x, r0.x
					    mul_pp oC0.yzw, r2.y, c11.xzyy
					
					// approximately 136 instruction slots used (14 texture, 122 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[19];
						vec4 _AO_Buffer_PadScale;
						vec4 _AO_Buffer_TexelSize;
						vec4 unused_0_3;
						vec4 _AO_UVToView;
						vec4 unused_0_5;
						float _AO_HalfProjScale;
						float _AO_Radius;
						float _AO_PowExponent;
						float _AO_Bias;
						float _AO_Multiplier;
						vec2 _AO_FadeParams;
						vec3 _AO_FadeValues;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _AO_RandomTexture;
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					int u_xlati3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec2 u_xlat9;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat16;
					vec2 u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					vec2 u_xlat18;
					vec2 u_xlat19;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					float u_xlat23;
					float u_xlat24;
					bool u_xlatb24;
					float u_xlat25;
					void main()
					{
					    u_xlat0.xy = _AO_Buffer_TexelSize.zw * vec2(0.25, 0.25);
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0 = textureLod(_AO_RandomTexture, u_xlat0.xy, 0.0);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _AO_Buffer_PadScale.xy;
					    u_xlat1 = textureLod(_CameraDepthTexture, u_xlat1.xy, 0.0);
					    u_xlat21 = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.y = float(1.0) / u_xlat21;
					    u_xlat2.xy = vs_TEXCOORD0.yx * _AO_UVToView.yx + _AO_UVToView.wz;
					    u_xlat1.xz = u_xlat1.yy * u_xlat2.xy;
					    u_xlat9.x = _AO_Buffer_TexelSize.x;
					    u_xlat9.y = 0.0;
					    u_xlat2.xy = u_xlat9.xy + vs_TEXCOORD0.xy;
					    u_xlat16.xy = u_xlat2.xy * _AO_Buffer_PadScale.xy;
					    u_xlat3 = textureLod(_CameraDepthTexture, u_xlat16.xy, 0.0);
					    u_xlat21 = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat21;
					    u_xlat2.xy = u_xlat2.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					    u_xlat3.yz = u_xlat3.xx * u_xlat2.xy;
					    u_xlat9.x = (-_AO_Buffer_TexelSize.x);
					    u_xlat9.y = 0.0;
					    u_xlat2.xy = u_xlat9.xy + vs_TEXCOORD0.xy;
					    u_xlat16.xy = u_xlat2.xy * _AO_Buffer_PadScale.xy;
					    u_xlat4 = textureLod(_CameraDepthTexture, u_xlat16.xy, 0.0);
					    u_xlat21 = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat21;
					    u_xlat2.xy = u_xlat2.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					    u_xlat4.yz = u_xlat4.xx * u_xlat2.xy;
					    u_xlat2.z = 0.0;
					    u_xlat2.x = _AO_Buffer_TexelSize.y;
					    u_xlat2.xy = u_xlat2.xz + vs_TEXCOORD0.yx;
					    u_xlat16.xy = u_xlat2.yx * _AO_Buffer_PadScale.xy;
					    u_xlat5 = textureLod(_CameraDepthTexture, u_xlat16.xy, 0.0);
					    u_xlat21 = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.y = float(1.0) / u_xlat21;
					    u_xlat2.xy = u_xlat2.xy * _AO_UVToView.yx + _AO_UVToView.wz;
					    u_xlat5.xz = u_xlat5.yy * u_xlat2.xy;
					    u_xlat2.z = 0.0;
					    u_xlat2.x = (-_AO_Buffer_TexelSize.y);
					    u_xlat2.xy = u_xlat2.xz + vs_TEXCOORD0.yx;
					    u_xlat16.xy = u_xlat2.yx * _AO_Buffer_PadScale.xy;
					    u_xlat6 = textureLod(_CameraDepthTexture, u_xlat16.xy, 0.0);
					    u_xlat21 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.y = float(1.0) / u_xlat21;
					    u_xlat2.xy = u_xlat2.xy * _AO_UVToView.yx + _AO_UVToView.wz;
					    u_xlat6.xz = u_xlat6.yy * u_xlat2.xy;
					    u_xlat2.xyz = (-u_xlat1.yzx) + u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat1.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = (-u_xlat1.xyz) + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat1.xyz + (-u_xlat6.xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlatb21 = u_xlat21<u_xlat22;
					    u_xlat2.xyz = (bool(u_xlatb21)) ? u_xlat2.xyz : u_xlat3.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlatb21 = u_xlat21<u_xlat22;
					    u_xlat3.xyz = (bool(u_xlatb21)) ? u_xlat4.xyz : u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat21 = u_xlat1.y + (-_AO_FadeParams.xxyx.y);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = u_xlat21 * _AO_FadeParams.xxyx.z;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat3.xy = (-vec2(_AO_Radius, _AO_PowExponent)) + _AO_FadeValues.yz;
					    u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy + vec2(_AO_Radius, _AO_PowExponent);
					    u_xlat21 = u_xlat3.x * _AO_HalfProjScale;
					    u_xlat22 = u_xlat3.x * u_xlat3.x;
					    u_xlat22 = -1.0 / u_xlat22;
					    u_xlat21 = u_xlat21 / u_xlat1.y;
					    u_xlat23 = u_xlat21 * 0.142857149;
					    u_xlat14 = u_xlat0.z * u_xlat23 + 1.0;
					    u_xlat23 = 0.0;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<10 ; u_xlati_loop_1++)
					    {
					        u_xlat17.x = float(u_xlati_loop_1);
					        u_xlat17.x = u_xlat17.x * 0.628318548;
					        u_xlat4.x = sin(u_xlat17.x);
					        u_xlat5.x = cos(u_xlat17.x);
					        u_xlat17.xy = u_xlat0.yx * u_xlat4.xx;
					        u_xlat4.x = u_xlat5.x * u_xlat0.x + (-u_xlat17.x);
					        u_xlat4.y = u_xlat5.x * u_xlat0.y + u_xlat17.y;
					        u_xlat5.x = u_xlat23;
					        u_xlat12 = u_xlat14;
					        for(int u_xlati_loop_2 = 0 ; u_xlati_loop_2<6 ; u_xlati_loop_2++)
					        {
					            u_xlat18.xy = u_xlat4.xy * vec2(u_xlat12);
					            u_xlat18.xy = roundEven(u_xlat18.xy);
					            u_xlat18.xy = u_xlat18.xy * _AO_Buffer_TexelSize.xy + vs_TEXCOORD0.xy;
					            u_xlat19.xy = u_xlat18.xy * _AO_Buffer_PadScale.xy;
					            u_xlat6 = textureLod(_CameraDepthTexture, u_xlat19.xy, 0.0);
					            u_xlat24 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					            u_xlat6.z = float(1.0) / u_xlat24;
					            u_xlat18.xy = u_xlat18.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					            u_xlat6.xy = u_xlat6.zz * u_xlat18.xy;
					            u_xlat12 = u_xlat21 * 0.142857149 + u_xlat12;
					            u_xlat6.xyz = (-u_xlat1.zxy) + u_xlat6.xyz;
					            u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat18.x = dot(u_xlat2.xyz, u_xlat6.xyz);
					            u_xlat25 = inversesqrt(u_xlat24);
					            u_xlat18.x = u_xlat18.x * u_xlat25 + (-_AO_Bias);
					            u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
					            u_xlat24 = u_xlat24 * u_xlat22 + 1.0;
					            u_xlat24 = max(u_xlat24, 0.0);
					            u_xlat5.x = u_xlat18.x * u_xlat24 + u_xlat5.x;
					        }
					        u_xlat23 = u_xlat5.x;
					    }
					    u_xlat0.x = u_xlat23 * _AO_Multiplier;
					    u_xlat0.x = (-u_xlat0.x) * 0.0333333351 + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat3.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    SV_Target0.x = min(u_xlat0.x, 1.0);
					    SV_Target0.y = u_xlat1.y;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 2224304
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AO_Bias;
					//   float4 _AO_Buffer_PadScale;
					//   float4 _AO_Buffer_TexelSize;
					//   float2 _AO_FadeParams;
					//   float3 _AO_FadeValues;
					//   float _AO_HalfProjScale;
					//   float _AO_Multiplier;
					//   float _AO_PowExponent;
					//   float _AO_Radius;
					//   sampler2D _AO_RandomTexture;
					//   float4 _AO_UVToView;
					//   sampler2D _CameraDepthNormalsTexture;
					//   sampler2D _CameraDepthTexture;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   _ZBufferParams             c0       1
					//   _AO_Buffer_PadScale        c1       1
					//   _AO_Buffer_TexelSize       c2       1
					//   _AO_UVToView               c3       1
					//   _AO_HalfProjScale          c4       1
					//   _AO_Radius                 c5       1
					//   _AO_PowExponent            c6       1
					//   _AO_Bias                   c7       1
					//   _AO_Multiplier             c8       1
					//   _AO_FadeParams             c9       1
					//   _AO_FadeValues             c10      1
					//   _CameraDepthTexture        s0       1
					//   _CameraDepthNormalsTexture s1       1
					//   _AO_RandomTexture          s2       1
					//
					
					    ps_3_0
					    def c11, 0.25, 0, 2, -1
					    def c12, 3.55539989, 0, -1.77769995, 1
					    def c13, 0.142857149, 1, -1, 0
					    def c14, 0.100000001, 0.5, 6.28318548, -3.14159274
					    def c15, 0, 0.0333333351, 1, 0
					    defi i0, 10, 0, 0, 0
					    defi i1, 6, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mov r0.xzw, c11.xyyy
					    mul r0.xy, r0.x, c2.zwzw
					    mul r0.xy, r0, v0
					    texldl r0, r0, s2
					    mul r1.xy, c1, v0
					    mov_pp r1.zw, c11.y
					    texldl r2, r1, s0
					    mad r0.w, c0.z, r2.x, c0.w
					    rcp_pp r2.z, r0.w
					    mad r1.zw, v0.xyxy, c3.xyxy, c3
					    mul r2.xy, r2.z, r1.zwzw
					    texld r1, r1, s1
					    mad r1.xyz, r1, c12.xxyw, c12.zzww
					    dp3 r1.z, r1, r1
					    rcp r1.z, r1.z
					    add r1.w, r1.z, r1.z
					    mul_pp r3.xy, r1, r1.w
					    mad_pp r3.z, r1.z, c11.z, c11.w
					    add r1.x, r2.z, -c9.x
					    mul_sat r1.y, r1.x, c9.y
					    mov r4.x, c5.x
					    mov r4.y, c6.x
					    add r1.zw, -r4.xyxy, c10.xyyz
					    mul r1.yz, r1.xzww, r1.y
					    cmp r1.xy, r1.x, r1.yzzw, c11.y
					    add r1.xy, r1, r4
					    mul r1.z, r1.x, c4.x
					    mul r1.x, r1.x, r1.x
					    rcp r1.x, r1.x
					    mul r0.w, r0.w, r1.z
					    mul r1.z, r0.w, c13.x
					    mad r0.z, r0.z, r1.z, -c11.w
					    mov_pp r4.zw, c11.y
					    mul_pp r3.xyz, r3, c13.yzzw
					    mov r1.zw, c11.y
					    rep i0
					      mad r2.w, r1.w, c14.x, c14.y
					      frc r2.w, r2.w
					      mad r2.w, r2.w, c14.z, c14.w
					      sincos r5.xy, r2.w
					      mul r2.w, r0.y, r5.y
					      mad r6.x, r5.x, r0.x, -r2.w
					      dp2add r6.y, r5, r0.yxzw, c11.y
					      mov r5.x, r1.z
					      mov r5.y, r0.z
					      rep i1
					        mad r5.zw, r5.y, r6.xyxy, c14.y
					        frc r6.zw, r5
					        add r5.zw, r5, -r6
					        mad r5.zw, r5, c2.xyxy, v0.xyxy
					        mul r4.xy, r5.zwzw, c1
					        texldl r7, r4, s0
					        mad r2.w, c0.z, r7.x, c0.w
					        rcp r7.z, r2.w
					        mad r4.xy, r5.zwzw, c3, c3.zwzw
					        mul r7.xy, r7.z, r4
					        mad r5.y, r0.w, c13.x, r5.y
					        add r7.xyz, -r2, r7
					        dp3 r2.w, r7, r7
					        dp3 r3.w, r3, r7
					        rsq r4.x, r2.w
					        mad_sat r3.w, r3.w, r4.x, -c7.x
					        mad_sat r2.w, r2.w, -r1.x, -c11.w
					        mad r5.x, r3.w, r2.w, r5.x
					      endrep
					      mov r1.z, r5.x
					      add r1.w, r1.w, -c11.w
					    endrep
					    mul r0.x, r1.z, c8.x
					    mad_sat r0.x, r0.x, -c15.y, c15.z
					    log r0.x, r0.x
					    mul r0.x, r0.x, r1.y
					    exp_sat_pp oC0.x, r0.x
					    mul_pp oC0.yzw, r2.z, c11_abs.xwyy
					
					// approximately 91 instruction slots used (7 texture, 84 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[19];
						vec4 _AO_Buffer_PadScale;
						vec4 _AO_Buffer_TexelSize;
						vec4 unused_0_3;
						vec4 _AO_UVToView;
						vec4 unused_0_5;
						float _AO_HalfProjScale;
						float _AO_Radius;
						float _AO_PowExponent;
						float _AO_Bias;
						float _AO_Multiplier;
						vec2 _AO_FadeParams;
						vec3 _AO_FadeValues;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _AO_RandomTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _CameraDepthNormalsTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec2 u_xlat3;
					int u_xlati3;
					vec2 u_xlat4;
					float u_xlat5;
					vec4 u_xlat6;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat15;
					vec2 u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					vec2 u_xlat18;
					vec2 u_xlat19;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					float u_xlat24;
					bool u_xlatb24;
					float u_xlat25;
					void main()
					{
					    u_xlat0.xy = _AO_Buffer_TexelSize.zw * vec2(0.25, 0.25);
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0 = textureLod(_AO_RandomTexture, u_xlat0.xy, 0.0);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _AO_Buffer_PadScale.xy;
					    u_xlat2 = textureLod(_CameraDepthTexture, u_xlat1.xy, 0.0);
					    u_xlat21 = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
					    u_xlat2.z = float(1.0) / u_xlat21;
					    u_xlat15.xy = vs_TEXCOORD0.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					    u_xlat2.xy = u_xlat2.zz * u_xlat15.xy;
					    u_xlat1 = texture(_CameraDepthNormalsTexture, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(3.55539989, 3.55539989, 0.0) + vec3(-1.77769995, -1.77769995, 1.0);
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = 2.0 / u_xlat21;
					    u_xlat1.xy = u_xlat1.xy * vec2(u_xlat21);
					    u_xlat1.z = u_xlat21 + -1.0;
					    u_xlat21 = u_xlat2.z + (-_AO_FadeParams.xxyx.y);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = u_xlat21 * _AO_FadeParams.xxyx.z;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat3.xy = (-vec2(_AO_Radius, _AO_PowExponent)) + _AO_FadeValues.yz;
					    u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy + vec2(_AO_Radius, _AO_PowExponent);
					    u_xlat21 = u_xlat3.x * _AO_HalfProjScale;
					    u_xlat22 = u_xlat3.x * u_xlat3.x;
					    u_xlat22 = -1.0 / u_xlat22;
					    u_xlat21 = u_xlat21 / u_xlat2.z;
					    u_xlat23 = u_xlat21 * 0.142857149;
					    u_xlat14 = u_xlat0.z * u_xlat23 + 1.0;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.0, -1.0, -1.0);
					    u_xlat23 = 0.0;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<10 ; u_xlati_loop_1++)
					    {
					        u_xlat17.x = float(u_xlati_loop_1);
					        u_xlat17.x = u_xlat17.x * 0.628318548;
					        u_xlat4.x = sin(u_xlat17.x);
					        u_xlat5 = cos(u_xlat17.x);
					        u_xlat17.xy = u_xlat0.yx * u_xlat4.xx;
					        u_xlat4.x = u_xlat5 * u_xlat0.x + (-u_xlat17.x);
					        u_xlat4.y = u_xlat5 * u_xlat0.y + u_xlat17.y;
					        u_xlat5 = u_xlat23;
					        u_xlat12 = u_xlat14;
					        for(int u_xlati_loop_2 = 0 ; u_xlati_loop_2<6 ; u_xlati_loop_2++)
					        {
					            u_xlat18.xy = u_xlat4.xy * vec2(u_xlat12);
					            u_xlat18.xy = roundEven(u_xlat18.xy);
					            u_xlat18.xy = u_xlat18.xy * _AO_Buffer_TexelSize.xy + vs_TEXCOORD0.xy;
					            u_xlat19.xy = u_xlat18.xy * _AO_Buffer_PadScale.xy;
					            u_xlat6 = textureLod(_CameraDepthTexture, u_xlat19.xy, 0.0);
					            u_xlat24 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					            u_xlat6.z = float(1.0) / u_xlat24;
					            u_xlat18.xy = u_xlat18.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					            u_xlat6.xy = u_xlat6.zz * u_xlat18.xy;
					            u_xlat12 = u_xlat21 * 0.142857149 + u_xlat12;
					            u_xlat6.xyz = (-u_xlat2.xyz) + u_xlat6.xyz;
					            u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat18.x = dot(u_xlat1.xyz, u_xlat6.xyz);
					            u_xlat25 = inversesqrt(u_xlat24);
					            u_xlat18.x = u_xlat18.x * u_xlat25 + (-_AO_Bias);
					            u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
					            u_xlat24 = u_xlat24 * u_xlat22 + 1.0;
					            u_xlat24 = max(u_xlat24, 0.0);
					            u_xlat5 = u_xlat18.x * u_xlat24 + u_xlat5;
					        }
					        u_xlat23 = u_xlat5;
					    }
					    u_xlat0.x = u_xlat23 * _AO_Multiplier;
					    u_xlat0.x = (-u_xlat0.x) * 0.0333333351 + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat3.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    SV_Target0.x = min(u_xlat0.x, 1.0);
					    SV_Target0.y = u_xlat2.z;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 2248069
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AO_Bias;
					//   float4 _AO_Buffer_PadScale;
					//   float4 _AO_Buffer_TexelSize;
					//   row_major float4x4 _AO_CameraView;
					//   float2 _AO_FadeParams;
					//   float3 _AO_FadeValues;
					//   float _AO_HalfProjScale;
					//   float _AO_Multiplier;
					//   float _AO_PowExponent;
					//   float _AO_Radius;
					//   sampler2D _AO_RandomTexture;
					//   float4 _AO_UVToView;
					//   sampler2D _CameraDepthTexture;
					//   sampler2D _CameraGBufferTexture2;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                   Reg   Size
					//   ---------------------- ----- ----
					//   _AO_CameraView         c0       3
					//   _ZBufferParams         c3       1
					//   _AO_Buffer_PadScale    c4       1
					//   _AO_Buffer_TexelSize   c5       1
					//   _AO_UVToView           c6       1
					//   _AO_HalfProjScale      c7       1
					//   _AO_Radius             c8       1
					//   _AO_PowExponent        c9       1
					//   _AO_Bias               c10      1
					//   _AO_Multiplier         c11      1
					//   _AO_FadeParams         c12      1
					//   _AO_FadeValues         c13      1
					//   _CameraGBufferTexture2 s0       1
					//   _CameraDepthTexture    s1       1
					//   _AO_RandomTexture      s2       1
					//
					
					    ps_3_0
					    def c14, 0.25, 0, 2, -1
					    def c15, 0.142857149, 1, -1, 0
					    def c16, 0.100000001, 0.5, 6.28318548, -3.14159274
					    def c17, 0, 0.0333333351, 1, 0
					    defi i0, 10, 0, 0, 0
					    defi i1, 6, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mov r0.xzw, c14.xyyy
					    mul r0.xy, r0.x, c5.zwzw
					    mul r0.xy, r0, v0
					    texldl r0, r0, s2
					    mul r1.xy, c4, v0
					    mov r1.zw, c14.y
					    texldl r2, r1, s1
					    mad r0.w, c3.z, r2.x, c3.w
					    rcp_pp r2.z, r0.w
					    mad r1.zw, v0.xyxy, c6.xyxy, c6
					    mul r2.xy, r2.z, r1.zwzw
					    texld_pp r1, r1, s0
					    mad_pp r1.xyz, r1, c14.z, c14.w
					    dp3 r3.x, c0, r1
					    dp3 r3.y, c1, r1
					    dp3 r3.z, c2, r1
					    nrm_pp r1.xyz, r3
					    add r1.w, r2.z, -c12.x
					    mul_sat r2.w, r1.w, c12.y
					    mov r3.x, c8.x
					    mov r3.y, c9.x
					    add r3.zw, -r3.xyxy, c13.xyyz
					    mul r3.zw, r2.w, r3
					    cmp r3.zw, r1.w, r3, c14.y
					    add r3.xy, r3.zwzw, r3
					    mul r1.w, r3.x, c7.x
					    mul r2.w, r3.x, r3.x
					    rcp r2.w, r2.w
					    mul r0.w, r0.w, r1.w
					    mul r1.w, r0.w, c15.x
					    mad r0.z, r0.z, r1.w, -c14.w
					    mov r4.zw, c14.y
					    mul_pp r1.xyz, r1, c15.yzzw
					    mov r1.w, c14.y
					    mov r3.x, c14.y
					    rep i0
					      mad r3.z, r3.x, c16.x, c16.y
					      frc r3.z, r3.z
					      mad r3.z, r3.z, c16.z, c16.w
					      sincos r5.xy, r3.z
					      mul r3.z, r0.y, r5.y
					      mad r6.x, r5.x, r0.x, -r3.z
					      dp2add r6.y, r5, r0.yxzw, c14.y
					      mov r5.x, r1.w
					      mov r5.y, r0.z
					      rep i1
					        mad r3.zw, r5.y, r6.xyxy, c16.y
					        frc r5.zw, r3
					        add r3.zw, r3, -r5
					        mad r3.zw, r3, c5.xyxy, v0.xyxy
					        mul r4.xy, r3.zwzw, c4
					        texldl r7, r4, s1
					        mad r4.x, c3.z, r7.x, c3.w
					        rcp r7.z, r4.x
					        mad r3.zw, r3, c6.xyxy, c6
					        mul r7.xy, r7.z, r3.zwzw
					        mad r5.y, r0.w, c15.x, r5.y
					        add r7.xyz, -r2, r7
					        dp3 r3.z, r7, r7
					        dp3 r3.w, r1, r7
					        rsq r4.x, r3.z
					        mad_sat r3.w, r3.w, r4.x, -c10.x
					        mad_sat r3.z, r3.z, -r2.w, -c14.w
					        mad r5.x, r3.w, r3.z, r5.x
					      endrep
					      mov r1.w, r5.x
					      add r3.x, r3.x, -c14.w
					    endrep
					    mul r0.x, r1.w, c11.x
					    mad_sat r0.x, r0.x, -c17.y, c17.z
					    log r0.x, r0.x
					    mul r0.x, r0.x, r3.y
					    exp_sat_pp oC0.x, r0.x
					    mul_pp oC0.yzw, r2.z, c14_abs.xwyy
					
					// approximately 93 instruction slots used (7 texture, 86 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						mat4x4 _AO_CameraView;
						vec4 unused_0_2[8];
						vec4 _AO_Buffer_PadScale;
						vec4 _AO_Buffer_TexelSize;
						vec4 unused_0_5;
						vec4 _AO_UVToView;
						vec4 unused_0_7;
						float _AO_HalfProjScale;
						float _AO_Radius;
						float _AO_PowExponent;
						float _AO_Bias;
						float _AO_Multiplier;
						vec2 _AO_FadeParams;
						vec3 _AO_FadeValues;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _AO_RandomTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _CameraGBufferTexture2;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					int u_xlati3;
					vec2 u_xlat4;
					float u_xlat5;
					vec4 u_xlat6;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat15;
					vec2 u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					vec2 u_xlat18;
					vec2 u_xlat19;
					float u_xlat21;
					float u_xlat22;
					float u_xlat23;
					float u_xlat24;
					bool u_xlatb24;
					float u_xlat25;
					void main()
					{
					    u_xlat0.xy = _AO_Buffer_TexelSize.zw * vec2(0.25, 0.25);
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0 = textureLod(_AO_RandomTexture, u_xlat0.xy, 0.0);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _AO_Buffer_PadScale.xy;
					    u_xlat2 = textureLod(_CameraDepthTexture, u_xlat1.xy, 0.0);
					    u_xlat21 = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
					    u_xlat2.z = float(1.0) / u_xlat21;
					    u_xlat15.xy = vs_TEXCOORD0.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					    u_xlat2.xy = u_xlat2.zz * u_xlat15.xy;
					    u_xlat1 = texture(_CameraGBufferTexture2, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = u_xlat1.yyy * _AO_CameraView[1].xyz;
					    u_xlat1.xyw = _AO_CameraView[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = _AO_CameraView[2].xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = u_xlat2.z + (-_AO_FadeParams.xxyx.y);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = u_xlat21 * _AO_FadeParams.xxyx.z;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat3.xy = (-vec2(_AO_Radius, _AO_PowExponent)) + _AO_FadeValues.yz;
					    u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy + vec2(_AO_Radius, _AO_PowExponent);
					    u_xlat21 = u_xlat3.x * _AO_HalfProjScale;
					    u_xlat22 = u_xlat3.x * u_xlat3.x;
					    u_xlat22 = -1.0 / u_xlat22;
					    u_xlat21 = u_xlat21 / u_xlat2.z;
					    u_xlat23 = u_xlat21 * 0.142857149;
					    u_xlat14 = u_xlat0.z * u_xlat23 + 1.0;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.0, -1.0, -1.0);
					    u_xlat23 = 0.0;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<10 ; u_xlati_loop_1++)
					    {
					        u_xlat17.x = float(u_xlati_loop_1);
					        u_xlat17.x = u_xlat17.x * 0.628318548;
					        u_xlat4.x = sin(u_xlat17.x);
					        u_xlat5 = cos(u_xlat17.x);
					        u_xlat17.xy = u_xlat0.yx * u_xlat4.xx;
					        u_xlat4.x = u_xlat5 * u_xlat0.x + (-u_xlat17.x);
					        u_xlat4.y = u_xlat5 * u_xlat0.y + u_xlat17.y;
					        u_xlat5 = u_xlat23;
					        u_xlat12 = u_xlat14;
					        for(int u_xlati_loop_2 = 0 ; u_xlati_loop_2<6 ; u_xlati_loop_2++)
					        {
					            u_xlat18.xy = u_xlat4.xy * vec2(u_xlat12);
					            u_xlat18.xy = roundEven(u_xlat18.xy);
					            u_xlat18.xy = u_xlat18.xy * _AO_Buffer_TexelSize.xy + vs_TEXCOORD0.xy;
					            u_xlat19.xy = u_xlat18.xy * _AO_Buffer_PadScale.xy;
					            u_xlat6 = textureLod(_CameraDepthTexture, u_xlat19.xy, 0.0);
					            u_xlat24 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					            u_xlat6.z = float(1.0) / u_xlat24;
					            u_xlat18.xy = u_xlat18.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					            u_xlat6.xy = u_xlat6.zz * u_xlat18.xy;
					            u_xlat12 = u_xlat21 * 0.142857149 + u_xlat12;
					            u_xlat6.xyz = (-u_xlat2.xyz) + u_xlat6.xyz;
					            u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat18.x = dot(u_xlat1.xyz, u_xlat6.xyz);
					            u_xlat25 = inversesqrt(u_xlat24);
					            u_xlat18.x = u_xlat18.x * u_xlat25 + (-_AO_Bias);
					            u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
					            u_xlat24 = u_xlat24 * u_xlat22 + 1.0;
					            u_xlat24 = max(u_xlat24, 0.0);
					            u_xlat5 = u_xlat18.x * u_xlat24 + u_xlat5;
					        }
					        u_xlat23 = u_xlat5;
					    }
					    u_xlat0.x = u_xlat23 * _AO_Multiplier;
					    u_xlat0.x = (-u_xlat0.x) * 0.0333333351 + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat3.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    SV_Target0.x = min(u_xlat0.x, 1.0);
					    SV_Target0.y = u_xlat2.z;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 2311191
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AO_Bias;
					//   float4 _AO_Buffer_PadScale;
					//   float4 _AO_Buffer_TexelSize;
					//   row_major float4x4 _AO_CameraView;
					//   float2 _AO_FadeParams;
					//   float3 _AO_FadeValues;
					//   float _AO_HalfProjScale;
					//   float _AO_Multiplier;
					//   float _AO_PowExponent;
					//   float _AO_Radius;
					//   sampler2D _AO_RandomTexture;
					//   float4 _AO_UVToView;
					//   sampler2D _CameraDepthTexture;
					//   sampler2D _CameraGBufferTexture2;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                   Reg   Size
					//   ---------------------- ----- ----
					//   _AO_CameraView         c0       3
					//   _ZBufferParams         c3       1
					//   _AO_Buffer_PadScale    c4       1
					//   _AO_Buffer_TexelSize   c5       1
					//   _AO_UVToView           c6       1
					//   _AO_HalfProjScale      c7       1
					//   _AO_Radius             c8       1
					//   _AO_PowExponent        c9       1
					//   _AO_Bias               c10      1
					//   _AO_Multiplier         c11      1
					//   _AO_FadeParams         c12      1
					//   _AO_FadeValues         c13      1
					//   _CameraGBufferTexture2 s0       1
					//   _CameraDepthTexture    s1       1
					//   _AO_RandomTexture      s2       1
					//
					
					    ps_3_0
					    def c14, 0.25, 0, 2, -1
					    def c15, 0.142857149, 1, -1, 0
					    def c16, 0.100000001, 0.5, 6.28318548, -3.14159274
					    def c17, 0, 0.0333333351, 1, 0
					    defi i0, 10, 0, 0, 0
					    defi i1, 6, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mov r0.xzw, c14.xyyy
					    mul r0.xy, r0.x, c5.zwzw
					    mul r0.xy, r0, v0
					    texldl r0, r0, s2
					    mul r1.xy, c4, v0
					    mov r1.zw, c14.y
					    texldl r2, r1, s1
					    mad r0.w, c3.z, r2.x, c3.w
					    rcp_pp r2.z, r0.w
					    mad r1.zw, v0.xyxy, c6.xyxy, c6
					    mul r2.xy, r2.z, r1.zwzw
					    texld_pp r1, r1, s0
					    mad_pp r1.xyz, r1, c14.z, c14.w
					    add r1.w, r1.w, c14.w
					    add r3.xyz, -r1_abs.xyxw, -c14.w
					    add_pp r4.z, -r1_abs.y, r3.x
					    cmp_pp r3.xw, -r1.xyzy, c14_abs.y, c14_abs.w
					    cmp_pp r5.xy, r1, -c14_abs.y, -c14_abs.w
					    add r3.xw, r3, r5.xyzy
					    mul_pp r3.xy, r3.xwzw, r3.yzzw
					    cmp_pp r4.xy, r4.z, r1, r3
					    cmp r1.xyz, r1.w, r1, r4
					    dp3 r3.x, c0, r1
					    dp3 r3.y, c1, r1
					    dp3 r3.z, c2, r1
					    nrm_pp r1.xyz, r3
					    add r1.w, r2.z, -c12.x
					    mul_sat r2.w, r1.w, c12.y
					    mov r3.x, c8.x
					    mov r3.y, c9.x
					    add r3.zw, -r3.xyxy, c13.xyyz
					    mul r3.zw, r2.w, r3
					    cmp r3.zw, r1.w, r3, c14.y
					    add r3.xy, r3.zwzw, r3
					    mul r1.w, r3.x, c7.x
					    mul r2.w, r3.x, r3.x
					    rcp r2.w, r2.w
					    mul r0.w, r0.w, r1.w
					    mul r1.w, r0.w, c15.x
					    mad r0.z, r0.z, r1.w, -c14.w
					    mov r4.zw, c14.y
					    mul_pp r1.xyz, r1, c15.yzzw
					    mov r1.w, c14.y
					    mov r3.x, c14.y
					    rep i0
					      mad r3.z, r3.x, c16.x, c16.y
					      frc r3.z, r3.z
					      mad r3.z, r3.z, c16.z, c16.w
					      sincos r5.xy, r3.z
					      mul r3.z, r0.y, r5.y
					      mad r6.x, r5.x, r0.x, -r3.z
					      dp2add r6.y, r5, r0.yxzw, c14.y
					      mov r5.x, r1.w
					      mov r5.y, r0.z
					      rep i1
					        mad r3.zw, r5.y, r6.xyxy, c16.y
					        frc r5.zw, r3
					        add r3.zw, r3, -r5
					        mad r3.zw, r3, c5.xyxy, v0.xyxy
					        mul r4.xy, r3.zwzw, c4
					        texldl r7, r4, s1
					        mad r4.x, c3.z, r7.x, c3.w
					        rcp r7.z, r4.x
					        mad r3.zw, r3, c6.xyxy, c6
					        mul r7.xy, r7.z, r3.zwzw
					        mad r5.y, r0.w, c15.x, r5.y
					        add r7.xyz, -r2, r7
					        dp3 r3.z, r7, r7
					        dp3 r3.w, r1, r7
					        rsq r4.x, r3.z
					        mad_sat r3.w, r3.w, r4.x, -c10.x
					        mad_sat r3.z, r3.z, -r2.w, -c14.w
					        mad r5.x, r3.w, r3.z, r5.x
					      endrep
					      mov r1.w, r5.x
					      add r3.x, r3.x, -c14.w
					    endrep
					    mul r0.x, r1.w, c11.x
					    mad_sat r0.x, r0.x, -c17.y, c17.z
					    log r0.x, r0.x
					    mul r0.x, r0.x, r3.y
					    exp_sat_pp oC0.x, r0.x
					    mul_pp oC0.yzw, r2.z, c14_abs.xwyy
					
					// approximately 102 instruction slots used (7 texture, 95 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						mat4x4 _AO_CameraView;
						vec4 unused_0_2[8];
						vec4 _AO_Buffer_PadScale;
						vec4 _AO_Buffer_TexelSize;
						vec4 unused_0_5;
						vec4 _AO_UVToView;
						vec4 unused_0_7;
						float _AO_HalfProjScale;
						float _AO_Radius;
						float _AO_PowExponent;
						float _AO_Bias;
						float _AO_Multiplier;
						vec2 _AO_FadeParams;
						vec3 _AO_FadeValues;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _AO_RandomTexture;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _CameraGBufferTexture2;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					ivec4 u_xlati3;
					vec3 u_xlat4;
					float u_xlat5;
					ivec2 u_xlati5;
					vec4 u_xlat6;
					float u_xlat12;
					float u_xlat14;
					vec2 u_xlat15;
					vec2 u_xlat17;
					int u_xlati17;
					bool u_xlatb17;
					vec2 u_xlat18;
					vec2 u_xlat19;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					bool u_xlatb22;
					float u_xlat23;
					float u_xlat24;
					bool u_xlatb24;
					float u_xlat25;
					void main()
					{
					    u_xlat0.xy = _AO_Buffer_TexelSize.zw * vec2(0.25, 0.25);
					    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD0.xy;
					    u_xlat0 = textureLod(_AO_RandomTexture, u_xlat0.xy, 0.0);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _AO_Buffer_PadScale.xy;
					    u_xlat2 = textureLod(_CameraDepthTexture, u_xlat1.xy, 0.0);
					    u_xlat21 = _ZBufferParams.z * u_xlat2.x + _ZBufferParams.w;
					    u_xlat2.z = float(1.0) / u_xlat21;
					    u_xlat15.xy = vs_TEXCOORD0.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					    u_xlat2.xy = u_xlat2.zz * u_xlat15.xy;
					    u_xlat1 = texture(_CameraGBufferTexture2, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlatb21 = u_xlat1.w<1.0;
					    u_xlat3.xyz = -abs(u_xlat1.xyx) + vec3(1.0, 1.0, 1.0);
					    u_xlat4.z = -abs(u_xlat1.y) + u_xlat3.x;
					    u_xlatb22 = u_xlat4.z>=0.0;
					    u_xlati3.xw = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat1.xxxy).xw) * 0xFFFFFFFFu);
					    u_xlati5.xy = ivec2(uvec2(lessThan(u_xlat1.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
					    u_xlati3.xw = (-u_xlati3.xw) + u_xlati5.xy;
					    u_xlat3.xw = vec2(u_xlati3.xw);
					    u_xlat3.xy = u_xlat3.xw * u_xlat3.yz;
					    u_xlat4.xy = (bool(u_xlatb22)) ? u_xlat1.xy : u_xlat3.xy;
					    u_xlat1.xyz = (bool(u_xlatb21)) ? u_xlat4.xyz : u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.yyy * _AO_CameraView[1].xyz;
					    u_xlat1.xyw = _AO_CameraView[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = _AO_CameraView[2].xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat21 = u_xlat2.z + (-_AO_FadeParams.xxyx.y);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = u_xlat21 * _AO_FadeParams.xxyx.z;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat3.xy = (-vec2(_AO_Radius, _AO_PowExponent)) + _AO_FadeValues.yz;
					    u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy + vec2(_AO_Radius, _AO_PowExponent);
					    u_xlat21 = u_xlat3.x * _AO_HalfProjScale;
					    u_xlat22 = u_xlat3.x * u_xlat3.x;
					    u_xlat22 = -1.0 / u_xlat22;
					    u_xlat21 = u_xlat21 / u_xlat2.z;
					    u_xlat23 = u_xlat21 * 0.142857149;
					    u_xlat14 = u_xlat0.z * u_xlat23 + 1.0;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.0, -1.0, -1.0);
					    u_xlat23 = 0.0;
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<10 ; u_xlati_loop_1++)
					    {
					        u_xlat17.x = float(u_xlati_loop_1);
					        u_xlat17.x = u_xlat17.x * 0.628318548;
					        u_xlat4.x = sin(u_xlat17.x);
					        u_xlat5 = cos(u_xlat17.x);
					        u_xlat17.xy = u_xlat0.yx * u_xlat4.xx;
					        u_xlat4.x = u_xlat5 * u_xlat0.x + (-u_xlat17.x);
					        u_xlat4.y = u_xlat5 * u_xlat0.y + u_xlat17.y;
					        u_xlat5 = u_xlat23;
					        u_xlat12 = u_xlat14;
					        for(int u_xlati_loop_2 = 0 ; u_xlati_loop_2<6 ; u_xlati_loop_2++)
					        {
					            u_xlat18.xy = u_xlat4.xy * vec2(u_xlat12);
					            u_xlat18.xy = roundEven(u_xlat18.xy);
					            u_xlat18.xy = u_xlat18.xy * _AO_Buffer_TexelSize.xy + vs_TEXCOORD0.xy;
					            u_xlat19.xy = u_xlat18.xy * _AO_Buffer_PadScale.xy;
					            u_xlat6 = textureLod(_CameraDepthTexture, u_xlat19.xy, 0.0);
					            u_xlat24 = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					            u_xlat6.z = float(1.0) / u_xlat24;
					            u_xlat18.xy = u_xlat18.xy * _AO_UVToView.xy + _AO_UVToView.zw;
					            u_xlat6.xy = u_xlat6.zz * u_xlat18.xy;
					            u_xlat12 = u_xlat21 * 0.142857149 + u_xlat12;
					            u_xlat6.xyz = (-u_xlat2.xyz) + u_xlat6.xyz;
					            u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlat18.x = dot(u_xlat1.xyz, u_xlat6.xyz);
					            u_xlat25 = inversesqrt(u_xlat24);
					            u_xlat18.x = u_xlat18.x * u_xlat25 + (-_AO_Bias);
					            u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
					            u_xlat24 = u_xlat24 * u_xlat22 + 1.0;
					            u_xlat24 = max(u_xlat24, 0.0);
					            u_xlat5 = u_xlat18.x * u_xlat24 + u_xlat5;
					        }
					        u_xlat23 = u_xlat5;
					    }
					    u_xlat0.x = u_xlat23 * _AO_Multiplier;
					    u_xlat0.x = (-u_xlat0.x) * 0.0333333351 + 1.0;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat3.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    SV_Target0.x = min(u_xlat0.x, 1.0);
					    SV_Target0.y = u_xlat2.z;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 2416298
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _AO_Buffer_PadScale;
					//   float2 _AO_FadeParams;
					//   float3 _AO_FadeValues;
					//   float4 _AO_Levels;
					//   sampler2D _AO_OcclusionTexture;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _AO_Buffer_PadScale  c0       1
					//   _AO_Levels           c1       1
					//   _AO_FadeParams       c2       1
					//   _AO_FadeValues       c3       1
					//   _AO_OcclusionTexture s0       1
					//
					
					    ps_3_0
					    def c4, 1, 0, -1, 0.416666657
					    def c5, 1.05499995, -0.0549999997, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mov r0, c1
					    add r0.w, -r0.w, c3.x
					    mul r1.xy, c0.zwzw, v0
					    texld_pp r1, r1, s0
					    add r1.y, r1.y, -c2.x
					    mul_sat r1.z, r1.y, c2.y
					    mul r0.w, r0.w, r1.z
					    cmp r0.w, r1.y, r0.w, c4.y
					    add r0.w, r0.w, c1.w
					    add_pp r0.xyz, -r0, c4.x
					    mad_pp r0.xyz, r1.x, r0, c1
					    add r0.xyz, r0, c4.z
					    mad_pp r0.xyz, r0.w, r0, c4.x
					    max_pp r1.xyz, r0, c4.y
					    log_pp r0.x, r1.x
					    log_pp r0.y, r1.y
					    log_pp r0.z, r1.z
					    mul_pp r0.xyz, r0, c4.w
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    mad_pp r0.xyz, r1, c5.x, c5.y
					    max_pp oC0.xyz, r0, c4.y
					    mov_pp oC0.w, c4.x
					
					// approximately 24 instruction slots used (1 texture, 23 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[19];
						vec4 _AO_Buffer_PadScale;
						vec4 unused_0_2[3];
						vec4 _AO_Levels;
						vec4 unused_0_4;
						vec2 _AO_FadeParams;
						vec3 _AO_FadeValues;
					};
					uniform  sampler2D _AO_OcclusionTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					float u_xlat4;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _AO_Buffer_PadScale.zw;
					    u_xlat0 = texture(_AO_OcclusionTexture, u_xlat0.xy);
					    u_xlat2 = u_xlat0.y + (-_AO_FadeParams.xxyx.y);
					    u_xlat2 = max(u_xlat2, 0.0);
					    u_xlat2 = u_xlat2 * _AO_FadeParams.xxyx.z;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat4 = (-_AO_Levels.w) + _AO_FadeValues.x;
					    u_xlat2 = u_xlat2 * u_xlat4 + _AO_Levels.w;
					    u_xlat1.xyz = (-_AO_Levels.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + _AO_Levels.xyz;
					    u_xlat0.xzw = u_xlat0.xzw + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat0.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    SV_Target0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Blend DstColor Zero, DstAlpha Zero
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 2489284
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _AO_Buffer_PadScale;
					//   float2 _AO_FadeParams;
					//   float3 _AO_FadeValues;
					//   float4 _AO_Levels;
					//   sampler2D _AO_OcclusionTexture;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _AO_Buffer_PadScale  c0       1
					//   _AO_Levels           c1       1
					//   _AO_FadeParams       c2       1
					//   _AO_FadeValues       c3       1
					//   _AO_OcclusionTexture s0       1
					//
					
					    ps_3_0
					    def c4, 1, 0, -1, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mov r0.x, c4.x
					    mul r0.yz, c0.xzww, v0.xxyw
					    texld_pp r1, r0.yzzw, s0
					    lrp_pp r2.xyz, r1.x, r0.x, c1
					    mov_pp r2.w, r1.x
					    add r0.x, r1.y, -c2.x
					    add r1, r2, c4.z
					    mul_sat r0.y, r0.x, c2.y
					    mov r0.w, c1.w
					    add r0.z, -r0.w, c3.x
					    mul r0.y, r0.z, r0.y
					    cmp r0.x, r0.x, r0.y, c4.y
					    add r0.x, r0.x, c1.w
					    mad_pp r0, r0.x, r1, c4.x
					    mad_pp oC0, r0.w, c4.yyyx, c4.xxxy
					    mad_pp oC1, r0, c4.xxxy, c4.yyyx
					
					// approximately 16 instruction slots used (1 texture, 15 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[19];
						vec4 _AO_Buffer_PadScale;
						vec4 unused_0_2[3];
						vec4 _AO_Levels;
						vec4 unused_0_4;
						vec2 _AO_FadeParams;
						vec3 _AO_FadeValues;
					};
					uniform  sampler2D _AO_OcclusionTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat3;
					void main()
					{
					    u_xlat0.xyz = (-_AO_Levels.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _AO_Buffer_PadScale.zw;
					    u_xlat1 = texture(_AO_OcclusionTexture, u_xlat1.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _AO_Levels.xyz;
					    u_xlat0.w = u_xlat1.x;
					    u_xlat1.x = u_xlat1.y + (-_AO_FadeParams.xxyx.y);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = u_xlat1.x * _AO_FadeParams.xxyx.z;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0 = u_xlat0 + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat3 = (-_AO_Levels.w) + _AO_FadeValues.x;
					    u_xlat1.x = u_xlat1.x * u_xlat3 + _AO_Levels.w;
					    u_xlat0 = u_xlat1.xxxx * u_xlat0 + vec4(1.0, 1.0, 1.0, 1.0);
					    SV_Target0.w = u_xlat0.w;
					    SV_Target1.xyz = u_xlat0.xyz;
					    SV_Target0.xyz = vec3(1.0, 1.0, 1.0);
					    SV_Target1.w = 1.0;
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 2555386
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _AO_Buffer_PadScale;
					//   float2 _AO_FadeParams;
					//   float3 _AO_FadeValues;
					//   sampler2D _AO_GBufferAlbedo;
					//   sampler2D _AO_GBufferEmission;
					//   float4 _AO_Levels;
					//   sampler2D _AO_OcclusionTexture;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _AO_Buffer_PadScale  c0       1
					//   _AO_Levels           c1       1
					//   _AO_FadeParams       c2       1
					//   _AO_FadeValues       c3       1
					//   _AO_GBufferAlbedo    s0       1
					//   _AO_GBufferEmission  s1       1
					//   _AO_OcclusionTexture s2       1
					//
					
					    ps_3_0
					    def c4, 1, 0, -1, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mov r0.x, c4.x
					    mul r0.yz, c0.xzww, v0.xxyw
					    texld_pp r1, r0.yzzw, s2
					    lrp_pp r2.xyz, r1.x, r0.x, c1
					    mov_pp r2.w, r1.x
					    add r0.x, r1.y, -c2.x
					    add r1, r2, c4.z
					    mul_sat r0.y, r0.x, c2.y
					    mov r0.w, c1.w
					    add r0.z, -r0.w, c3.x
					    mul r0.y, r0.z, r0.y
					    cmp r0.x, r0.x, r0.y, c4.y
					    add r0.x, r0.x, c1.w
					    mad_pp r0, r0.x, r1, c4.x
					    texld_pp r1, v0, s0
					    mul_pp oC0.w, r0.w, r1.w
					    mov_pp oC0.xyz, r1
					    texld_pp r1, v0, s1
					    log_pp r2.x, r1.x
					    log_pp r2.y, r1.y
					    log_pp r2.z, r1.z
					    mov_pp oC1.w, r1.w
					    mul_pp r0.xyz, r0, -r2
					    exp_pp oC1.x, -r0.x
					    exp_pp oC1.y, -r0.y
					    exp_pp oC1.z, -r0.z
					
					// approximately 26 instruction slots used (3 texture, 23 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[19];
						vec4 _AO_Buffer_PadScale;
						vec4 unused_0_2[3];
						vec4 _AO_Levels;
						vec4 unused_0_4;
						vec2 _AO_FadeParams;
						vec3 _AO_FadeValues;
					};
					uniform  sampler2D _AO_OcclusionTexture;
					uniform  sampler2D _AO_GBufferAlbedo;
					uniform  sampler2D _AO_GBufferEmission;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat3;
					void main()
					{
					    u_xlat0.xyz = (-_AO_Levels.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat1.xy = vs_TEXCOORD0.xy * _AO_Buffer_PadScale.zw;
					    u_xlat1 = texture(_AO_OcclusionTexture, u_xlat1.xy);
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + _AO_Levels.xyz;
					    u_xlat0.w = u_xlat1.x;
					    u_xlat1.x = u_xlat1.y + (-_AO_FadeParams.xxyx.y);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = u_xlat1.x * _AO_FadeParams.xxyx.z;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0 = u_xlat0 + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat3 = (-_AO_Levels.w) + _AO_FadeValues.x;
					    u_xlat1.x = u_xlat1.x * u_xlat3 + _AO_Levels.w;
					    u_xlat0 = u_xlat1.xxxx * u_xlat0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = texture(_AO_GBufferAlbedo, vs_TEXCOORD0.xy);
					    SV_Target0.w = u_xlat0.w * u_xlat1.w;
					    SV_Target0.xyz = u_xlat1.xyz;
					    u_xlat1 = texture(_AO_GBufferEmission, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    SV_Target1.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xyz * (-u_xlat1.xyz);
					    SV_Target1.xyz = exp2((-u_xlat0.xyz));
					    return;
					}"
				}
			}
		}
		Pass {
			Blend DstColor Zero, DstColor Zero
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 2601617
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _AO_Buffer_PadScale;
					//   float2 _AO_FadeParams;
					//   float3 _AO_FadeValues;
					//   float4 _AO_Levels;
					//   sampler2D _AO_OcclusionTexture;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _AO_Buffer_PadScale  c0       1
					//   _AO_Levels           c1       1
					//   _AO_FadeParams       c2       1
					//   _AO_FadeValues       c3       1
					//   _AO_OcclusionTexture s0       1
					//
					
					    ps_3_0
					    def c4, 1, 0, -1, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mov r0, c1
					    add r0.w, -r0.w, c3.x
					    mul r1.xy, c0.zwzw, v0
					    texld_pp r1, r1, s0
					    add r1.y, r1.y, -c2.x
					    mul_sat r1.z, r1.y, c2.y
					    mul r0.w, r0.w, r1.z
					    cmp r0.w, r1.y, r0.w, c4.y
					    add r0.w, r0.w, c1.w
					    add_pp r0.xyz, -r0, c4.x
					    mad_pp r0.xyz, r1.x, r0, c1
					    add r0.xyz, r0, c4.z
					    mad_pp oC0.xyz, r0.w, r0, c4.x
					    mov_pp oC0.w, c4.x
					
					// approximately 14 instruction slots used (1 texture, 13 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[19];
						vec4 _AO_Buffer_PadScale;
						vec4 unused_0_2[3];
						vec4 _AO_Levels;
						vec4 unused_0_4;
						vec2 _AO_FadeParams;
						vec3 _AO_FadeValues;
					};
					uniform  sampler2D _AO_OcclusionTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat2;
					float u_xlat4;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _AO_Buffer_PadScale.zw;
					    u_xlat0 = texture(_AO_OcclusionTexture, u_xlat0.xy);
					    u_xlat2 = u_xlat0.y + (-_AO_FadeParams.xxyx.y);
					    u_xlat2 = max(u_xlat2, 0.0);
					    u_xlat2 = u_xlat2 * _AO_FadeParams.xxyx.z;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat4 = (-_AO_Levels.w) + _AO_FadeValues.x;
					    u_xlat2 = u_xlat2 * u_xlat4 + _AO_Levels.w;
					    u_xlat1.xyz = (-_AO_Levels.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + _AO_Levels.xyz;
					    u_xlat0.xzw = u_xlat0.xzw + vec3(-1.0, -1.0, -1.0);
					    SV_Target0.xyz = vec3(u_xlat2) * u_xlat0.xzw + vec3(1.0, 1.0, 1.0);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 2666903
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _AO_Buffer_PadScale;
					//   float2 _AO_FadeParams;
					//   float3 _AO_FadeValues;
					//   sampler2D _AO_GBufferEmission;
					//   float4 _AO_Levels;
					//   sampler2D _AO_OcclusionTexture;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _AO_Buffer_PadScale  c0       1
					//   _AO_Levels           c1       1
					//   _AO_FadeParams       c2       1
					//   _AO_FadeValues       c3       1
					//   _AO_GBufferEmission  s0       1
					//   _AO_OcclusionTexture s1       1
					//
					
					    ps_3_0
					    def c4, 1, 0, -1, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mov r0, c1
					    add r0.w, -r0.w, c3.x
					    mul r1.xy, c0.zwzw, v0
					    texld_pp r1, r1, s1
					    add r1.y, r1.y, -c2.x
					    mul_sat r1.z, r1.y, c2.y
					    mul r0.w, r0.w, r1.z
					    cmp r0.w, r1.y, r0.w, c4.y
					    add r0.w, r0.w, c1.w
					    add_pp r0.xyz, -r0, c4.x
					    mad_pp r0.xyz, r1.x, r0, c1
					    add r0.xyz, r0, c4.z
					    mad_pp r0.xyz, r0.w, r0, c4.x
					    texld_pp r1, v0, s0
					    log_pp r2.x, r1.x
					    log_pp r2.y, r1.y
					    log_pp r2.z, r1.z
					    mov_pp oC0.w, r1.w
					    mul_pp r0.xyz, r0, -r2
					    exp_pp oC0.x, -r0.x
					    exp_pp oC0.y, -r0.y
					    exp_pp oC0.z, -r0.z
					
					// approximately 22 instruction slots used (2 texture, 20 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[19];
						vec4 _AO_Buffer_PadScale;
						vec4 unused_0_2[3];
						vec4 _AO_Levels;
						vec4 unused_0_4;
						vec2 _AO_FadeParams;
						vec3 _AO_FadeValues;
					};
					uniform  sampler2D _AO_OcclusionTexture;
					uniform  sampler2D _AO_GBufferEmission;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					float u_xlat4;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _AO_Buffer_PadScale.zw;
					    u_xlat0 = texture(_AO_OcclusionTexture, u_xlat0.xy);
					    u_xlat2 = u_xlat0.y + (-_AO_FadeParams.xxyx.y);
					    u_xlat2 = max(u_xlat2, 0.0);
					    u_xlat2 = u_xlat2 * _AO_FadeParams.xxyx.z;
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat4 = (-_AO_Levels.w) + _AO_FadeValues.x;
					    u_xlat2 = u_xlat2 * u_xlat4 + _AO_Levels.w;
					    u_xlat1.xyz = (-_AO_Levels.xyz) + vec3(1.0, 1.0, 1.0);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + _AO_Levels.xyz;
					    u_xlat0.xzw = u_xlat0.xzw + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.xyz = vec3(u_xlat2) * u_xlat0.xzw + vec3(1.0, 1.0, 1.0);
					    u_xlat1 = texture(_AO_GBufferEmission, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    SV_Target0.w = u_xlat1.w;
					    u_xlat0.xyz = u_xlat0.xyz * (-u_xlat1.xyz);
					    SV_Target0.xyz = exp2((-u_xlat0.xyz));
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 2716037
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[3];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[20];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _AO_Source;
					//   sampler2D _CameraDepthTexture;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _ZBufferParams      c0       1
					//   _CameraDepthTexture s0       1
					//   _AO_Source          s1       1
					//
					
					    ps_3_0
					    def c1, 1, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mul_pp r0, c1.xxyy, v0.xyxx
					    texldl r0, r0, s0
					    mad r0.x, c0.z, r0.x, c0.w
					    rcp_pp oC0.y, r0.x
					    texld_pp r0, v0, s1
					    mul_pp oC0.xzw, r0.x, c1.xyyy
					
					// approximately 7 instruction slots used (3 texture, 4 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[7];
						vec4 _ZBufferParams;
						vec4 unused_0_2;
					};
					uniform  sampler2D _AO_Source;
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = textureLod(_CameraDepthTexture, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
					    SV_Target0.y = float(1.0) / u_xlat0.x;
					    u_xlat0 = texture(_AO_Source, vs_TEXCOORD0.xy);
					    SV_Target0.x = u_xlat0.x;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
			}
		}
	}
}
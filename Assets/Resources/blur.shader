Shader "Hidden/Amplify Occlusion/Blur" {
	Properties {
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 29950
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AO_BlurSharpness;
					//   sampler2D _AO_Source;
					//   float4 _AO_Source_TexelSize;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _AO_Source_TexelSize c0       1
					//   _AO_BlurSharpness    c1       1
					//   _AO_Source           s0       1
					//
					
					    ps_3_0
					    def c2, 1, 0, 100, -2
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mov r0, c2.xyyy
					    mad r1.xy, c0.x, r0, v0
					    mov r1.zw, c2.y
					    texldl_pp r1, r1, s0
					    mov_pp r1.xz, r1.yyxw
					    mad r0.xy, c0.x, -r0, v0
					    texldl_pp r0, r0, s0
					    mov_pp r1.yw, r0.xyzx
					    mul_pp r0, c2.xxyy, v0.xyxx
					    texldl_pp r0, r0, s0
					    add_pp r0.zw, -r1.xyxy, r0.y
					    add_sat_pp r1.x, -r0.y, c2.x
					    mad r1.x, r1.x, c2.z, c2.x
					    mul_pp r1.x, r1.x, c1.x
					    mul_pp r0.zw, r0, r1.x
					    mad_pp r0.zw, r0, -r0, c2.w
					    exp_pp r1.x, r0.z
					    exp_pp r1.y, r0.w
					    dp2add_pp r0.x, r1.zwzw, r1, r0.x
					    dp2add_pp r0.z, c2.x, r1, c2.x
					    rcp r0.z, r0.z
					    mul_pp oC0.x, r0.z, r0.x
					    mul_pp oC0.yzw, r0.y, c2.xxyy
					
					// approximately 28 instruction slots used (6 texture, 22 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _AO_Source_TexelSize;
						vec4 unused_0_2;
						float _AO_BlurSharpness;
					};
					uniform  sampler2D _AO_Source;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat4;
					void main()
					{
					    u_xlat0.x = _AO_Source_TexelSize.x;
					    u_xlat0.y = 0.0;
					    u_xlat4.xy = u_xlat0.xy + vs_TEXCOORD0.xy;
					    u_xlat0.xy = (-u_xlat0.xy) + vs_TEXCOORD0.xy;
					    u_xlat1 = textureLod(_AO_Source, u_xlat0.xy, 0.0).zywx;
					    u_xlat0 = textureLod(_AO_Source, u_xlat4.xy, 0.0);
					    u_xlat1.xz = u_xlat0.yx;
					    u_xlat0 = textureLod(_AO_Source, vs_TEXCOORD0.xy, 0.0);
					    u_xlat4.xy = (-u_xlat1.xy) + u_xlat0.yy;
					    u_xlat1.x = (-u_xlat0.y) + 1.0;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * 100.0 + 1.0;
					    u_xlat1.x = u_xlat1.x * _AO_BlurSharpness;
					    u_xlat4.xy = u_xlat4.xy * u_xlat1.xx;
					    u_xlat4.xy = (-u_xlat4.xy) * u_xlat4.xy + vec2(-2.0, -2.0);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat1.x = dot(u_xlat1.zw, u_xlat4.xy);
					    u_xlat4.x = dot(vec2(1.0, 1.0), u_xlat4.xy);
					    u_xlat4.x = u_xlat4.x + 1.0;
					    u_xlat0.x = u_xlat0.x + u_xlat1.x;
					    SV_Target0.y = u_xlat0.y;
					    SV_Target0.x = u_xlat0.x / u_xlat4.x;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 88074
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AO_BlurSharpness;
					//   sampler2D _AO_Source;
					//   float4 _AO_Source_TexelSize;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _AO_Source_TexelSize c0       1
					//   _AO_BlurSharpness    c1       1
					//   _AO_Source           s0       1
					//
					
					    ps_3_0
					    def c2, 1, 0, 100, -2
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mul_pp r0.zw, c2.xyxy, v0.x
					    mov r0.x, c0.y
					    add r0.y, r0.x, v0.y
					    add r1.y, -r0.x, v0.y
					    texldl_pp r0, r0.zyww, s0
					    mov_pp r0.xz, r0.yyxw
					    mul_pp r1.zw, c2.xyxy, v0.x
					    texldl_pp r1, r1.zyww, s0
					    mov_pp r0.yw, r1.xyzx
					    mul_pp r1, c2.xxyy, v0.xyxx
					    texldl_pp r1, r1, s0
					    add_pp r0.xy, -r0, r1.y
					    add_sat_pp r1.z, -r1.y, c2.x
					    mad r1.z, r1.z, c2.z, c2.x
					    mul_pp r1.z, r1.z, c1.x
					    mul_pp r0.xy, r0, r1.z
					    mad_pp r0.xy, r0, -r0, c2.w
					    exp_pp r2.x, r0.x
					    exp_pp r2.y, r0.y
					    dp2add_pp r0.x, r0.zwzw, r2, r1.x
					    dp2add_pp r0.y, c2.x, r2, c2.x
					    rcp r0.y, r0.y
					    mul_pp oC0.x, r0.y, r0.x
					    mul_pp oC0.yzw, r1.y, c2.xxyy
					
					// approximately 29 instruction slots used (6 texture, 23 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _AO_Source_TexelSize;
						vec4 unused_0_2;
						float _AO_BlurSharpness;
					};
					uniform  sampler2D _AO_Source;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat4;
					void main()
					{
					    u_xlat0.x = 0.0;
					    u_xlat0.y = _AO_Source_TexelSize.y;
					    u_xlat4.xy = u_xlat0.xy + vs_TEXCOORD0.xy;
					    u_xlat0.xy = (-u_xlat0.xy) + vs_TEXCOORD0.xy;
					    u_xlat1 = textureLod(_AO_Source, u_xlat0.xy, 0.0).zywx;
					    u_xlat0 = textureLod(_AO_Source, u_xlat4.xy, 0.0);
					    u_xlat1.xz = u_xlat0.yx;
					    u_xlat0 = textureLod(_AO_Source, vs_TEXCOORD0.xy, 0.0);
					    u_xlat4.xy = (-u_xlat1.xy) + u_xlat0.yy;
					    u_xlat1.x = (-u_xlat0.y) + 1.0;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * 100.0 + 1.0;
					    u_xlat1.x = u_xlat1.x * _AO_BlurSharpness;
					    u_xlat4.xy = u_xlat4.xy * u_xlat1.xx;
					    u_xlat4.xy = (-u_xlat4.xy) * u_xlat4.xy + vec2(-2.0, -2.0);
					    u_xlat4.xy = exp2(u_xlat4.xy);
					    u_xlat1.x = dot(u_xlat1.zw, u_xlat4.xy);
					    u_xlat4.x = dot(vec2(1.0, 1.0), u_xlat4.xy);
					    u_xlat4.x = u_xlat4.x + 1.0;
					    u_xlat0.x = u_xlat0.x + u_xlat1.x;
					    SV_Target0.y = u_xlat0.y;
					    SV_Target0.x = u_xlat0.x / u_xlat4.x;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 178007
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AO_BlurSharpness;
					//   sampler2D _AO_Source;
					//   float4 _AO_Source_TexelSize;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _AO_Source_TexelSize c0       1
					//   _AO_BlurSharpness    c1       1
					//   _AO_Source           s0       1
					//
					
					    ps_3_0
					    def c2, 1, 0, 2, 100
					    def c3, -0.5, -2, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mov r0, c2.xyyy
					    mad r1.xy, c0.x, r0, v0
					    mov r1.zw, c2.y
					    texldl_pp r1, r1, s0
					    mov_pp r2.x, r1.y
					    mad r3.xy, c0.x, -r0, v0
					    mov r3.zw, c2.y
					    texldl_pp r3, r3, s0
					    mov_pp r2.y, r3.y
					    mov_pp r1.y, r3.x
					    mov r3.yz, c2
					    mad r0.xy, c0.x, r0, r3.yzzw
					    mad r3.xy, r0, c2.zyzw, v0
					    mad r0.xy, r0, -c2.zyzw, v0
					    mov r3.zw, c2.y
					    texldl_pp r3, r3, s0
					    mov_pp r2.z, r3.y
					    mov_pp r1.z, r3.x
					    texldl_pp r0, r0, s0
					    mov_pp r2.w, r0.y
					    mov_pp r1.w, r0.x
					    mul_pp r0, c2.xxyy, v0.xyxx
					    texldl_pp r0, r0, s0
					    add_pp r2, -r2, r0.y
					    add_sat_pp r0.z, -r0.y, c2.x
					    mad r0.z, r0.z, c2.w, c2.x
					    mul_pp r0.z, r0.z, c1.x
					    mul_pp r2, r0.z, r2
					    mad_pp r2, r2, -r2, c3.xxyy
					    exp_pp r3.x, r2.x
					    exp_pp r3.y, r2.y
					    exp_pp r3.z, r2.z
					    exp_pp r3.w, r2.w
					    dp4_pp r0.z, r1, r3
					    dp4_pp r0.w, c2.x, r3
					    add_pp r0.w, r0.w, c2.x
					    rcp r0.w, r0.w
					    add_pp r0.x, r0.z, r0.x
					    mul_pp oC0.yzw, r0.y, c2.xxyy
					    mul_pp oC0.x, r0.w, r0.x
					
					// approximately 45 instruction slots used (10 texture, 35 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _AO_Source_TexelSize;
						vec4 unused_0_2;
						float _AO_BlurSharpness;
					};
					uniform  sampler2D _AO_Source;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec2 u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xz = _AO_Source_TexelSize.xx;
					    u_xlat0.y = float(2.0);
					    u_xlat0.w = float(0.0);
					    u_xlat1.xy = u_xlat0.zw + vs_TEXCOORD0.xy;
					    u_xlat1 = textureLod(_AO_Source, u_xlat1.xy, 0.0);
					    u_xlat2.x = u_xlat1.y;
					    u_xlat8.xy = (-u_xlat0.zw) + vs_TEXCOORD0.xy;
					    u_xlat3 = textureLod(_AO_Source, u_xlat8.xy, 0.0);
					    u_xlat2.y = u_xlat3.y;
					    u_xlat1.y = u_xlat3.x;
					    u_xlat8.xy = u_xlat0.xy * vec2(2.0, 0.0) + vs_TEXCOORD0.xy;
					    u_xlat0.xy = (-u_xlat0.xy) * vec2(2.0, 0.0) + vs_TEXCOORD0.xy;
					    u_xlat3 = textureLod(_AO_Source, u_xlat0.xy, 0.0);
					    u_xlat0 = textureLod(_AO_Source, u_xlat8.xy, 0.0);
					    u_xlat2.z = u_xlat0.y;
					    u_xlat1.z = u_xlat0.x;
					    u_xlat2.w = u_xlat3.y;
					    u_xlat1.w = u_xlat3.x;
					    u_xlat0 = textureLod(_AO_Source, vs_TEXCOORD0.xy, 0.0);
					    u_xlat2 = (-u_xlat2) + u_xlat0.yyyy;
					    u_xlat8.x = (-u_xlat0.y) + 1.0;
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat8.x = u_xlat8.x * 100.0 + 1.0;
					    u_xlat8.x = u_xlat8.x * _AO_BlurSharpness;
					    u_xlat2 = u_xlat8.xxxx * u_xlat2;
					    u_xlat2 = (-u_xlat2) * u_xlat2 + vec4(-0.5, -0.5, -2.0, -2.0);
					    u_xlat2 = exp2(u_xlat2);
					    u_xlat8.x = dot(u_xlat1, u_xlat2);
					    u_xlat12 = dot(vec4(1.0, 1.0, 1.0, 1.0), u_xlat2);
					    u_xlat12 = u_xlat12 + 1.0;
					    u_xlat0.x = u_xlat8.x + u_xlat0.x;
					    SV_Target0.y = u_xlat0.y;
					    SV_Target0.x = u_xlat0.x / u_xlat12;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 223944
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AO_BlurSharpness;
					//   sampler2D _AO_Source;
					//   float4 _AO_Source_TexelSize;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _AO_Source_TexelSize c0       1
					//   _AO_BlurSharpness    c1       1
					//   _AO_Source           s0       1
					//
					
					    ps_3_0
					    def c2, 1, 0, 2, 100
					    def c3, -0.5, -2, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mul_pp r0.zw, c2.xyxy, v0.x
					    mov r0.x, c0.y
					    add r0.y, r0.x, v0.y
					    texldl_pp r1, r0.zyww, s0
					    mov_pp r2.x, r1.y
					    mul_pp r0.zw, c2.xyxy, v0.x
					    add r0.y, -r0.x, v0.y
					    texldl_pp r3, r0.zyww, s0
					    mov_pp r2.y, r3.y
					    mov_pp r1.y, r3.x
					    mad r0.y, c2.z, r0.x, v0.y
					    mad r3.y, c2.z, -r0.x, v0.y
					    mul_pp r0.zw, c2.xyxy, v0.x
					    texldl_pp r0, r0.zyww, s0
					    mov_pp r2.z, r0.y
					    mov_pp r1.z, r0.x
					    mul_pp r3.zw, c2.xyxy, v0.x
					    texldl_pp r0, r3.zyww, s0
					    mov_pp r2.w, r0.y
					    mov_pp r1.w, r0.x
					    mul_pp r0, c2.xxyy, v0.xyxx
					    texldl_pp r0, r0, s0
					    add_pp r2, -r2, r0.y
					    add_sat_pp r0.z, -r0.y, c2.x
					    mad r0.z, r0.z, c2.w, c2.x
					    mul_pp r0.z, r0.z, c1.x
					    mul_pp r2, r0.z, r2
					    mad_pp r2, r2, -r2, c3.xxyy
					    exp_pp r3.x, r2.x
					    exp_pp r3.y, r2.y
					    exp_pp r3.z, r2.z
					    exp_pp r3.w, r2.w
					    dp4_pp r0.z, r1, r3
					    dp4_pp r0.w, c2.x, r3
					    add_pp r0.w, r0.w, c2.x
					    rcp r0.w, r0.w
					    add_pp r0.x, r0.z, r0.x
					    mul_pp oC0.yzw, r0.y, c2.xxyy
					    mul_pp oC0.x, r0.w, r0.x
					
					// approximately 44 instruction slots used (10 texture, 34 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _AO_Source_TexelSize;
						vec4 unused_0_2;
						float _AO_BlurSharpness;
					};
					uniform  sampler2D _AO_Source;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec2 u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.x = 0.0;
					    u_xlat0.y = _AO_Source_TexelSize.y;
					    u_xlat8.xy = u_xlat0.xy + vs_TEXCOORD0.xy;
					    u_xlat1 = textureLod(_AO_Source, u_xlat8.xy, 0.0);
					    u_xlat2.x = u_xlat1.y;
					    u_xlat8.xy = (-u_xlat0.xy) + vs_TEXCOORD0.xy;
					    u_xlat3 = textureLod(_AO_Source, u_xlat8.xy, 0.0);
					    u_xlat2.y = u_xlat3.y;
					    u_xlat1.y = u_xlat3.x;
					    u_xlat8.xy = vec2(2.0, 2.0) * u_xlat0.xy + vs_TEXCOORD0.xy;
					    u_xlat0.xy = vec2(-2.0, -2.0) * u_xlat0.xy + vs_TEXCOORD0.xy;
					    u_xlat3 = textureLod(_AO_Source, u_xlat0.xy, 0.0);
					    u_xlat0 = textureLod(_AO_Source, u_xlat8.xy, 0.0);
					    u_xlat2.z = u_xlat0.y;
					    u_xlat1.z = u_xlat0.x;
					    u_xlat2.w = u_xlat3.y;
					    u_xlat1.w = u_xlat3.x;
					    u_xlat0 = textureLod(_AO_Source, vs_TEXCOORD0.xy, 0.0);
					    u_xlat2 = (-u_xlat2) + u_xlat0.yyyy;
					    u_xlat8.x = (-u_xlat0.y) + 1.0;
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat8.x = u_xlat8.x * 100.0 + 1.0;
					    u_xlat8.x = u_xlat8.x * _AO_BlurSharpness;
					    u_xlat2 = u_xlat8.xxxx * u_xlat2;
					    u_xlat2 = (-u_xlat2) * u_xlat2 + vec4(-0.5, -0.5, -2.0, -2.0);
					    u_xlat2 = exp2(u_xlat2);
					    u_xlat8.x = dot(u_xlat1, u_xlat2);
					    u_xlat12 = dot(vec4(1.0, 1.0, 1.0, 1.0), u_xlat2);
					    u_xlat12 = u_xlat12 + 1.0;
					    u_xlat0.x = u_xlat8.x + u_xlat0.x;
					    SV_Target0.y = u_xlat0.y;
					    SV_Target0.x = u_xlat0.x / u_xlat12;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 304773
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AO_BlurSharpness;
					//   sampler2D _AO_Source;
					//   float4 _AO_Source_TexelSize;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _AO_Source_TexelSize c0       1
					//   _AO_BlurSharpness    c1       1
					//   _AO_Source           s0       1
					//
					
					    ps_3_0
					    def c2, 100, 1, -0.222222224, -0.888888896
					    def c3, 1, 0, 2, 3
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mov r0.xy, c3
					    mad r1.xy, c0.x, r0, v0
					    mov r1.zw, c3.y
					    texldl_pp r1, r1, s0
					    mov_pp r2.x, r1.y
					    mad r3.xy, c0.x, -r0, v0
					    mov r3.zw, c3.y
					    texldl_pp r3, r3, s0
					    mov_pp r1.y, r3.x
					    mov_pp r2.y, r3.y
					    mov r3.zw, c3.y
					    mul r0.xy, r0, c0.x
					    add r0.zw, r0.xyxy, c3.xyyz
					    add r0.xy, r0, c3.ywzw
					    mad r3.xy, r0.zwzw, c3.zyzw, v0
					    mad r4.xy, r0.zwzw, -c3.zyzw, v0
					    texldl_pp r3, r3, s0
					    mov_pp r2.z, r3.y
					    mov_pp r1.z, r3.x
					    mov r4.zw, c3.y
					    texldl_pp r3, r4, s0
					    mov_pp r2.w, r3.y
					    mov_pp r1.w, r3.x
					    mul_pp r3, c3.xxyy, v0.xyxx
					    texldl_pp r3, r3, s0
					    add_pp r2, -r2, r3.y
					    add_sat_pp r0.z, -r3.y, c3.x
					    mad r0.z, r0.z, c2.x, c2.y
					    mul_pp r0.z, r0.z, c1.x
					    mul_pp r2, r0.z, r2
					    mad_pp r2, r2, -r2, c2.zzww
					    exp_pp r4.x, r2.x
					    exp_pp r4.y, r2.y
					    exp_pp r4.z, r2.z
					    exp_pp r4.w, r2.w
					    dp4_pp r0.w, r1, r4
					    dp4_pp r1.x, c3.x, r4
					    add_pp r1.x, r1.x, c3.x
					    add_pp r0.w, r0.w, r3.x
					    mad r2.xy, r0, c3.wyzw, v0
					    mad r4.xy, r0, -c3.wyzw, v0
					    mov r2.zw, c3.y
					    texldl_pp r2, r2, s0
					    mov_pp r2.xz, r2.yyxw
					    mov r4.zw, c3.y
					    texldl_pp r4, r4, s0
					    mov_pp r2.yw, r4.xyzx
					    add_pp r0.xy, -r2, r3.y
					    mul_pp oC0.yzw, r3.y, c3.xxyy
					    mul_pp r0.xy, r0.z, r0
					    mad_pp r0.xy, r0, -r0, -c3.z
					    exp_pp r2.x, r0.x
					    exp_pp r2.y, r0.y
					    dp2add_pp r0.x, r2.zwzw, r2, r0.w
					    dp2add_pp r0.y, c3.x, r2, r1.x
					    rcp r0.y, r0.y
					    mul_pp oC0.x, r0.y, r0.x
					
					// approximately 66 instruction slots used (14 texture, 52 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _AO_Source_TexelSize;
						vec4 unused_0_2;
						float _AO_BlurSharpness;
					};
					uniform  sampler2D _AO_Source;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat5;
					vec2 u_xlat10;
					float u_xlat11;
					void main()
					{
					    u_xlat0.x = _AO_Source_TexelSize.x;
					    u_xlat0.y = 0.0;
					    u_xlat10.xy = u_xlat0.xy + vs_TEXCOORD0.xy;
					    u_xlat0.xy = (-u_xlat0.xy) + vs_TEXCOORD0.xy;
					    u_xlat1 = textureLod(_AO_Source, u_xlat0.xy, 0.0);
					    u_xlat0 = textureLod(_AO_Source, u_xlat10.xy, 0.0);
					    u_xlat2.x = u_xlat0.y;
					    u_xlat2.y = u_xlat1.y;
					    u_xlat0.y = u_xlat1.x;
					    u_xlat1.xz = _AO_Source_TexelSize.xx;
					    u_xlat1.y = float(2.0);
					    u_xlat1.w = float(3.0);
					    u_xlat3 = u_xlat1 * vec4(2.0, 0.0, 3.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = (-u_xlat1.zwxy) * vec4(3.0, 0.0, 2.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = textureLod(_AO_Source, u_xlat3.xy, 0.0);
					    u_xlat3 = textureLod(_AO_Source, u_xlat3.zw, 0.0).yzxw;
					    u_xlat2.z = u_xlat4.y;
					    u_xlat0.z = u_xlat4.x;
					    u_xlat4 = textureLod(_AO_Source, u_xlat1.zw, 0.0);
					    u_xlat1 = textureLod(_AO_Source, u_xlat1.xy, 0.0);
					    u_xlat3.yw = u_xlat1.yx;
					    u_xlat2.w = u_xlat4.y;
					    u_xlat0.w = u_xlat4.x;
					    u_xlat1 = textureLod(_AO_Source, vs_TEXCOORD0.xy, 0.0);
					    u_xlat2 = (-u_xlat2) + u_xlat1.yyyy;
					    u_xlat11 = (-u_xlat1.y) + 1.0;
					    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
					    u_xlat11 = u_xlat11 * 100.0 + 1.0;
					    u_xlat11 = u_xlat11 * _AO_BlurSharpness;
					    u_xlat2 = vec4(u_xlat11) * u_xlat2;
					    u_xlat2 = (-u_xlat2) * u_xlat2 + vec4(-0.222222224, -0.222222224, -0.888888896, -0.888888896);
					    u_xlat2 = exp2(u_xlat2);
					    u_xlat0.x = dot(u_xlat0, u_xlat2);
					    u_xlat5 = dot(vec4(1.0, 1.0, 1.0, 1.0), u_xlat2);
					    u_xlat5 = u_xlat5 + 1.0;
					    u_xlat0.x = u_xlat0.x + u_xlat1.x;
					    u_xlat10.xy = (-u_xlat3.xy) + u_xlat1.yy;
					    SV_Target0.y = u_xlat1.y;
					    u_xlat10.xy = vec2(u_xlat11) * u_xlat10.xy;
					    u_xlat10.xy = (-u_xlat10.xy) * u_xlat10.xy + vec2(-2.0, -2.0);
					    u_xlat10.xy = exp2(u_xlat10.xy);
					    u_xlat1.x = dot(u_xlat3.zw, u_xlat10.xy);
					    u_xlat10.x = dot(vec2(1.0, 1.0), u_xlat10.xy);
					    u_xlat5 = u_xlat10.x + u_xlat5;
					    u_xlat0.x = u_xlat0.x + u_xlat1.x;
					    SV_Target0.x = u_xlat0.x / u_xlat5;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 390071
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AO_BlurSharpness;
					//   sampler2D _AO_Source;
					//   float4 _AO_Source_TexelSize;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _AO_Source_TexelSize c0       1
					//   _AO_BlurSharpness    c1       1
					//   _AO_Source           s0       1
					//
					
					    ps_3_0
					    def c2, 100, 1, -0.222222224, -0.888888896
					    def c3, 1, 0, 3, 2
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mul_pp r0.zw, c3.xyxy, v0.x
					    mov r0.x, c0.y
					    add r0.y, r0.x, v0.y
					    texldl_pp r1, r0.zyww, s0
					    mov_pp r2.x, r1.y
					    mul_pp r0.zw, c3.xyxy, v0.x
					    add r0.y, -r0.x, v0.y
					    texldl_pp r3, r0.zyww, s0
					    mov_pp r2.y, r3.y
					    mov_pp r1.y, r3.x
					    mul_pp r0.zw, c3.xyxy, v0.x
					    mad r0.y, c3.w, r0.x, v0.y
					    texldl_pp r3, r0.zyww, s0
					    mov_pp r2.z, r3.y
					    mov_pp r1.z, r3.x
					    mul_pp r0.zw, c3.xyxy, v0.x
					    mad r0.y, c3.w, -r0.x, v0.y
					    texldl_pp r3, r0.zyww, s0
					    mov_pp r2.w, r3.y
					    mov_pp r1.w, r3.x
					    mul_pp r3, c3.xxyy, v0.xyxx
					    texldl_pp r3, r3, s0
					    add_pp r2, -r2, r3.y
					    add_sat_pp r0.y, -r3.y, c3.x
					    mad r0.y, r0.y, c2.x, c2.y
					    mul_pp r0.y, r0.y, c1.x
					    mul_pp r2, r0.y, r2
					    mad_pp r2, r2, -r2, c2.zzww
					    exp_pp r4.x, r2.x
					    exp_pp r4.y, r2.y
					    exp_pp r4.z, r2.z
					    exp_pp r4.w, r2.w
					    dp4_pp r0.z, r1, r4
					    dp4_pp r0.w, c3.x, r4
					    add_pp r0.w, r0.w, c3.x
					    add_pp r0.z, r0.z, r3.x
					    mad r1.y, c3.z, r0.x, v0.y
					    mad r2.y, c3.z, -r0.x, v0.y
					    mul_pp r1.zw, c3.xyxy, v0.x
					    texldl_pp r1, r1.zyww, s0
					    mov_pp r1.xz, r1.yyxw
					    mul_pp r2.zw, c3.xyxy, v0.x
					    texldl_pp r2, r2.zyww, s0
					    mov_pp r1.yw, r2.xyzx
					    add_pp r1.xy, -r1, r3.y
					    mul_pp oC0.yzw, r3.y, c3.xxyy
					    mul_pp r0.xy, r0.y, r1
					    mad_pp r0.xy, r0, -r0, -c3.w
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    dp2add_pp r0.x, r1.zwzw, r1, r0.z
					    dp2add_pp r0.y, c3.x, r1, r0.w
					    rcp r0.y, r0.y
					    mul_pp oC0.x, r0.y, r0.x
					
					// approximately 63 instruction slots used (14 texture, 49 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _AO_Source_TexelSize;
						vec4 unused_0_2;
						float _AO_BlurSharpness;
					};
					uniform  sampler2D _AO_Source;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec2 u_xlat5;
					vec2 u_xlat6;
					vec2 u_xlat10;
					float u_xlat15;
					void main()
					{
					    u_xlat0.x = 0.0;
					    u_xlat0.y = _AO_Source_TexelSize.y;
					    u_xlat10.xy = u_xlat0.xy + vs_TEXCOORD0.xy;
					    u_xlat1 = textureLod(_AO_Source, u_xlat10.xy, 0.0);
					    u_xlat2.x = u_xlat1.y;
					    u_xlat10.xy = (-u_xlat0.xy) + vs_TEXCOORD0.xy;
					    u_xlat3 = textureLod(_AO_Source, u_xlat10.xy, 0.0);
					    u_xlat2.y = u_xlat3.y;
					    u_xlat1.y = u_xlat3.x;
					    u_xlat3 = vec4(2.0, 2.0, 3.0, 3.0) * u_xlat0.xyxy + vs_TEXCOORD0.xyxy;
					    u_xlat0 = vec4(-3.0, -3.0, -2.0, -2.0) * u_xlat0.xyxy + vs_TEXCOORD0.xyxy;
					    u_xlat4 = textureLod(_AO_Source, u_xlat3.xy, 0.0);
					    u_xlat3 = textureLod(_AO_Source, u_xlat3.zw, 0.0).yzxw;
					    u_xlat2.z = u_xlat4.y;
					    u_xlat1.z = u_xlat4.x;
					    u_xlat4 = textureLod(_AO_Source, u_xlat0.zw, 0.0);
					    u_xlat0 = textureLod(_AO_Source, u_xlat0.xy, 0.0);
					    u_xlat3.yw = u_xlat0.yx;
					    u_xlat2.w = u_xlat4.y;
					    u_xlat1.w = u_xlat4.x;
					    u_xlat0 = textureLod(_AO_Source, vs_TEXCOORD0.xy, 0.0);
					    u_xlat2 = (-u_xlat2) + u_xlat0.yyyy;
					    u_xlat10.x = (-u_xlat0.y) + 1.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat10.x = u_xlat10.x * 100.0 + 1.0;
					    u_xlat10.x = u_xlat10.x * _AO_BlurSharpness;
					    u_xlat2 = u_xlat10.xxxx * u_xlat2;
					    u_xlat2 = (-u_xlat2) * u_xlat2 + vec4(-0.222222224, -0.222222224, -0.888888896, -0.888888896);
					    u_xlat2 = exp2(u_xlat2);
					    u_xlat15 = dot(u_xlat1, u_xlat2);
					    u_xlat1.x = dot(vec4(1.0, 1.0, 1.0, 1.0), u_xlat2);
					    u_xlat1.x = u_xlat1.x + 1.0;
					    u_xlat0.x = u_xlat15 + u_xlat0.x;
					    u_xlat6.xy = (-u_xlat3.xy) + u_xlat0.yy;
					    SV_Target0.y = u_xlat0.y;
					    u_xlat5.xy = u_xlat10.xx * u_xlat6.xy;
					    u_xlat5.xy = (-u_xlat5.xy) * u_xlat5.xy + vec2(-2.0, -2.0);
					    u_xlat5.xy = exp2(u_xlat5.xy);
					    u_xlat15 = dot(u_xlat3.zw, u_xlat5.xy);
					    u_xlat5.x = dot(vec2(1.0, 1.0), u_xlat5.xy);
					    u_xlat5.x = u_xlat5.x + u_xlat1.x;
					    u_xlat0.x = u_xlat15 + u_xlat0.x;
					    SV_Target0.x = u_xlat0.x / u_xlat5.x;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 434880
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AO_BlurSharpness;
					//   sampler2D _AO_Source;
					//   float4 _AO_Source_TexelSize;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _AO_Source_TexelSize c0       1
					//   _AO_BlurSharpness    c1       1
					//   _AO_Source           s0       1
					//
					
					    ps_3_0
					    def c2, 1, 0, 2, 3
					    def c3, 0, 4, 100, 1
					    def c4, -0.125, -0.5, -1.125, -2
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mov r0.xy, c2
					    mad r1.xy, c0.x, r0, v0
					    mov r1.zw, c2.y
					    texldl_pp r1, r1, s0
					    mov_pp r2.x, r1.y
					    mad r3.xy, c0.x, -r0, v0
					    mov r3.zw, c2.y
					    texldl_pp r3, r3, s0
					    mov_pp r1.y, r3.x
					    mov_pp r2.y, r3.y
					    mov r3.zw, c2.y
					    mul r0.xy, r0, c0.x
					    add r0.zw, r0.xyxy, c2.xyyz
					    mad r3.xy, r0.zwzw, c2.zyzw, v0
					    mad r4.xy, r0.zwzw, -c2.zyzw, v0
					    texldl_pp r3, r3, s0
					    mov_pp r2.z, r3.y
					    mov_pp r1.z, r3.x
					    mov r4.zw, c2.y
					    texldl_pp r3, r4, s0
					    mov_pp r2.w, r3.y
					    mov_pp r1.w, r3.x
					    mul_pp r3, c2.xxyy, v0.xyxx
					    texldl_pp r3, r3, s0
					    add_pp r2, -r2, r3.y
					    add_sat_pp r0.z, -r3.y, c2.x
					    mad r0.z, r0.z, c3.z, c3.w
					    mul_pp r0.z, r0.z, c1.x
					    mul_pp r2, r0.z, r2
					    mad_pp r2, r2, -r2, c4.xxyy
					    exp_pp r4.x, r2.x
					    exp_pp r4.y, r2.y
					    exp_pp r4.z, r2.z
					    exp_pp r4.w, r2.w
					    dp4_pp r0.w, r1, r4
					    dp4_pp r1.x, c2.x, r4
					    add_pp r1.x, r1.x, c2.x
					    add_pp r0.w, r0.w, r3.x
					    add r1.yz, r0.xxyw, c2.xyww
					    add r0.xy, r0, c3
					    mad r2.xy, r1.yzzw, c2.wyzw, v0
					    mad r4.xy, r1.yzzw, -c2.wyzw, v0
					    mov r2.zw, c2.y
					    texldl_pp r2, r2, s0
					    mov_pp r5.x, r2.y
					    mov r4.zw, c2.y
					    texldl_pp r4, r4, s0
					    mov_pp r5.y, r4.y
					    mov_pp r2.y, r4.x
					    mad r4.xy, r0, c3.yxzw, v0
					    mad r6.xy, r0, -c3.yxzw, v0
					    mov r4.zw, c2.y
					    texldl_pp r4, r4, s0
					    mov_pp r5.z, r4.y
					    mov_pp r2.z, r4.x
					    mov r6.zw, c2.y
					    texldl_pp r4, r6, s0
					    mov_pp r5.w, r4.y
					    mov_pp r2.w, r4.x
					    add_pp r4, r3.y, -r5
					    mul_pp oC0.yzw, r3.y, c2.xxyy
					    mul_pp r3, r0.z, r4
					    mad_pp r3, r3, -r3, c4.zzww
					    exp_pp r4.x, r3.x
					    exp_pp r4.y, r3.y
					    exp_pp r4.z, r3.z
					    exp_pp r4.w, r3.w
					    dp4_pp r0.x, r2, r4
					    dp4_pp r0.y, c2.x, r4
					    add_pp r0.y, r0.y, r1.x
					    rcp r0.y, r0.y
					    add_pp r0.x, r0.x, r0.w
					    mul_pp oC0.x, r0.y, r0.x
					
					// approximately 82 instruction slots used (18 texture, 64 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _AO_Source_TexelSize;
						vec4 unused_0_2;
						float _AO_BlurSharpness;
					};
					uniform  sampler2D _AO_Source;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec2 u_xlat9;
					vec2 u_xlat14;
					float u_xlat21;
					void main()
					{
					    u_xlat0.xz = _AO_Source_TexelSize.xx;
					    u_xlat0.y = float(2.0);
					    u_xlat0.w = float(3.0);
					    u_xlat1 = u_xlat0 * vec4(2.0, 0.0, 3.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat0 = (-u_xlat0.zwxy) * vec4(3.0, 0.0, 2.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = textureLod(_AO_Source, u_xlat1.xy, 0.0).yzxw;
					    u_xlat1 = textureLod(_AO_Source, u_xlat1.zw, 0.0);
					    u_xlat3.z = u_xlat2.x;
					    u_xlat4 = textureLod(_AO_Source, u_xlat0.zw, 0.0);
					    u_xlat0 = textureLod(_AO_Source, u_xlat0.xy, 0.0);
					    u_xlat3.w = u_xlat4.y;
					    u_xlat2.w = u_xlat4.x;
					    u_xlat4.xz = _AO_Source_TexelSize.xx;
					    u_xlat4.y = float(4.0);
					    u_xlat4.w = float(0.0);
					    u_xlat14.xy = u_xlat4.zw + vs_TEXCOORD0.xy;
					    u_xlat5 = textureLod(_AO_Source, u_xlat14.xy, 0.0);
					    u_xlat3.x = u_xlat5.y;
					    u_xlat2.x = u_xlat5.x;
					    u_xlat14.xy = (-u_xlat4.zw) + vs_TEXCOORD0.xy;
					    u_xlat5 = textureLod(_AO_Source, u_xlat14.xy, 0.0);
					    u_xlat3.y = u_xlat5.y;
					    u_xlat2.y = u_xlat5.x;
					    u_xlat5 = textureLod(_AO_Source, vs_TEXCOORD0.xy, 0.0);
					    u_xlat3 = (-u_xlat3) + u_xlat5.yyyy;
					    u_xlat14.x = (-u_xlat5.y) + 1.0;
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.x = u_xlat14.x * 100.0 + 1.0;
					    u_xlat14.x = u_xlat14.x * _AO_BlurSharpness;
					    u_xlat3 = u_xlat14.xxxx * u_xlat3;
					    u_xlat3 = (-u_xlat3) * u_xlat3 + vec4(-0.125, -0.125, -0.5, -0.5);
					    u_xlat3 = exp2(u_xlat3);
					    u_xlat21 = dot(u_xlat2, u_xlat3);
					    u_xlat2.x = dot(vec4(1.0, 1.0, 1.0, 1.0), u_xlat3);
					    u_xlat2.x = u_xlat2.x + 1.0;
					    u_xlat21 = u_xlat21 + u_xlat5.x;
					    u_xlat3.x = u_xlat1.y;
					    u_xlat3.y = u_xlat0.y;
					    u_xlat1.y = u_xlat0.x;
					    u_xlat0.xy = u_xlat4.xy * vec2(4.0, 0.0) + vs_TEXCOORD0.xy;
					    u_xlat9.xy = (-u_xlat4.xy) * vec2(4.0, 0.0) + vs_TEXCOORD0.xy;
					    u_xlat4 = textureLod(_AO_Source, u_xlat9.xy, 0.0);
					    u_xlat6 = textureLod(_AO_Source, u_xlat0.xy, 0.0);
					    u_xlat3.z = u_xlat6.y;
					    u_xlat1.z = u_xlat6.x;
					    u_xlat3.w = u_xlat4.y;
					    u_xlat1.w = u_xlat4.x;
					    u_xlat3 = (-u_xlat3) + u_xlat5.yyyy;
					    SV_Target0.y = u_xlat5.y;
					    u_xlat3 = u_xlat14.xxxx * u_xlat3;
					    u_xlat3 = (-u_xlat3) * u_xlat3 + vec4(-1.125, -1.125, -2.0, -2.0);
					    u_xlat3 = exp2(u_xlat3);
					    u_xlat0.x = dot(u_xlat1, u_xlat3);
					    u_xlat7 = dot(vec4(1.0, 1.0, 1.0, 1.0), u_xlat3);
					    u_xlat7 = u_xlat7 + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x + u_xlat21;
					    SV_Target0.x = u_xlat0.x / u_xlat7;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 515927
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _ProjectionParams;
					//
					//
					// Registers:
					//
					//   Name              Reg   Size
					//   ----------------- ----- ----
					//   _AO_CameraProj    c0       4
					//   _ProjectionParams c4       1
					//
					
					    vs_3_0
					    def c5, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xyz, v0.xyxw, c5.xxyw, c5.yyxw
					    dp3 r2.z, c2.xyww, r0
					    dp3 r1.x, c0.xyww, r0
					    dp3 r1.w, c3.xyww, r0
					    dp3 r1.y, c1.xyww, r0
					    mul r0.xz, r1.xyww, c5.z
					    mov r2.xyw, r1
					    mul r0.y, r1.y, c4.x
					    mul r0.w, r0.y, c5.z
					    add o1.xy, r0.z, r0.xwzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 _AO_CameraProj;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = u_xlat0 + _AO_CameraProj[3];
					    gl_Position = u_xlat0;
					    u_xlat1 = u_xlat0.y * _ProjectionParams.x;
					    u_xlat0.xz = u_xlat0.xw * vec2(0.5, 0.5);
					    u_xlat0.w = u_xlat1 * 0.5;
					    vs_TEXCOORD0.xy = u_xlat0.zz + u_xlat0.xw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _AO_BlurSharpness;
					//   sampler2D _AO_Source;
					//   float4 _AO_Source_TexelSize;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _AO_Source_TexelSize c0       1
					//   _AO_BlurSharpness    c1       1
					//   _AO_Source           s0       1
					//
					
					    ps_3_0
					    def c2, 2, 100, 1, 1.125
					    def c3, -0.125, -0.5, 0, 0
					    def c4, 1, 0, 4, 3
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    mul_pp r0.zw, c4.xyxy, v0.x
					    mov r0.x, c0.y
					    add r0.y, r0.x, v0.y
					    texldl_pp r1, r0.zyww, s0
					    mov_pp r2.x, r1.y
					    mul_pp r0.zw, c4.xyxy, v0.x
					    add r0.y, -r0.x, v0.y
					    texldl_pp r3, r0.zyww, s0
					    mov_pp r2.y, r3.y
					    mov_pp r1.y, r3.x
					    mul_pp r0.zw, c4.xyxy, v0.x
					    mad r0.y, c2.x, r0.x, v0.y
					    texldl_pp r3, r0.zyww, s0
					    mov_pp r2.z, r3.y
					    mov_pp r1.z, r3.x
					    mul_pp r0.zw, c4.xyxy, v0.x
					    mad r0.y, c2.x, -r0.x, v0.y
					    texldl_pp r3, r0.zyww, s0
					    mov_pp r2.w, r3.y
					    mov_pp r1.w, r3.x
					    mul_pp r3, c4.xxyy, v0.xyxx
					    texldl_pp r3, r3, s0
					    add_pp r2, -r2, r3.y
					    add_sat_pp r0.y, -r3.y, c4.x
					    mad r0.y, r0.y, c2.y, c2.z
					    mul_pp r0.y, r0.y, c1.x
					    mul_pp r2, r0.y, r2
					    mad_pp r2, r2, -r2, c3.xxyy
					    exp_pp r4.x, r2.x
					    exp_pp r4.y, r2.y
					    exp_pp r4.z, r2.z
					    exp_pp r4.w, r2.w
					    dp4_pp r0.z, r1, r4
					    dp4_pp r0.w, c4.x, r4
					    add_pp r0.w, r0.w, c4.x
					    add_pp r0.z, r0.z, r3.x
					    mul_pp r1.zw, c4.xyxy, v0.x
					    mad r1.y, c4.w, r0.x, v0.y
					    texldl_pp r1, r1.zyww, s0
					    mov_pp r2.x, r1.y
					    mul_pp r4.zw, c4.xyxy, v0.x
					    mad r4.y, c4.w, -r0.x, v0.y
					    texldl_pp r4, r4.zyww, s0
					    mov_pp r2.y, r4.y
					    mov_pp r1.y, r4.x
					    mad r4.y, c4.z, r0.x, v0.y
					    mad r5.y, c4.z, -r0.x, v0.y
					    mul_pp r4.zw, c4.xyxy, v0.x
					    texldl_pp r4, r4.zyww, s0
					    mov_pp r2.z, r4.y
					    mov_pp r1.z, r4.x
					    mul_pp r5.zw, c4.xyxy, v0.x
					    texldl_pp r4, r5.zyww, s0
					    mov_pp r2.w, r4.y
					    mov_pp r1.w, r4.x
					    add_pp r2, -r2, r3.y
					    mul_pp oC0.yzw, r3.y, c4.xxyy
					    mul_pp r2, r0.y, r2
					    mad_pp r2, r2, -r2, -c2.wwxx
					    exp_pp r3.x, r2.x
					    exp_pp r3.y, r2.y
					    exp_pp r3.z, r2.z
					    exp_pp r3.w, r2.w
					    dp4_pp r0.x, r1, r3
					    dp4_pp r0.y, c4.x, r3
					    add_pp r0.xy, r0, r0.zwzw
					    rcp r0.y, r0.y
					    mul_pp oC0.x, r0.y, r0.x
					
					// approximately 77 instruction slots used (18 texture, 59 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _AO_Source_TexelSize;
						vec4 unused_0_2;
						float _AO_BlurSharpness;
					};
					uniform  sampler2D _AO_Source;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec2 u_xlat8;
					vec2 u_xlat14;
					float u_xlat21;
					void main()
					{
					    u_xlat0.x = 0.0;
					    u_xlat0.y = _AO_Source_TexelSize.y;
					    u_xlat14.xy = u_xlat0.xy + vs_TEXCOORD0.xy;
					    u_xlat1 = textureLod(_AO_Source, u_xlat14.xy, 0.0);
					    u_xlat2.x = u_xlat1.y;
					    u_xlat14.xy = (-u_xlat0.xy) + vs_TEXCOORD0.xy;
					    u_xlat3 = textureLod(_AO_Source, u_xlat14.xy, 0.0);
					    u_xlat2.y = u_xlat3.y;
					    u_xlat1.y = u_xlat3.x;
					    u_xlat3 = vec4(2.0, 2.0, 3.0, 3.0) * u_xlat0.xyxy + vs_TEXCOORD0.xyxy;
					    u_xlat4 = textureLod(_AO_Source, u_xlat3.xy, 0.0);
					    u_xlat3 = textureLod(_AO_Source, u_xlat3.zw, 0.0);
					    u_xlat2.z = u_xlat4.y;
					    u_xlat1.z = u_xlat4.x;
					    u_xlat4 = vec4(-3.0, -3.0, -2.0, -2.0) * u_xlat0.xyxy + vs_TEXCOORD0.xyxy;
					    u_xlat5 = textureLod(_AO_Source, u_xlat4.zw, 0.0);
					    u_xlat4 = textureLod(_AO_Source, u_xlat4.xy, 0.0);
					    u_xlat2.w = u_xlat5.y;
					    u_xlat1.w = u_xlat5.x;
					    u_xlat5 = textureLod(_AO_Source, vs_TEXCOORD0.xy, 0.0);
					    u_xlat2 = (-u_xlat2) + u_xlat5.yyyy;
					    u_xlat14.x = (-u_xlat5.y) + 1.0;
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat14.x = u_xlat14.x * 100.0 + 1.0;
					    u_xlat14.x = u_xlat14.x * _AO_BlurSharpness;
					    u_xlat2 = u_xlat14.xxxx * u_xlat2;
					    u_xlat2 = (-u_xlat2) * u_xlat2 + vec4(-0.125, -0.125, -0.5, -0.5);
					    u_xlat2 = exp2(u_xlat2);
					    u_xlat21 = dot(u_xlat1, u_xlat2);
					    u_xlat1.x = dot(vec4(1.0, 1.0, 1.0, 1.0), u_xlat2);
					    u_xlat1.x = u_xlat1.x + 1.0;
					    u_xlat21 = u_xlat21 + u_xlat5.x;
					    u_xlat8.xy = vec2(4.0, 4.0) * u_xlat0.xy + vs_TEXCOORD0.xy;
					    u_xlat0.xy = vec2(-4.0, -4.0) * u_xlat0.xy + vs_TEXCOORD0.xy;
					    u_xlat2 = textureLod(_AO_Source, u_xlat0.xy, 0.0).xzwy;
					    u_xlat6 = textureLod(_AO_Source, u_xlat8.xy, 0.0);
					    u_xlat2.z = u_xlat6.y;
					    u_xlat3.z = u_xlat6.x;
					    u_xlat3.w = u_xlat2.x;
					    u_xlat2.x = u_xlat3.y;
					    u_xlat2.y = u_xlat4.y;
					    u_xlat3.y = u_xlat4.x;
					    u_xlat2 = (-u_xlat2) + u_xlat5.yyyy;
					    SV_Target0.y = u_xlat5.y;
					    u_xlat2 = u_xlat14.xxxx * u_xlat2;
					    u_xlat2 = (-u_xlat2) * u_xlat2 + vec4(-1.125, -1.125, -2.0, -2.0);
					    u_xlat2 = exp2(u_xlat2);
					    u_xlat0.x = dot(u_xlat3, u_xlat2);
					    u_xlat7 = dot(vec4(1.0, 1.0, 1.0, 1.0), u_xlat2);
					    u_xlat7 = u_xlat7 + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x + u_xlat21;
					    SV_Target0.x = u_xlat0.x / u_xlat7;
					    SV_Target0.zw = vec2(0.0, 0.0);
					    return;
					}"
				}
			}
		}
	}
}
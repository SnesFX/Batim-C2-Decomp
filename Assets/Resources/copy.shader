Shader "Hidden/Amplify Occlusion/Copy" {
	Properties {
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 23756
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _AO_CameraProj;
					//   float4 _AO_Source_TexelSize;
					//   float2 _AO_Target_Position;
					//   float4 _AO_Target_TexelSize;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _AO_CameraProj       c0       4
					//   _AO_Source_TexelSize c4       1
					//   _AO_Target_TexelSize c5       1
					//   _AO_Target_Position  c6       1
					//
					
					    vs_3_0
					    def c7, 1, 0, -1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0.xy, v0.x, c7, c7.yzzw
					    rcp r1.x, c5.z
					    mul r2.x, r1.x, c6.x
					    rcp r1.y, c5.w
					    mov r3.x, c7.x
					    mad r2.z, c6.y, -r1.y, r3.x
					    mul r1.xy, r1, c4.zwzw
					    mul r1.z, r1.y, v0.y
					    mad r0.xy, r0, r1.xzzw, r2.xzzw
					    mov r0.z, c7.x
					    dp3 r4.x, c0.xyww, r0
					    dp3 r4.y, c1.xyww, r0
					    dp3 r4.z, c2.xyww, r0
					    dp3 r4.w, c3.xyww, r0
					    mov o1.xy, v1
					    mad o0.xy, r4.w, c255, r4
					    mov o0.zw, r4
					
					// approximately 17 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						mat4x4 _AO_CameraProj;
						vec4 _AO_Source_TexelSize;
						vec4 _AO_Target_TexelSize;
						vec2 _AO_Target_Position;
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec2 u_xlat6;
					void main()
					{
					    u_xlat0.x = in_POSITION0.x;
					    u_xlat0.y = -1.0;
					    u_xlat6.xy = vec2(1.0, 1.0) / _AO_Target_TexelSize.zw;
					    u_xlat1.x = u_xlat6.x * _AO_Target_Position.x;
					    u_xlat1.z = (-_AO_Target_Position.y) * u_xlat6.y + 1.0;
					    u_xlat2.xy = _AO_Source_TexelSize.zw / _AO_Target_TexelSize.zw;
					    u_xlat2.z = u_xlat2.y * in_POSITION0.y;
					    u_xlat0.xy = u_xlat0.xy * u_xlat2.xz + u_xlat1.xz;
					    u_xlat1 = u_xlat0.yyyy * _AO_CameraProj[1];
					    u_xlat0 = _AO_CameraProj[0] * u_xlat0.xxxx + u_xlat1;
					    gl_Position = u_xlat0 + _AO_CameraProj[3];
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _AO_Source;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _AO_Source   s0       1
					//
					
					    ps_3_0
					    def c0, 1, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    mul r0, c0.xxyy, v0.xyxx
					    texldl oC0, r0, s0
					
					// approximately 3 instruction slots used (2 texture, 1 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _AO_Source;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = textureLod(_AO_Source, vs_TEXCOORD0.xy, 0.0);
					    return;
					}"
				}
			}
		}
	}
}
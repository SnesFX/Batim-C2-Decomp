Shader "Hidden/ScionColorGrading" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
	}
	SubShader {
		Pass {
			Name "CONVERTAMPLIFY"
			ZClip Off
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 5196
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o1.xy, v1
					    mad o0.xy, r0.w, c255, r0
					    mov o0.zw, r0
					
					// approximately 7 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   int _LinearInput;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _LinearInput c0       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c1, 1, 0, 12.9200001, 0.416666657
					    def c2, 1.05499995, -0.0549999997, 0.00313080009, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    mul r0, c1.xxyy, v0.xyxx
					    texldl r0, r0, s0
					    mov r1.y, c1.y
					    if_eq c0.x, r1.y
					      mul r1.xyz, r0, c1.z
					      log r2.x, r0_abs.x
					      log r2.y, r0_abs.y
					      log r2.z, r0_abs.z
					      mul r2.xyz, r2, c1.w
					      exp r3.x, r2.x
					      exp r3.y, r2.y
					      exp r3.z, r2.z
					      mad r2.xyz, r3, c2.x, c2.y
					      add r3.xyz, -r0, c2.z
					      cmp r0.xyz, r3, r1, r2
					    endif
					    mov oC0.xyz, r0
					    mov oC0.w, c1.x
					
					// approximately 21 instruction slots used (2 texture, 19 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[10];
						int _LinearInput;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb3;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    if(_LinearInput == 0) {
					        u_xlat1.xyz = u_xlat0.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
					        u_xlat2.xyz = log2(abs(u_xlat0.xyz));
					        u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					        u_xlat2.xyz = exp2(u_xlat2.xyz);
					        u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					        u_xlatb3.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat0.xyzx).xyz;
					        u_xlat0.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat2.x;
					        u_xlat0.y = (u_xlatb3.y) ? u_xlat1.y : u_xlat2.y;
					        u_xlat0.z = (u_xlatb3.z) ? u_xlat1.z : u_xlat2.z;
					    }
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "CONVERTCHROMATICA"
			ZClip Off
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 91032
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o1.xy, v1
					    mad o0.xy, r0.w, c255, r0
					    mov o0.zw, r0
					
					// approximately 7 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   int _LinearInput;
					//   sampler2D _MainTex;
					//   sampler2D _NeutralLUT;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _LinearInput c0       1
					//   _MainTex     s0       1
					//   _NeutralLUT  s1       1
					//
					
					    ps_3_0
					    def c1, 1, 0, 63, 0.125
					    def c2, 8, 0.123046875, 0.0009765625, 12.9200001
					    def c3, 0.416666657, 1.05499995, -0.0549999997, 0.00313080009
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mul r0, c1.xxyy, v0.xyxx
					    texldl r0, r0, s1
					    mul r0.z, r0.z, c1.z
					    frc r0.w, r0.z
					    add r1.x, -r0.w, r0.z
					    mul r1.y, r1.x, c1.w
					    frc r1.z, r1.y
					    add r1.y, -r1.z, r1.y
					    mad r1.x, r1.y, -c2.x, r1.x
					    frc r1.z, -r0.z
					    add r0.z, r0.z, r1.z
					    mul r1.z, r0.z, c1.w
					    frc r1.w, r1.z
					    add r1.z, -r1.w, r1.z
					    mad r0.z, r1.z, -c2.x, r0.z
					    mad r0.xy, r0, c2.y, c2.z
					    mad r2.x, r1.x, c1.w, r0.x
					    mad r1.x, r1.y, c1.w, r0.y
					    mov r2.y, -r1.x
					    mad r3.x, r0.z, c1.w, r0.x
					    mad r0.x, r1.z, c1.w, r0.y
					    mov r3.y, -r0.x
					    mov r2.zw, c1.y
					    texldl r1, r2, s0
					    mov r3.zw, c1.y
					    texldl r2, r3, s0
					    lrp r3.xyz, r0.w, r2, r1
					    mov r0.y, c1.y
					    if_eq c0.x, r0.y
					      mul r0.xyz, r3, c2.w
					      log r1.x, r3_abs.x
					      log r1.y, r3_abs.y
					      log r1.z, r3_abs.z
					      mul r1.xyz, r1, c3.x
					      exp r2.x, r1.x
					      exp r2.y, r1.y
					      exp r2.z, r1.z
					      mad r1.xyz, r2, c3.y, c3.z
					      add r2.xyz, -r3, c3.w
					      cmp r3.xyz, r2, r0, r1
					    endif
					    mov oC0.xyz, r3
					    mov oC0.w, c1.x
					
					// approximately 48 instruction slots used (6 texture, 42 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[10];
						int _LinearInput;
					};
					uniform  sampler2D _NeutralLUT;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					bvec3 u_xlatb3;
					vec3 u_xlat4;
					float u_xlat5;
					float u_xlat8;
					float u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = textureLod(_NeutralLUT, vs_TEXCOORD0.xy, 0.0);
					    u_xlat8 = u_xlat0.z * 63.0;
					    u_xlat12 = floor(u_xlat8);
					    u_xlat1.x = u_xlat12 * 0.125;
					    u_xlat1.x = floor(u_xlat1.x);
					    u_xlat12 = (-u_xlat1.x) * 8.0 + u_xlat12;
					    u_xlat5 = ceil(u_xlat8);
					    u_xlat9 = u_xlat5 * 0.125;
					    u_xlat9 = floor(u_xlat9);
					    u_xlat5 = (-u_xlat9) * 8.0 + u_xlat5;
					    u_xlat0.xy = u_xlat0.xy * vec2(0.123046875, 0.123046875) + vec2(0.0009765625, 0.0009765625);
					    u_xlat2.x = u_xlat12 * 0.125 + u_xlat0.x;
					    u_xlat12 = u_xlat1.x * 0.125 + u_xlat0.y;
					    u_xlat2.y = (-u_xlat12);
					    u_xlat1.x = u_xlat5 * 0.125 + u_xlat0.x;
					    u_xlat0.x = u_xlat9 * 0.125 + u_xlat0.y;
					    u_xlat1.y = (-u_xlat0.x);
					    u_xlat2 = textureLod(_MainTex, u_xlat2.xy, 0.0);
					    u_xlat1 = textureLod(_MainTex, u_xlat1.xy, 0.0);
					    u_xlat0.x = fract(u_xlat8);
					    u_xlat4.xyz = (-u_xlat2.xyz) + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat2.xyz;
					    if(_LinearInput == 0) {
					        u_xlat1.xyz = u_xlat0.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
					        u_xlat2.xyz = log2(abs(u_xlat0.xyz));
					        u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					        u_xlat2.xyz = exp2(u_xlat2.xyz);
					        u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					        u_xlatb3.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat0.xyzx).xyz;
					        u_xlat0.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat2.x;
					        u_xlat0.y = (u_xlatb3.y) ? u_xlat1.y : u_xlat2.y;
					        u_xlat0.z = (u_xlatb3.z) ? u_xlat1.z : u_xlat2.z;
					    }
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "CONVERTUNITY"
			ZClip Off
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 160936
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o1.xy, v1
					    mad o0.xy, r0.w, c255, r0
					    mov o0.zw, r0
					
					// approximately 7 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   int _LinearInput;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _LinearInput c0       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c1, 1, -1, 0, 12.9200001
					    def c2, 0.416666657, 1.05499995, -0.0549999997, 0.00313080009
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    mad r0, v0.xyxx, c1.xyzz, c1.zxzz
					    texldl r0, r0, s0
					    mov r1.z, c1.z
					    if_eq c0.x, r1.z
					      mul r1.xyz, r0, c1.w
					      log r2.x, r0_abs.x
					      log r2.y, r0_abs.y
					      log r2.z, r0_abs.z
					      mul r2.xyz, r2, c2.x
					      exp r3.x, r2.x
					      exp r3.y, r2.y
					      exp r3.z, r2.z
					      mad r2.xyz, r3, c2.y, c2.z
					      add r3.xyz, -r0, c2.w
					      cmp r0.xyz, r3, r1, r2
					    endif
					    mov oC0.xyz, r0
					    mov oC0.w, c1.x
					
					// approximately 21 instruction slots used (2 texture, 19 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[10];
						int _LinearInput;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					bvec3 u_xlatb3;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * vec2(1.0, -1.0) + vec2(0.0, 1.0);
					    u_xlat0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
					    if(_LinearInput == 0) {
					        u_xlat1.xyz = u_xlat0.xyz * vec3(12.9200001, 12.9200001, 12.9200001);
					        u_xlat2.xyz = log2(abs(u_xlat0.xyz));
					        u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					        u_xlat2.xyz = exp2(u_xlat2.xyz);
					        u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					        u_xlatb3.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat0.xyzx).xyz;
					        u_xlat0.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat2.x;
					        u_xlat0.y = (u_xlatb3.y) ? u_xlat1.y : u_xlat2.y;
					        u_xlat0.z = (u_xlatb3.z) ? u_xlat1.z : u_xlat2.z;
					    }
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
	}
}
Shader "Hidden/ScionBloom" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
	}
	SubShader {
		Pass {
			Name "DOWNSAMPLE"
			ZClip Off
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 31713
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 r1.x, c0, v0
					    dp4 r1.y, c1, v0
					    dp4 r1.z, c2, v0
					    dp4 r1.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					    mad o0.xy, r1.w, c255, r1
					    mov o0.zw, r1
					
					// approximately 11 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c1, -2, 2, 0.25, 0.125
					    def c2, -1, 1, 2, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    mov r0, c2
					    mad r1.xy, c0, -r0.z, v0
					    texld r1, r1, s0
					    mul r2, r0.ywwy, c0.xxyy
					    add r2.xy, r2, c2.wzzw
					    mad r3.xy, r2, -c2.zwzw, v0
					    mad r2.xy, r2, c2.zwzw, v0
					    texld r4, r2, s0
					    texld r3, r3, s0
					    add r1.xyz, r1, r3
					    mad r2.xy, c2.z, -r2.zwzw, v0
					    mad r2.zw, c2.z, r2, v0.xyxy
					    texld r5, r2.zwzw, s0
					    texld r2, r2, s0
					    add r1.xyz, r1, r2
					    texld r6, v0, s0
					    add r1.xyz, r1, r6
					    mov r7.xy, c1
					    mad r7, c0.xyxy, r7.xyyx, v0.xyxy
					    texld r8, r7, s0
					    texld r7, r7.zwzw, s0
					    add r3.xyz, r3, r8
					    add r3.xyz, r6, r3
					    add r3.xyz, r5, r3
					    add r5.xyz, r5, r6
					    add r2.xyz, r2, r6
					    add r2.xyz, r7, r2
					    add r2.xyz, r4, r2
					    add r4.xyz, r4, r5
					    mul r3.xyz, r3, c1.z
					    mad r1.xyz, r1, c1.z, r3
					    mad r1.xyz, r2, c1.z, r1
					    mad r0.zw, c0.xyxy, r0.z, v0.xyxy
					    texld r2, r0.zwzw, s0
					    add r2.xyz, r2, r4
					    mad r1.xyz, r2, c1.z, r1
					    mul r1.xyz, r1, c1.w
					    add r0.zw, -c0.xyxy, v0.xyxy
					    texld r2, r0.zwzw, s0
					    mad r0, c0.xyxy, r0.xyyx, v0.xyxy
					    texld r3, r0, s0
					    texld r0, r0.zwzw, s0
					    add r2.xyz, r2, r3
					    add r0.xyz, r0, r2
					    add r2.xy, c0, v0
					    texld r2, r2, s0
					    add r0.xyz, r0, r2
					    mad oC0.xyz, r0, c1.w, r1
					    mov oC0.w, c2.y
					
					// approximately 49 instruction slots used (13 texture, 36 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					void main()
					{
					    u_xlat0 = _MainTex_TexelSize.xyxy * vec4(-2.0, 2.0, 2.0, -2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat0.zw);
					    u_xlat2.xw = _MainTex_TexelSize.xy;
					    u_xlat2.y = float(2.0);
					    u_xlat2.z = float(0.0);
					    u_xlat3 = (-u_xlat2) * vec4(2.0, 0.0, 2.0, 2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2.zwxy * vec4(2.0, 2.0, 2.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = texture(_MainTex, u_xlat3.xy);
					    u_xlat3 = texture(_MainTex, u_xlat3.zw);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat4.xyz;
					    u_xlat5 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat5.xyz;
					    u_xlat6 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat5.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = u_xlat2.xyz + u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat7.xy = (-_MainTex_TexelSize.xy) * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat7 = texture(_MainTex, u_xlat7.xy);
					    u_xlat4.xyz = u_xlat4.xyz + u_xlat7.xyz;
					    u_xlat4.xyz = u_xlat3.xyz + u_xlat4.xyz;
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat4.xyz = u_xlat5.xyz + u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(0.25, 0.25, 0.25) + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25) + u_xlat1.xyz;
					    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat1.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(-1.0, 1.0, 1.0, -1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat3.xyz;
					    u_xlat1.xyz = u_xlat2.xyz + u_xlat1.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "UPSAMPLE"
			Blend One One, One One
			ZClip Off
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 108270
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 r1.x, c0, v0
					    dp4 r1.y, c1, v0
					    dp4 r1.z, c2, v0
					    dp4 r1.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					    mad o0.xy, r1.w, c255, r1
					    mov o0.zw, r1
					
					// approximately 11 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _GlareDistanceMultiplier;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name                     Reg   Size
					//   ------------------------ ----- ----
					//   _MainTex_TexelSize       c0       1
					//   _GlareDistanceMultiplier c1       1
					//   _MainTex                 s0       1
					//
					
					    ps_3_0
					    def c2, 0.0625, 0.25, 0, 0
					    def c3, 0, -1, 1, 0.125
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    add r0.xy, -c0, v0
					    mov r0.zw, c3.x
					    texldl r0, r0, s0
					    mov r1.xyz, c3
					    mad r2, c0.xyxy, r1.yxyz, v0.xyxy
					    mul r3, r2.xyxx, c3.zzxx
					    mul r2, r2.zwxx, c3.zzxx
					    texldl r2, r2, s0
					    texldl r3, r3, s0
					    mul r3.xyz, r3, c3.w
					    mad r0.xyz, r0, c2.x, r3
					    mad r0.xyz, r2, c2.x, r0
					    mad r2, c0.xyxy, r1.xyxz, v0.xyxy
					    mul r3, r2.xyxx, c3.zzxx
					    mul r2, r2.zwxx, c3.zzxx
					    texldl r2, r2, s0
					    texldl r3, r3, s0
					    mad r0.xyz, r3, c3.w, r0
					    mul r3, c3.zzxx, v0.xyxx
					    texldl r3, r3, s0
					    mad r0.xyz, r3, c2.y, r0
					    mad r0.xyz, r2, c3.w, r0
					    mad r1, c0.xyxy, r1.zyzx, v0.xyxy
					    mul r2, r1.xyxx, c3.zzxx
					    mul r1, r1.zwxx, c3.zzxx
					    texldl r1, r1, s0
					    texldl r2, r2, s0
					    mad r0.xyz, r2, c2.x, r0
					    mad r0.xyz, r1, c3.w, r0
					    add r1.xy, c0, v0
					    mov r1.zw, c3.x
					    texldl r1, r1, s0
					    mad r0.xyz, r1, c2.x, r0
					    mul oC0.xyz, r0, c1.x
					    mov oC0.w, c3.z
					
					// approximately 44 instruction slots used (18 texture, 26 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						float _GlareDistanceMultiplier;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 0.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = textureLod(_MainTex, u_xlat1.xy, 0.0);
					    u_xlat1 = textureLod(_MainTex, u_xlat1.zw, 0.0);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, 0.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = textureLod(_MainTex, u_xlat1.xy, 0.0);
					    u_xlat1 = textureLod(_MainTex, u_xlat1.zw, 0.0);
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = textureLod(_MainTex, u_xlat1.xy, 0.0);
					    u_xlat1 = textureLod(_MainTex, u_xlat1.zw, 0.0);
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat1 = textureLod(_MainTex, u_xlat1.xy, 0.0);
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(vec3(_GlareDistanceMultiplier, _GlareDistanceMultiplier, _GlareDistanceMultiplier));
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "UPSAMPLEFINAL"
			ZClip Off
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 163329
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 r1.x, c0, v0
					    dp4 r1.y, c1, v0
					    dp4 r1.z, c2, v0
					    dp4 r1.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					    mad o0.xy, r1.w, c255, r1
					    mov o0.zw, r1
					
					// approximately 11 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _GlareDistanceMultiplier;
					//   sampler2D _HalfResSource;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name                     Reg   Size
					//   ------------------------ ----- ----
					//   _MainTex_TexelSize       c0       1
					//   _GlareDistanceMultiplier c1       1
					//   _MainTex                 s0       1
					//   _HalfResSource           s1       1
					//
					
					    ps_3_0
					    def c2, 0.0625, 0.25, 0, 0
					    def c3, 0, -1, 1, 0.125
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    add r0.xy, -c0, v0
					    mov r0.zw, c3.x
					    texldl r0, r0, s0
					    mov r1.xyz, c3
					    mad r2, c0.xyxy, r1.yxyz, v0.xyxy
					    mul r3, r2.xyxx, c3.zzxx
					    mul r2, r2.zwxx, c3.zzxx
					    texldl r2, r2, s0
					    texldl r3, r3, s0
					    mul r3.xyz, r3, c3.w
					    mad r0.xyz, r0, c2.x, r3
					    mad r0.xyz, r2, c2.x, r0
					    mad r2, c0.xyxy, r1.xyxz, v0.xyxy
					    mul r3, r2.xyxx, c3.zzxx
					    mul r2, r2.zwxx, c3.zzxx
					    texldl r2, r2, s0
					    texldl r3, r3, s0
					    mad r0.xyz, r3, c3.w, r0
					    mul r3, c3.zzxx, v0.xyxx
					    texldl r4, r3, s0
					    texldl r3, r3, s1
					    mad r0.xyz, r4, c2.y, r0
					    mad r0.xyz, r2, c3.w, r0
					    mad r1, c0.xyxy, r1.zyzx, v0.xyxy
					    mul r2, r1.xyxx, c3.zzxx
					    mul r1, r1.zwxx, c3.zzxx
					    texldl r1, r1, s0
					    texldl r2, r2, s0
					    mad r0.xyz, r2, c2.x, r0
					    mad r0.xyz, r1, c3.w, r0
					    add r1.xy, c0, v0
					    mov r1.zw, c3.x
					    texldl r1, r1, s0
					    mad r0.xyz, r1, c2.x, r0
					    mad oC0.xyz, r0, c1.x, r3
					    mov oC0.w, c3.z
					
					// approximately 46 instruction slots used (20 texture, 26 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
						float _GlareDistanceMultiplier;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _HalfResSource;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 0.0, -1.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = textureLod(_MainTex, u_xlat1.xy, 0.0);
					    u_xlat1 = textureLod(_MainTex, u_xlat1.zw, 0.0);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(0.0, -1.0, 0.0, 1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = textureLod(_MainTex, u_xlat1.xy, 0.0);
					    u_xlat1 = textureLod(_MainTex, u_xlat1.zw, 0.0);
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat2 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(1.0, -1.0, 1.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = textureLod(_MainTex, u_xlat1.xy, 0.0);
					    u_xlat1 = textureLod(_MainTex, u_xlat1.zw, 0.0);
					    u_xlat0.xyz = u_xlat2.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat1 = textureLod(_MainTex, u_xlat1.xy, 0.0);
					    u_xlat0.xyz = u_xlat1.xyz * vec3(0.0625, 0.0625, 0.0625) + u_xlat0.xyz;
					    u_xlat1 = textureLod(_HalfResSource, vs_TEXCOORD0.xy, 0.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(vec3(_GlareDistanceMultiplier, _GlareDistanceMultiplier, _GlareDistanceMultiplier)) + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
	}
}
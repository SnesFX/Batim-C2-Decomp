Shader "Hidden/ScionLensFlare" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
	}
	SubShader {
		Pass {
			Name "BLURPASS1_4"
			ZClip Off
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 25351
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 r1.x, c0, v0
					    dp4 r1.y, c1, v0
					    dp4 r1.z, c2, v0
					    dp4 r1.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					    mad o0.xy, r1.w, c255, r1
					    mov o0.zw, r1
					
					// approximately 11 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _LensFlareParams3;
					//   sampler2D _MainTex;
					//   float4 _ScionCameraParams1;
					//   float4 _TextureParams;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _ScionCameraParams1 c0       1
					//   _TextureParams      c1       1
					//   _LensFlareParams3   c2       1
					//   _MainTex            s0       1
					//
					
					    ps_3_0
					    def c3, 0.5, 1, 0, 0.25
					    def c4, 0.865999997, 0, 0, -0.5
					    defi i0, 4, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    mov r0.x, c4.x
					    mul r0.x, r0.x, c0.w
					    mov r1.zw, c4.y
					    mov r2.zw, c4.y
					    mov r3, c4.y
					    mov r4, c4.y
					    mov r0.y, c4.y
					    rep i0
					      add r0.yz, r0.y, c3.xyxw
					      mul r0.z, r0.z, c1.y
					      mul r0.z, r0.z, c2.x
					      mul r5.w, r0.z, c4.w
					      mad r1.xy, r0.z, c3.zyzw, v0
					      texldl r6, r1, s0
					      add r3, r3, r6
					      mul r5.z, r0.z, r0.x
					      add r2.xy, r5.zwzw, v0
					      texldl r5, r2, s0
					      add r4, r4, r5
					    endrep
					    mul r0, r3, c3.w
					    mul r1.x, r4.w, c3.w
					    mad oC1.xyz, r4, c3.w, r0
					    mov oC0, r0
					    mov oC1.w, r1.x
					
					// approximately 30 instruction slots used (4 texture, 26 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _ScionCameraParams1;
						vec4 unused_0_2[4];
						vec4 _TextureParams;
						vec4 unused_0_4[2];
						vec4 _LensFlareParams3;
						vec4 unused_0_6[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					int u_xlati5;
					vec2 u_xlat10;
					bool u_xlatb10;
					vec2 u_xlat13;
					void main()
					{
					    u_xlat0.x = _ScionCameraParams1.w * 0.865999997;
					    u_xlat1.x = float(0.0);
					    u_xlat1.y = float(0.0);
					    u_xlat1.z = float(0.0);
					    u_xlat1.w = float(0.0);
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.w = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<4 ; u_xlati_loop_1++)
					    {
					        u_xlat10.x = float(u_xlati_loop_1);
					        u_xlat10.x = u_xlat10.x + 0.5;
					        u_xlat10.x = u_xlat10.x * _TextureParams.y;
					        u_xlat10.x = u_xlat10.x * _LensFlareParams3.x;
					        u_xlat13.y = u_xlat10.x * -0.5;
					        u_xlat3.xy = u_xlat10.xx * vec2(0.0, 1.0) + vs_TEXCOORD0.xy;
					        u_xlat4 = textureLod(_MainTex, u_xlat3.xy, 0.0);
					        u_xlat1 = u_xlat1 + u_xlat4;
					        u_xlat13.x = u_xlat10.x * u_xlat0.x;
					        u_xlat10.xy = u_xlat13.xy + vs_TEXCOORD0.xy;
					        u_xlat3 = textureLod(_MainTex, u_xlat10.xy, 0.0);
					        u_xlat2 = u_xlat2 + u_xlat3;
					    }
					    u_xlat0 = u_xlat1 * vec4(0.25, 0.25, 0.25, 0.25);
					    u_xlat1.x = u_xlat2.w * 0.25;
					    SV_Target1.xyz = u_xlat2.xyz * vec3(0.25, 0.25, 0.25) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    SV_Target1.w = u_xlat1.x;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "BLURPASS1_8"
			ZClip Off
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 108481
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 r1.x, c0, v0
					    dp4 r1.y, c1, v0
					    dp4 r1.z, c2, v0
					    dp4 r1.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					    mad o0.xy, r1.w, c255, r1
					    mov o0.zw, r1
					
					// approximately 11 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _LensFlareParams3;
					//   sampler2D _MainTex;
					//   float4 _ScionCameraParams1;
					//   float4 _TextureParams;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _ScionCameraParams1 c0       1
					//   _TextureParams      c1       1
					//   _LensFlareParams3   c2       1
					//   _MainTex            s0       1
					//
					
					    ps_3_0
					    def c3, 0.5, 1, 0, 0.125
					    def c4, 0.865999997, 0, 0, -0.5
					    defi i0, 8, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    mov r0.x, c4.x
					    mul r0.x, r0.x, c0.w
					    mov r1.zw, c4.y
					    mov r2.zw, c4.y
					    mov r3, c4.y
					    mov r4, c4.y
					    mov r0.y, c4.y
					    rep i0
					      add r0.yz, r0.y, c3.xyxw
					      mul r0.z, r0.z, c1.y
					      mul r0.z, r0.z, c2.x
					      mul r5.w, r0.z, c4.w
					      mad r1.xy, r0.z, c3.zyzw, v0
					      texldl r6, r1, s0
					      add r3, r3, r6
					      mul r5.z, r0.z, r0.x
					      add r2.xy, r5.zwzw, v0
					      texldl r5, r2, s0
					      add r4, r4, r5
					    endrep
					    mul r0, r3, c3.w
					    mul r1.x, r4.w, c3.w
					    mad oC1.xyz, r4, c3.w, r0
					    mov oC0, r0
					    mov oC1.w, r1.x
					
					// approximately 30 instruction slots used (4 texture, 26 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _ScionCameraParams1;
						vec4 unused_0_2[4];
						vec4 _TextureParams;
						vec4 unused_0_4[2];
						vec4 _LensFlareParams3;
						vec4 unused_0_6[4];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					int u_xlati5;
					vec2 u_xlat10;
					bool u_xlatb10;
					vec2 u_xlat13;
					void main()
					{
					    u_xlat0.x = _ScionCameraParams1.w * 0.865999997;
					    u_xlat1.x = float(0.0);
					    u_xlat1.y = float(0.0);
					    u_xlat1.z = float(0.0);
					    u_xlat1.w = float(0.0);
					    u_xlat2.x = float(0.0);
					    u_xlat2.y = float(0.0);
					    u_xlat2.z = float(0.0);
					    u_xlat2.w = float(0.0);
					    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<8 ; u_xlati_loop_1++)
					    {
					        u_xlat10.x = float(u_xlati_loop_1);
					        u_xlat10.x = u_xlat10.x + 0.5;
					        u_xlat10.x = u_xlat10.x * _TextureParams.y;
					        u_xlat10.x = u_xlat10.x * _LensFlareParams3.x;
					        u_xlat13.y = u_xlat10.x * -0.5;
					        u_xlat3.xy = u_xlat10.xx * vec2(0.0, 1.0) + vs_TEXCOORD0.xy;
					        u_xlat4 = textureLod(_MainTex, u_xlat3.xy, 0.0);
					        u_xlat1 = u_xlat1 + u_xlat4;
					        u_xlat13.x = u_xlat10.x * u_xlat0.x;
					        u_xlat10.xy = u_xlat13.xy + vs_TEXCOORD0.xy;
					        u_xlat3 = textureLod(_MainTex, u_xlat10.xy, 0.0);
					        u_xlat2 = u_xlat2 + u_xlat3;
					    }
					    u_xlat0 = u_xlat1 * vec4(0.125, 0.125, 0.125, 0.125);
					    u_xlat1.x = u_xlat2.w * 0.125;
					    SV_Target1.xyz = u_xlat2.xyz * vec3(0.125, 0.125, 0.125) + u_xlat0.xyz;
					    SV_Target0 = u_xlat0;
					    SV_Target1.w = u_xlat1.x;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "BLURPASS2_4"
			ZClip Off
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 144625
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 r1.x, c0, v0
					    dp4 r1.y, c1, v0
					    dp4 r1.z, c2, v0
					    dp4 r1.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					    mad o0.xy, r1.w, c255, r1
					    mov o0.zw, r1
					
					// approximately 11 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _BlurTexture1;
					//   float4 _LensFlareParams3;
					//   sampler2D _MainTex;
					//   float4 _ScionCameraParams1;
					//   float4 _TextureParams;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _ScionCameraParams1 c0       1
					//   _TextureParams      c1       1
					//   _LensFlareParams3   c2       1
					//   _MainTex            s0       1
					//   _BlurTexture1       s1       1
					//
					
					    ps_3_0
					    def c3, -0.25, 0, -0.75, -1.25
					    def c4, 0.333333343, 0, 0, 0
					    def c5, 2.5, 1, 3.5, -1.75
					    def c6, 0.865999997, 0.5, 1.5, 1
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mov r0.zw, c3.y
					    mov r1.x, c2.x
					    mul r1.x, r1.x, c1.y
					    mul r2, r1.x, c6.yzzw
					    mul r3.y, r2.w, c3.z
					    mov r4.x, c6.x
					    mul r1.y, r4.x, c0.w
					    mul r3.x, r2.z, -r1.y
					    add r0.xy, r3, v0
					    texldl r0, r0, s1
					    mov r3.zw, c3.y
					    mul r4.yw, r1.x, c3.x
					    mul r4.z, r2.x, -r1.y
					    add r3.xy, r4.zwzw, v0
					    texldl r3, r3, s1
					    add r0.xyz, r0, r3
					    mov r3.zw, c3.y
					    mul r5, r1.x, c5.xyzy
					    mul r6.y, r1.x, c3.z
					    mul r7.yw, r5.y, c3.w
					    mul r7.z, -r1.y, r5.x
					    add r3.xy, r7.zwzw, v0
					    texldl r3, r3, s1
					    add r0.xyz, r0, r3
					    mov r3.zw, c3.y
					    mul r8.yw, r5.w, c5.w
					    mul r8.z, -r1.y, r5.z
					    add r3.xy, r8.zwzw, v0
					    texldl r3, r3, s1
					    add r0.xyz, r0, r3
					    mul r0.xyz, r0, -c3.x
					    mul r4.x, r2.x, r1.y
					    mul r6.x, r2.y, r1.y
					    add r2.xy, r6, v0
					    add r3.xy, r4, v0
					    mov r3.zw, c3.y
					    texldl r3, r3, s0
					    mov r2.zw, c3.y
					    texldl r2, r2, s0
					    add r1.xzw, r2.xyyz, r3.xyyz
					    mul r7.x, r1.y, r5.x
					    mul r8.x, r1.y, r5.z
					    add r2.xy, r8, v0
					    add r3.xy, r7, v0
					    mov r3.zw, c3.y
					    texldl r3, r3, s0
					    add r1.xyz, r1.xzww, r3
					    mov r2.zw, c3.y
					    texldl r2, r2, s0
					    add r1.xyz, r1, r2
					    mad r0.xyz, r1, -c3.x, r0
					    mul oC0.xyz, r0, c4.x
					    mov oC0.w, c3.y
					
					// approximately 61 instruction slots used (16 texture, 45 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _ScionCameraParams1;
						vec4 unused_0_2[4];
						vec4 _TextureParams;
						vec4 unused_0_4[2];
						vec4 _LensFlareParams3;
						vec4 unused_0_6[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTexture1;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					vec2 u_xlat14;
					void main()
					{
					    u_xlat0.x = _TextureParams.y * _LensFlareParams3.x;
					    u_xlat1.yw = u_xlat0.xx * vec2(-0.25, -0.75);
					    u_xlat2.xzw = u_xlat0.xxx * vec3(0.5, -0.25, 1.5);
					    u_xlat7 = _ScionCameraParams1.w * 0.865999997;
					    u_xlat1.x = u_xlat2.x * (-u_xlat7);
					    u_xlat14.xy = u_xlat1.xy + vs_TEXCOORD0.xy;
					    u_xlat3 = textureLod(_BlurTexture1, u_xlat14.xy, 0.0);
					    u_xlat4 = u_xlat0.xxxx * vec4(1.5, 1.0, 2.5, 1.0);
					    u_xlat0.xz = u_xlat0.xx * vec2(3.5, 1.0);
					    u_xlat5.yw = u_xlat4.yw * vec2(-0.75, -1.25);
					    u_xlat5.x = (-u_xlat7) * u_xlat4.x;
					    u_xlat1.xy = u_xlat5.xy + vs_TEXCOORD0.xy;
					    u_xlat6 = textureLod(_BlurTexture1, u_xlat1.xy, 0.0);
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat6.xyz;
					    u_xlat1.y = u_xlat4.w * -1.25;
					    u_xlat1.x = (-u_xlat7) * u_xlat4.z;
					    u_xlat5.z = u_xlat7 * u_xlat4.z;
					    u_xlat4.xy = u_xlat5.zw + vs_TEXCOORD0.xy;
					    u_xlat4 = textureLod(_MainTex, u_xlat4.xy, 0.0);
					    u_xlat1.xy = u_xlat1.xy + vs_TEXCOORD0.xy;
					    u_xlat5 = textureLod(_BlurTexture1, u_xlat1.xy, 0.0);
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat5.yw = u_xlat0.zz * vec2(-1.75, -1.75);
					    u_xlat5.z = u_xlat0.x * (-u_xlat7);
					    u_xlat5.x = u_xlat0.x * u_xlat7;
					    u_xlat0.xz = u_xlat5.xy + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat5.zw + vs_TEXCOORD0.xy;
					    u_xlat5 = textureLod(_BlurTexture1, u_xlat1.xy, 0.0);
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat5 = textureLod(_MainTex, u_xlat0.xz, 0.0);
					    u_xlat2.y = u_xlat2.x * u_xlat7;
					    u_xlat1.z = u_xlat2.w * u_xlat7;
					    u_xlat0.xy = u_xlat2.yz + vs_TEXCOORD0.xy;
					    u_xlat0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
					    u_xlat1.xy = u_xlat1.zw + vs_TEXCOORD0.xy;
					    u_xlat1 = textureLod(_MainTex, u_xlat1.xy, 0.0);
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25) + u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(0.333333343, 0.333333343, 0.333333343);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "BLURPASS2_8"
			ZClip Off
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 223000
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 r1.x, c0, v0
					    dp4 r1.y, c1, v0
					    dp4 r1.z, c2, v0
					    dp4 r1.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					    mad o0.xy, r1.w, c255, r1
					    mov o0.zw, r1
					
					// approximately 11 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _BlurTexture1;
					//   float4 _LensFlareParams3;
					//   sampler2D _MainTex;
					//   float4 _ScionCameraParams1;
					//   float4 _TextureParams;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _ScionCameraParams1 c0       1
					//   _TextureParams      c1       1
					//   _LensFlareParams3   c2       1
					//   _MainTex            s0       1
					//   _BlurTexture1       s1       1
					//
					
					    ps_3_0
					    def c3, -0.25, 0, -0.75, -1.25
					    def c4, -3.25, -3.75, 0.125, 0.333333343
					    def c5, 2.5, 1, 3.5, -1.75
					    def c6, 4.5, 1, 5.5, -2.25
					    def c7, -2.75, 6.5, 1, 7.5
					    def c8, 0.865999997, 0.5, 1.5, 1
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mov r0.zw, c3.y
					    mov r1.x, c2.x
					    mul r1.x, r1.x, c1.y
					    mul r2, r1.x, c8.yzzw
					    mul r3.y, r2.w, c3.z
					    mov r4.x, c8.x
					    mul r1.y, r4.x, c0.w
					    mul r3.x, r2.z, -r1.y
					    add r0.xy, r3, v0
					    texldl r0, r0, s1
					    mov r3.zw, c3.y
					    mul r4.yw, r1.x, c3.x
					    mul r4.z, r2.x, -r1.y
					    add r3.xy, r4.zwzw, v0
					    texldl r3, r3, s1
					    add r0.xyz, r0, r3
					    mov r3.zw, c3.y
					    mul r5, r1.x, c5.xyzy
					    mul r6.yw, r5.y, c3.w
					    mul r6.z, -r1.y, r5.x
					    add r3.xy, r6.zwzw, v0
					    texldl r3, r3, s1
					    add r0.xyz, r0, r3
					    mov r3.zw, c3.y
					    mul r7.yw, r5.w, c5.w
					    mul r7.z, -r1.y, r5.z
					    add r3.xy, r7.zwzw, v0
					    texldl r3, r3, s1
					    add r0.xyz, r0, r3
					    mov r3.zw, c3.y
					    mul r8, r1.x, c6.xyzy
					    mul r9.yw, r8.y, c6.w
					    mul r9.z, -r1.y, r8.x
					    add r3.xy, r9.zwzw, v0
					    texldl r3, r3, s1
					    add r0.xyz, r0, r3
					    mov r3.zw, c3.y
					    mul r10.yw, r8.w, c7.x
					    mul r10.z, -r1.y, r8.z
					    add r3.xy, r10.zwzw, v0
					    texldl r3, r3, s1
					    add r0.xyz, r0, r3
					    mov r3.zw, c3.y
					    mul r11, r1.x, c7.yzwz
					    mul r12.y, r1.x, c3.z
					    mul r13.yw, r11.y, c4.x
					    mul r13.z, -r1.y, r11.x
					    add r3.xy, r13.zwzw, v0
					    texldl r3, r3, s1
					    add r0.xyz, r0, r3
					    mov r3.zw, c3.y
					    mul r14.yw, r11.w, c4.y
					    mul r14.z, -r1.y, r11.z
					    add r3.xy, r14.zwzw, v0
					    texldl r3, r3, s1
					    add r0.xyz, r0, r3
					    mul r0.xyz, r0, c4.z
					    mov r3.zw, c3.y
					    mul r4.x, r2.x, r1.y
					    mul r12.x, r2.y, r1.y
					    add r2.xy, r12, v0
					    add r3.xy, r4, v0
					    texldl r3, r3, s0
					    mov r2.zw, c3.y
					    texldl r2, r2, s0
					    add r1.xzw, r2.xyyz, r3.xyyz
					    mov r2.zw, c3.y
					    mul r6.x, r1.y, r5.x
					    mul r7.x, r1.y, r5.z
					    add r3.xy, r7, v0
					    add r2.xy, r6, v0
					    texldl r2, r2, s0
					    add r1.xzw, r1, r2.xyyz
					    mov r3.zw, c3.y
					    texldl r2, r3, s0
					    add r1.xzw, r1, r2.xyyz
					    mul r9.x, r1.y, r8.x
					    mul r10.x, r1.y, r8.z
					    add r2.xy, r10, v0
					    add r3.xy, r9, v0
					    mov r3.zw, c3.y
					    texldl r3, r3, s0
					    add r1.xzw, r1, r3.xyyz
					    mov r2.zw, c3.y
					    texldl r2, r2, s0
					    add r1.xzw, r1, r2.xyyz
					    mul r13.x, r1.y, r11.x
					    mul r14.x, r1.y, r11.z
					    add r2.xy, r14, v0
					    add r3.xy, r13, v0
					    mov r3.zw, c3.y
					    texldl r3, r3, s0
					    add r1.xyz, r1.xzww, r3
					    mov r2.zw, c3.y
					    texldl r2, r2, s0
					    add r1.xyz, r1, r2
					    mad r0.xyz, r1, c4.z, r0
					    mul oC0.xyz, r0, c4.w
					    mov oC0.w, c3.y
					
					// approximately 115 instruction slots used (32 texture, 83 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _ScionCameraParams1;
						vec4 unused_0_2[4];
						vec4 _TextureParams;
						vec4 unused_0_4[2];
						vec4 _LensFlareParams3;
						vec4 unused_0_6[4];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _BlurTexture1;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					float u_xlat12;
					vec2 u_xlat24;
					void main()
					{
					    u_xlat0.x = _TextureParams.y * _LensFlareParams3.x;
					    u_xlat1.yw = u_xlat0.xx * vec2(-0.25, -0.75);
					    u_xlat2.xzw = u_xlat0.xxx * vec3(0.5, -0.25, 1.5);
					    u_xlat12 = _ScionCameraParams1.w * 0.865999997;
					    u_xlat1.x = u_xlat2.x * (-u_xlat12);
					    u_xlat24.xy = u_xlat1.xy + vs_TEXCOORD0.xy;
					    u_xlat3 = textureLod(_BlurTexture1, u_xlat24.xy, 0.0);
					    u_xlat4 = u_xlat0.xxxx * vec4(1.5, 1.0, 2.5, 1.0);
					    u_xlat5.yw = u_xlat4.yw * vec2(-0.75, -1.25);
					    u_xlat5.x = (-u_xlat12) * u_xlat4.x;
					    u_xlat24.xy = u_xlat5.xy + vs_TEXCOORD0.xy;
					    u_xlat6 = textureLod(_BlurTexture1, u_xlat24.xy, 0.0);
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat6.xyz;
					    u_xlat1.y = u_xlat4.w * -1.25;
					    u_xlat1.x = (-u_xlat12) * u_xlat4.z;
					    u_xlat5.z = u_xlat12 * u_xlat4.z;
					    u_xlat24.xy = u_xlat5.zw + vs_TEXCOORD0.xy;
					    u_xlat4 = textureLod(_MainTex, u_xlat24.xy, 0.0);
					    u_xlat24.xy = u_xlat1.xy + vs_TEXCOORD0.xy;
					    u_xlat5 = textureLod(_BlurTexture1, u_xlat24.xy, 0.0);
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat5.xyz;
					    u_xlat5 = u_xlat0.xxxx * vec4(3.5, 1.0, 4.5, 1.0);
					    u_xlat6.yw = u_xlat5.yy * vec2(-1.75, -1.75);
					    u_xlat6.z = (-u_xlat12) * u_xlat5.x;
					    u_xlat24.xy = u_xlat6.zw + vs_TEXCOORD0.xy;
					    u_xlat7 = textureLod(_BlurTexture1, u_xlat24.xy, 0.0);
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat7.xyz;
					    u_xlat7.yw = u_xlat5.ww * vec2(-2.25, -2.25);
					    u_xlat7.z = (-u_xlat12) * u_xlat5.z;
					    u_xlat24.xy = u_xlat7.zw + vs_TEXCOORD0.xy;
					    u_xlat8 = textureLod(_BlurTexture1, u_xlat24.xy, 0.0);
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat8.xyz;
					    u_xlat8 = u_xlat0.xxxx * vec4(5.5, 1.0, 6.5, 1.0);
					    u_xlat0.xz = u_xlat0.xx * vec2(7.5, 1.0);
					    u_xlat9.yw = u_xlat8.yy * vec2(-2.75, -2.75);
					    u_xlat9.z = (-u_xlat12) * u_xlat8.x;
					    u_xlat1.xy = u_xlat9.zw + vs_TEXCOORD0.xy;
					    u_xlat10 = textureLod(_BlurTexture1, u_xlat1.xy, 0.0);
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat10.xyz;
					    u_xlat10.yw = u_xlat8.ww * vec2(-3.25, -3.25);
					    u_xlat10.z = (-u_xlat12) * u_xlat8.z;
					    u_xlat1.xy = u_xlat10.zw + vs_TEXCOORD0.xy;
					    u_xlat11 = textureLod(_BlurTexture1, u_xlat1.xy, 0.0);
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat11.xyz;
					    u_xlat11.yw = u_xlat0.zz * vec2(-3.75, -3.75);
					    u_xlat11.z = u_xlat0.x * (-u_xlat12);
					    u_xlat11.x = u_xlat0.x * u_xlat12;
					    u_xlat0.xz = u_xlat11.xy + vs_TEXCOORD0.xy;
					    u_xlat1.xy = u_xlat11.zw + vs_TEXCOORD0.xy;
					    u_xlat11 = textureLod(_BlurTexture1, u_xlat1.xy, 0.0);
					    u_xlat3.xyz = u_xlat3.xyz + u_xlat11.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(0.125, 0.125, 0.125);
					    u_xlat11 = textureLod(_MainTex, u_xlat0.xz, 0.0);
					    u_xlat2.y = u_xlat2.x * u_xlat12;
					    u_xlat0.xz = u_xlat2.yz + vs_TEXCOORD0.xy;
					    u_xlat1.z = u_xlat2.w * u_xlat12;
					    u_xlat1.xy = u_xlat1.zw + vs_TEXCOORD0.xy;
					    u_xlat1 = textureLod(_MainTex, u_xlat1.xy, 0.0);
					    u_xlat2 = textureLod(_MainTex, u_xlat0.xz, 0.0);
					    u_xlat0.xzw = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xzw = u_xlat4.xyz + u_xlat0.xzw;
					    u_xlat6.x = u_xlat12 * u_xlat5.x;
					    u_xlat7.x = u_xlat12 * u_xlat5.z;
					    u_xlat1.xy = u_xlat7.xy + vs_TEXCOORD0.xy;
					    u_xlat1 = textureLod(_MainTex, u_xlat1.xy, 0.0);
					    u_xlat2.xy = u_xlat6.xy + vs_TEXCOORD0.xy;
					    u_xlat2 = textureLod(_MainTex, u_xlat2.xy, 0.0);
					    u_xlat0.xzw = u_xlat0.xzw + u_xlat2.xyz;
					    u_xlat0.xzw = u_xlat1.xyz + u_xlat0.xzw;
					    u_xlat9.x = u_xlat12 * u_xlat8.x;
					    u_xlat10.x = u_xlat12 * u_xlat8.z;
					    u_xlat1.xy = u_xlat10.xy + vs_TEXCOORD0.xy;
					    u_xlat1 = textureLod(_MainTex, u_xlat1.xy, 0.0);
					    u_xlat2.xy = u_xlat9.xy + vs_TEXCOORD0.xy;
					    u_xlat2 = textureLod(_MainTex, u_xlat2.xy, 0.0);
					    u_xlat0.xyz = u_xlat0.xzw + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat11.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.125, 0.125, 0.125) + u_xlat3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(0.333333343, 0.333333343, 0.333333343);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "FLAREPASS2"
			ZClip Off
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 274951
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 r1.x, c0, v0
					    dp4 r1.y, c1, v0
					    dp4 r1.z, c2, v0
					    dp4 r1.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					    mad o0.xy, r1.w, c255, r1
					    mov o0.zw, r1
					
					// approximately 11 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _LensColorTexture;
					//   float4 _LensFlareParams1;
					//   float4 _LensFlareParams2;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _LensFlareParams1  c1       1
					//   _LensFlareParams2  c2       1
					//   _MainTex           s0       1
					//   _LensColorTexture  s1       1
					//
					
					    ps_3_0
					    def c3, 1, 0.5, 0, 1.41421354
					    def c4, -1, 1, 0, 2
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    add r0.xy, c3.x, -v0
					    add r0.zw, -r0.xyxy, c3.y
					    mad r1.xy, r0.zwzw, c1.y, r0
					    frc r2.xy, r1
					    add r2.xy, -r2, c3.y
					    dp2add r2.x, r2, r2, c3.z
					    mad r2.x, r2.x, -r2.x, c3.x
					    mad r2.x, r2.x, c3.y, c3.y
					    mul r2.x, r2.x, c1.z
					    mul r2.x, r2.x, c2.w
					    mov r3.xy, c4
					    mul r3, r3.xxyy, c0.x
					    mul r2, r2.x, r3
					    mul r4.xy, r0.zwzw, c1.y
					    dp2add r0.z, r0.zwzw, r0.zwzw, c3.z
					    rsq r0.z, r0.z
					    rcp r0.z, r0.z
					    mul r5.x, r0.z, c3.w
					    dp2add r0.z, r4, r4, c3.z
					    rsq r0.z, r0.z
					    mul r4, r0.z, r4.xyxy
					    mad r2, r4, r2, r1.xyxy
					    mul r6, r2.xyxx, c3.xxzz
					    mul r2, r2.zwxx, c3.xxzz
					    texldl r2, r2, s0
					    texldl r6, r6, s0
					    mov r2.x, r6.x
					    mov r5.yzw, c3.xyzz
					    texldl r5, r5, s1
					    mov r1.zw, c3.z
					    texldl r6, r1, s0
					    mad r0.zw, r1.xyxy, c4.w, c4.x
					    mul r0.zw, r0, c1.w
					    dp2add r0.z, r0.zwzw, -r0.zwzw, c3.x
					    max r1.x, r0.z, c3.z
					    mul r0.z, r1.x, r1.x
					    mul r0.z, r0.z, r0.z
					    mov r2.y, r6.y
					    mul r1.xyz, r2, r5
					    mul r1.xyz, r0.z, r1
					    frc r0.zw, -v0.xyxy
					    add r0.zw, -r0, c3.y
					    dp2add r0.z, r0.zwzw, r0.zwzw, c3.z
					    mad r0.z, r0.z, -r0.z, c3.x
					    mad r0.z, r0.z, c3.y, c3.y
					    mul r0.z, r0.z, c1.z
					    mul r0.z, r0.z, c2.w
					    mul r2, r0.z, r3
					    mad r2, r4.zwzw, r2, r0.xyxy
					    mul r6, r2.xyxx, c3.xxzz
					    mul r2, r2.zwxx, c3.xxzz
					    texldl r2, r2, s0
					    texldl r6, r6, s0
					    mov r2.x, r6.x
					    mad r6, v0.xyxx, c4.xxzz, c4.yyzz
					    texldl r6, r6, s0
					    mov r2.y, r6.y
					    mul r2.xyz, r5, r2
					    mad r0.zw, r0.xyxy, c4.w, c4.x
					    mad r6.xy, r4.zwzw, c2.y, r0
					    mul r0.xy, r0.zwzw, c1.w
					    dp2add r0.x, r0, -r0, c3.x
					    max r1.w, r0.x, c3.z
					    mul r0.x, r1.w, r1.w
					    mul r0.x, r0.x, r0.x
					    mad r0.xyz, r2, r0.x, r1
					    mul r0.xyz, r0, c1.x
					    frc r1.xy, r6
					    add r1.xy, -r1, c3.y
					    dp2add r0.w, r1, r1, c3.z
					    mad r1.x, r0.w, -r0.w, c3.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mad r0.w, r0.w, -c3.w, c3.x
					    mul r0.w, r0.w, r0.w
					    mul r0.w, r0.w, r0.w
					    mul r0.w, r0.w, c2.x
					    mad r1.x, r1.x, c3.y, c3.y
					    mul r1.x, r1.x, c2.z
					    mul r1.x, r1.x, c2.w
					    mul r1, r1.x, r3
					    mad r1, r4.zwzw, r1, r6.xyxy
					    mul r2, r1.xyxx, c3.xxzz
					    mul r1, r1.zwxx, c3.xxzz
					    texldl r1, r1, s0
					    texldl r2, r2, s0
					    mov r1.x, r2.x
					    mov r6.zw, c3.z
					    texldl r2, r6, s0
					    mov r1.y, r2.y
					    mul r1.xyz, r5, r1
					    mad r0.xyz, r1, r0.w, r0
					    max oC0.xyz, r0, c3.z
					    mov oC0.w, c3.z
					
					// approximately 111 instruction slots used (20 texture, 91 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
						vec4 _LensFlareParams1;
						vec4 _LensFlareParams2;
						vec4 unused_0_5[5];
					};
					uniform  sampler2D _LensColorTexture;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec2 u_xlat14;
					vec2 u_xlat15;
					float u_xlat21;
					void main()
					{
					    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(1.0, 1.0);
					    u_xlat14.xy = (-u_xlat0.xy) + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat14.xy * _LensFlareParams1.yy + u_xlat0.xy;
					    u_xlat15.xy = fract(u_xlat1.xy);
					    u_xlat15.xy = (-u_xlat15.xy) + vec2(0.5, 0.5);
					    u_xlat15.x = dot(u_xlat15.xy, u_xlat15.xy);
					    u_xlat15.x = (-u_xlat15.x) * u_xlat15.x + 1.0;
					    u_xlat15.x = u_xlat15.x * 0.5 + 0.5;
					    u_xlat15.x = u_xlat15.x * _LensFlareParams1.z;
					    u_xlat15.x = u_xlat15.x * _LensFlareParams2.w;
					    u_xlat2 = _MainTex_TexelSize.xxxx * vec4(-1.0, -1.0, 1.0, 1.0);
					    u_xlat3 = u_xlat15.xxxx * u_xlat2;
					    u_xlat15.xy = u_xlat14.xy * _LensFlareParams1.yy;
					    u_xlat14.x = dot(u_xlat14.xy, u_xlat14.xy);
					    u_xlat14.x = sqrt(u_xlat14.x);
					    u_xlat4.x = u_xlat14.x * 1.41421354;
					    u_xlat14.x = dot(u_xlat15.xy, u_xlat15.xy);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat5 = u_xlat14.xxxx * u_xlat15.xyxy;
					    u_xlat3 = u_xlat5 * u_xlat3 + u_xlat1.xyxy;
					    u_xlat6 = textureLod(_MainTex, u_xlat3.xy, 0.0);
					    u_xlat3 = textureLod(_MainTex, u_xlat3.zw, 0.0);
					    u_xlat6.z = u_xlat3.z;
					    u_xlat4.y = 0.5;
					    u_xlat3 = textureLod(_LensColorTexture, u_xlat4.xy, 0.0);
					    u_xlat4 = textureLod(_MainTex, u_xlat1.xy, 0.0);
					    u_xlat14.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat14.xy = u_xlat14.xy * _LensFlareParams1.ww;
					    u_xlat14.x = dot(u_xlat14.xy, u_xlat14.xy);
					    u_xlat14.x = (-u_xlat14.x) + 1.0;
					    u_xlat14.x = max(u_xlat14.x, 0.0);
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat6.y = u_xlat4.y;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat14.xxx * u_xlat1.xyz;
					    u_xlat14.xy = fract((-vs_TEXCOORD0.xy));
					    u_xlat14.xy = (-u_xlat14.xy) + vec2(0.5, 0.5);
					    u_xlat14.x = dot(u_xlat14.xy, u_xlat14.xy);
					    u_xlat14.x = (-u_xlat14.x) * u_xlat14.x + 1.0;
					    u_xlat14.x = u_xlat14.x * 0.5 + 0.5;
					    u_xlat14.x = u_xlat14.x * _LensFlareParams1.z;
					    u_xlat14.x = u_xlat14.x * _LensFlareParams2.w;
					    u_xlat4 = u_xlat14.xxxx * u_xlat2;
					    u_xlat4 = u_xlat5.zwzw * u_xlat4 + u_xlat0.xyxy;
					    u_xlat6 = textureLod(_MainTex, u_xlat4.xy, 0.0);
					    u_xlat4 = textureLod(_MainTex, u_xlat4.zw, 0.0);
					    u_xlat6.z = u_xlat4.z;
					    u_xlat4 = textureLod(_MainTex, u_xlat0.xy, 0.0);
					    u_xlat6.y = u_xlat4.y;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat6.xyz;
					    u_xlat14.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat0.xy = u_xlat5.zw * _LensFlareParams2.yy + u_xlat0.xy;
					    u_xlat14.xy = u_xlat14.xy * _LensFlareParams1.ww;
					    u_xlat14.x = dot(u_xlat14.xy, u_xlat14.xy);
					    u_xlat14.x = (-u_xlat14.x) + 1.0;
					    u_xlat14.x = max(u_xlat14.x, 0.0);
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat14.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LensFlareParams1.xxx;
					    u_xlat14.xy = fract(u_xlat0.xy);
					    u_xlat14.xy = (-u_xlat14.xy) + vec2(0.5, 0.5);
					    u_xlat14.x = dot(u_xlat14.xy, u_xlat14.xy);
					    u_xlat21 = (-u_xlat14.x) * u_xlat14.x + 1.0;
					    u_xlat14.x = sqrt(u_xlat14.x);
					    u_xlat14.x = (-u_xlat14.x) * 1.41421354 + 1.0;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat21 = u_xlat21 * 0.5 + 0.5;
					    u_xlat14.y = u_xlat21 * _LensFlareParams2.z;
					    u_xlat14.xy = u_xlat14.xy * _LensFlareParams2.xw;
					    u_xlat2 = u_xlat14.yyyy * u_xlat2;
					    u_xlat2 = u_xlat5.zwzw * u_xlat2 + u_xlat0.xyxy;
					    u_xlat4 = textureLod(_MainTex, u_xlat0.xy, 0.0);
					    u_xlat5 = textureLod(_MainTex, u_xlat2.xy, 0.0);
					    u_xlat2 = textureLod(_MainTex, u_xlat2.zw, 0.0);
					    u_xlat4.z = u_xlat2.z;
					    u_xlat4.x = u_xlat5.x;
					    u_xlat0.xyw = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyw * u_xlat14.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = min((-u_xlat0.xyz), vec3(0.0, 0.0, 0.0));
					    SV_Target0.xyz = (-u_xlat0.xyz);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "FLAREPASS3"
			ZClip Off
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 387167
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 r1.x, c0, v0
					    dp4 r1.y, c1, v0
					    dp4 r1.z, c2, v0
					    dp4 r1.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					    mad o0.xy, r1.w, c255, r1
					    mov o0.zw, r1
					
					// approximately 11 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _LensColorTexture;
					//   float4 _LensFlareParams1;
					//   float4 _LensFlareParams2;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _LensFlareParams1  c1       1
					//   _LensFlareParams2  c2       1
					//   _MainTex           s0       1
					//   _LensColorTexture  s1       1
					//
					
					    ps_3_0
					    def c3, 1, 0.5, 0, 1.41421354
					    def c4, -1, 1, 0, 2
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    add r0.xy, c3.x, -v0
					    add r0.zw, -r0.xyxy, c3.y
					    mad r1.xy, r0.zwzw, c1.y, r0
					    frc r2.xy, r1
					    add r2.xy, -r2, c3.y
					    dp2add r2.x, r2, r2, c3.z
					    mad r2.x, r2.x, -r2.x, c3.x
					    mad r2.x, r2.x, c3.y, c3.y
					    mul r2.x, r2.x, c1.z
					    mul r2.x, r2.x, c2.w
					    mov r3.xy, c4
					    mul r3, r3.xxyy, c0.x
					    mul r2, r2.x, r3
					    mul r4.xy, r0.zwzw, c1.y
					    dp2add r0.z, r0.zwzw, r0.zwzw, c3.z
					    rsq r0.z, r0.z
					    rcp r0.z, r0.z
					    mul r5.x, r0.z, c3.w
					    dp2add r0.z, r4, r4, c3.z
					    rsq r0.z, r0.z
					    mul r6, r0.z, r4.xyxy
					    mad r4.xy, r4, c4.w, r0
					    mad r2, r6.zwzw, r2, r1.xyxy
					    mul r7, r2.xyxx, c3.xxzz
					    mul r2, r2.zwxx, c3.xxzz
					    texldl r2, r2, s0
					    texldl r7, r7, s0
					    mov r2.x, r7.x
					    mov r5.yzw, c3.xyzz
					    texldl r5, r5, s1
					    mov r1.zw, c3.z
					    texldl r7, r1, s0
					    mad r0.zw, r1.xyxy, c4.w, c4.x
					    mul r0.zw, r0, c1.w
					    dp2add r0.z, r0.zwzw, -r0.zwzw, c3.x
					    max r1.x, r0.z, c3.z
					    mul r0.z, r1.x, r1.x
					    mul r0.z, r0.z, r0.z
					    mov r2.y, r7.y
					    mul r1.xyz, r2, r5
					    mul r1.xyz, r0.z, r1
					    mad r2, v0.xyxx, c4.xxzz, c4.yyzz
					    texldl r2, r2, s0
					    frc r0.zw, -v0.xyxy
					    add r0.zw, -r0, c3.y
					    dp2add r0.z, r0.zwzw, r0.zwzw, c3.z
					    mad r0.z, r0.z, -r0.z, c3.x
					    mad r0.z, r0.z, c3.y, c3.y
					    mul r0.z, r0.z, c1.z
					    mul r0.z, r0.z, c2.w
					    mul r7, r0.z, r3
					    mad r7, r6.zwzw, r7, r0.xyxy
					    mul r8, r7.xyxx, c3.xxzz
					    mul r7, r7.zwxx, c3.xxzz
					    texldl r7, r7, s0
					    mov r2.z, r7.z
					    texldl r7, r8, s0
					    mov r2.x, r7.x
					    mul r2.xyz, r5, r2
					    mad r0.zw, r0.xyxy, c4.w, c4.x
					    mad r7.xy, r6.zwzw, c2.y, r0
					    mul r0.xy, r0.zwzw, c1.w
					    dp2add r0.x, r0, -r0, c3.x
					    max r1.w, r0.x, c3.z
					    mul r0.x, r1.w, r1.w
					    mul r0.x, r0.x, r0.x
					    mad r0.xyz, r2, r0.x, r1
					    frc r1.xy, r4
					    add r1.xy, -r1, c3.y
					    dp2add r0.w, r1, r1, c3.z
					    mad r0.w, r0.w, -r0.w, c3.x
					    mad r0.w, r0.w, c3.y, c3.y
					    mul r0.w, r0.w, c1.z
					    mul r0.w, r0.w, c2.w
					    mul r1, r0.w, r3
					    mad r1, r6, r1, r4.xyxy
					    mul r2, r1.xyxx, c3.xxzz
					    mul r1, r1.zwxx, c3.xxzz
					    texldl r1, r1, s0
					    texldl r2, r2, s0
					    mov r1.x, r2.x
					    mov r4.zw, c3.z
					    texldl r2, r4, s0
					    mad r2.xz, r4.xyyw, c4.w, c4.x
					    mul r2.xz, r2, c1.w
					    dp2add r0.w, r2.xzzw, -r2.xzzw, c3.x
					    max r1.w, r0.w, c3.z
					    mul r0.w, r1.w, r1.w
					    mul r0.w, r0.w, r0.w
					    mov r1.y, r2.y
					    mul r1.xyz, r5, r1
					    mad r0.xyz, r1, r0.w, r0
					    mul r0.xyz, r0, c1.x
					    frc r1.xy, r7
					    add r1.xy, -r1, c3.y
					    dp2add r0.w, r1, r1, c3.z
					    mad r1.x, r0.w, -r0.w, c3.x
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    mad r0.w, r0.w, -c3.w, c3.x
					    mul r0.w, r0.w, r0.w
					    mul r0.w, r0.w, r0.w
					    mul r0.w, r0.w, c2.x
					    mad r1.x, r1.x, c3.y, c3.y
					    mul r1.x, r1.x, c2.z
					    mul r1.x, r1.x, c2.w
					    mul r1, r1.x, r3
					    mad r1, r6.zwzw, r1, r7.xyxy
					    mul r2, r1.xyxx, c3.xxzz
					    mul r1, r1.zwxx, c3.xxzz
					    texldl r1, r1, s0
					    texldl r2, r2, s0
					    mov r1.x, r2.x
					    mov r7.zw, c3.z
					    texldl r2, r7, s0
					    mov r1.y, r2.y
					    mul r1.xyz, r5, r1
					    mad r0.xyz, r1, r0.w, r0
					    max oC0.xyz, r0, c3.z
					    mov oC0.w, c3.z
					
					// approximately 142 instruction slots used (26 texture, 116 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
						vec4 _LensFlareParams1;
						vec4 _LensFlareParams2;
						vec4 unused_0_5[5];
					};
					uniform  sampler2D _LensColorTexture;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat8;
					vec2 u_xlat14;
					vec2 u_xlat15;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0.xy = (-vs_TEXCOORD0.xy) + vec2(1.0, 1.0);
					    u_xlat14.xy = (-u_xlat0.xy) + vec2(0.5, 0.5);
					    u_xlat1.xy = u_xlat14.xy * _LensFlareParams1.yy + u_xlat0.xy;
					    u_xlat15.xy = fract(u_xlat1.xy);
					    u_xlat15.xy = (-u_xlat15.xy) + vec2(0.5, 0.5);
					    u_xlat15.x = dot(u_xlat15.xy, u_xlat15.xy);
					    u_xlat15.x = (-u_xlat15.x) * u_xlat15.x + 1.0;
					    u_xlat15.x = u_xlat15.x * 0.5 + 0.5;
					    u_xlat15.x = u_xlat15.x * _LensFlareParams1.z;
					    u_xlat15.x = u_xlat15.x * _LensFlareParams2.w;
					    u_xlat2 = _MainTex_TexelSize.xxxx * vec4(-1.0, -1.0, 1.0, 1.0);
					    u_xlat3 = u_xlat15.xxxx * u_xlat2;
					    u_xlat15.xy = u_xlat14.xy * _LensFlareParams1.yy;
					    u_xlat14.x = dot(u_xlat14.xy, u_xlat14.xy);
					    u_xlat14.x = sqrt(u_xlat14.x);
					    u_xlat4.x = u_xlat14.x * 1.41421354;
					    u_xlat14.x = dot(u_xlat15.xy, u_xlat15.xy);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat5 = u_xlat14.xxxx * u_xlat15.xyxy;
					    u_xlat14.xy = u_xlat15.xy * vec2(2.0, 2.0) + u_xlat0.xy;
					    u_xlat3 = u_xlat5.zwzw * u_xlat3 + u_xlat1.xyxy;
					    u_xlat6 = textureLod(_MainTex, u_xlat3.xy, 0.0);
					    u_xlat3 = textureLod(_MainTex, u_xlat3.zw, 0.0);
					    u_xlat6.z = u_xlat3.z;
					    u_xlat4.y = 0.5;
					    u_xlat3 = textureLod(_LensColorTexture, u_xlat4.xy, 0.0);
					    u_xlat4 = textureLod(_MainTex, u_xlat1.xy, 0.0);
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.xy = u_xlat1.xy * _LensFlareParams1.ww;
					    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.y = u_xlat4.y;
					    u_xlat8.xyz = u_xlat3.xyz * u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat8.xyz;
					    u_xlat4.xy = fract((-vs_TEXCOORD0.xy));
					    u_xlat4.xy = (-u_xlat4.xy) + vec2(0.5, 0.5);
					    u_xlat22 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat22 = (-u_xlat22) * u_xlat22 + 1.0;
					    u_xlat22 = u_xlat22 * 0.5 + 0.5;
					    u_xlat22 = u_xlat22 * _LensFlareParams1.z;
					    u_xlat22 = u_xlat22 * _LensFlareParams2.w;
					    u_xlat4 = vec4(u_xlat22) * u_xlat2;
					    u_xlat4 = u_xlat5.zwzw * u_xlat4 + u_xlat0.xyxy;
					    u_xlat6 = textureLod(_MainTex, u_xlat4.xy, 0.0);
					    u_xlat4 = textureLod(_MainTex, u_xlat4.zw, 0.0);
					    u_xlat6.z = u_xlat4.z;
					    u_xlat4 = textureLod(_MainTex, u_xlat0.xy, 0.0);
					    u_xlat6.y = u_xlat4.y;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat6.xyz;
					    u_xlat6.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat0.xy = u_xlat5.zw * _LensFlareParams2.yy + u_xlat0.xy;
					    u_xlat6.xy = u_xlat6.xy * _LensFlareParams1.ww;
					    u_xlat22 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat22 = max(u_xlat22, 0.0);
					    u_xlat22 = u_xlat22 * u_xlat22;
					    u_xlat22 = u_xlat22 * u_xlat22;
					    u_xlat1.xyz = u_xlat4.xyz * vec3(u_xlat22) + u_xlat1.xyz;
					    u_xlat4.xy = fract(u_xlat14.xy);
					    u_xlat4.xy = (-u_xlat4.xy) + vec2(0.5, 0.5);
					    u_xlat22 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat22 = (-u_xlat22) * u_xlat22 + 1.0;
					    u_xlat22 = u_xlat22 * 0.5 + 0.5;
					    u_xlat22 = u_xlat22 * _LensFlareParams1.z;
					    u_xlat22 = u_xlat22 * _LensFlareParams2.w;
					    u_xlat4 = vec4(u_xlat22) * u_xlat2;
					    u_xlat4 = u_xlat5 * u_xlat4 + u_xlat14.xyxy;
					    u_xlat6 = textureLod(_MainTex, u_xlat4.xy, 0.0);
					    u_xlat4 = textureLod(_MainTex, u_xlat4.zw, 0.0);
					    u_xlat6.z = u_xlat4.z;
					    u_xlat4 = textureLod(_MainTex, u_xlat14.xy, 0.0);
					    u_xlat14.xy = u_xlat14.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat14.xy = u_xlat14.xy * _LensFlareParams1.ww;
					    u_xlat14.x = dot(u_xlat14.xy, u_xlat14.xy);
					    u_xlat14.x = (-u_xlat14.x) + 1.0;
					    u_xlat14.x = max(u_xlat14.x, 0.0);
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat6.y = u_xlat4.y;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat14.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LensFlareParams1.xxx;
					    u_xlat14.xy = fract(u_xlat0.xy);
					    u_xlat14.xy = (-u_xlat14.xy) + vec2(0.5, 0.5);
					    u_xlat14.x = dot(u_xlat14.xy, u_xlat14.xy);
					    u_xlat21 = (-u_xlat14.x) * u_xlat14.x + 1.0;
					    u_xlat14.x = sqrt(u_xlat14.x);
					    u_xlat14.x = (-u_xlat14.x) * 1.41421354 + 1.0;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat21 = u_xlat21 * 0.5 + 0.5;
					    u_xlat14.y = u_xlat21 * _LensFlareParams2.z;
					    u_xlat14.xy = u_xlat14.xy * _LensFlareParams2.xw;
					    u_xlat2 = u_xlat14.yyyy * u_xlat2;
					    u_xlat2 = u_xlat5.zwzw * u_xlat2 + u_xlat0.xyxy;
					    u_xlat4 = textureLod(_MainTex, u_xlat0.xy, 0.0);
					    u_xlat5 = textureLod(_MainTex, u_xlat2.xy, 0.0);
					    u_xlat2 = textureLod(_MainTex, u_xlat2.zw, 0.0);
					    u_xlat4.z = u_xlat2.z;
					    u_xlat4.x = u_xlat5.x;
					    u_xlat0.xyw = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyw * u_xlat14.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = min((-u_xlat0.xyz), vec3(0.0, 0.0, 0.0));
					    SV_Target0.xyz = (-u_xlat0.xyz);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "FLAREPASS5"
			ZClip Off
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 393750
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 r1.x, c0, v0
					    dp4 r1.y, c1, v0
					    dp4 r1.z, c2, v0
					    dp4 r1.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					    mad o0.xy, r1.w, c255, r1
					    mov o0.zw, r1
					
					// approximately 11 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _LensColorTexture;
					//   float4 _LensFlareParams1;
					//   float4 _LensFlareParams2;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _LensFlareParams1  c1       1
					//   _LensFlareParams2  c2       1
					//   _MainTex           s0       1
					//   _LensColorTexture  s1       1
					//
					
					    ps_3_0
					    def c3, 1, 0.5, 0, 1.41421354
					    def c4, 3, 4, 0, 0
					    def c5, -1, 1, 0, 2
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    add r0, c3.x, -v0.xyxy
					    add r1.xy, -r0.zwzw, c3.y
					    mad r2.xy, r1, c1.y, r0.zwzw
					    frc r1.zw, r2.xyxy
					    add r1.zw, -r1, c3.y
					    dp2add r1.z, r1.zwzw, r1.zwzw, c3.z
					    mad r1.z, r1.z, -r1.z, c3.x
					    mad r1.z, r1.z, c3.y, c3.y
					    mul r1.z, r1.z, c1.z
					    mul r1.z, r1.z, c2.w
					    mov r3.xy, c5
					    mul r3, r3.xxyy, c0.x
					    mul r4, r1.z, r3
					    mul r5, r1.xyxy, c1.y
					    dp2add r1.x, r1, r1, c3.z
					    rsq r1.x, r1.x
					    rcp r1.x, r1.x
					    mul r1.x, r1.x, c3.w
					    dp2add r6.x, r5.zwzw, r5.zwzw, c3.z
					    rsq r6.x, r6.x
					    mul r6, r5.zwzw, r6.x
					    mad r4, r6.zwzw, r4, r2.xyxy
					    mul r7, r4.xyxx, c3.xxzz
					    mul r4, r4.zwxx, c3.xxzz
					    texldl r4, r4, s0
					    texldl r7, r7, s0
					    mov r4.x, r7.x
					    mov r1.yzw, c3.xyzz
					    texldl r1, r1, s1
					    mov r2.zw, c3.z
					    texldl r7, r2, s0
					    mad r2.xy, r2, c5.w, c5.x
					    mul r2.xy, r2, c1.w
					    dp2add r1.w, r2, -r2, c3.x
					    max r2.x, r1.w, c3.z
					    mul r1.w, r2.x, r2.x
					    mul r1.w, r1.w, r1.w
					    mov r4.y, r7.y
					    mul r2.xyz, r1, r4
					    mul r2.xyz, r1.w, r2
					    mad r4, v0.xyxx, c5.xxzz, c5.yyzz
					    texldl r4, r4, s0
					    frc r7.xy, -v0
					    add r7.xy, -r7, c3.y
					    dp2add r1.w, r7, r7, c3.z
					    mad r1.w, r1.w, -r1.w, c3.x
					    mad r1.w, r1.w, c3.y, c3.y
					    mul r1.w, r1.w, c1.z
					    mul r1.w, r1.w, c2.w
					    mul r7, r1.w, r3
					    mad r7, r6.zwzw, r7, r0.zwzw
					    mul r8, r7.xyxx, c3.xxzz
					    mul r7, r7.zwxx, c3.xxzz
					    texldl r7, r7, s0
					    mov r4.z, r7.z
					    texldl r7, r8, s0
					    mov r4.x, r7.x
					    mul r4.xyz, r1, r4
					    mad r7.xy, r0.zwzw, c5.w, c5.x
					    mul r7.xy, r7, c1.w
					    dp2add r1.w, r7, -r7, c3.x
					    max r2.w, r1.w, c3.z
					    mul r1.w, r2.w, r2.w
					    mul r1.w, r1.w, r1.w
					    mad r2.xyz, r4, r1.w, r2
					    mad r4.xy, r5.zwzw, c5.w, r0.zwzw
					    mad r5, r5, c4.xxyy, r0
					    mad r0.xy, r6.zwzw, c2.y, r0.zwzw
					    frc r7.xy, r4
					    add r7.xy, -r7, c3.y
					    dp2add r1.w, r7, r7, c3.z
					    mad r1.w, r1.w, -r1.w, c3.x
					    mad r1.w, r1.w, c3.y, c3.y
					    mul r1.w, r1.w, c1.z
					    mul r1.w, r1.w, c2.w
					    mul r7, r1.w, r3
					    mad r7, r6.zwzw, r7, r4.xyxy
					    mul r8, r7.xyxx, c3.xxzz
					    mul r7, r7.zwxx, c3.xxzz
					    texldl r7, r7, s0
					    texldl r8, r8, s0
					    mov r7.x, r8.x
					    mov r4.zw, c3.z
					    texldl r8, r4, s0
					    mad r4.xy, r4, c5.w, c5.x
					    mul r4.xy, r4, c1.w
					    dp2add r1.w, r4, -r4, c3.x
					    max r2.w, r1.w, c3.z
					    mul r1.w, r2.w, r2.w
					    mul r1.w, r1.w, r1.w
					    mov r7.y, r8.y
					    mul r4.xyz, r1, r7
					    mad r2.xyz, r4, r1.w, r2
					    frc r4, r5
					    add r4, -r4, c3.y
					    dp2add r1.w, r4, r4, c3.z
					    dp2add r2.w, r4.zwzw, r4.zwzw, c3.z
					    mad r2.w, r2.w, -r2.w, c3.x
					    mad r2.w, r2.w, c3.y, c3.y
					    mul r2.w, r2.w, c1.z
					    mul r2.w, r2.w, c2.w
					    mul r4, r2.w, r3
					    mad r4, r6, r4, r5.zwzw
					    mad r1.w, r1.w, -r1.w, c3.x
					    mad r1.w, r1.w, c3.y, c3.y
					    mul r1.w, r1.w, c1.z
					    mul r1.w, r1.w, c2.w
					    mul r7, r1.w, r3
					    mad r7, r6.zwzw, r7, r5.xyxy
					    mul r8, r7.xyxx, c3.xxzz
					    mul r7, r7.zwxx, c3.xxzz
					    texldl r7, r7, s0
					    texldl r8, r8, s0
					    mov r7.x, r8.x
					    mul r8, r5.xyxx, c3.xxzz
					    texldl r8, r8, s0
					    mov r7.y, r8.y
					    mul r7.xyz, r1, r7
					    mad r8, r5, c5.w, c5.x
					    mul r5, r5.zwxx, c3.xxzz
					    texldl r5, r5, s0
					    mul r8, r8, c1.w
					    dp2add r1.w, r8, -r8, c3.x
					    dp2add r2.w, r8.zwzw, -r8.zwzw, c3.x
					    max r5.w, r2.w, c3.z
					    mul r2.w, r5.w, r5.w
					    mul r2.w, r2.w, r2.w
					    max r5.w, r1.w, c3.z
					    mul r1.w, r5.w, r5.w
					    mul r1.w, r1.w, r1.w
					    mad r2.xyz, r7, r1.w, r2
					    mul r7, r4.xyxx, c3.xxzz
					    mul r4, r4.zwxx, c3.xxzz
					    texldl r4, r4, s0
					    mov r5.z, r4.z
					    texldl r4, r7, s0
					    mov r5.x, r4.x
					    mul r4.xyz, r1, r5
					    mad r2.xyz, r4, r2.w, r2
					    mul r2.xyz, r2, c1.x
					    frc r4.xy, r0
					    add r4.xy, -r4, c3.y
					    dp2add r1.w, r4, r4, c3.z
					    mad r2.w, r1.w, -r1.w, c3.x
					    rsq r1.w, r1.w
					    rcp r1.w, r1.w
					    mad r1.w, r1.w, -c3.w, c3.x
					    mul r1.w, r1.w, r1.w
					    mul r1.w, r1.w, r1.w
					    mul r1.w, r1.w, c2.x
					    mad r2.w, r2.w, c3.y, c3.y
					    mul r2.w, r2.w, c2.z
					    mul r2.w, r2.w, c2.w
					    mul r3, r2.w, r3
					    mad r3, r6.zwzw, r3, r0.xyxy
					    mul r4, r3.xyxx, c3.xxzz
					    mul r3, r3.zwxx, c3.xxzz
					    texldl r3, r3, s0
					    texldl r4, r4, s0
					    mov r3.x, r4.x
					    mov r0.zw, c3.z
					    texldl r0, r0, s0
					    mov r3.y, r0.y
					    mul r0.xyz, r1, r3
					    mad r0.xyz, r0, r1.w, r2
					    max oC0.xyz, r0, c3.z
					    mov oC0.w, c3.z
					
					// approximately 199 instruction slots used (38 texture, 161 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
						vec4 _LensFlareParams1;
						vec4 _LensFlareParams2;
						vec4 unused_0_5[5];
					};
					uniform  sampler2D _LensColorTexture;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat10;
					vec2 u_xlat18;
					vec2 u_xlat19;
					float u_xlat27;
					float u_xlat28;
					void main()
					{
					    u_xlat0 = (-vs_TEXCOORD0.xyxy) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1.xy = (-u_xlat0.zw) + vec2(0.5, 0.5);
					    u_xlat19.xy = u_xlat1.xy * _LensFlareParams1.yy + u_xlat0.zw;
					    u_xlat2.xy = fract(u_xlat19.xy);
					    u_xlat2.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
					    u_xlat2.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat2.x = (-u_xlat2.x) * u_xlat2.x + 1.0;
					    u_xlat2.x = u_xlat2.x * 0.5 + 0.5;
					    u_xlat2.x = u_xlat2.x * _LensFlareParams1.z;
					    u_xlat2.x = u_xlat2.x * _LensFlareParams2.w;
					    u_xlat3 = _MainTex_TexelSize.xxxx * vec4(-1.0, -1.0, 1.0, 1.0);
					    u_xlat2 = u_xlat2.xxxx * u_xlat3;
					    u_xlat4 = u_xlat1.xyxy * _LensFlareParams1.yyyy;
					    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * 1.41421354;
					    u_xlat5.x = dot(u_xlat4.zw, u_xlat4.zw);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5 = u_xlat4.zwzw * u_xlat5.xxxx;
					    u_xlat2 = u_xlat5.zwzw * u_xlat2 + u_xlat19.xyxy;
					    u_xlat6 = textureLod(_MainTex, u_xlat2.xy, 0.0);
					    u_xlat2 = textureLod(_MainTex, u_xlat2.zw, 0.0);
					    u_xlat6.z = u_xlat2.z;
					    u_xlat1.y = 0.5;
					    u_xlat2 = textureLod(_LensColorTexture, u_xlat1.xy, 0.0);
					    u_xlat7 = textureLod(_MainTex, u_xlat19.xy, 0.0);
					    u_xlat1.xy = u_xlat19.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat1.xy = u_xlat1.xy * _LensFlareParams1.ww;
					    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat6.y = u_xlat7.y;
					    u_xlat10.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat10.xyz;
					    u_xlat6.xy = fract((-vs_TEXCOORD0.xy));
					    u_xlat6.xy = (-u_xlat6.xy) + vec2(0.5, 0.5);
					    u_xlat28 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat28 = (-u_xlat28) * u_xlat28 + 1.0;
					    u_xlat28 = u_xlat28 * 0.5 + 0.5;
					    u_xlat28 = u_xlat28 * _LensFlareParams1.z;
					    u_xlat28 = u_xlat28 * _LensFlareParams2.w;
					    u_xlat6 = vec4(u_xlat28) * u_xlat3;
					    u_xlat6 = u_xlat5.zwzw * u_xlat6 + u_xlat0.zwzw;
					    u_xlat7 = textureLod(_MainTex, u_xlat6.xy, 0.0);
					    u_xlat6 = textureLod(_MainTex, u_xlat6.zw, 0.0);
					    u_xlat7.z = u_xlat6.z;
					    u_xlat6 = textureLod(_MainTex, u_xlat0.zw, 0.0);
					    u_xlat7.y = u_xlat6.y;
					    u_xlat6.xyz = u_xlat2.xyz * u_xlat7.xyz;
					    u_xlat7.xy = u_xlat0.zw * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat7.xy = u_xlat7.xy * _LensFlareParams1.ww;
					    u_xlat28 = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat28 = (-u_xlat28) + 1.0;
					    u_xlat28 = max(u_xlat28, 0.0);
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat1.xyz = u_xlat6.xyz * vec3(u_xlat28) + u_xlat1.xyz;
					    u_xlat6.xy = u_xlat4.zw * vec2(2.0, 2.0) + u_xlat0.zw;
					    u_xlat4 = u_xlat4 * vec4(3.0, 3.0, 4.0, 4.0) + u_xlat0;
					    u_xlat0.xy = u_xlat5.zw * _LensFlareParams2.yy + u_xlat0.zw;
					    u_xlat18.xy = fract(u_xlat6.xy);
					    u_xlat18.xy = (-u_xlat18.xy) + vec2(0.5, 0.5);
					    u_xlat18.x = dot(u_xlat18.xy, u_xlat18.xy);
					    u_xlat18.x = (-u_xlat18.x) * u_xlat18.x + 1.0;
					    u_xlat18.x = u_xlat18.x * 0.5 + 0.5;
					    u_xlat18.x = u_xlat18.x * _LensFlareParams1.z;
					    u_xlat18.x = u_xlat18.x * _LensFlareParams2.w;
					    u_xlat7 = u_xlat18.xxxx * u_xlat3;
					    u_xlat7 = u_xlat5.zwzw * u_xlat7 + u_xlat6.xyxy;
					    u_xlat8 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					    u_xlat7 = textureLod(_MainTex, u_xlat7.zw, 0.0);
					    u_xlat8.z = u_xlat7.z;
					    u_xlat7 = textureLod(_MainTex, u_xlat6.xy, 0.0);
					    u_xlat18.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18.xy = u_xlat18.xy * _LensFlareParams1.ww;
					    u_xlat18.x = dot(u_xlat18.xy, u_xlat18.xy);
					    u_xlat18.x = (-u_xlat18.x) + 1.0;
					    u_xlat18.x = max(u_xlat18.x, 0.0);
					    u_xlat18.x = u_xlat18.x * u_xlat18.x;
					    u_xlat18.x = u_xlat18.x * u_xlat18.x;
					    u_xlat8.y = u_xlat7.y;
					    u_xlat6.xyz = u_xlat2.xyz * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat18.xxx + u_xlat1.xyz;
					    u_xlat6 = fract(u_xlat4);
					    u_xlat6 = (-u_xlat6) + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat18.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat27 = dot(u_xlat6.zw, u_xlat6.zw);
					    u_xlat27 = (-u_xlat27) * u_xlat27 + 1.0;
					    u_xlat27 = u_xlat27 * 0.5 + 0.5;
					    u_xlat27 = u_xlat27 * _LensFlareParams1.z;
					    u_xlat27 = u_xlat27 * _LensFlareParams2.w;
					    u_xlat6 = vec4(u_xlat27) * u_xlat3;
					    u_xlat6 = u_xlat5 * u_xlat6 + u_xlat4.zwzw;
					    u_xlat18.x = (-u_xlat18.x) * u_xlat18.x + 1.0;
					    u_xlat18.x = u_xlat18.x * 0.5 + 0.5;
					    u_xlat18.x = u_xlat18.x * _LensFlareParams1.z;
					    u_xlat18.x = u_xlat18.x * _LensFlareParams2.w;
					    u_xlat7 = u_xlat18.xxxx * u_xlat3;
					    u_xlat7 = u_xlat5.zwzw * u_xlat7 + u_xlat4.xyxy;
					    u_xlat8 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					    u_xlat7 = textureLod(_MainTex, u_xlat7.zw, 0.0);
					    u_xlat8.z = u_xlat7.z;
					    u_xlat7 = textureLod(_MainTex, u_xlat4.xy, 0.0);
					    u_xlat8.y = u_xlat7.y;
					    u_xlat7.xyz = u_xlat2.xyz * u_xlat8.xyz;
					    u_xlat8 = u_xlat4 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat4 = textureLod(_MainTex, u_xlat4.zw, 0.0);
					    u_xlat8 = u_xlat8 * _LensFlareParams1.wwww;
					    u_xlat18.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat18.y = dot(u_xlat8.zw, u_xlat8.zw);
					    u_xlat18.xy = (-u_xlat18.xy) + vec2(1.0, 1.0);
					    u_xlat18.xy = max(u_xlat18.xy, vec2(0.0, 0.0));
					    u_xlat18.y = u_xlat18.y * u_xlat18.y;
					    u_xlat18.xy = u_xlat18.xy * u_xlat18.xy;
					    u_xlat18.x = u_xlat18.x * u_xlat18.x;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat18.xxx + u_xlat1.xyz;
					    u_xlat7 = textureLod(_MainTex, u_xlat6.xy, 0.0);
					    u_xlat6 = textureLod(_MainTex, u_xlat6.zw, 0.0);
					    u_xlat4.z = u_xlat6.z;
					    u_xlat4.x = u_xlat7.x;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat18.yyy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LensFlareParams1.xxx;
					    u_xlat18.xy = fract(u_xlat0.xy);
					    u_xlat18.xy = (-u_xlat18.xy) + vec2(0.5, 0.5);
					    u_xlat18.x = dot(u_xlat18.xy, u_xlat18.xy);
					    u_xlat27 = (-u_xlat18.x) * u_xlat18.x + 1.0;
					    u_xlat18.x = sqrt(u_xlat18.x);
					    u_xlat18.x = (-u_xlat18.x) * 1.41421354 + 1.0;
					    u_xlat18.x = u_xlat18.x * u_xlat18.x;
					    u_xlat18.x = u_xlat18.x * u_xlat18.x;
					    u_xlat27 = u_xlat27 * 0.5 + 0.5;
					    u_xlat18.y = u_xlat27 * _LensFlareParams2.z;
					    u_xlat18.xy = u_xlat18.xy * _LensFlareParams2.xw;
					    u_xlat3 = u_xlat18.yyyy * u_xlat3;
					    u_xlat3 = u_xlat5.zwzw * u_xlat3 + u_xlat0.xyxy;
					    u_xlat4 = textureLod(_MainTex, u_xlat0.xy, 0.0);
					    u_xlat5 = textureLod(_MainTex, u_xlat3.xy, 0.0);
					    u_xlat3 = textureLod(_MainTex, u_xlat3.zw, 0.0);
					    u_xlat4.z = u_xlat3.z;
					    u_xlat4.x = u_xlat5.x;
					    u_xlat0.xyw = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyw * u_xlat18.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = min((-u_xlat0.xyz), vec3(0.0, 0.0, 0.0));
					    SV_Target0.xyz = (-u_xlat0.xyz);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "FLAREPASS7"
			ZClip Off
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 479010
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 r1.x, c0, v0
					    dp4 r1.y, c1, v0
					    dp4 r1.z, c2, v0
					    dp4 r1.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					    mad o0.xy, r1.w, c255, r1
					    mov o0.zw, r1
					
					// approximately 11 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _LensColorTexture;
					//   float4 _LensFlareParams1;
					//   float4 _LensFlareParams2;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _LensFlareParams1  c1       1
					//   _LensFlareParams2  c2       1
					//   _MainTex           s0       1
					//   _LensColorTexture  s1       1
					//
					
					    ps_3_0
					    def c3, 1, 0.5, 0, 1.41421354
					    def c4, 3, 4, 5, 6
					    def c5, -1, 1, 0, 2
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    add r0, c3.x, -v0.xyxy
					    add r1.xy, -r0.zwzw, c3.y
					    mad r2.xy, r1, c1.y, r0.zwzw
					    frc r1.zw, r2.xyxy
					    add r1.zw, -r1, c3.y
					    dp2add r1.z, r1.zwzw, r1.zwzw, c3.z
					    mad r1.z, r1.z, -r1.z, c3.x
					    mad r1.z, r1.z, c3.y, c3.y
					    mul r1.z, r1.z, c1.z
					    mul r1.z, r1.z, c2.w
					    mov r3.xy, c5
					    mul r3, r3.xxyy, c0.x
					    mul r4, r1.z, r3
					    mul r5, r1.xyxy, c1.y
					    dp2add r1.x, r1, r1, c3.z
					    rsq r1.x, r1.x
					    rcp r1.x, r1.x
					    mul r1.x, r1.x, c3.w
					    dp2add r6.x, r5.zwzw, r5.zwzw, c3.z
					    rsq r6.x, r6.x
					    mul r6, r5.zwzw, r6.x
					    mad r4, r6.zwzw, r4, r2.xyxy
					    mul r7, r4.xyxx, c3.xxzz
					    mul r4, r4.zwxx, c3.xxzz
					    texldl r4, r4, s0
					    texldl r7, r7, s0
					    mov r4.x, r7.x
					    mov r2.zw, c3.z
					    texldl r7, r2, s0
					    mad r2.xy, r2, c5.w, c5.x
					    mul r2.xy, r2, c1.w
					    dp2add r2.x, r2, -r2, c3.x
					    max r4.w, r2.x, c3.z
					    mul r2.x, r4.w, r4.w
					    mul r2.x, r2.x, r2.x
					    mov r4.y, r7.y
					    mov r1.yzw, c3.xyzz
					    texldl r1, r1, s1
					    mul r2.yzw, r1.xxyz, r4.xxyz
					    mul r2.xyz, r2.x, r2.yzww
					    mad r4.xy, r0.zwzw, c5.w, c5.x
					    mul r4.xy, r4, c1.w
					    dp2add r1.w, r4, -r4, c3.x
					    max r2.w, r1.w, c3.z
					    mul r1.w, r2.w, r2.w
					    mul r1.w, r1.w, r1.w
					    mad r4, v0.xyxx, c5.xxzz, c5.yyzz
					    texldl r4, r4, s0
					    frc r7.xy, -v0
					    add r7.xy, -r7, c3.y
					    dp2add r2.w, r7, r7, c3.z
					    mad r2.w, r2.w, -r2.w, c3.x
					    mad r2.w, r2.w, c3.y, c3.y
					    mul r2.w, r2.w, c1.z
					    mul r2.w, r2.w, c2.w
					    mul r7, r2.w, r3
					    mad r7, r6.zwzw, r7, r0.zwzw
					    mul r8, r7.xyxx, c3.xxzz
					    mul r7, r7.zwxx, c3.xxzz
					    texldl r7, r7, s0
					    mov r4.z, r7.z
					    texldl r7, r8, s0
					    mov r4.x, r7.x
					    mul r4.xyz, r1, r4
					    mad r2.xyz, r4, r1.w, r2
					    mad r4.xy, r5.zwzw, c5.w, r0.zwzw
					    frc r7.xy, r4
					    add r7.xy, -r7, c3.y
					    dp2add r1.w, r7, r7, c3.z
					    mad r1.w, r1.w, -r1.w, c3.x
					    mad r1.w, r1.w, c3.y, c3.y
					    mul r1.w, r1.w, c1.z
					    mul r1.w, r1.w, c2.w
					    mul r7, r1.w, r3
					    mad r7, r6.zwzw, r7, r4.xyxy
					    mul r8, r7.xyxx, c3.xxzz
					    mul r7, r7.zwxx, c3.xxzz
					    texldl r7, r7, s0
					    texldl r8, r8, s0
					    mov r7.x, r8.x
					    mov r4.zw, c3.z
					    texldl r8, r4, s0
					    mad r4.xy, r4, c5.w, c5.x
					    mul r4.xy, r4, c1.w
					    dp2add r1.w, r4, -r4, c3.x
					    max r2.w, r1.w, c3.z
					    mul r1.w, r2.w, r2.w
					    mul r1.w, r1.w, r1.w
					    mov r7.y, r8.y
					    mul r4.xyz, r1, r7
					    mad r2.xyz, r4, r1.w, r2
					    mad r4, r5.zwzw, c4.xxyy, r0.zwzw
					    mad r5, r5, c4.zzww, r0
					    mad r0.xy, r6.zwzw, c2.y, r0.zwzw
					    frc r7, r4
					    add r7, -r7, c3.y
					    dp2add r1.w, r7, r7, c3.z
					    dp2add r2.w, r7.zwzw, r7.zwzw, c3.z
					    mad r2.w, r2.w, -r2.w, c3.x
					    mad r2.w, r2.w, c3.y, c3.y
					    mul r2.w, r2.w, c1.z
					    mul r2.w, r2.w, c2.w
					    mul r7, r2.w, r3
					    mad r7, r6.zwzw, r7, r4.zwzw
					    mad r1.w, r1.w, -r1.w, c3.x
					    mad r1.w, r1.w, c3.y, c3.y
					    mul r1.w, r1.w, c1.z
					    mul r1.w, r1.w, c2.w
					    mul r8, r1.w, r3
					    mad r8, r6.zwzw, r8, r4.xyxy
					    mul r9, r8.xyxx, c3.xxzz
					    mul r8, r8.zwxx, c3.xxzz
					    texldl r8, r8, s0
					    texldl r9, r9, s0
					    mov r8.x, r9.x
					    mul r9, r4.xyxx, c3.xxzz
					    texldl r9, r9, s0
					    mov r8.y, r9.y
					    mul r8.xyz, r1, r8
					    mad r9, r4, c5.w, c5.x
					    mul r4, r4.zwxx, c3.xxzz
					    texldl r4, r4, s0
					    mul r9, r9, c1.w
					    dp2add r1.w, r9, -r9, c3.x
					    dp2add r2.w, r9.zwzw, -r9.zwzw, c3.x
					    max r4.w, r2.w, c3.z
					    mul r2.w, r4.w, r4.w
					    mul r2.w, r2.w, r2.w
					    max r4.w, r1.w, c3.z
					    mul r1.w, r4.w, r4.w
					    mul r1.w, r1.w, r1.w
					    mad r2.xyz, r8, r1.w, r2
					    mul r8, r7.xyxx, c3.xxzz
					    mul r7, r7.zwxx, c3.xxzz
					    texldl r7, r7, s0
					    mov r4.z, r7.z
					    texldl r7, r8, s0
					    mov r4.x, r7.x
					    mul r4.xyz, r1, r4
					    mad r2.xyz, r4, r2.w, r2
					    frc r4, r5
					    add r4, -r4, c3.y
					    dp2add r1.w, r4, r4, c3.z
					    dp2add r2.w, r4.zwzw, r4.zwzw, c3.z
					    mad r2.w, r2.w, -r2.w, c3.x
					    mad r2.w, r2.w, c3.y, c3.y
					    mul r2.w, r2.w, c1.z
					    mul r2.w, r2.w, c2.w
					    mul r4, r2.w, r3
					    mad r4, r6, r4, r5.zwzw
					    mad r1.w, r1.w, -r1.w, c3.x
					    mad r1.w, r1.w, c3.y, c3.y
					    mul r1.w, r1.w, c1.z
					    mul r1.w, r1.w, c2.w
					    mul r7, r1.w, r3
					    mad r7, r6.zwzw, r7, r5.xyxy
					    mul r8, r7.xyxx, c3.xxzz
					    mul r7, r7.zwxx, c3.xxzz
					    texldl r7, r7, s0
					    texldl r8, r8, s0
					    mov r7.x, r8.x
					    mul r8, r5.xyxx, c3.xxzz
					    texldl r8, r8, s0
					    mov r7.y, r8.y
					    mul r7.xyz, r1, r7
					    mad r8, r5, c5.w, c5.x
					    mul r5, r5.zwxx, c3.xxzz
					    texldl r5, r5, s0
					    mul r8, r8, c1.w
					    dp2add r1.w, r8, -r8, c3.x
					    dp2add r2.w, r8.zwzw, -r8.zwzw, c3.x
					    max r5.w, r2.w, c3.z
					    mul r2.w, r5.w, r5.w
					    mul r2.w, r2.w, r2.w
					    max r5.w, r1.w, c3.z
					    mul r1.w, r5.w, r5.w
					    mul r1.w, r1.w, r1.w
					    mad r2.xyz, r7, r1.w, r2
					    mul r7, r4.xyxx, c3.xxzz
					    mul r4, r4.zwxx, c3.xxzz
					    texldl r4, r4, s0
					    mov r5.z, r4.z
					    texldl r4, r7, s0
					    mov r5.x, r4.x
					    mul r4.xyz, r1, r5
					    mad r2.xyz, r4, r2.w, r2
					    mul r2.xyz, r2, c1.x
					    frc r4.xy, r0
					    add r4.xy, -r4, c3.y
					    dp2add r1.w, r4, r4, c3.z
					    mad r2.w, r1.w, -r1.w, c3.x
					    rsq r1.w, r1.w
					    rcp r1.w, r1.w
					    mad r1.w, r1.w, -c3.w, c3.x
					    mul r1.w, r1.w, r1.w
					    mul r1.w, r1.w, r1.w
					    mul r1.w, r1.w, c2.x
					    mad r2.w, r2.w, c3.y, c3.y
					    mul r2.w, r2.w, c2.z
					    mul r2.w, r2.w, c2.w
					    mul r3, r2.w, r3
					    mad r3, r6.zwzw, r3, r0.xyxy
					    mul r4, r3.xyxx, c3.xxzz
					    mul r3, r3.zwxx, c3.xxzz
					    texldl r3, r3, s0
					    texldl r4, r4, s0
					    mov r3.x, r4.x
					    mov r0.zw, c3.z
					    texldl r0, r0, s0
					    mov r3.y, r0.y
					    mul r0.xyz, r1, r3
					    mad r0.xyz, r0, r1.w, r2
					    max oC0.xyz, r0, c3.z
					    mov oC0.w, c3.z
					
					// approximately 256 instruction slots used (50 texture, 206 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
						vec4 _LensFlareParams1;
						vec4 _LensFlareParams2;
						vec4 unused_0_5[5];
					};
					uniform  sampler2D _LensColorTexture;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec2 u_xlat20;
					vec2 u_xlat21;
					vec2 u_xlat26;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0 = (-vs_TEXCOORD0.xyxy) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1.xy = (-u_xlat0.zw) + vec2(0.5, 0.5);
					    u_xlat21.xy = u_xlat1.xy * _LensFlareParams1.yy + u_xlat0.zw;
					    u_xlat2.xy = fract(u_xlat21.xy);
					    u_xlat2.xy = (-u_xlat2.xy) + vec2(0.5, 0.5);
					    u_xlat2.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat2.x = (-u_xlat2.x) * u_xlat2.x + 1.0;
					    u_xlat2.x = u_xlat2.x * 0.5 + 0.5;
					    u_xlat2.x = u_xlat2.x * _LensFlareParams1.z;
					    u_xlat2.x = u_xlat2.x * _LensFlareParams2.w;
					    u_xlat3 = _MainTex_TexelSize.xxxx * vec4(-1.0, -1.0, 1.0, 1.0);
					    u_xlat2 = u_xlat2.xxxx * u_xlat3;
					    u_xlat4 = u_xlat1.xyxy * _LensFlareParams1.yyyy;
					    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * 1.41421354;
					    u_xlat5.x = dot(u_xlat4.zw, u_xlat4.zw);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5 = u_xlat4.zwzw * u_xlat5.xxxx;
					    u_xlat2 = u_xlat5.zwzw * u_xlat2 + u_xlat21.xyxy;
					    u_xlat6 = textureLod(_MainTex, u_xlat2.xy, 0.0);
					    u_xlat2 = textureLod(_MainTex, u_xlat2.zw, 0.0);
					    u_xlat6.z = u_xlat2.z;
					    u_xlat2 = textureLod(_MainTex, u_xlat21.xy, 0.0);
					    u_xlat21.xy = u_xlat21.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat21.xy = u_xlat21.xy * _LensFlareParams1.ww;
					    u_xlat21.x = dot(u_xlat21.xy, u_xlat21.xy);
					    u_xlat21.x = (-u_xlat21.x) + 1.0;
					    u_xlat21.x = max(u_xlat21.x, 0.0);
					    u_xlat21.x = u_xlat21.x * u_xlat21.x;
					    u_xlat21.x = u_xlat21.x * u_xlat21.x;
					    u_xlat6.y = u_xlat2.y;
					    u_xlat1.y = 0.5;
					    u_xlat2 = textureLod(_LensColorTexture, u_xlat1.xy, 0.0);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat21.xxx * u_xlat1.xyw;
					    u_xlat6.xy = u_xlat0.zw * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat6.xy = u_xlat6.xy * _LensFlareParams1.ww;
					    u_xlat31 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat31 = (-u_xlat31) + 1.0;
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat6.xy = fract((-vs_TEXCOORD0.xy));
					    u_xlat6.xy = (-u_xlat6.xy) + vec2(0.5, 0.5);
					    u_xlat32 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat32 = (-u_xlat32) * u_xlat32 + 1.0;
					    u_xlat32 = u_xlat32 * 0.5 + 0.5;
					    u_xlat32 = u_xlat32 * _LensFlareParams1.z;
					    u_xlat32 = u_xlat32 * _LensFlareParams2.w;
					    u_xlat6 = vec4(u_xlat32) * u_xlat3;
					    u_xlat6 = u_xlat5.zwzw * u_xlat6 + u_xlat0.zwzw;
					    u_xlat7 = textureLod(_MainTex, u_xlat6.xy, 0.0);
					    u_xlat6 = textureLod(_MainTex, u_xlat6.zw, 0.0);
					    u_xlat7.z = u_xlat6.z;
					    u_xlat6 = textureLod(_MainTex, u_xlat0.zw, 0.0);
					    u_xlat7.y = u_xlat6.y;
					    u_xlat6.xyz = u_xlat2.xyz * u_xlat7.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat6.xy = u_xlat4.zw * vec2(2.0, 2.0) + u_xlat0.zw;
					    u_xlat26.xy = fract(u_xlat6.xy);
					    u_xlat26.xy = (-u_xlat26.xy) + vec2(0.5, 0.5);
					    u_xlat31 = dot(u_xlat26.xy, u_xlat26.xy);
					    u_xlat31 = (-u_xlat31) * u_xlat31 + 1.0;
					    u_xlat31 = u_xlat31 * 0.5 + 0.5;
					    u_xlat31 = u_xlat31 * _LensFlareParams1.z;
					    u_xlat31 = u_xlat31 * _LensFlareParams2.w;
					    u_xlat7 = vec4(u_xlat31) * u_xlat3;
					    u_xlat7 = u_xlat5.zwzw * u_xlat7 + u_xlat6.xyxy;
					    u_xlat8 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					    u_xlat7 = textureLod(_MainTex, u_xlat7.zw, 0.0);
					    u_xlat8.z = u_xlat7.z;
					    u_xlat7 = textureLod(_MainTex, u_xlat6.xy, 0.0);
					    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat6.xy = u_xlat6.xy * _LensFlareParams1.ww;
					    u_xlat31 = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat31 = (-u_xlat31) + 1.0;
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat8.y = u_xlat7.y;
					    u_xlat6.xyz = u_xlat2.xyz * u_xlat8.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * vec3(u_xlat31) + u_xlat1.xyz;
					    u_xlat6 = u_xlat4.zwzw * vec4(3.0, 3.0, 4.0, 4.0) + u_xlat0.zwzw;
					    u_xlat4 = u_xlat4 * vec4(5.0, 5.0, 6.0, 6.0) + u_xlat0;
					    u_xlat0.xy = u_xlat5.zw * _LensFlareParams2.yy + u_xlat0.zw;
					    u_xlat7 = fract(u_xlat6);
					    u_xlat7 = (-u_xlat7) + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat20.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat30 = dot(u_xlat7.zw, u_xlat7.zw);
					    u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
					    u_xlat30 = u_xlat30 * 0.5 + 0.5;
					    u_xlat30 = u_xlat30 * _LensFlareParams1.z;
					    u_xlat30 = u_xlat30 * _LensFlareParams2.w;
					    u_xlat7 = vec4(u_xlat30) * u_xlat3;
					    u_xlat7 = u_xlat5.zwzw * u_xlat7 + u_xlat6.zwzw;
					    u_xlat20.x = (-u_xlat20.x) * u_xlat20.x + 1.0;
					    u_xlat20.x = u_xlat20.x * 0.5 + 0.5;
					    u_xlat20.x = u_xlat20.x * _LensFlareParams1.z;
					    u_xlat20.x = u_xlat20.x * _LensFlareParams2.w;
					    u_xlat8 = u_xlat20.xxxx * u_xlat3;
					    u_xlat8 = u_xlat5.zwzw * u_xlat8 + u_xlat6.xyxy;
					    u_xlat9 = textureLod(_MainTex, u_xlat8.xy, 0.0);
					    u_xlat8 = textureLod(_MainTex, u_xlat8.zw, 0.0);
					    u_xlat9.z = u_xlat8.z;
					    u_xlat8 = textureLod(_MainTex, u_xlat6.xy, 0.0);
					    u_xlat9.y = u_xlat8.y;
					    u_xlat8.xyz = u_xlat2.xyz * u_xlat9.xyz;
					    u_xlat9 = u_xlat6 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat6 = textureLod(_MainTex, u_xlat6.zw, 0.0);
					    u_xlat9 = u_xlat9 * _LensFlareParams1.wwww;
					    u_xlat20.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat20.y = dot(u_xlat9.zw, u_xlat9.zw);
					    u_xlat20.xy = (-u_xlat20.xy) + vec2(1.0, 1.0);
					    u_xlat20.xy = max(u_xlat20.xy, vec2(0.0, 0.0));
					    u_xlat20.y = u_xlat20.y * u_xlat20.y;
					    u_xlat20.xy = u_xlat20.xy * u_xlat20.xy;
					    u_xlat20.x = u_xlat20.x * u_xlat20.x;
					    u_xlat1.xyz = u_xlat8.xyz * u_xlat20.xxx + u_xlat1.xyz;
					    u_xlat8 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					    u_xlat7 = textureLod(_MainTex, u_xlat7.zw, 0.0);
					    u_xlat6.z = u_xlat7.z;
					    u_xlat6.x = u_xlat8.x;
					    u_xlat6.xyz = u_xlat2.xyz * u_xlat6.xyz;
					    u_xlat1.xyz = u_xlat6.xyz * u_xlat20.yyy + u_xlat1.xyz;
					    u_xlat6 = fract(u_xlat4);
					    u_xlat6 = (-u_xlat6) + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat20.x = dot(u_xlat6.xy, u_xlat6.xy);
					    u_xlat30 = dot(u_xlat6.zw, u_xlat6.zw);
					    u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
					    u_xlat30 = u_xlat30 * 0.5 + 0.5;
					    u_xlat30 = u_xlat30 * _LensFlareParams1.z;
					    u_xlat30 = u_xlat30 * _LensFlareParams2.w;
					    u_xlat6 = vec4(u_xlat30) * u_xlat3;
					    u_xlat6 = u_xlat5 * u_xlat6 + u_xlat4.zwzw;
					    u_xlat20.x = (-u_xlat20.x) * u_xlat20.x + 1.0;
					    u_xlat20.x = u_xlat20.x * 0.5 + 0.5;
					    u_xlat20.x = u_xlat20.x * _LensFlareParams1.z;
					    u_xlat20.x = u_xlat20.x * _LensFlareParams2.w;
					    u_xlat7 = u_xlat20.xxxx * u_xlat3;
					    u_xlat7 = u_xlat5.zwzw * u_xlat7 + u_xlat4.xyxy;
					    u_xlat8 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					    u_xlat7 = textureLod(_MainTex, u_xlat7.zw, 0.0);
					    u_xlat8.z = u_xlat7.z;
					    u_xlat7 = textureLod(_MainTex, u_xlat4.xy, 0.0);
					    u_xlat8.y = u_xlat7.y;
					    u_xlat7.xyz = u_xlat2.xyz * u_xlat8.xyz;
					    u_xlat8 = u_xlat4 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat4 = textureLod(_MainTex, u_xlat4.zw, 0.0);
					    u_xlat8 = u_xlat8 * _LensFlareParams1.wwww;
					    u_xlat20.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat20.y = dot(u_xlat8.zw, u_xlat8.zw);
					    u_xlat20.xy = (-u_xlat20.xy) + vec2(1.0, 1.0);
					    u_xlat20.xy = max(u_xlat20.xy, vec2(0.0, 0.0));
					    u_xlat20.y = u_xlat20.y * u_xlat20.y;
					    u_xlat20.xy = u_xlat20.xy * u_xlat20.xy;
					    u_xlat20.x = u_xlat20.x * u_xlat20.x;
					    u_xlat1.xyz = u_xlat7.xyz * u_xlat20.xxx + u_xlat1.xyz;
					    u_xlat7 = textureLod(_MainTex, u_xlat6.xy, 0.0);
					    u_xlat6 = textureLod(_MainTex, u_xlat6.zw, 0.0);
					    u_xlat4.z = u_xlat6.z;
					    u_xlat4.x = u_xlat7.x;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat4.xyz * u_xlat20.yyy + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _LensFlareParams1.xxx;
					    u_xlat20.xy = fract(u_xlat0.xy);
					    u_xlat20.xy = (-u_xlat20.xy) + vec2(0.5, 0.5);
					    u_xlat20.x = dot(u_xlat20.xy, u_xlat20.xy);
					    u_xlat30 = (-u_xlat20.x) * u_xlat20.x + 1.0;
					    u_xlat20.x = sqrt(u_xlat20.x);
					    u_xlat20.x = (-u_xlat20.x) * 1.41421354 + 1.0;
					    u_xlat20.x = u_xlat20.x * u_xlat20.x;
					    u_xlat20.x = u_xlat20.x * u_xlat20.x;
					    u_xlat30 = u_xlat30 * 0.5 + 0.5;
					    u_xlat20.y = u_xlat30 * _LensFlareParams2.z;
					    u_xlat20.xy = u_xlat20.xy * _LensFlareParams2.xw;
					    u_xlat3 = u_xlat20.yyyy * u_xlat3;
					    u_xlat3 = u_xlat5.zwzw * u_xlat3 + u_xlat0.xyxy;
					    u_xlat4 = textureLod(_MainTex, u_xlat0.xy, 0.0);
					    u_xlat5 = textureLod(_MainTex, u_xlat3.xy, 0.0);
					    u_xlat3 = textureLod(_MainTex, u_xlat3.zw, 0.0);
					    u_xlat4.z = u_xlat3.z;
					    u_xlat4.x = u_xlat5.x;
					    u_xlat0.xyw = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyw * u_xlat20.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = min((-u_xlat0.xyz), vec3(0.0, 0.0, 0.0));
					    SV_Target0.xyz = (-u_xlat0.xyz);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "FLAREPASS9"
			ZClip Off
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 545076
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 r1.x, c0, v0
					    dp4 r1.y, c1, v0
					    dp4 r1.z, c2, v0
					    dp4 r1.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					    mad o0.xy, r1.w, c255, r1
					    mov o0.zw, r1
					
					// approximately 11 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[8];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _LensColorTexture;
					//   float4 _LensFlareParams1;
					//   float4 _LensFlareParams2;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _LensFlareParams1  c1       1
					//   _LensFlareParams2  c2       1
					//   _MainTex           s0       1
					//   _LensColorTexture  s1       1
					//
					
					    ps_3_0
					    def c3, 1, 0.5, 0, 1.41421354
					    def c4, 3, 4, 5, 6
					    def c5, 7, 8, 0, 0
					    def c6, -1, 1, 0, 2
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    add r0, c3.x, -v0.xyxy
					    add r1.xy, -r0.zwzw, c3.y
					    mad r2.xy, r1, c1.y, r0.zwzw
					    frc r1.zw, r2.xyxy
					    add r1.zw, -r1, c3.y
					    dp2add r1.z, r1.zwzw, r1.zwzw, c3.z
					    mad r1.z, r1.z, -r1.z, c3.x
					    mad r1.z, r1.z, c3.y, c3.y
					    mul r1.z, r1.z, c1.z
					    mul r1.z, r1.z, c2.w
					    mov r3.xy, c6
					    mul r3, r3.xxyy, c0.x
					    mul r4, r1.z, r3
					    mul r5, r1.xyxy, c1.y
					    dp2add r1.x, r1, r1, c3.z
					    rsq r1.x, r1.x
					    rcp r1.x, r1.x
					    mul r1.x, r1.x, c3.w
					    dp2add r6.x, r5.zwzw, r5.zwzw, c3.z
					    rsq r6.x, r6.x
					    mul r6, r5.zwzw, r6.x
					    mad r4, r6.zwzw, r4, r2.xyxy
					    mul r7, r4.xyxx, c3.xxzz
					    mul r4, r4.zwxx, c3.xxzz
					    texldl r4, r4, s0
					    texldl r7, r7, s0
					    mov r4.x, r7.x
					    mov r2.zw, c3.z
					    texldl r7, r2, s0
					    mad r2.xy, r2, c6.w, c6.x
					    mul r2.xy, r2, c1.w
					    dp2add r2.x, r2, -r2, c3.x
					    max r4.w, r2.x, c3.z
					    mul r2.x, r4.w, r4.w
					    mul r2.x, r2.x, r2.x
					    mov r4.y, r7.y
					    mov r1.yzw, c3.xyzz
					    texldl r1, r1, s1
					    mul r2.yzw, r1.xxyz, r4.xxyz
					    mul r2.xyz, r2.x, r2.yzww
					    mad r4.xy, r0.zwzw, c6.w, c6.x
					    mul r4.xy, r4, c1.w
					    dp2add r1.w, r4, -r4, c3.x
					    max r2.w, r1.w, c3.z
					    mul r1.w, r2.w, r2.w
					    mul r1.w, r1.w, r1.w
					    mad r4, v0.xyxx, c6.xxzz, c6.yyzz
					    texldl r4, r4, s0
					    frc r7.xy, -v0
					    add r7.xy, -r7, c3.y
					    dp2add r2.w, r7, r7, c3.z
					    mad r2.w, r2.w, -r2.w, c3.x
					    mad r2.w, r2.w, c3.y, c3.y
					    mul r2.w, r2.w, c1.z
					    mul r2.w, r2.w, c2.w
					    mul r7, r2.w, r3
					    mad r7, r6.zwzw, r7, r0.zwzw
					    mul r8, r7.xyxx, c3.xxzz
					    mul r7, r7.zwxx, c3.xxzz
					    texldl r7, r7, s0
					    mov r4.z, r7.z
					    texldl r7, r8, s0
					    mov r4.x, r7.x
					    mul r4.xyz, r1, r4
					    mad r2.xyz, r4, r1.w, r2
					    mad r4.xy, r5.zwzw, c6.w, r0.zwzw
					    frc r7.xy, r4
					    add r7.xy, -r7, c3.y
					    dp2add r1.w, r7, r7, c3.z
					    mad r1.w, r1.w, -r1.w, c3.x
					    mad r1.w, r1.w, c3.y, c3.y
					    mul r1.w, r1.w, c1.z
					    mul r1.w, r1.w, c2.w
					    mul r7, r1.w, r3
					    mad r7, r6.zwzw, r7, r4.xyxy
					    mul r8, r7.xyxx, c3.xxzz
					    mul r7, r7.zwxx, c3.xxzz
					    texldl r7, r7, s0
					    texldl r8, r8, s0
					    mov r7.x, r8.x
					    mov r4.zw, c3.z
					    texldl r8, r4, s0
					    mad r4.xy, r4, c6.w, c6.x
					    mul r4.xy, r4, c1.w
					    dp2add r1.w, r4, -r4, c3.x
					    max r2.w, r1.w, c3.z
					    mul r1.w, r2.w, r2.w
					    mul r1.w, r1.w, r1.w
					    mov r7.y, r8.y
					    mul r4.xyz, r1, r7
					    mad r2.xyz, r4, r1.w, r2
					    mad r4, r5.zwzw, c4.xxyy, r0.zwzw
					    frc r7, r4
					    add r7, -r7, c3.y
					    dp2add r1.w, r7, r7, c3.z
					    dp2add r2.w, r7.zwzw, r7.zwzw, c3.z
					    mad r2.w, r2.w, -r2.w, c3.x
					    mad r2.w, r2.w, c3.y, c3.y
					    mul r2.w, r2.w, c1.z
					    mul r2.w, r2.w, c2.w
					    mul r7, r2.w, r3
					    mad r7, r6.zwzw, r7, r4.zwzw
					    mad r1.w, r1.w, -r1.w, c3.x
					    mad r1.w, r1.w, c3.y, c3.y
					    mul r1.w, r1.w, c1.z
					    mul r1.w, r1.w, c2.w
					    mul r8, r1.w, r3
					    mad r8, r6.zwzw, r8, r4.xyxy
					    mul r9, r8.xyxx, c3.xxzz
					    mul r8, r8.zwxx, c3.xxzz
					    texldl r8, r8, s0
					    texldl r9, r9, s0
					    mov r8.x, r9.x
					    mul r9, r4.xyxx, c3.xxzz
					    texldl r9, r9, s0
					    mov r8.y, r9.y
					    mul r8.xyz, r1, r8
					    mad r9, r4, c6.w, c6.x
					    mul r4, r4.zwxx, c3.xxzz
					    texldl r4, r4, s0
					    mul r9, r9, c1.w
					    dp2add r1.w, r9, -r9, c3.x
					    dp2add r2.w, r9.zwzw, -r9.zwzw, c3.x
					    max r4.w, r2.w, c3.z
					    mul r2.w, r4.w, r4.w
					    mul r2.w, r2.w, r2.w
					    max r4.w, r1.w, c3.z
					    mul r1.w, r4.w, r4.w
					    mul r1.w, r1.w, r1.w
					    mad r2.xyz, r8, r1.w, r2
					    mul r8, r7.xyxx, c3.xxzz
					    mul r7, r7.zwxx, c3.xxzz
					    texldl r7, r7, s0
					    mov r4.z, r7.z
					    texldl r7, r8, s0
					    mov r4.x, r7.x
					    mul r4.xyz, r1, r4
					    mad r2.xyz, r4, r2.w, r2
					    mad r4, r5.zwzw, c4.zzww, r0.zwzw
					    mad r5, r5, c5.xxyy, r0
					    mad r0.xy, r6.zwzw, c2.y, r0.zwzw
					    frc r7, r4
					    add r7, -r7, c3.y
					    dp2add r1.w, r7, r7, c3.z
					    dp2add r2.w, r7.zwzw, r7.zwzw, c3.z
					    mad r2.w, r2.w, -r2.w, c3.x
					    mad r2.w, r2.w, c3.y, c3.y
					    mul r2.w, r2.w, c1.z
					    mul r2.w, r2.w, c2.w
					    mul r7, r2.w, r3
					    mad r7, r6.zwzw, r7, r4.zwzw
					    mad r1.w, r1.w, -r1.w, c3.x
					    mad r1.w, r1.w, c3.y, c3.y
					    mul r1.w, r1.w, c1.z
					    mul r1.w, r1.w, c2.w
					    mul r8, r1.w, r3
					    mad r8, r6.zwzw, r8, r4.xyxy
					    mul r9, r8.xyxx, c3.xxzz
					    mul r8, r8.zwxx, c3.xxzz
					    texldl r8, r8, s0
					    texldl r9, r9, s0
					    mov r8.x, r9.x
					    mul r9, r4.xyxx, c3.xxzz
					    texldl r9, r9, s0
					    mov r8.y, r9.y
					    mul r8.xyz, r1, r8
					    mad r9, r4, c6.w, c6.x
					    mul r4, r4.zwxx, c3.xxzz
					    texldl r4, r4, s0
					    mul r9, r9, c1.w
					    dp2add r1.w, r9, -r9, c3.x
					    dp2add r2.w, r9.zwzw, -r9.zwzw, c3.x
					    max r4.w, r2.w, c3.z
					    mul r2.w, r4.w, r4.w
					    mul r2.w, r2.w, r2.w
					    max r4.w, r1.w, c3.z
					    mul r1.w, r4.w, r4.w
					    mul r1.w, r1.w, r1.w
					    mad r2.xyz, r8, r1.w, r2
					    mul r8, r7.xyxx, c3.xxzz
					    mul r7, r7.zwxx, c3.xxzz
					    texldl r7, r7, s0
					    mov r4.z, r7.z
					    texldl r7, r8, s0
					    mov r4.x, r7.x
					    mul r4.xyz, r1, r4
					    mad r2.xyz, r4, r2.w, r2
					    frc r4, r5
					    add r4, -r4, c3.y
					    dp2add r1.w, r4, r4, c3.z
					    dp2add r2.w, r4.zwzw, r4.zwzw, c3.z
					    mad r2.w, r2.w, -r2.w, c3.x
					    mad r2.w, r2.w, c3.y, c3.y
					    mul r2.w, r2.w, c1.z
					    mul r2.w, r2.w, c2.w
					    mul r4, r2.w, r3
					    mad r4, r6, r4, r5.zwzw
					    mad r1.w, r1.w, -r1.w, c3.x
					    mad r1.w, r1.w, c3.y, c3.y
					    mul r1.w, r1.w, c1.z
					    mul r1.w, r1.w, c2.w
					    mul r7, r1.w, r3
					    mad r7, r6.zwzw, r7, r5.xyxy
					    mul r8, r7.xyxx, c3.xxzz
					    mul r7, r7.zwxx, c3.xxzz
					    texldl r7, r7, s0
					    texldl r8, r8, s0
					    mov r7.x, r8.x
					    mul r8, r5.xyxx, c3.xxzz
					    texldl r8, r8, s0
					    mov r7.y, r8.y
					    mul r7.xyz, r1, r7
					    mad r8, r5, c6.w, c6.x
					    mul r5, r5.zwxx, c3.xxzz
					    texldl r5, r5, s0
					    mul r8, r8, c1.w
					    dp2add r1.w, r8, -r8, c3.x
					    dp2add r2.w, r8.zwzw, -r8.zwzw, c3.x
					    max r5.w, r2.w, c3.z
					    mul r2.w, r5.w, r5.w
					    mul r2.w, r2.w, r2.w
					    max r5.w, r1.w, c3.z
					    mul r1.w, r5.w, r5.w
					    mul r1.w, r1.w, r1.w
					    mad r2.xyz, r7, r1.w, r2
					    mul r7, r4.xyxx, c3.xxzz
					    mul r4, r4.zwxx, c3.xxzz
					    texldl r4, r4, s0
					    mov r5.z, r4.z
					    texldl r4, r7, s0
					    mov r5.x, r4.x
					    mul r4.xyz, r1, r5
					    mad r2.xyz, r4, r2.w, r2
					    mul r2.xyz, r2, c1.x
					    frc r4.xy, r0
					    add r4.xy, -r4, c3.y
					    dp2add r1.w, r4, r4, c3.z
					    mad r2.w, r1.w, -r1.w, c3.x
					    rsq r1.w, r1.w
					    rcp r1.w, r1.w
					    mad r1.w, r1.w, -c3.w, c3.x
					    mul r1.w, r1.w, r1.w
					    mul r1.w, r1.w, r1.w
					    mul r1.w, r1.w, c2.x
					    mad r2.w, r2.w, c3.y, c3.y
					    mul r2.w, r2.w, c2.z
					    mul r2.w, r2.w, c2.w
					    mul r3, r2.w, r3
					    mad r3, r6.zwzw, r3, r0.xyxy
					    mul r4, r3.xyxx, c3.xxzz
					    mul r3, r3.zwxx, c3.xxzz
					    texldl r3, r3, s0
					    texldl r4, r4, s0
					    mov r3.x, r4.x
					    mov r0.zw, c3.z
					    texldl r0, r0, s0
					    mov r3.y, r0.y
					    mul r0.xyz, r1, r3
					    mad r0.xyz, r0, r1.w, r2
					    max oC0.xyz, r0, c3.z
					    mov oC0.w, c3.z
					
					// approximately 313 instruction slots used (62 texture, 251 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[10];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2;
						vec4 _LensFlareParams1;
						vec4 _LensFlareParams2;
						vec4 unused_0_5[5];
					};
					uniform  sampler2D _LensColorTexture;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec3 u_xlat12;
					vec2 u_xlat20;
					vec2 u_xlat21;
					vec2 u_xlat24;
					float u_xlat30;
					float u_xlat31;
					float u_xlat32;
					void main()
					{
					    u_xlat0 = (-vs_TEXCOORD0.xyxy) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1.xy = (-u_xlat0.zw) + vec2(0.5, 0.5);
					    u_xlat21.xy = u_xlat1.xy * _LensFlareParams1.yy + u_xlat0.zw;
					    u_xlat2.xy = u_xlat21.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat2.xy = u_xlat2.xy * _LensFlareParams1.ww;
					    u_xlat2.x = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat2.x = (-u_xlat2.x) + 1.0;
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat2.x = u_xlat2.x * u_xlat2.x;
					    u_xlat12.xy = fract(u_xlat21.xy);
					    u_xlat12.xy = (-u_xlat12.xy) + vec2(0.5, 0.5);
					    u_xlat12.x = dot(u_xlat12.xy, u_xlat12.xy);
					    u_xlat12.x = (-u_xlat12.x) * u_xlat12.x + 1.0;
					    u_xlat12.x = u_xlat12.x * 0.5 + 0.5;
					    u_xlat12.x = u_xlat12.x * _LensFlareParams1.z;
					    u_xlat12.x = u_xlat12.x * _LensFlareParams2.w;
					    u_xlat3 = _MainTex_TexelSize.xxxx * vec4(-1.0, -1.0, 1.0, 1.0);
					    u_xlat4 = u_xlat12.xxxx * u_xlat3;
					    u_xlat5 = u_xlat1.xyxy * _LensFlareParams1.yyyy;
					    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * 1.41421354;
					    u_xlat12.x = dot(u_xlat5.zw, u_xlat5.zw);
					    u_xlat12.x = inversesqrt(u_xlat12.x);
					    u_xlat6 = u_xlat12.xxxx * u_xlat5.zwzw;
					    u_xlat4 = u_xlat6.zwzw * u_xlat4 + u_xlat21.xyxy;
					    u_xlat7 = textureLod(_MainTex, u_xlat21.xy, 0.0);
					    u_xlat8 = textureLod(_MainTex, u_xlat4.xy, 0.0);
					    u_xlat4 = textureLod(_MainTex, u_xlat4.zw, 0.0);
					    u_xlat7.z = u_xlat4.z;
					    u_xlat7.x = u_xlat8.x;
					    u_xlat1.y = 0.5;
					    u_xlat1 = textureLod(_LensColorTexture, u_xlat1.xy, 0.0);
					    u_xlat12.xyz = u_xlat1.xyz * u_xlat7.xyz;
					    u_xlat2.xyz = u_xlat2.xxx * u_xlat12.xyz;
					    u_xlat4.xy = u_xlat0.zw * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat4.xy = u_xlat4.xy * _LensFlareParams1.ww;
					    u_xlat31 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat31 = (-u_xlat31) + 1.0;
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat4.xy = fract((-vs_TEXCOORD0.xy));
					    u_xlat4.xy = (-u_xlat4.xy) + vec2(0.5, 0.5);
					    u_xlat32 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat32 = (-u_xlat32) * u_xlat32 + 1.0;
					    u_xlat32 = u_xlat32 * 0.5 + 0.5;
					    u_xlat32 = u_xlat32 * _LensFlareParams1.z;
					    u_xlat32 = u_xlat32 * _LensFlareParams2.w;
					    u_xlat4 = vec4(u_xlat32) * u_xlat3;
					    u_xlat4 = u_xlat6.zwzw * u_xlat4 + u_xlat0.zwzw;
					    u_xlat7 = textureLod(_MainTex, u_xlat4.xy, 0.0);
					    u_xlat4 = textureLod(_MainTex, u_xlat4.zw, 0.0);
					    u_xlat7.z = u_xlat4.z;
					    u_xlat4 = textureLod(_MainTex, u_xlat0.zw, 0.0);
					    u_xlat7.y = u_xlat4.y;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat7.xyz;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat4.xy = u_xlat5.zw * vec2(2.0, 2.0) + u_xlat0.zw;
					    u_xlat24.xy = fract(u_xlat4.xy);
					    u_xlat24.xy = (-u_xlat24.xy) + vec2(0.5, 0.5);
					    u_xlat31 = dot(u_xlat24.xy, u_xlat24.xy);
					    u_xlat31 = (-u_xlat31) * u_xlat31 + 1.0;
					    u_xlat31 = u_xlat31 * 0.5 + 0.5;
					    u_xlat31 = u_xlat31 * _LensFlareParams1.z;
					    u_xlat31 = u_xlat31 * _LensFlareParams2.w;
					    u_xlat7 = vec4(u_xlat31) * u_xlat3;
					    u_xlat7 = u_xlat6.zwzw * u_xlat7 + u_xlat4.xyxy;
					    u_xlat8 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					    u_xlat7 = textureLod(_MainTex, u_xlat7.zw, 0.0);
					    u_xlat8.z = u_xlat7.z;
					    u_xlat7 = textureLod(_MainTex, u_xlat4.xy, 0.0);
					    u_xlat4.xy = u_xlat4.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat4.xy = u_xlat4.xy * _LensFlareParams1.ww;
					    u_xlat31 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat31 = (-u_xlat31) + 1.0;
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat8.y = u_xlat7.y;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat8.xyz;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat4 = u_xlat5.zwzw * vec4(3.0, 3.0, 4.0, 4.0) + u_xlat0.zwzw;
					    u_xlat7 = fract(u_xlat4);
					    u_xlat7 = (-u_xlat7) + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat31 = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat32 = dot(u_xlat7.zw, u_xlat7.zw);
					    u_xlat32 = (-u_xlat32) * u_xlat32 + 1.0;
					    u_xlat32 = u_xlat32 * 0.5 + 0.5;
					    u_xlat32 = u_xlat32 * _LensFlareParams1.z;
					    u_xlat32 = u_xlat32 * _LensFlareParams2.w;
					    u_xlat7 = vec4(u_xlat32) * u_xlat3;
					    u_xlat7 = u_xlat6.zwzw * u_xlat7 + u_xlat4.zwzw;
					    u_xlat31 = (-u_xlat31) * u_xlat31 + 1.0;
					    u_xlat31 = u_xlat31 * 0.5 + 0.5;
					    u_xlat31 = u_xlat31 * _LensFlareParams1.z;
					    u_xlat31 = u_xlat31 * _LensFlareParams2.w;
					    u_xlat8 = vec4(u_xlat31) * u_xlat3;
					    u_xlat8 = u_xlat6.zwzw * u_xlat8 + u_xlat4.xyxy;
					    u_xlat9 = textureLod(_MainTex, u_xlat8.xy, 0.0);
					    u_xlat8 = textureLod(_MainTex, u_xlat8.zw, 0.0);
					    u_xlat9.z = u_xlat8.z;
					    u_xlat8 = textureLod(_MainTex, u_xlat4.xy, 0.0);
					    u_xlat9.y = u_xlat8.y;
					    u_xlat8.xyz = u_xlat1.xyz * u_xlat9.xyz;
					    u_xlat9 = u_xlat4 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat4 = textureLod(_MainTex, u_xlat4.zw, 0.0);
					    u_xlat9 = u_xlat9 * _LensFlareParams1.wwww;
					    u_xlat31 = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat32 = dot(u_xlat9.zw, u_xlat9.zw);
					    u_xlat32 = (-u_xlat32) + 1.0;
					    u_xlat32 = max(u_xlat32, 0.0);
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat31 = (-u_xlat31) + 1.0;
					    u_xlat31 = max(u_xlat31, 0.0);
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat2.xyz = u_xlat8.xyz * vec3(u_xlat31) + u_xlat2.xyz;
					    u_xlat8 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					    u_xlat7 = textureLod(_MainTex, u_xlat7.zw, 0.0);
					    u_xlat4.z = u_xlat7.z;
					    u_xlat4.x = u_xlat8.x;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat32) + u_xlat2.xyz;
					    u_xlat4 = u_xlat5.zwzw * vec4(5.0, 5.0, 6.0, 6.0) + u_xlat0.zwzw;
					    u_xlat5 = u_xlat5 * vec4(7.0, 7.0, 8.0, 8.0) + u_xlat0;
					    u_xlat0.xy = u_xlat6.zw * _LensFlareParams2.yy + u_xlat0.zw;
					    u_xlat7 = fract(u_xlat4);
					    u_xlat7 = (-u_xlat7) + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat20.x = dot(u_xlat7.xy, u_xlat7.xy);
					    u_xlat30 = dot(u_xlat7.zw, u_xlat7.zw);
					    u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
					    u_xlat30 = u_xlat30 * 0.5 + 0.5;
					    u_xlat30 = u_xlat30 * _LensFlareParams1.z;
					    u_xlat30 = u_xlat30 * _LensFlareParams2.w;
					    u_xlat7 = vec4(u_xlat30) * u_xlat3;
					    u_xlat7 = u_xlat6.zwzw * u_xlat7 + u_xlat4.zwzw;
					    u_xlat20.x = (-u_xlat20.x) * u_xlat20.x + 1.0;
					    u_xlat20.x = u_xlat20.x * 0.5 + 0.5;
					    u_xlat20.x = u_xlat20.x * _LensFlareParams1.z;
					    u_xlat20.x = u_xlat20.x * _LensFlareParams2.w;
					    u_xlat8 = u_xlat20.xxxx * u_xlat3;
					    u_xlat8 = u_xlat6.zwzw * u_xlat8 + u_xlat4.xyxy;
					    u_xlat9 = textureLod(_MainTex, u_xlat8.xy, 0.0);
					    u_xlat8 = textureLod(_MainTex, u_xlat8.zw, 0.0);
					    u_xlat9.z = u_xlat8.z;
					    u_xlat8 = textureLod(_MainTex, u_xlat4.xy, 0.0);
					    u_xlat9.y = u_xlat8.y;
					    u_xlat8.xyz = u_xlat1.xyz * u_xlat9.xyz;
					    u_xlat9 = u_xlat4 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat4 = textureLod(_MainTex, u_xlat4.zw, 0.0);
					    u_xlat9 = u_xlat9 * _LensFlareParams1.wwww;
					    u_xlat20.x = dot(u_xlat9.xy, u_xlat9.xy);
					    u_xlat20.y = dot(u_xlat9.zw, u_xlat9.zw);
					    u_xlat20.xy = (-u_xlat20.xy) + vec2(1.0, 1.0);
					    u_xlat20.xy = max(u_xlat20.xy, vec2(0.0, 0.0));
					    u_xlat20.y = u_xlat20.y * u_xlat20.y;
					    u_xlat20.xy = u_xlat20.xy * u_xlat20.xy;
					    u_xlat20.x = u_xlat20.x * u_xlat20.x;
					    u_xlat2.xyz = u_xlat8.xyz * u_xlat20.xxx + u_xlat2.xyz;
					    u_xlat8 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					    u_xlat7 = textureLod(_MainTex, u_xlat7.zw, 0.0);
					    u_xlat4.z = u_xlat7.z;
					    u_xlat4.x = u_xlat8.x;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat4.xyz * u_xlat20.yyy + u_xlat2.xyz;
					    u_xlat4 = fract(u_xlat5);
					    u_xlat4 = (-u_xlat4) + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat20.x = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat30 = dot(u_xlat4.zw, u_xlat4.zw);
					    u_xlat30 = (-u_xlat30) * u_xlat30 + 1.0;
					    u_xlat30 = u_xlat30 * 0.5 + 0.5;
					    u_xlat30 = u_xlat30 * _LensFlareParams1.z;
					    u_xlat30 = u_xlat30 * _LensFlareParams2.w;
					    u_xlat4 = vec4(u_xlat30) * u_xlat3;
					    u_xlat4 = u_xlat6 * u_xlat4 + u_xlat5.zwzw;
					    u_xlat20.x = (-u_xlat20.x) * u_xlat20.x + 1.0;
					    u_xlat20.x = u_xlat20.x * 0.5 + 0.5;
					    u_xlat20.x = u_xlat20.x * _LensFlareParams1.z;
					    u_xlat20.x = u_xlat20.x * _LensFlareParams2.w;
					    u_xlat7 = u_xlat20.xxxx * u_xlat3;
					    u_xlat7 = u_xlat6.zwzw * u_xlat7 + u_xlat5.xyxy;
					    u_xlat8 = textureLod(_MainTex, u_xlat7.xy, 0.0);
					    u_xlat7 = textureLod(_MainTex, u_xlat7.zw, 0.0);
					    u_xlat8.z = u_xlat7.z;
					    u_xlat7 = textureLod(_MainTex, u_xlat5.xy, 0.0);
					    u_xlat8.y = u_xlat7.y;
					    u_xlat7.xyz = u_xlat1.xyz * u_xlat8.xyz;
					    u_xlat8 = u_xlat5 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat5 = textureLod(_MainTex, u_xlat5.zw, 0.0);
					    u_xlat8 = u_xlat8 * _LensFlareParams1.wwww;
					    u_xlat20.x = dot(u_xlat8.xy, u_xlat8.xy);
					    u_xlat20.y = dot(u_xlat8.zw, u_xlat8.zw);
					    u_xlat20.xy = (-u_xlat20.xy) + vec2(1.0, 1.0);
					    u_xlat20.xy = max(u_xlat20.xy, vec2(0.0, 0.0));
					    u_xlat20.y = u_xlat20.y * u_xlat20.y;
					    u_xlat20.xy = u_xlat20.xy * u_xlat20.xy;
					    u_xlat20.x = u_xlat20.x * u_xlat20.x;
					    u_xlat2.xyz = u_xlat7.xyz * u_xlat20.xxx + u_xlat2.xyz;
					    u_xlat7 = textureLod(_MainTex, u_xlat4.xy, 0.0);
					    u_xlat4 = textureLod(_MainTex, u_xlat4.zw, 0.0);
					    u_xlat5.z = u_xlat4.z;
					    u_xlat5.x = u_xlat7.x;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat4.xyz * u_xlat20.yyy + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * _LensFlareParams1.xxx;
					    u_xlat20.xy = fract(u_xlat0.xy);
					    u_xlat20.xy = (-u_xlat20.xy) + vec2(0.5, 0.5);
					    u_xlat20.x = dot(u_xlat20.xy, u_xlat20.xy);
					    u_xlat30 = (-u_xlat20.x) * u_xlat20.x + 1.0;
					    u_xlat20.x = sqrt(u_xlat20.x);
					    u_xlat20.x = (-u_xlat20.x) * 1.41421354 + 1.0;
					    u_xlat20.x = u_xlat20.x * u_xlat20.x;
					    u_xlat20.x = u_xlat20.x * u_xlat20.x;
					    u_xlat30 = u_xlat30 * 0.5 + 0.5;
					    u_xlat20.y = u_xlat30 * _LensFlareParams2.z;
					    u_xlat20.xy = u_xlat20.xy * _LensFlareParams2.xw;
					    u_xlat3 = u_xlat20.yyyy * u_xlat3;
					    u_xlat3 = u_xlat6.zwzw * u_xlat3 + u_xlat0.xyxy;
					    u_xlat4 = textureLod(_MainTex, u_xlat0.xy, 0.0);
					    u_xlat5 = textureLod(_MainTex, u_xlat3.xy, 0.0);
					    u_xlat3 = textureLod(_MainTex, u_xlat3.zw, 0.0);
					    u_xlat4.z = u_xlat3.z;
					    u_xlat4.x = u_xlat5.x;
					    u_xlat0.xyw = u_xlat1.xyz * u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyw * u_xlat20.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = min((-u_xlat0.xyz), vec3(0.0, 0.0, 0.0));
					    SV_Target0.xyz = (-u_xlat0.xyz);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
	}
}
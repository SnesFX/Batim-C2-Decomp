Shader "Hidden/ScionDownsampling" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
	}
	SubShader {
		Pass {
			Name "DOWNSAMPLEWEIGHTED"
			ZClip Off
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 1087
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 r1.x, c0, v0
					    dp4 r1.y, c1, v0
					    dp4 r1.z, c2, v0
					    dp4 r1.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					    mad o0.xy, r1.w, c255, r1
					    mov o0.zw, r1
					
					// approximately 11 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   _MainTex_TexelSize c0       1
					//   _MainTex           s0       1
					//
					
					    ps_3_0
					    def c1, 0.298999995, 0.587000012, 0.114, 1
					    def c2, -2, 2, 0.25, 0.5
					    def c3, -1, 1, 2, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    mov r0.xy, c2
					    mad r0, c0.xyxy, r0.xyyx, v0.xyxy
					    texld r1, r0, s0
					    texld r0, r0.zwzw, s0
					    dp3 r0.w, r1, c1
					    add r0.w, r0.w, c1.w
					    rcp r2.w, r0.w
					    mul r2.xyz, r1, r2.w
					    mov r1, c3
					    mul r3, r1.ywwy, c0.xxyy
					    add r3.xy, r3, c3.wzzw
					    mad r4.xy, r3, -c3.zwzw, v0
					    mad r3.xy, r3, c3.zwzw, v0
					    texld r5, r3, s0
					    texld r4, r4, s0
					    dp3 r0.w, r4, c1
					    add r0.w, r0.w, c1.w
					    rcp r6.w, r0.w
					    mul r6.xyz, r4, r6.w
					    add r2, r2, r6
					    texld r4, v0, s0
					    dp3 r0.w, r4, c1
					    add r0.w, r0.w, c1.w
					    rcp r7.w, r0.w
					    mul r7.xyz, r4, r7.w
					    add r2, r2, r7
					    mad r3.xy, c3.z, r3.zwzw, v0
					    mad r3.zw, c3.z, -r3, v0.xyxy
					    texld r4, r3.zwzw, s0
					    texld r3, r3, s0
					    dp3 r0.w, r3, c1
					    add r0.w, r0.w, c1.w
					    rcp r8.w, r0.w
					    mul r8.xyz, r3, r8.w
					    add r2, r2, r8
					    add r3, r7, r8
					    mul r2, r2, c2.z
					    rcp r0.w, r2.w
					    mul r2.xyz, r0.w, r2
					    mad r8.xy, c0, -r1.z, v0
					    texld r8, r8, s0
					    dp3 r0.w, r8, c1
					    add r0.w, r0.w, c1.w
					    rcp r9.w, r0.w
					    mul r9.xyz, r8, r9.w
					    add r6, r6, r9
					    dp3 r0.w, r4, c1
					    add r0.w, r0.w, c1.w
					    rcp r8.w, r0.w
					    mul r8.xyz, r4, r8.w
					    add r4, r6, r8
					    add r6, r7, r8
					    add r4, r7, r4
					    mul r4, r4, c2.z
					    rcp r0.w, r4.w
					    mad r2.xyz, r4, r0.w, r2
					    dp3 r0.w, r0, c1
					    add r0.w, r0.w, c1.w
					    rcp r4.w, r0.w
					    mul r4.xyz, r0, r4.w
					    add r0, r4, r6
					    dp3 r1.w, r5, c1
					    add r1.w, r1.w, c1.w
					    rcp r4.w, r1.w
					    mul r4.xyz, r4.w, r5
					    add r0, r0, r4
					    add r3, r3, r4
					    mul r0, r0, c2.z
					    rcp r0.w, r0.w
					    mad r0.xyz, r0, r0.w, r2
					    mad r1.zw, c0.xyxy, r1.z, v0.xyxy
					    texld r2, r1.zwzw, s0
					    dp3 r0.w, r2, c1
					    add r0.w, r0.w, c1.w
					    rcp r4.w, r0.w
					    mul r4.xyz, r2, r4.w
					    add r2, r3, r4
					    mul r2, r2, c2.z
					    rcp r0.w, r2.w
					    mad r0.xyz, r2, r0.w, r0
					    mul r0.xyz, r0, c2.z
					    dp3 r0.w, r0, c1
					    add r0.w, r0.w, c1.w
					    rcp r0.w, r0.w
					    mul r0.w, r0.w, c2.w
					    add r1.zw, -c0.xyxy, v0.xyxy
					    texld r2, r1.zwzw, s0
					    dp3 r1.z, r2, c1
					    add r1.z, r1.z, c1.w
					    rcp r3.w, r1.z
					    mul r3.xyz, r2, r3.w
					    mad r1, c0.xyxy, r1.xyyx, v0.xyxy
					    texld r2, r1, s0
					    texld r1, r1.zwzw, s0
					    dp3 r1.w, r2, c1
					    add r1.w, r1.w, c1.w
					    rcp r4.w, r1.w
					    mul r4.xyz, r2, r4.w
					    add r2, r3, r4
					    dp3 r1.w, r1, c1
					    add r1.w, r1.w, c1.w
					    rcp r3.w, r1.w
					    mul r3.xyz, r1, r3.w
					    add r1, r2, r3
					    add r2.xy, c0, v0
					    texld r2, r2, s0
					    dp3 r2.w, r2, c1
					    add r2.w, r2.w, c1.w
					    rcp r3.w, r2.w
					    mul r3.xyz, r2, r3.w
					    add r1, r1, r3
					    mul r1, r1, c2.z
					    rcp r1.w, r1.w
					    mul r1.xyz, r1.w, r1
					    dp3 r1.w, r1, c1
					    add r1.w, r1.w, c1.w
					    rcp r1.w, r1.w
					    mad r2.x, r1.w, c2.w, r0.w
					    mul r1.w, r1.w, c2.w
					    rcp r2.x, r2.x
					    mul r0.w, r0.w, r2.x
					    mul r1.w, r1.w, r2.x
					    mul r0.xyz, r0, r0.w
					    mad r0.xyz, r1.w, r1, r0
					    max oC0.xyz, r0, c3.w
					    mov oC0.w, c1.w
					
					// approximately 126 instruction slots used (13 texture, 113 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					float u_xlat24;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0.xy = (-_MainTex_TexelSize.xy) * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat0 = texture(_MainTex, u_xlat0.xy);
					    u_xlat24 = dot(u_xlat0.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat1.w = float(1.0) / u_xlat24;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.www;
					    u_xlat0.xw = _MainTex_TexelSize.xy;
					    u_xlat0.y = float(2.0);
					    u_xlat0.z = float(0.0);
					    u_xlat2 = (-u_xlat0) * vec4(2.0, 0.0, 2.0, 2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat0 = u_xlat0.zwxy * vec4(2.0, 2.0, 2.0, 0.0) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat26 = dot(u_xlat3.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat26 = u_xlat26 + 1.0;
					    u_xlat4.w = float(1.0) / u_xlat26;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat4.www;
					    u_xlat1 = u_xlat1 + u_xlat4;
					    u_xlat26 = dot(u_xlat2.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat26 = u_xlat26 + 1.0;
					    u_xlat3.w = float(1.0) / u_xlat26;
					    u_xlat3.xyz = u_xlat2.xyz * u_xlat3.www;
					    u_xlat1 = u_xlat1 + u_xlat3;
					    u_xlat2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat26 = dot(u_xlat2.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat26 = u_xlat26 + 1.0;
					    u_xlat5.w = float(1.0) / u_xlat26;
					    u_xlat5.xyz = u_xlat2.xyz * u_xlat5.www;
					    u_xlat1 = u_xlat1 + u_xlat5;
					    u_xlat1 = u_xlat1 * vec4(0.25, 0.25, 0.25, 0.25);
					    u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
					    u_xlat2 = _MainTex_TexelSize.xyxy * vec4(-2.0, 2.0, 2.0, -2.0) + vs_TEXCOORD0.xyxy;
					    u_xlat6 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat25 = dot(u_xlat6.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat25 = u_xlat25 + 1.0;
					    u_xlat7.w = float(1.0) / u_xlat25;
					    u_xlat7.xyz = u_xlat6.xyz * u_xlat7.www;
					    u_xlat4 = u_xlat4 + u_xlat7;
					    u_xlat4 = u_xlat5 + u_xlat4;
					    u_xlat6 = texture(_MainTex, u_xlat0.xy);
					    u_xlat0 = texture(_MainTex, u_xlat0.zw);
					    u_xlat24 = dot(u_xlat6.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat7.w = float(1.0) / u_xlat24;
					    u_xlat7.xyz = u_xlat6.xyz * u_xlat7.www;
					    u_xlat4 = u_xlat4 + u_xlat7;
					    u_xlat6 = u_xlat5 + u_xlat7;
					    u_xlat3 = u_xlat3 + u_xlat5;
					    u_xlat4 = u_xlat4 * vec4(0.25, 0.25, 0.25, 0.25);
					    u_xlat4.xyz = u_xlat4.xyz / u_xlat4.www;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat4.xyz;
					    u_xlat24 = dot(u_xlat2.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat4.w = float(1.0) / u_xlat24;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat4.www;
					    u_xlat2 = u_xlat3 + u_xlat4;
					    u_xlat24 = dot(u_xlat0.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat3.w = float(1.0) / u_xlat24;
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat3.www;
					    u_xlat0 = u_xlat2 + u_xlat3;
					    u_xlat2 = u_xlat3 + u_xlat6;
					    u_xlat0 = u_xlat0 * vec4(0.25, 0.25, 0.25, 0.25);
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.xy = _MainTex_TexelSize.xy * vec2(2.0, 2.0) + vs_TEXCOORD0.xy;
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat24 = dot(u_xlat1.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat3.w = float(1.0) / u_xlat24;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.www;
					    u_xlat1 = u_xlat2 + u_xlat3;
					    u_xlat1 = u_xlat1 * vec4(0.25, 0.25, 0.25, 0.25);
					    u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
					    u_xlat24 = dot(u_xlat0.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat24 = u_xlat24 + 1.0;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat24 = u_xlat24 * 0.5;
					    u_xlat1.xy = vs_TEXCOORD0.xy + (-_MainTex_TexelSize.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.xy);
					    u_xlat25 = dot(u_xlat1.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat25 = u_xlat25 + 1.0;
					    u_xlat2.w = float(1.0) / u_xlat25;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.www;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 1.0, 1.0, -1.0) + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat25 = dot(u_xlat3.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat25 = u_xlat25 + 1.0;
					    u_xlat4.w = float(1.0) / u_xlat25;
					    u_xlat4.xyz = u_xlat3.xyz * u_xlat4.www;
					    u_xlat2 = u_xlat2 + u_xlat4;
					    u_xlat25 = dot(u_xlat1.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat25 = u_xlat25 + 1.0;
					    u_xlat3.w = float(1.0) / u_xlat25;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.www;
					    u_xlat1 = u_xlat2 + u_xlat3;
					    u_xlat2.xy = vs_TEXCOORD0.xy + _MainTex_TexelSize.xy;
					    u_xlat2 = texture(_MainTex, u_xlat2.xy);
					    u_xlat26 = dot(u_xlat2.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat26 = u_xlat26 + 1.0;
					    u_xlat3.w = float(1.0) / u_xlat26;
					    u_xlat3.xyz = u_xlat2.xyz * u_xlat3.www;
					    u_xlat1 = u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * vec4(0.25, 0.25, 0.25, 0.25);
					    u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;
					    u_xlat25 = dot(u_xlat1.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat25 = u_xlat25 + 1.0;
					    u_xlat25 = float(1.0) / u_xlat25;
					    u_xlat2.x = u_xlat25 * 0.5 + u_xlat24;
					    u_xlat25 = u_xlat25 * 0.5;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat24 = u_xlat24 * u_xlat2.x;
					    u_xlat25 = u_xlat25 * u_xlat2.x;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24);
					    u_xlat0.xyz = vec3(u_xlat25) * u_xlat1.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = min((-u_xlat0.xyz), vec3(0.0, 0.0, 0.0));
					    SV_Target0.xyz = (-u_xlat0.xyz);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "DOWNSAMPLEFORDEPTHOFFIELD"
			ZClip Off
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 95274
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 r1.x, c0, v0
					    dp4 r1.y, c1, v0
					    dp4 r1.z, c2, v0
					    dp4 r1.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					    mad o0.xy, r1.w, c255, r1
					    mov o0.zw, r1
					
					// approximately 11 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   sampler2D _MainTex;
					//   float4 _ScionResolutionParameters2;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                        Reg   Size
					//   --------------------------- ----- ----
					//   _ZBufferParams              c0       1
					//   _ScionResolutionParameters2 c1       1
					//   _MainTex                    s0       1
					//   _CameraDepthTexture         s1       1
					//
					
					    ps_3_0
					    def c2, -0.5, 0.5, 1, 0.00999999978
					    def c3, 0.298999995, 0.587000012, 0.114, 0
					    def c4, -0.5, 1.5, 0.5, -1.5
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    mov r0.zw, c1
					    mad r1, r0.zwzw, c4.xyzy, v0.xyxy
					    texld r2, r1, s0
					    dp3 r0.x, r2, c3
					    add r0.x, r0.x, c2.z
					    rcp r3.w, r0.x
					    mul r3.xyz, r2, r3.w
					    texld r2, r1.zwzw, s0
					    dp3 r0.x, r2, c3
					    add r0.x, r0.x, c2.z
					    rcp r4.w, r0.x
					    mul r4.xyz, r2, r4.w
					    texld r2, r1.zwzw, s1
					    texld r1, r1, s1
					    mad r0.x, c0.z, r1.x, c0.w
					    rcp r0.x, r0.x
					    mad r0.y, c0.z, r2.x, c0.w
					    rcp r0.y, r0.y
					    mad r1, r0.zwzw, c2.xyyy, v0.xyxy
					    texld r2, r1, s1
					    texld r5, r1.zwzw, s1
					    max r6.x, r2.x, r5.x
					    mad r7, r0.zwzw, c2.xxyx, v0.xyxy
					    texld r8, r7, s1
					    texld r9, r7.zwzw, s1
					    max r2.y, r8.x, r9.x
					    max r5.y, r6.x, r2.y
					    mad r2.y, c0.z, r5.y, c0.w
					    rcp r2.y, r2.y
					    add r0.xy, -r0, r2.y
					    add r0.xy, r0_abs, c2.w
					    rcp r0.y, r0.y
					    mul r4, r0.y, r4
					    rcp r0.x, r0.x
					    mad r3, r3, r0.x, r4
					    mad r4, r0.zwzw, c4.wzyz, v0.xyxy
					    texld r6, r4, s0
					    dp3 r0.x, r6, c3
					    add r0.x, r0.x, c2.z
					    rcp r10.w, r0.x
					    mul r10.xyz, r6, r10.w
					    texld r6, r4, s1
					    mad r0.x, c0.z, r6.x, c0.w
					    rcp r0.x, r0.x
					    add r0.x, -r0.x, r2.y
					    add r0.x, r0_abs.x, c2.w
					    rcp r0.x, r0.x
					    mad r3, r10, r0.x, r3
					    texld r6, r1, s0
					    texld r1, r1.zwzw, s0
					    dp3 r0.y, r6, c3
					    add r0.y, r0.y, c2.z
					    rcp r11.w, r0.y
					    mul r11.xyz, r6, r11.w
					    add r0.y, -r2.x, r2.y
					    add r0.y, r0_abs.y, c2.w
					    rcp r0.y, r0.y
					    mad r3, r11, r0.y, r3
					    mul r6, r0.y, r11
					    mad r6, r10, r0.x, r6
					    mad r10, r0.zwzw, c4.wxyx, v0.xyxy
					    texld r11, r10, s0
					    dp3 r0.x, r11, c3
					    add r0.x, r0.x, c2.z
					    rcp r12.w, r0.x
					    mul r12.xyz, r11, r12.w
					    texld r11, r10, s1
					    mad r0.x, c0.z, r11.x, c0.w
					    rcp r0.x, r0.x
					    add r0.x, -r0.x, r2.y
					    add r0.x, r0_abs.x, c2.w
					    rcp r0.x, r0.x
					    mad r6, r12, r0.x, r6
					    texld r11, r7, s0
					    texld r7, r7.zwzw, s0
					    dp3 r0.x, r11, c3
					    add r0.x, r0.x, c2.z
					    rcp r12.w, r0.x
					    mul r12.xyz, r11, r12.w
					    add r0.x, -r8.x, r2.y
					    add r0.x, r0_abs.x, c2.w
					    rcp r0.x, r0.x
					    mad r6, r12, r0.x, r6
					    add r3, r3, r6
					    dp3 r0.y, r1, c3
					    add r0.y, r0.y, c2.z
					    rcp r6.w, r0.y
					    mul r6.xyz, r1, r6.w
					    texld r1, r4.zwzw, s0
					    texld r4, r4.zwzw, s1
					    mad r0.y, c0.z, r4.x, c0.w
					    rcp r0.y, r0.y
					    add r0.y, -r0.y, r2.y
					    add r0.y, r0_abs.y, c2.w
					    rcp r0.y, r0.y
					    dp3 r1.w, r1, c3
					    add r1.w, r1.w, c2.z
					    rcp r4.w, r1.w
					    mul r4.xyz, r1, r4.w
					    mul r1, r0.y, r4
					    add r0.y, -r5.x, r2.y
					    add r0.y, r0_abs.y, c2.w
					    rcp r0.y, r0.y
					    mad r1, r6, r0.y, r1
					    dp3 r0.y, r7, c3
					    add r0.y, r0.y, c2.z
					    rcp r4.w, r0.y
					    mul r4.xyz, r4.w, r7
					    add r0.y, -r9.x, r2.y
					    add r0.y, r0_abs.y, c2.w
					    rcp r0.y, r0.y
					    mad r1, r4, r0.y, r1
					    mul r4, r0.y, r4
					    mad r4, r12, r0.x, r4
					    texld r5, r10.zwzw, s0
					    texld r6, r10.zwzw, s1
					    mad r0.x, c0.z, r6.x, c0.w
					    rcp r0.x, r0.x
					    add r0.x, -r0.x, r2.y
					    add r0.x, r0_abs.x, c2.w
					    rcp r0.x, r0.x
					    dp3 r0.y, r5, c3
					    add r0.y, r0.y, c2.z
					    rcp r6.w, r0.y
					    mul r6.xyz, r5, r6.w
					    mad r1, r6, r0.x, r1
					    add r1, r1, r3
					    mad r0, r0.zwzw, c4.xwzw, v0.xyxy
					    texld r3, r0, s1
					    mad r2.x, c0.z, r3.x, c0.w
					    rcp r2.x, r2.x
					    add r2.x, -r2.x, r2.y
					    add r2.x, r2_abs.x, c2.w
					    rcp r2.x, r2.x
					    texld r3, r0, s0
					    dp3 r0.x, r3, c3
					    add r0.x, r0.x, c2.z
					    rcp r5.w, r0.x
					    mul r5.xyz, r3, r5.w
					    mad r3, r5, r2.x, r4
					    texld r4, r0.zwzw, s1
					    texld r0, r0.zwzw, s0
					    mad r0.w, c0.z, r4.x, c0.w
					    rcp r0.w, r0.w
					    add r0.w, -r0.w, r2.y
					    mov oC0.w, r2.y
					    add r0.w, r0_abs.w, c2.w
					    rcp r0.w, r0.w
					    dp3 r2.x, r0, c3
					    add r2.x, r2.x, c2.z
					    rcp r2.w, r2.x
					    mul r2.xyz, r0, r2.w
					    mad r0, r2, r0.w, r3
					    add r0, r0, r1
					    rcp r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    max oC0.xyz, r0, c3.w
					
					// approximately 157 instruction slots used (24 texture, 133 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _ScionResolutionParameters2;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					float u_xlat12;
					float u_xlat24;
					float u_xlat36;
					float u_xlat37;
					void main()
					{
					    u_xlat0 = _ScionResolutionParameters2.zwzw * vec4(-0.5, 1.5, 0.5, 1.5) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = texture(_MainTex, u_xlat0.xy);
					    u_xlat37 = dot(u_xlat1.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat37 = u_xlat37 + 1.0;
					    u_xlat2.w = float(1.0) / u_xlat37;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.www;
					    u_xlat1 = texture(_MainTex, u_xlat0.zw);
					    u_xlat37 = dot(u_xlat1.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat37 = u_xlat37 + 1.0;
					    u_xlat3.w = float(1.0) / u_xlat37;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.www;
					    u_xlat1 = texture(_CameraDepthTexture, u_xlat0.zw);
					    u_xlat0 = texture(_CameraDepthTexture, u_xlat0.xy);
					    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat12 = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat0.y = float(1.0) / u_xlat12;
					    u_xlat1 = _ScionResolutionParameters2.zwzw * vec4(-0.5, 0.5, 0.5, 0.5) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = texture(_CameraDepthTexture, u_xlat1.xy);
					    u_xlat5 = texture(_CameraDepthTexture, u_xlat1.zw);
					    u_xlat24 = max(u_xlat4.x, u_xlat5.x);
					    u_xlat6 = _ScionResolutionParameters2.zwzw * vec4(-0.5, -0.5, 0.5, -0.5) + vs_TEXCOORD0.xyxy;
					    u_xlat7 = texture(_CameraDepthTexture, u_xlat6.xy);
					    u_xlat8 = texture(_CameraDepthTexture, u_xlat6.zw);
					    u_xlat36 = max(u_xlat7.x, u_xlat8.x);
					    u_xlat24 = max(u_xlat36, u_xlat24);
					    u_xlat24 = _ZBufferParams.z * u_xlat24 + _ZBufferParams.w;
					    u_xlat24 = float(1.0) / u_xlat24;
					    u_xlat0.xy = (-u_xlat0.xy) + vec2(u_xlat24);
					    u_xlat0.xy = abs(u_xlat0.xy) + vec2(0.00999999978, 0.00999999978);
					    u_xlat12 = float(1.0) / u_xlat0.y;
					    u_xlat3 = vec4(u_xlat12) * u_xlat3;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat2 = u_xlat2 * u_xlat0.xxxx + u_xlat3;
					    u_xlat3 = _ScionResolutionParameters2.zwzw * vec4(-1.5, 0.5, 1.5, 0.5) + vs_TEXCOORD0.xyxy;
					    u_xlat9 = texture(_MainTex, u_xlat3.xy);
					    u_xlat0.x = dot(u_xlat9.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat0.x = u_xlat0.x + 1.0;
					    u_xlat10.w = float(1.0) / u_xlat0.x;
					    u_xlat10.xyz = u_xlat9.xyz * u_xlat10.www;
					    u_xlat9 = texture(_CameraDepthTexture, u_xlat3.xy);
					    u_xlat0.x = _ZBufferParams.z * u_xlat9.x + _ZBufferParams.w;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat24;
					    u_xlat0.x = abs(u_xlat0.x) + 0.00999999978;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat2 = u_xlat10 * u_xlat0.xxxx + u_xlat2;
					    u_xlat9 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat12 = dot(u_xlat9.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat12 = u_xlat12 + 1.0;
					    u_xlat11.w = float(1.0) / u_xlat12;
					    u_xlat11.xyz = u_xlat9.xyz * u_xlat11.www;
					    u_xlat12 = (-u_xlat4.x) + u_xlat24;
					    u_xlat12 = abs(u_xlat12) + 0.00999999978;
					    u_xlat12 = float(1.0) / u_xlat12;
					    u_xlat2 = u_xlat11 * vec4(u_xlat12) + u_xlat2;
					    u_xlat4 = vec4(u_xlat12) * u_xlat11;
					    u_xlat4 = u_xlat10 * u_xlat0.xxxx + u_xlat4;
					    u_xlat9 = _ScionResolutionParameters2.zwzw * vec4(-1.5, -0.5, 1.5, -0.5) + vs_TEXCOORD0.xyxy;
					    u_xlat10 = texture(_MainTex, u_xlat9.xy);
					    u_xlat0.x = dot(u_xlat10.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat0.x = u_xlat0.x + 1.0;
					    u_xlat11.w = float(1.0) / u_xlat0.x;
					    u_xlat11.xyz = u_xlat10.xyz * u_xlat11.www;
					    u_xlat10 = texture(_CameraDepthTexture, u_xlat9.xy);
					    u_xlat0.x = _ZBufferParams.z * u_xlat10.x + _ZBufferParams.w;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat24;
					    u_xlat0.x = abs(u_xlat0.x) + 0.00999999978;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat4 = u_xlat11 * u_xlat0.xxxx + u_xlat4;
					    u_xlat10 = texture(_MainTex, u_xlat6.xy);
					    u_xlat6 = texture(_MainTex, u_xlat6.zw);
					    u_xlat0.x = dot(u_xlat10.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat0.x = u_xlat0.x + 1.0;
					    u_xlat11.w = float(1.0) / u_xlat0.x;
					    u_xlat11.xyz = u_xlat10.xyz * u_xlat11.www;
					    u_xlat0.x = (-u_xlat7.x) + u_xlat24;
					    u_xlat0.x = abs(u_xlat0.x) + 0.00999999978;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat4 = u_xlat11 * u_xlat0.xxxx + u_xlat4;
					    u_xlat2 = u_xlat2 + u_xlat4;
					    u_xlat12 = dot(u_xlat1.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat12 = u_xlat12 + 1.0;
					    u_xlat4.w = float(1.0) / u_xlat12;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat4.www;
					    u_xlat1 = texture(_MainTex, u_xlat3.zw);
					    u_xlat3 = texture(_CameraDepthTexture, u_xlat3.zw);
					    u_xlat12 = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat12 = float(1.0) / u_xlat12;
					    u_xlat12 = (-u_xlat12) + u_xlat24;
					    u_xlat12 = abs(u_xlat12) + 0.00999999978;
					    u_xlat12 = float(1.0) / u_xlat12;
					    u_xlat36 = dot(u_xlat1.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat36 = u_xlat36 + 1.0;
					    u_xlat3.w = float(1.0) / u_xlat36;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.www;
					    u_xlat1 = vec4(u_xlat12) * u_xlat3;
					    u_xlat12 = (-u_xlat5.x) + u_xlat24;
					    u_xlat12 = abs(u_xlat12) + 0.00999999978;
					    u_xlat12 = float(1.0) / u_xlat12;
					    u_xlat1 = u_xlat4 * vec4(u_xlat12) + u_xlat1;
					    u_xlat12 = dot(u_xlat6.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat12 = u_xlat12 + 1.0;
					    u_xlat3.w = float(1.0) / u_xlat12;
					    u_xlat3.xyz = u_xlat3.www * u_xlat6.xyz;
					    u_xlat12 = (-u_xlat8.x) + u_xlat24;
					    u_xlat12 = abs(u_xlat12) + 0.00999999978;
					    u_xlat12 = float(1.0) / u_xlat12;
					    u_xlat1 = u_xlat3 * vec4(u_xlat12) + u_xlat1;
					    u_xlat3 = vec4(u_xlat12) * u_xlat3;
					    u_xlat3 = u_xlat11 * u_xlat0.xxxx + u_xlat3;
					    u_xlat4 = texture(_MainTex, u_xlat9.zw);
					    u_xlat5 = texture(_CameraDepthTexture, u_xlat9.zw);
					    u_xlat0.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat24;
					    u_xlat0.x = abs(u_xlat0.x) + 0.00999999978;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat12 = dot(u_xlat4.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat12 = u_xlat12 + 1.0;
					    u_xlat5.w = float(1.0) / u_xlat12;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat5.www;
					    u_xlat1 = u_xlat5 * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = u_xlat1 + u_xlat2;
					    u_xlat2 = _ScionResolutionParameters2.zwzw * vec4(-0.5, -1.5, 0.5, -1.5) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = texture(_CameraDepthTexture, u_xlat2.xy);
					    u_xlat0.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat24;
					    u_xlat0.x = abs(u_xlat0.x) + 0.00999999978;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat4 = texture(_MainTex, u_xlat2.xy);
					    u_xlat12 = dot(u_xlat4.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat12 = u_xlat12 + 1.0;
					    u_xlat5.w = float(1.0) / u_xlat12;
					    u_xlat5.xyz = u_xlat4.xyz * u_xlat5.www;
					    u_xlat3 = u_xlat5 * u_xlat0.xxxx + u_xlat3;
					    u_xlat4 = texture(_CameraDepthTexture, u_xlat2.zw);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat0.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat24;
					    SV_Target0.w = u_xlat24;
					    u_xlat0.x = abs(u_xlat0.x) + 0.00999999978;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat12 = dot(u_xlat2.xyz, vec3(0.298999995, 0.587000012, 0.114));
					    u_xlat12 = u_xlat12 + 1.0;
					    u_xlat4.w = float(1.0) / u_xlat12;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat4.www;
					    u_xlat0 = u_xlat4 * u_xlat0.xxxx + u_xlat3;
					    u_xlat0 = u_xlat0 + u_xlat1;
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
					    u_xlat0.xyz = min((-u_xlat0.xyz), vec3(0.0, 0.0, 0.0));
					    SV_Target0.xyz = (-u_xlat0.xyz);
					    return;
					}"
				}
			}
		}
		Pass {
			Name "DOWNSAMPLEDEPTH"
			ZClip Off
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 144064
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 r1.x, c0, v0
					    dp4 r1.y, c1, v0
					    dp4 r1.z, c2, v0
					    dp4 r1.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					    mad o0.xy, r1.w, c255, r1
					    mov o0.zw, r1
					
					// approximately 11 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   float4 _ScionResolutionParameters2;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                        Reg   Size
					//   --------------------------- ----- ----
					//   _ZBufferParams              c0       1
					//   _ScionResolutionParameters2 c1       1
					//   _CameraDepthTexture         s0       1
					//
					
					    ps_3_0
					    def c2, 0.5, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    mov r0.zw, c1
					    mad r1.zw, r0, -c2.x, v0.xyxy
					    texld r2, r1.zwzw, s0
					    mad r1.xy, r0.zwzw, c2.x, v0
					    texld r0, r1.xwzw, s0
					    texld r3, r1.zyzw, s0
					    texld r1, r1, s0
					    min r0.y, r1.x, r3.x
					    min r1.x, r0.x, r2.x
					    min r2.x, r0.y, r1.x
					    mad r0.x, c0.x, r2.x, c0.y
					    rcp oC0, r0.x
					
					// approximately 12 instruction slots used (4 texture, 8 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _ScionResolutionParameters2;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _CameraDepthTexture;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					void main()
					{
					    u_xlat0.zw = (-_ScionResolutionParameters2.zw) * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
					    u_xlat1 = texture(_CameraDepthTexture, u_xlat0.zw);
					    u_xlat0.xy = _ScionResolutionParameters2.zw * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
					    u_xlat2 = texture(_CameraDepthTexture, u_xlat0.xw);
					    u_xlat3 = texture(_CameraDepthTexture, u_xlat0.zy);
					    u_xlat0 = texture(_CameraDepthTexture, u_xlat0.xy);
					    u_xlat0.x = min(u_xlat0.x, u_xlat3.x);
					    u_xlat4 = min(u_xlat1.x, u_xlat2.x);
					    u_xlat0.x = min(u_xlat0.x, u_xlat4);
					    u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					    SV_Target0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0.xxxx;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "DOWNSAMPLEMINFILTER"
			ZClip Off
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 208584
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 r1.x, c0, v0
					    dp4 r1.y, c1, v0
					    dp4 r1.z, c2, v0
					    dp4 r1.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o1.y, r0.x, r0.y, v1.y
					    mov o1.x, v1.x
					    mad o0.xy, r1.w, c255, r1
					    mov o0.zw, r1
					
					// approximately 11 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _MainTex_TexelSize;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   float4 _ScionResolutionParameters2;
					//
					//
					// Registers:
					//
					//   Name                        Reg   Size
					//   --------------------------- ----- ----
					//   _ScionResolutionParameters2 c0       1
					//   _MainTex                    s0       1
					//
					
					    ps_3_0
					    def c1, 0.5, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    mov r0.x, c1.x
					    mad r1.xy, c0.zwzw, r0.x, v0
					    mov r2.w, r1.y
					    mad r2.xy, c0.zwzw, -r0.x, v0
					    mov r2.z, c1.y
					    texldl r0, r2.xwzz, s0
					    mov r1.zw, r2.xyyz
					    texldl r2, r2.xyzz, s0
					    texldl r3, r1.xyww, s0
					    texldl r1, r1.xzww, s0
					    min r0.y, r1.x, r2.x
					    min r1.x, r3.x, r0.x
					    min oC0, r1.x, r0.y
					
					// approximately 17 instruction slots used (8 texture, 9 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _ScionResolutionParameters2;
						vec4 unused_0_2[3];
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					void main()
					{
					    u_xlat0.zw = (-_ScionResolutionParameters2.zw) * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
					    u_xlat1 = textureLod(_MainTex, u_xlat0.zw, 0.0);
					    u_xlat0.xy = _ScionResolutionParameters2.zw * vec2(0.5, 0.5) + vs_TEXCOORD0.xy;
					    u_xlat2 = textureLod(_MainTex, u_xlat0.xw, 0.0);
					    u_xlat3 = textureLod(_MainTex, u_xlat0.zy, 0.0);
					    u_xlat0 = textureLod(_MainTex, u_xlat0.xy, 0.0);
					    u_xlat0.x = min(u_xlat0.x, u_xlat3.x);
					    u_xlat4 = min(u_xlat1.x, u_xlat2.x);
					    SV_Target0 = min(u_xlat0.xxxx, vec4(u_xlat4));
					    return;
					}"
				}
			}
		}
	}
}
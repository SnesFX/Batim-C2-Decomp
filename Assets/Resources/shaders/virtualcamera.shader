Shader "Hidden/ScionVirtualCamera" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
	}
	SubShader {
		Pass {
			Name "AUTOPRIORITY"
			ZClip Off
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 8052
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_position o0
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mad o0.xy, r0.w, c255, r0
					    mov o0.zw, r0
					
					// approximately 6 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _DownsampledScene;
					//   sampler2D _PreviousExposureTexture;
					//   float4 _ScionCameraParams1;
					//   float4 _VirtualCameraParams1;
					//   float4 _VirtualCameraParams2;
					//   float4 _VirtualCameraParams3;
					//
					//
					// Registers:
					//
					//   Name                     Reg   Size
					//   ------------------------ ----- ----
					//   _ScionCameraParams1      c0       1
					//   _VirtualCameraParams1    c1       1
					//   _VirtualCameraParams2    c2       1
					//   _VirtualCameraParams3    c3       1
					//   _DownsampledScene        s0       1
					//   _PreviousExposureTexture s1       1
					//
					
					    ps_3_0
					    def c4, 0.5, 0, 1.44269502, 3000
					    def c5, 8, 1600, 100, 6400
					    def c6, 0.000250000012, 0.0333333351, 0.249999985, 4
					    def c7, 1.39999998, 22, 1.20000005, 0
					    dcl_2d s0
					    dcl_2d s1
					    texldl r0, c4.xxyy, s0
					    mul r0.xyz, r0, c4.z
					    exp r0.y, r0.y
					    exp r0.z, r0.z
					    exp r0.x, r0.x
					    max r1.x, r0.y, r0.z
					    max r2.x, r0.x, r1.x
					    texldl r0, c4.xxyy, s1
					    mad r0.y, r2.x, c4.w, -r0.x
					    mov oC1.w, r2.x
					    mad r0.x, r0.y, c1.w, r0.x
					    max r1.x, r0.x, c4.y
					    mul r0.x, r1.x, c5.x
					    log r0.x, r0.x
					    add r0.x, r0.x, -c2.x
					    exp r0.y, r0.x
					    mul r0.z, r0.y, c7.z
					    mul r0.y, r0.y, c1.x
					    rcp r0.y, r0.y
					    mul r0.y, r0.y, c5.y
					    max r2.x, r0.y, c5.z
					    min r1.z, r2.x, c5.w
					    rcp r0.y, r0.z
					    mul r0.y, r0.y, c4.w
					    max r2.x, r0.y, c3.x
					    min oC1.x, c3.y, r2.x
					    mul r0.y, r1.z, c1.x
					    rcp r0.y, r0.y
					    mul r0.y, r0.y, c5.y
					    log r0.y, r0.y
					    add r0.y, -r0.y, r0.x
					    exp r0.y, -r0.y
					    mul r0.y, r0.y, c1.x
					    max r2.x, r0.y, c6.x
					    min r1.y, r2.x, c6.y
					    mul r0.y, r1.z, r1.y
					    rcp r0.y, r0.y
					    mul r0.y, r0.y, c5.y
					    log r0.y, r0.y
					    add r0.x, -r0.y, r0.x
					    mul r0.x, r0.x, c6.z
					    exp r0.x, r0.x
					    mul r0.x, r0.x, c6.w
					    max r2.x, r0.x, c7.x
					    min r1.w, r2.x, c7.y
					    rcp r0.x, r1.w
					    mov oC0, r1
					    mul r0.y, c0.y, c0.y
					    mul r0.x, r0.x, r0.y
					    mul r0.y, r0.x, c2.z
					    mov r0.z, c2.z
					    add r0.z, r0.z, -c0.y
					    rcp r0.z, r0.z
					    mul r1.y, r0.z, r0.y
					    mul r1.z, r0.z, -r0.x
					    mul oC1.yz, r1, c2.w
					
					// approximately 58 instruction slots used (4 texture, 54 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _ScionCameraParams1;
						vec4 _VirtualCameraParams1;
						vec4 _VirtualCameraParams2;
						vec4 _VirtualCameraParams3;
					};
					uniform  sampler2D _PreviousExposureTexture;
					uniform  sampler2D _DownsampledScene;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec2 u_xlat3;
					float u_xlat4;
					void main()
					{
					    u_xlat0 = textureLod(_DownsampledScene, vec2(0.5, 0.5), 0.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.44269502, 1.44269502, 1.44269502);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat2.x = max(u_xlat0.z, u_xlat0.y);
					    u_xlat0.x = max(u_xlat2.x, u_xlat0.x);
					    u_xlat1 = textureLod(_PreviousExposureTexture, vec2(0.5, 0.5), 0.0);
					    u_xlat2.x = u_xlat0.x * 3000.0 + (-u_xlat1.x);
					    SV_Target1.w = u_xlat0.x;
					    u_xlat0.x = u_xlat2.x * _VirtualCameraParams1.w + u_xlat1.x;
					    u_xlat0.x = min((-u_xlat0.x), 0.0);
					    u_xlat2.x = u_xlat0.x * -8.0;
					    SV_Target0.x = (-u_xlat0.x);
					    u_xlat0.x = log2(u_xlat2.x);
					    u_xlat0.x = u_xlat0.x + (-_VirtualCameraParams2.x);
					    u_xlat2.x = exp2(u_xlat0.x);
					    u_xlat4 = u_xlat2.x * _VirtualCameraParams1.x;
					    u_xlat2.x = u_xlat2.x * 1.20000005;
					    u_xlat2.x = float(1.0) / u_xlat2.x;
					    u_xlat2.x = u_xlat2.x * 3000.0;
					    u_xlat2.x = max(u_xlat2.x, _VirtualCameraParams3.x);
					    SV_Target1.x = min(u_xlat2.x, _VirtualCameraParams3.y);
					    u_xlat2.x = 1600.0 / u_xlat4;
					    u_xlat2.x = max(u_xlat2.x, 100.0);
					    u_xlat2.y = min(u_xlat2.x, 6400.0);
					    u_xlat1.x = u_xlat2.y * _VirtualCameraParams1.x;
					    u_xlat1.x = 1600.0 / u_xlat1.x;
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat1.x = exp2((-u_xlat1.x));
					    u_xlat1.x = u_xlat1.x * _VirtualCameraParams1.x;
					    u_xlat1.x = max(u_xlat1.x, 0.000250000012);
					    u_xlat2.x = min(u_xlat1.x, 0.0333333351);
					    u_xlat1.x = u_xlat2.y * u_xlat2.x;
					    u_xlat1.x = 1600.0 / u_xlat1.x;
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = u_xlat0.x * 0.249999985;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = max(u_xlat0.x, 1.39999998);
					    u_xlat2.z = min(u_xlat0.x, 22.0);
					    SV_Target0.yzw = u_xlat2.xyz;
					    u_xlat0.x = _ScionCameraParams1.y / u_xlat2.z;
					    u_xlat0.x = u_xlat0.x * _ScionCameraParams1.y;
					    u_xlat2.x = u_xlat0.x * _VirtualCameraParams2.z;
					    u_xlat4 = (-_ScionCameraParams1.y) + _VirtualCameraParams2.z;
					    u_xlat4 = float(1.0) / u_xlat4;
					    u_xlat3.x = u_xlat4 * u_xlat2.x;
					    u_xlat3.y = u_xlat4 * (-u_xlat0.x);
					    SV_Target1.yz = u_xlat3.xy * _VirtualCameraParams2.ww;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "SHUTTERPRIORITY"
			ZClip Off
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 126162
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_position o0
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mad o0.xy, r0.w, c255, r0
					    mov o0.zw, r0
					
					// approximately 6 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _DownsampledScene;
					//   sampler2D _PreviousExposureTexture;
					//   float4 _ScionCameraParams1;
					//   float4 _VirtualCameraParams1;
					//   float4 _VirtualCameraParams2;
					//   float4 _VirtualCameraParams3;
					//
					//
					// Registers:
					//
					//   Name                     Reg   Size
					//   ------------------------ ----- ----
					//   _ScionCameraParams1      c0       1
					//   _VirtualCameraParams1    c1       1
					//   _VirtualCameraParams2    c2       1
					//   _VirtualCameraParams3    c3       1
					//   _DownsampledScene        s0       1
					//   _PreviousExposureTexture s1       1
					//
					
					    ps_3_0
					    def c4, 0.5, 0, 1.44269502, 3000
					    def c5, 8, 1600, 100, 6400
					    def c6, 0.49999997, 4, 1.39999998, 22
					    def c7, 1.20000005, 0, 0, 0
					    dcl_2d s0
					    dcl_2d s1
					    texldl r0, c4.xxyy, s0
					    mul r0.xyz, r0, c4.z
					    exp r0.y, r0.y
					    exp r0.z, r0.z
					    exp r0.x, r0.x
					    max r1.x, r0.y, r0.z
					    max r2.x, r0.x, r1.x
					    texldl r0, c4.xxyy, s1
					    mad r0.y, r2.x, c4.w, -r0.x
					    mov oC1.w, r2.x
					    mad r0.x, r0.y, c1.w, r0.x
					    max r1.x, r0.x, c4.y
					    mul r0.x, r1.x, c5.x
					    log r0.x, r0.x
					    add r0.x, r0.x, -c2.x
					    exp r0.y, r0.x
					    mul r0.z, r0.y, c7.x
					    mul r0.y, r0.y, c1.z
					    rcp r0.y, r0.y
					    mul r0.y, r0.y, c5.y
					    max r2.x, r0.y, c5.z
					    min r1.z, r2.x, c5.w
					    rcp r0.y, r0.z
					    mul r0.y, r0.y, c4.w
					    max r1.y, r0.y, c3.x
					    min oC1.x, c3.y, r1.y
					    mul r0.y, r1.z, c1.z
					    rcp r0.y, r0.y
					    mul r0.y, r0.y, c5.y
					    log r0.y, r0.y
					    add r0.x, -r0.y, r0.x
					    mul r0.x, r0.x, c6.x
					    exp r0.x, r0.x
					    mul r0.x, r0.x, c6.y
					    max r2.x, r0.x, c6.z
					    min r1.w, r2.x, c6.w
					    rcp r0.x, r1.w
					    mov oC0.xzw, r1
					    mul r0.y, c0.y, c0.y
					    mul r0.x, r0.x, r0.y
					    mul r0.y, r0.x, c2.z
					    mov r0.z, c2.z
					    add r0.z, r0.z, -c0.y
					    rcp r0.z, r0.z
					    mul r1.y, r0.z, r0.y
					    mul r1.z, r0.z, -r0.x
					    mul oC1.yz, r1, c2.w
					    mov oC0.y, c1.z
					
					// approximately 50 instruction slots used (4 texture, 46 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _ScionCameraParams1;
						vec4 _VirtualCameraParams1;
						vec4 _VirtualCameraParams2;
						vec4 _VirtualCameraParams3;
					};
					uniform  sampler2D _PreviousExposureTexture;
					uniform  sampler2D _DownsampledScene;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					vec2 u_xlat3;
					vec2 u_xlat4;
					void main()
					{
					    u_xlat0 = textureLod(_DownsampledScene, vec2(0.5, 0.5), 0.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.44269502, 1.44269502, 1.44269502);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat2 = max(u_xlat0.z, u_xlat0.y);
					    u_xlat0.x = max(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_PreviousExposureTexture, vec2(0.5, 0.5), 0.0);
					    u_xlat2 = u_xlat0.x * 3000.0 + (-u_xlat1.x);
					    SV_Target1.w = u_xlat0.x;
					    u_xlat0.x = u_xlat2 * _VirtualCameraParams1.w + u_xlat1.x;
					    u_xlat0.x = min((-u_xlat0.x), 0.0);
					    u_xlat2 = u_xlat0.x * -8.0;
					    SV_Target0.x = (-u_xlat0.x);
					    u_xlat0.x = log2(u_xlat2);
					    u_xlat0.x = u_xlat0.x + (-_VirtualCameraParams2.x);
					    u_xlat2 = exp2(u_xlat0.x);
					    u_xlat4.x = u_xlat2 * _VirtualCameraParams1.z;
					    u_xlat2 = u_xlat2 * 1.20000005;
					    u_xlat2 = float(1.0) / u_xlat2;
					    u_xlat2 = u_xlat2 * 3000.0;
					    u_xlat2 = max(u_xlat2, _VirtualCameraParams3.x);
					    SV_Target1.x = min(u_xlat2, _VirtualCameraParams3.y);
					    u_xlat2 = 1600.0 / u_xlat4.x;
					    u_xlat2 = max(u_xlat2, 100.0);
					    u_xlat4.x = min(u_xlat2, 6400.0);
					    u_xlat2 = u_xlat4.x * _VirtualCameraParams1.z;
					    u_xlat2 = 1600.0 / u_xlat2;
					    u_xlat2 = log2(u_xlat2);
					    u_xlat0.x = (-u_xlat2) + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * 0.49999997;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * 4.0;
					    u_xlat0.x = max(u_xlat0.x, 1.39999998);
					    u_xlat4.y = min(u_xlat0.x, 22.0);
					    SV_Target0.zw = u_xlat4.xy;
					    u_xlat0.x = _ScionCameraParams1.y / u_xlat4.y;
					    u_xlat0.x = u_xlat0.x * _ScionCameraParams1.y;
					    SV_Target0.y = _VirtualCameraParams1.z;
					    u_xlat2 = u_xlat0.x * _VirtualCameraParams2.z;
					    u_xlat4.x = (-_ScionCameraParams1.y) + _VirtualCameraParams2.z;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat3.x = u_xlat4.x * u_xlat2;
					    u_xlat3.y = u_xlat4.x * (-u_xlat0.x);
					    SV_Target1.yz = u_xlat3.xy * _VirtualCameraParams2.ww;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "APERTUREPRIORITY"
			ZClip Off
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 163065
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_position o0
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mad o0.xy, r0.w, c255, r0
					    mov o0.zw, r0
					
					// approximately 6 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _DownsampledScene;
					//   sampler2D _PreviousExposureTexture;
					//   float4 _ScionCameraParams1;
					//   float4 _VirtualCameraParams1;
					//   float4 _VirtualCameraParams2;
					//   float4 _VirtualCameraParams3;
					//
					//
					// Registers:
					//
					//   Name                     Reg   Size
					//   ------------------------ ----- ----
					//   _ScionCameraParams1      c0       1
					//   _VirtualCameraParams1    c1       1
					//   _VirtualCameraParams2    c2       1
					//   _VirtualCameraParams3    c3       1
					//   _DownsampledScene        s0       1
					//   _PreviousExposureTexture s1       1
					//
					
					    ps_3_0
					    def c4, 0.5, 0, 1.44269502, 3000
					    def c5, 8, 100, 6400, 0.000250000012
					    def c6, 0.0333333351, 1.20000005, 0, 0
					    dcl_2d s0
					    dcl_2d s1
					    texldl r0, c4.xxyy, s0
					    mul r0.xyz, r0, c4.z
					    exp r0.y, r0.y
					    exp r0.z, r0.z
					    exp r0.x, r0.x
					    max r1.x, r0.y, r0.z
					    max r2.x, r0.x, r1.x
					    texldl r0, c4.xxyy, s1
					    mad r0.y, r2.x, c4.w, -r0.x
					    mov oC1.w, r2.x
					    mad r0.x, r0.y, c1.w, r0.x
					    max r1.x, r0.x, c4.y
					    mul r0.x, r1.x, c5.x
					    log r0.x, r0.x
					    add r0.x, r0.x, -c2.x
					    exp r0.y, r0.x
					    mul r0.z, r0.y, c1.x
					    mul r0.y, r0.y, c6.y
					    rcp r0.y, r0.y
					    mul r0.y, r0.y, c4.w
					    max r1.y, r0.y, c3.x
					    min oC1.x, c3.y, r1.y
					    rcp r0.y, r0.z
					    mul r0.z, c1.y, c1.y
					    mul r0.z, r0.z, c5.y
					    mul r0.y, r0.y, r0.z
					    max r2.x, r0.y, c5.y
					    min r1.z, r2.x, c5.z
					    mul r0.y, r1.z, c1.x
					    mov oC0.xz, r1
					    rcp r0.y, r0.y
					    mul r0.y, r0.y, r0.z
					    log r0.y, r0.y
					    add r0.x, -r0.y, r0.x
					    exp r0.x, -r0.x
					    mul r0.x, r0.x, c1.x
					    max r1.x, r0.x, c5.w
					    min oC0.y, r1.x, c6.x
					    rcp r0.x, c1.y
					    mul r0.y, c0.y, c0.y
					    mul r0.x, r0.x, r0.y
					    mul r0.y, r0.x, c2.z
					    mov r0.z, c2.z
					    add r0.z, r0.z, -c0.y
					    rcp r0.z, r0.z
					    mul r1.y, r0.z, r0.y
					    mul r1.z, r0.z, -r0.x
					    mul oC1.yz, r1, c2.w
					    mov oC0.w, c1.y
					
					// approximately 51 instruction slots used (4 texture, 47 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _ScionCameraParams1;
						vec4 _VirtualCameraParams1;
						vec4 _VirtualCameraParams2;
						vec4 _VirtualCameraParams3;
					};
					uniform  sampler2D _PreviousExposureTexture;
					uniform  sampler2D _DownsampledScene;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat2;
					vec2 u_xlat3;
					float u_xlat4;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = textureLod(_DownsampledScene, vec2(0.5, 0.5), 0.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.44269502, 1.44269502, 1.44269502);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat2 = max(u_xlat0.z, u_xlat0.y);
					    u_xlat0.x = max(u_xlat2, u_xlat0.x);
					    u_xlat1 = textureLod(_PreviousExposureTexture, vec2(0.5, 0.5), 0.0);
					    u_xlat2 = u_xlat0.x * 3000.0 + (-u_xlat1.x);
					    SV_Target1.w = u_xlat0.x;
					    u_xlat0.x = u_xlat2 * _VirtualCameraParams1.w + u_xlat1.x;
					    u_xlat0.x = min((-u_xlat0.x), 0.0);
					    u_xlat2 = u_xlat0.x * -8.0;
					    SV_Target0.x = (-u_xlat0.x);
					    u_xlat0.x = log2(u_xlat2);
					    u_xlat0.x = u_xlat0.x + (-_VirtualCameraParams2.x);
					    u_xlat2 = exp2(u_xlat0.x);
					    u_xlat4 = u_xlat2 * _VirtualCameraParams1.x;
					    u_xlat2 = u_xlat2 * 1.20000005;
					    u_xlat2 = float(1.0) / u_xlat2;
					    u_xlat2 = u_xlat2 * 3000.0;
					    u_xlat2 = max(u_xlat2, _VirtualCameraParams3.x);
					    SV_Target1.x = min(u_xlat2, _VirtualCameraParams3.y);
					    u_xlat2 = _VirtualCameraParams1.y * _VirtualCameraParams1.y;
					    u_xlat2 = u_xlat2 * 100.0;
					    u_xlat4 = u_xlat2 / u_xlat4;
					    u_xlat4 = max(u_xlat4, 100.0);
					    u_xlat4 = min(u_xlat4, 6400.0);
					    u_xlat6 = u_xlat4 * _VirtualCameraParams1.x;
					    SV_Target0.z = u_xlat4;
					    u_xlat2 = u_xlat2 / u_xlat6;
					    u_xlat2 = log2(u_xlat2);
					    u_xlat0.x = (-u_xlat2) + u_xlat0.x;
					    u_xlat0.x = exp2((-u_xlat0.x));
					    u_xlat0.x = u_xlat0.x * _VirtualCameraParams1.x;
					    u_xlat0.x = max(u_xlat0.x, 0.000250000012);
					    SV_Target0.y = min(u_xlat0.x, 0.0333333351);
					    SV_Target0.w = _VirtualCameraParams1.y;
					    u_xlat0.x = _ScionCameraParams1.y / _VirtualCameraParams1.y;
					    u_xlat0.x = u_xlat0.x * _ScionCameraParams1.y;
					    u_xlat2 = u_xlat0.x * _VirtualCameraParams2.z;
					    u_xlat4 = (-_ScionCameraParams1.y) + _VirtualCameraParams2.z;
					    u_xlat4 = float(1.0) / u_xlat4;
					    u_xlat3.x = u_xlat4 * u_xlat2;
					    u_xlat3.y = u_xlat4 * (-u_xlat0.x);
					    SV_Target1.yz = u_xlat3.xy * _VirtualCameraParams2.ww;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "GEOMETRICDOWNSAMPLE"
			ZClip Off
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 234610
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o1.xy, v1
					    mad o0.xy, r0.w, c255, r0
					    mov o0.zw, r0
					
					// approximately 7 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c0, 1, 0, -1000, 9.99999975e-005
					    def c1, 1000.00012, 0.693147182, 0, 0
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    mul r0, c0.xxyy, v0.xyxx
					    texldl r0, r0, s0
					    add r1.xyz, r0, c0.z
					    add r0.xyz, r0, c0.w
					    cmp r0.xyz, r1, c1.x, r0
					    log r1.x, r0.x
					    log r1.y, r0.y
					    log r1.z, r0.z
					    mul oC0.xyz, r1, c1.y
					    mov oC0.w, c0.y
					
					// approximately 11 instruction slots used (2 texture, 9 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.xyz = min(u_xlat0.xyz, vec3(1000.0, 1000.0, 1000.0));
					    u_xlat0.xyz = u_xlat0.xyz + vec3(9.99999975e-05, 9.99999975e-05, 9.99999975e-05);
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(0.693147182, 0.693147182, 0.693147182);
					    SV_Target0.w = 0.0;
					    return;
					}"
				}
			}
		}
	}
}
Shader "Hidden/ScionDepthOfFieldTemporal" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
	}
	SubShader {
		Pass {
			Name "TEMPORALBLEND"
			ZClip Off
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 51193
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float3 _FrustumCornerBottomLeftVP;
					//   float3 _FrustumCornerHeightVP;
					//   float3 _FrustumCornerWidthVP;
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _FrustumCornerBottomLeftVP c4       1
					//   _FrustumCornerWidthVP      c5       1
					//   _FrustumCornerHeightVP     c6       1
					//   _MainTex_TexelSize         c7       1
					//
					
					    vs_3_0
					    def c8, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dp4 r2.x, c0, v0
					    dp4 r2.y, c1, v0
					    dp4 r2.z, c2, v0
					    dp4 r2.w, c3, v0
					    mov r0.x, c8.x
					    slt r0.x, c7.y, r0.x
					    mad r0.y, v1.y, c8.y, c8.z
					    mad r0.x, r0.x, r0.y, v1.y
					    mov r1.xyz, c5
					    mad r0.yzw, v1.x, r1.xxyz, c4.xxyz
					    mad o2.xyz, r0.x, c6, r0.yzww
					    mov o1.y, r0.x
					    mov o1.x, v1.x
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 15 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec3 _FrustumCornerBottomLeftVP;
						vec3 _FrustumCornerWidthVP;
						vec3 _FrustumCornerHeightVP;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_5[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1.x = (-in_TEXCOORD0.y) + 1.0;
					    u_xlat0.x = (u_xlatb0) ? u_xlat1.x : in_TEXCOORD0.y;
					    vs_TEXCOORD0.y = u_xlat0.x;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    u_xlat1.xyz = in_TEXCOORD0.xxx * _FrustumCornerWidthVP.xyz + _FrustumCornerBottomLeftVP.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xxx * _FrustumCornerHeightVP.xyz + u_xlat1.xyz;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _PreviousViewProjection;
					//   float4 _ScionCameraPosition;
					//   float4 _ScionResolutionParameters2;
					//   sampler2D _TapsCurrentTexture;
					//   sampler2D _TapsHistoryTexture;
					//   float _TemporalBlendFactor;
					//
					//
					// Registers:
					//
					//   Name                        Reg   Size
					//   --------------------------- ----- ----
					//   _PreviousViewProjection     c0       4
					//   _ScionResolutionParameters2 c4       1
					//   _ScionCameraPosition        c5       1
					//   _TemporalBlendFactor        c6       1
					//   _TapsHistoryTexture         s0       1
					//   _TapsCurrentTexture         s1       1
					//
					
					    ps_3_0
					    def c7, 1, 0, 0.5, -1
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xyz
					    dcl_2d s0
					    dcl_2d s1
					    add r0.xz, -c4.xyyw, v0.xyyw
					    mov r1.y, r0.z
					    mov r2.z, c7.y
					    add r2.xy, c4.yxzw, v0.yxzw
					    mov r1.xzw, r2.yyzz
					    texldl r3, r1, s1
					    mul r0.yw, r2.x, c7.xxzy
					    texldl r4, r0.xzww, s1
					    min r5.xyz, r3, r4
					    max r6.xyz, r4, r3
					    texldl r3, r2.yxzz, s1
					    texldl r4, r0.xyww, s1
					    mov r7.xzw, r0.xyww
					    min r8.xyz, r3, r4
					    max r9.xyz, r4, r3
					    max r3.xyz, r9, r6
					    min r4.xyz, r5, r8
					    mul r1.xzw, c7.xyyy, v0.x
					    texldl r1, r1, s1
					    mov r7.y, v0.y
					    texldl r5, r7, s1
					    mul r0.xzw, c7.xyyy, v0.x
					    texldl r0, r0, s1
					    min r6.xyz, r5, r0
					    max r7.xyz, r0, r5
					    mov r2.w, v0.y
					    texldl r0, r2.ywzz, s1
					    mul r2, c7.xxyy, v0.xyxx
					    texldl r2, r2, s1
					    min r5.xyz, r0, r2
					    max r8.xyz, r2, r0
					    max r0.xyz, r7, r8
					    max r7.xyz, r0, r1
					    max r0.xyz, r3, r7
					    min r3.xyz, r5, r6
					    min r5.xyz, r1, r3
					    min r1.xyz, r5, r4
					    mad r3.xyz, v1, r2.w, c5
					    mov r3.w, c7.x
					    dp4 r0.w, c3, r3
					    rcp r0.w, r0.w
					    dp4 r4.x, c0, r3
					    dp4 r4.y, c1, r3
					    mul r3.xy, r0.w, r4
					    mad r4.xy, r3, c7.z, c7.z
					    max r0.w, r3_abs.x, r3_abs.y
					    add r0.w, r0.w, c7.w
					    mov r4.zw, c7.y
					    texldl r3, r4, s0
					    max r4.xyz, r3, r1
					    min r1.xyz, r0, r4
					    lrp r0.xyz, c6.x, r1, r2
					    cmp r0.xyz, r0.w, r2, r0
					    mov oC0.w, r2.w
					    max oC0.xyz, r0, c7.y
					
					// approximately 65 instruction slots used (20 texture, 45 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _ScionResolutionParameters2;
						vec4 unused_0_2;
						vec4 _ScionCameraPosition;
						vec4 unused_0_4[11];
						mat4x4 _PreviousViewProjection;
						float _TemporalBlendFactor;
					};
					uniform  sampler2D _TapsCurrentTexture;
					uniform  sampler2D _TapsHistoryTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec4 u_xlat6;
					vec3 u_xlat7;
					vec2 u_xlat18;
					float u_xlat24;
					bool u_xlatb24;
					void main()
					{
					    u_xlat0.xz = vs_TEXCOORD0.xy + _ScionResolutionParameters2.xy;
					    u_xlat1 = textureLod(_TapsCurrentTexture, u_xlat0.xz, 0.0);
					    u_xlat0.yw = vs_TEXCOORD0.xy + (-_ScionResolutionParameters2.xy);
					    u_xlat2 = textureLod(_TapsCurrentTexture, u_xlat0.yz, 0.0);
					    u_xlat3.xyz = min(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xyz = max(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat2 = textureLod(_TapsCurrentTexture, u_xlat0.xw, 0.0);
					    u_xlat4 = textureLod(_TapsCurrentTexture, u_xlat0.yw, 0.0);
					    u_xlat5.xyz = min(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat2.xyz = max(u_xlat2.xyz, u_xlat4.xyz);
					    u_xlat1.xyz = max(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = min(u_xlat3.xyz, u_xlat5.xyz);
					    u_xlat3.yz = u_xlat0.zy;
					    u_xlat3.xw = vs_TEXCOORD0.xy;
					    u_xlat4 = textureLod(_TapsCurrentTexture, u_xlat3.xy, 0.0);
					    u_xlat3 = textureLod(_TapsCurrentTexture, u_xlat3.zw, 0.0);
					    u_xlat5.xyz = min(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat3.xyz = max(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat0.yz = vs_TEXCOORD0.yx;
					    u_xlat4 = textureLod(_TapsCurrentTexture, u_xlat0.xy, 0.0);
					    u_xlat0 = textureLod(_TapsCurrentTexture, u_xlat0.zw, 0.0);
					    u_xlat6 = textureLod(_TapsCurrentTexture, vs_TEXCOORD0.xy, 0.0);
					    u_xlat7.xyz = min(u_xlat4.xyz, u_xlat6.xyz);
					    u_xlat4.xyz = max(u_xlat4.xyz, u_xlat6.xyz);
					    u_xlat3.xyz = max(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat3.xyz = max(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat1.xyz = max(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = min(u_xlat5.xyz, u_xlat7.xyz);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.xyz = min(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = vs_TEXCOORD1.xyz * u_xlat6.www + _ScionCameraPosition.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * _PreviousViewProjection[1].xyw;
					    u_xlat2.xyw = _PreviousViewProjection[0].xyw * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = _PreviousViewProjection[2].xyw * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat2.xyz = u_xlat2.xyz + _PreviousViewProjection[3].xyw;
					    u_xlat2.xy = u_xlat2.xy / u_xlat2.zz;
					    u_xlat18.xy = u_xlat2.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat24 = max(abs(u_xlat2.y), abs(u_xlat2.x));
					    u_xlatb24 = u_xlat24>=1.0;
					    u_xlat2 = textureLod(_TapsHistoryTexture, u_xlat18.xy, 0.0);
					    u_xlat0.xyz = max(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat0.xyz = min(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.xyz = (-u_xlat6.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(_TemporalBlendFactor) * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat0.xyz = (bool(u_xlatb24)) ? u_xlat6.xyz : u_xlat0.xyz;
					    SV_Target0.w = u_xlat6.w;
					    u_xlat0.xyz = min((-u_xlat0.xyz), vec3(0.0, 0.0, 0.0));
					    SV_Target0.xyz = (-u_xlat0.xyz);
					    return;
					}"
				}
			}
		}
		Pass {
			Name "TEMPORALBLENDWITHALPHA"
			ZClip Off
			ZWrite Off
			Cull Off
			Fog {
				Mode Off
			}
			GpuProgramID 126360
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float3 _FrustumCornerBottomLeftVP;
					//   float3 _FrustumCornerHeightVP;
					//   float3 _FrustumCornerWidthVP;
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   _FrustumCornerBottomLeftVP c4       1
					//   _FrustumCornerWidthVP      c5       1
					//   _FrustumCornerHeightVP     c6       1
					//   _MainTex_TexelSize         c7       1
					//
					
					    vs_3_0
					    def c8, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dp4 r2.x, c0, v0
					    dp4 r2.y, c1, v0
					    dp4 r2.z, c2, v0
					    dp4 r2.w, c3, v0
					    mov r0.x, c8.x
					    slt r0.x, c7.y, r0.x
					    mad r0.y, v1.y, c8.y, c8.z
					    mad r0.x, r0.x, r0.y, v1.y
					    mov r1.xyz, c5
					    mad r0.yzw, v1.x, r1.xxyz, c4.xxyz
					    mad o2.xyz, r0.x, c6, r0.yzww
					    mov o1.y, r0.x
					    mov o1.x, v1.x
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 15 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[12];
						vec3 _FrustumCornerBottomLeftVP;
						vec3 _FrustumCornerWidthVP;
						vec3 _FrustumCornerHeightVP;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_5[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec3 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1.x = (-in_TEXCOORD0.y) + 1.0;
					    u_xlat0.x = (u_xlatb0) ? u_xlat1.x : in_TEXCOORD0.y;
					    vs_TEXCOORD0.y = u_xlat0.x;
					    vs_TEXCOORD0.x = in_TEXCOORD0.x;
					    u_xlat1.xyz = in_TEXCOORD0.xxx * _FrustumCornerWidthVP.xyz + _FrustumCornerBottomLeftVP.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xxx * _FrustumCornerHeightVP.xyz + u_xlat1.xyz;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _AlphaCurrentTexture;
					//   sampler2D _AlphaHistoryTexture;
					//   row_major float4x4 _PreviousViewProjection;
					//   float4 _ScionCameraPosition;
					//   float4 _ScionResolutionParameters2;
					//   sampler2D _TapsCurrentTexture;
					//   sampler2D _TapsHistoryTexture;
					//   float _TemporalBlendFactor;
					//
					//
					// Registers:
					//
					//   Name                        Reg   Size
					//   --------------------------- ----- ----
					//   _PreviousViewProjection     c0       4
					//   _ScionResolutionParameters2 c4       1
					//   _ScionCameraPosition        c5       1
					//   _TemporalBlendFactor        c6       1
					//   _TapsHistoryTexture         s0       1
					//   _AlphaHistoryTexture        s1       1
					//   _TapsCurrentTexture         s2       1
					//   _AlphaCurrentTexture        s3       1
					//
					
					    ps_3_0
					    def c7, 1, 0, 0.5, -1
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    add r0.xz, -c4.xyyw, v0.xyyw
					    mov r1.y, r0.z
					    mov r2.z, c7.y
					    add r2.xy, c4.yxzw, v0.yxzw
					    mov r1.xzw, r2.yyzz
					    texldl r3, r1.xyww, s2
					    texldl r4, r1, s3
					    mov r3.w, r4.x
					    mul r0.yw, r2.x, c7.xxzy
					    texldl r4, r0.xzww, s2
					    texldl r5, r0.xzww, s3
					    mov r4.w, r5.x
					    min r5, r3, r4
					    max r6, r4, r3
					    texldl r3, r2.yxzz, s2
					    texldl r4, r2.yxzz, s3
					    mov r3.w, r4.x
					    texldl r4, r0.xyww, s2
					    texldl r7, r0.xyww, s3
					    mov r8.xzw, r0.xyww
					    mov r4.w, r7.x
					    min r7, r3, r4
					    max r9, r4, r3
					    max r3, r9, r6
					    min r4, r5, r7
					    mov r8.y, v0.y
					    texldl r5, r8.xyww, s2
					    texldl r6, r8, s3
					    mov r5.w, r6.x
					    mul r0.xzw, c7.xyyy, v0.x
					    texldl r6, r0.xyww, s2
					    texldl r0, r0, s3
					    mov r6.w, r0.x
					    min r0, r5, r6
					    max r7, r6, r5
					    mov r2.w, v0.y
					    texldl r5, r2.ywzz, s2
					    texldl r2, r2.ywzz, s3
					    mov r5.w, r2.x
					    mul r2, c7.xxyy, v0.xyxx
					    texldl r6, r2, s3
					    texldl r2, r2, s2
					    mov r6.w, r6.x
					    mov r6.xyz, r2
					    min r8, r5, r6
					    max r9, r6, r5
					    max r5, r7, r9
					    min r7, r8, r0
					    mul r1.xzw, c7.xyyy, v0.x
					    texldl r0, r1.xyww, s2
					    texldl r1, r1, s3
					    mov r0.w, r1.x
					    min r1, r0, r7
					    max r7, r5, r0
					    max r0, r3, r7
					    min r3, r1, r4
					    mad r1.xyz, v1, r2.w, c5
					    mov oC0.w, r2.w
					    mov r1.w, c7.x
					    dp4 r2.x, c3, r1
					    rcp r2.x, r2.x
					    dp4 r4.x, c0, r1
					    dp4 r4.y, c1, r1
					    mul r1.xy, r2.x, r4
					    mad r2.xy, r1, c7.z, c7.z
					    max r4.x, r1_abs.x, r1_abs.y
					    add r1.x, r4.x, c7.w
					    mov r2.zw, c7.y
					    texldl r4, r2.xyww, s0
					    texldl r2, r2, s1
					    mov r4.w, r2.x
					    max r2, r4, r3
					    min r3, r0, r2
					    lrp r0, c6.x, r3, r6
					    cmp r0, r1.x, r6, r0
					    max r1, r0, c7.y
					    mov oC0.xyz, r1
					    mov oC1.x, r1.w
					    mov oC1.yzw, c7.y
					
					// approximately 99 instruction slots used (40 texture, 59 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _ScionResolutionParameters2;
						vec4 unused_0_2;
						vec4 _ScionCameraPosition;
						vec4 unused_0_4[11];
						mat4x4 _PreviousViewProjection;
						float _TemporalBlendFactor;
					};
					uniform  sampler2D _TapsCurrentTexture;
					uniform  sampler2D _AlphaCurrentTexture;
					uniform  sampler2D _TapsHistoryTexture;
					uniform  sampler2D _AlphaHistoryTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec2 u_xlat21;
					void main()
					{
					    u_xlat0 = textureLod(_TapsCurrentTexture, vs_TEXCOORD0.xy, 0.0);
					    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat0.www + _ScionCameraPosition.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * _PreviousViewProjection[1].xyw;
					    u_xlat1.xyw = _PreviousViewProjection[0].xyw * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = _PreviousViewProjection[2].xyw * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat1.xyz = u_xlat1.xyz + _PreviousViewProjection[3].xyw;
					    u_xlat1.xy = u_xlat1.xy / u_xlat1.zz;
					    u_xlat21.xy = u_xlat1.xy * vec2(0.5, 0.5) + vec2(0.5, 0.5);
					    u_xlat1.x = max(abs(u_xlat1.y), abs(u_xlat1.x));
					    u_xlatb1 = u_xlat1.x>=1.0;
					    u_xlat2 = textureLod(_TapsHistoryTexture, u_xlat21.xy, 0.0);
					    u_xlat3 = textureLod(_AlphaHistoryTexture, u_xlat21.xy, 0.0);
					    u_xlat2.w = u_xlat3.x;
					    u_xlat3.xz = vs_TEXCOORD0.xy + _ScionResolutionParameters2.xy;
					    u_xlat4 = textureLod(_TapsCurrentTexture, u_xlat3.xz, 0.0);
					    u_xlat5 = textureLod(_AlphaCurrentTexture, u_xlat3.xz, 0.0);
					    u_xlat4.w = u_xlat5.x;
					    u_xlat3.yw = vs_TEXCOORD0.xy + (-_ScionResolutionParameters2.xy);
					    u_xlat5 = textureLod(_TapsCurrentTexture, u_xlat3.yz, 0.0);
					    u_xlat6 = textureLod(_AlphaCurrentTexture, u_xlat3.yz, 0.0);
					    u_xlat5.w = u_xlat6.x;
					    u_xlat6 = min(u_xlat4, u_xlat5);
					    u_xlat4 = max(u_xlat4, u_xlat5);
					    u_xlat5 = textureLod(_TapsCurrentTexture, u_xlat3.yw, 0.0);
					    u_xlat7 = textureLod(_AlphaCurrentTexture, u_xlat3.yw, 0.0);
					    u_xlat5.w = u_xlat7.x;
					    u_xlat7 = textureLod(_TapsCurrentTexture, u_xlat3.xw, 0.0);
					    u_xlat8 = textureLod(_AlphaCurrentTexture, u_xlat3.xw, 0.0);
					    u_xlat7.w = u_xlat8.x;
					    u_xlat8 = min(u_xlat5, u_xlat7);
					    u_xlat5 = max(u_xlat5, u_xlat7);
					    u_xlat4 = max(u_xlat4, u_xlat5);
					    u_xlat5 = min(u_xlat6, u_xlat8);
					    u_xlat6.yz = u_xlat3.zy;
					    u_xlat6.xw = vs_TEXCOORD0.xy;
					    u_xlat7 = textureLod(_TapsCurrentTexture, u_xlat6.xy, 0.0);
					    u_xlat8 = textureLod(_AlphaCurrentTexture, u_xlat6.xy, 0.0);
					    u_xlat7.w = u_xlat8.x;
					    u_xlat8 = textureLod(_TapsCurrentTexture, u_xlat6.zw, 0.0);
					    u_xlat6 = textureLod(_AlphaCurrentTexture, u_xlat6.zw, 0.0);
					    u_xlat8.w = u_xlat6.x;
					    u_xlat6 = min(u_xlat7, u_xlat8);
					    u_xlat7 = max(u_xlat7, u_xlat8);
					    u_xlat3.yz = vs_TEXCOORD0.yx;
					    u_xlat8 = textureLod(_TapsCurrentTexture, u_xlat3.xy, 0.0);
					    u_xlat9 = textureLod(_AlphaCurrentTexture, u_xlat3.xy, 0.0);
					    u_xlat8.w = u_xlat9.x;
					    SV_Target0.w = u_xlat0.w;
					    u_xlat9 = textureLod(_AlphaCurrentTexture, vs_TEXCOORD0.xy, 0.0);
					    u_xlat0.w = u_xlat9.x;
					    u_xlat9 = min(u_xlat8, u_xlat0);
					    u_xlat8 = max(u_xlat8, u_xlat0);
					    u_xlat7 = max(u_xlat7, u_xlat8);
					    u_xlat6 = min(u_xlat6, u_xlat9);
					    u_xlat8 = textureLod(_TapsCurrentTexture, u_xlat3.zw, 0.0);
					    u_xlat3 = textureLod(_AlphaCurrentTexture, u_xlat3.zw, 0.0);
					    u_xlat8.w = u_xlat3.x;
					    u_xlat3 = min(u_xlat6, u_xlat8);
					    u_xlat6 = max(u_xlat7, u_xlat8);
					    u_xlat4 = max(u_xlat4, u_xlat6);
					    u_xlat3 = min(u_xlat3, u_xlat5);
					    u_xlat2 = max(u_xlat2, u_xlat3);
					    u_xlat2 = min(u_xlat4, u_xlat2);
					    u_xlat2 = (-u_xlat0) + u_xlat2;
					    u_xlat2 = vec4(_TemporalBlendFactor) * u_xlat2 + u_xlat0;
					    u_xlat0 = (bool(u_xlatb1)) ? u_xlat0 : u_xlat2;
					    u_xlat0 = min((-u_xlat0), vec4(0.0, 0.0, 0.0, 0.0));
					    SV_Target0.xyz = (-u_xlat0.xyz);
					    SV_Target1.x = (-u_xlat0.w);
					    SV_Target1.yzw = vec3(0.0, 0.0, 0.0);
					    return;
					}"
				}
			}
		}
	}
}
Shader "TextMeshPro/Mobile/Distance Field (Surface)" {
	Properties {
		_FaceTex ("Fill Texture", 2D) = "white" {}
		_FaceColor ("Fill Color", Vector) = (1,1,1,1)
		_FaceDilate ("Face Dilate", Range(-1, 1)) = 0
		_OutlineColor ("Outline Color", Vector) = (0,0,0,1)
		_OutlineTex ("Outline Texture", 2D) = "white" {}
		_OutlineWidth ("Outline Thickness", Range(0, 1)) = 0
		_OutlineSoftness ("Outline Softness", Range(0, 1)) = 0
		_GlowColor ("Color", Vector) = (0,1,0,0.5)
		_GlowOffset ("Offset", Range(-1, 1)) = 0
		_GlowInner ("Inner", Range(0, 1)) = 0.05
		_GlowOuter ("Outer", Range(0, 1)) = 0.05
		_GlowPower ("Falloff", Range(1, 0)) = 0.75
		_WeightNormal ("Weight Normal", Float) = 0
		_WeightBold ("Weight Bold", Float) = 0.5
		_ShaderFlags ("Flags", Float) = 0
		_ScaleRatioA ("Scale RatioA", Float) = 1
		_ScaleRatioB ("Scale RatioB", Float) = 1
		_ScaleRatioC ("Scale RatioC", Float) = 1
		_MainTex ("Font Atlas", 2D) = "white" {}
		_TextureWidth ("Texture Width", Float) = 512
		_TextureHeight ("Texture Height", Float) = 512
		_GradientScale ("Gradient Scale", Float) = 5
		_ScaleX ("Scale X", Float) = 1
		_ScaleY ("Scale Y", Float) = 1
		_PerspectiveFilter ("Perspective Correction", Range(0, 1)) = 0.875
		_VertexOffsetX ("Vertex OffsetX", Float) = 0
		_VertexOffsetY ("Vertex OffsetY", Float) = 0
	}
	SubShader {
		LOD 300
		Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
		Pass {
			Name "FORWARD"
			LOD 300
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "ForwardBase" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
			Blend SrcAlpha OneMinusSrcAlpha, SrcAlpha OneMinusSrcAlpha
			ColorMask RGB -1
			ZClip Off
			ZWrite Off
			Cull Off
			GpuProgramID 53822
			Program "vp" {
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _EnvMatrix;
					//   float _FaceDilate;
					//   float4 _FaceTex_ST;
					//   float _GradientScale;
					//   float4 _MainTex_ST;
					//   float _PerspectiveFilter;
					//   float _ScaleRatioA;
					//   float _ScaleX;
					//   float _ScaleY;
					//   float4 _ScreenParams;
					//   float _VertexOffsetX;
					//   float _VertexOffsetY;
					//   float _WeightBold;
					//   float _WeightNormal;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 glstate_matrix_projection;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   _EnvMatrix                 c10      3
					//   glstate_matrix_projection  c13      2
					//   _WorldSpaceCameraPos       c15      1
					//   _ScreenParams              c16      1
					//   unity_SHBr                 c17      1
					//   unity_SHBg                 c18      1
					//   unity_SHBb                 c19      1
					//   unity_SHC                  c20      1
					//   unity_WorldTransformParams c21      1
					//   _FaceDilate                c22      1
					//   _WeightNormal              c23      1
					//   _WeightBold                c24      1
					//   _ScaleRatioA               c25      1
					//   _VertexOffsetX             c26      1
					//   _VertexOffsetY             c27      1
					//   _GradientScale             c28      1
					//   _ScaleX                    c29      1
					//   _ScaleY                    c30      1
					//   _PerspectiveFilter         c31      1
					//   _MainTex_ST                c32      1
					//   _FaceTex_ST                c33      1
					//
					
					    vs_3_0
					    def c34, 0, 1, 1.5, 0.5
					    def c35, 0.000244140625, 4096, 0.001953125, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_color v5
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_color o5
					    dcl_texcoord4 o6.xy
					    dcl_texcoord5 o7.xyz
					    dcl_texcoord6 o8.xyz
					    mov r0.xy, c34
					    add r0.z, r0.y, -c31.x
					    mul r0.w, c28.x, v4_abs.y
					    mov r1.xy, c16
					    mul r1.zw, r1.xyxy, c13.xyxy
					    add r1.z, r1.w, r1.z
					    mul r1.z, r1.z, c29.x
					    rcp r2.x, r1.z
					    mul r1.xy, r1, c14
					    add r1.x, r1.y, r1.x
					    mul r1.x, r1.x, c30.x
					    rcp r2.y, r1.x
					    add r1.x, c26.x, v0.x
					    add r1.y, c27.x, v0.y
					    mov r1.zw, v0
					    dp4 r2.z, c3, r1
					    mul r2.xy, r2, r2.z
					    mul r2.xy, r2, r2
					    add r2.x, r2.y, r2.x
					    rsq r2.x, r2.x
					    mul r0.w, r0.w, r2.x
					    mul r2.x, r0.w, c34.z
					    mul r0.z, r0.z, r2.x
					    mad r0.w, r0.w, c34.z, -r0.z
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    add r3.xyz, -r2, c15
					    mov o2.w, r2.x
					    mov o3.w, r2.y
					    mov o4.w, r2.z
					    nrm r2.xyz, r3
					    mad r4, c15.xyzx, r0.yyyx, r0.xxxy
					    dp4 r5.x, c7, r4
					    dp4 r5.y, c8, r4
					    dp4 r5.z, c9, r4
					    add r4.xyz, -r1, r5
					    mad r1, r1.xyzx, c34.yyyx, c34.xxxy
					    dp3 r0.x, v2, r4
					    slt r0.y, -r0.x, r0.x
					    slt r0.x, r0.x, -r0.x
					    add r0.x, -r0.x, r0.y
					    mul r4.xyz, r0.x, v2
					    mul r5, r4.y, c8.xyzz
					    mad r5, r4.x, c7.xyzz, r5
					    mad r4, r4.z, c9.xyzz, r5
					    dp3 r0.x, r4.xyww, r4.xyww
					    rsq r0.x, r0.x
					    mul r4, r0.x, r4
					    dp3 r0.x, r4.xyww, r2
					    mad o6.y, r0_abs.x, r0.w, r0.z
					    sge r0.x, c34.x, v4.y
					    mov r2.x, c23.x
					    add r0.y, -r2.x, c24.x
					    mad r0.x, r0.x, r0.y, c23.x
					    mov r2.x, c22.x
					    mul r0.y, r2.x, c25.x
					    mul r0.y, r0.y, c34.w
					    rcp r0.z, c28.x
					    mad o6.x, r0.x, r0.z, r0.y
					    dp3 o7.x, c10, r3
					    dp3 o7.y, c11, r3
					    dp3 o7.z, c12, r3
					    dp4 r6.x, c0, r1
					    dp4 r6.y, c1, r1
					    dp4 r6.z, c2, r1
					    dp4 r6.w, c3, r1
					    mad o1.xy, v3, c32, c32.zwzw
					    mul r0.x, c35.x, v4.x
					    frc r0.y, r0.x
					    add r0.z, -r0.y, r0.x
					    mad r0.w, r0.z, -c35.y, v4.x
					    mul r0.xy, r0.zwzw, c33
					    mov r0.z, c35.z
					    mad o1.zw, r0.xyxy, r0.z, c33
					    mul r0.x, r4.y, r4.y
					    mad r0.x, r4.x, r4.x, -r0.x
					    mul r1, r4.ywzx, r4
					    dp4 r2.x, c17, r1
					    dp4 r2.y, c18, r1
					    dp4 r2.z, c19, r1
					    mad o8.xyz, c20, r0.x, r2
					    dp3 r0.z, c4, v1
					    dp3 r0.x, c5, v1
					    dp3 r0.y, c6, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o2.x, r0.z
					    mul r1.xyz, r0, r4.wxyw
					    mad r1.xyz, r4.ywxw, r0.yzxw, -r1
					    mul r0.z, c21.w, v1.w
					    mul r1.xyz, r0.z, r1
					    mov o2.y, r1.x
					    mov o2.z, r4.x
					    mov o3.x, r0.x
					    mov o4.x, r0.y
					    mov o3.y, r1.y
					    mov o4.y, r1.z
					    mov o3.z, r4.y
					    mov o4.z, r4.w
					    mov o5, v5
					    mad o0.xy, r6.w, c255, r6
					    mov o0.zw, r6
					
					// approximately 106 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						float _FaceDilate;
						vec4 unused_0_2[6];
						mat4x4 _EnvMatrix;
						vec4 unused_0_4[7];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_10[4];
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_15;
						vec4 _MainTex_ST;
						vec4 _FaceTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_4_2[13];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					int u_xlati1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					float u_xlat10;
					int u_xlati10;
					vec2 u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + glstate_matrix_mvp[3];
					    u_xlat15 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat11.x = floor(u_xlat15);
					    u_xlat11.y = (-u_xlat11.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat1.xy = u_xlat11.xy * _FaceTex_ST.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat10 = dot(in_NORMAL0.xyz, u_xlat1.xyz);
					    u_xlati1 = int((0.0<u_xlat10) ? 0xFFFFFFFFu : uint(0));
					    u_xlati10 = int((u_xlat10<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati10 = (-u_xlati1) + u_xlati10;
					    u_xlat10 = float(u_xlati10);
					    u_xlat1.xyz = vec3(u_xlat10) * in_NORMAL0.xyz;
					    u_xlat2.x = dot(u_xlat1.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(u_xlat1.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1 = vec4(u_xlat10) * u_xlat2.xyzz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.wxy * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.ywx * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat1.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    u_xlat4.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat4.xyz;
					    vs_TEXCOORD1.w = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.w = u_xlat4.y;
					    vs_TEXCOORD3.z = u_xlat1.w;
					    vs_TEXCOORD3.w = u_xlat4.z;
					    u_xlat2.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat5.x = u_xlat0.y * glstate_matrix_mvp[1].w;
					    u_xlat0.x = glstate_matrix_mvp[0].w * u_xlat0.x + u_xlat5.x;
					    u_xlat0.x = glstate_matrix_mvp[2].w * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_mvp[3].w * in_POSITION0.w + u_xlat0.x;
					    u_xlat5.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat5.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat5.xy;
					    u_xlat5.xy = u_xlat5.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat0.xy = u_xlat0.xx / u_xlat5.xy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat5.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat5.x = u_xlat0.x * 1.5;
					    u_xlat10 = (-_PerspectiveFilter) + 1.0;
					    u_xlat5.x = u_xlat10 * u_xlat5.x;
					    u_xlat0.x = u_xlat0.x * 1.5 + (-u_xlat5.x);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyw, u_xlat3.xyz);
					    vs_TEXCOORD4.y = abs(u_xlat10) * u_xlat0.x + u_xlat5.x;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat5.x = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x + _WeightNormal;
					    u_xlat0.x = u_xlat0.x / _GradientScale;
					    u_xlat5.x = _FaceDilate * _ScaleRatioA;
					    vs_TEXCOORD4.x = u_xlat5.x * 0.5 + u_xlat0.x;
					    u_xlat0.xyz = u_xlat2.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyz = _EnvMatrix[0].xyz * u_xlat2.xxx + u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = _EnvMatrix[2].xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.x = u_xlat1.y * u_xlat1.y;
					    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat1.ywzx * u_xlat1;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD6.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _EnvMatrix;
					//   float _FaceDilate;
					//   float4 _FaceTex_ST;
					//   float _GradientScale;
					//   float4 _MainTex_ST;
					//   float _PerspectiveFilter;
					//   float _ScaleRatioA;
					//   float _ScaleX;
					//   float _ScaleY;
					//   float4 _ScreenParams;
					//   float _VertexOffsetX;
					//   float _VertexOffsetY;
					//   float _WeightBold;
					//   float _WeightNormal;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 glstate_matrix_projection;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_LightColor[8];
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_LightColor           c0       4
					//   glstate_matrix_mvp         c4       4
					//   unity_ObjectToWorld        c8       3
					//   unity_WorldToObject        c11      3
					//   _EnvMatrix                 c14      3
					//   glstate_matrix_projection  c17      2
					//   _WorldSpaceCameraPos       c19      1
					//   _ScreenParams              c20      1
					//   unity_4LightPosX0          c21      1
					//   unity_4LightPosY0          c22      1
					//   unity_4LightPosZ0          c23      1
					//   unity_4LightAtten0         c24      1
					//   unity_SHBr                 c25      1
					//   unity_SHBg                 c26      1
					//   unity_SHBb                 c27      1
					//   unity_SHC                  c28      1
					//   unity_WorldTransformParams c29      1
					//   _FaceDilate                c30      1
					//   _WeightNormal              c31      1
					//   _WeightBold                c32      1
					//   _ScaleRatioA               c33      1
					//   _VertexOffsetX             c34      1
					//   _VertexOffsetY             c35      1
					//   _GradientScale             c36      1
					//   _ScaleX                    c37      1
					//   _ScaleY                    c38      1
					//   _PerspectiveFilter         c39      1
					//   _MainTex_ST                c40      1
					//   _FaceTex_ST                c41      1
					//
					
					    vs_3_0
					    def c42, 0, 1, 1.5, 0.5
					    def c43, 0.000244140625, 4096, 0.001953125, 9.99999997e-007
					    def c44, 0.305306017, 0.682171106, 0.0125228781, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_color v5
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_color o5
					    dcl_texcoord4 o6.xy
					    dcl_texcoord5 o7.xyz
					    dcl_texcoord6 o8.xyz
					    mov r0.xy, c42
					    add r0.z, r0.y, -c39.x
					    mul r0.w, c36.x, v4_abs.y
					    mov r1.xy, c20
					    mul r1.zw, r1.xyxy, c17.xyxy
					    add r1.z, r1.w, r1.z
					    mul r1.z, r1.z, c37.x
					    rcp r2.x, r1.z
					    mul r1.xy, r1, c18
					    add r1.x, r1.y, r1.x
					    mul r1.x, r1.x, c38.x
					    rcp r2.y, r1.x
					    add r1.x, c34.x, v0.x
					    add r1.y, c35.x, v0.y
					    mov r1.zw, v0
					    dp4 r2.z, c7, r1
					    mul r2.xy, r2, r2.z
					    mul r2.xy, r2, r2
					    add r2.x, r2.y, r2.x
					    rsq r2.x, r2.x
					    mul r0.w, r0.w, r2.x
					    mul r2.x, r0.w, c42.z
					    mul r0.z, r0.z, r2.x
					    mad r0.w, r0.w, c42.z, -r0.z
					    dp4 r2.x, c8, r1
					    dp4 r2.y, c9, r1
					    dp4 r2.z, c10, r1
					    add r3.xyz, -r2, c19
					    nrm r4.xyz, r3
					    mad r5, c19.xyzx, r0.yyyx, r0.xxxy
					    dp4 r6.x, c11, r5
					    dp4 r6.y, c12, r5
					    dp4 r6.z, c13, r5
					    add r5.xyz, -r1, r6
					    mad r1, r1.xyzx, c42.yyyx, c42.xxxy
					    dp3 r0.x, v2, r5
					    slt r2.w, -r0.x, r0.x
					    slt r0.x, r0.x, -r0.x
					    add r0.x, -r0.x, r2.w
					    mul r5.xyz, r0.x, v2
					    mul r6, r5.y, c12.xyzz
					    mad r6, r5.x, c11.xyzz, r6
					    mad r5, r5.z, c13.xyzz, r6
					    dp3 r0.x, r5.xyww, r5.xyww
					    rsq r0.x, r0.x
					    mul r5, r0.x, r5
					    dp3 r0.x, r5.xyww, r4
					    mad o6.y, r0_abs.x, r0.w, r0.z
					    sge r0.x, c42.x, v4.y
					    mov r4.x, c31.x
					    add r0.z, -r4.x, c32.x
					    mad r0.x, r0.x, r0.z, c31.x
					    mov r4.x, c30.x
					    mul r0.z, r4.x, c33.x
					    mul r0.z, r0.z, c42.w
					    rcp r0.w, c36.x
					    mad o6.x, r0.x, r0.w, r0.z
					    dp3 o7.x, c14, r3
					    dp3 o7.y, c15, r3
					    dp3 o7.z, c16, r3
					    dp4 r7.x, c4, r1
					    dp4 r7.y, c5, r1
					    dp4 r7.z, c6, r1
					    dp4 r7.w, c7, r1
					    mad o1.xy, v3, c40, c40.zwzw
					    mul r0.x, c43.x, v4.x
					    frc r0.z, r0.x
					    add r0.z, -r0.z, r0.x
					    mad r0.w, r0.z, -c43.y, v4.x
					    mul r0.xz, r0.zyww, c41.xyyw
					    mov r1.z, c43.z
					    mad o1.zw, r0.xyxz, r1.z, c41
					    add r1, -r2.z, c23
					    mov o4.w, r2.z
					    add r3, -r2.x, c21
					    mov o2.w, r2.x
					    add r4, -r2.y, c22
					    mov o3.w, r2.y
					    mul r2, r5.y, r4
					    mul r4, r4, r4
					    mad r4, r3, r3, r4
					    mad r2, r3, r5.x, r2
					    mad r2, r1, r5.wwzw, r2
					    mad r1, r1, r1, r4
					    max r1, r1, c43.w
					    rsq r3.x, r1.x
					    rsq r3.y, r1.y
					    rsq r3.z, r1.z
					    rsq r3.w, r1.w
					    mad r0, r1, c24, r0.y
					    mul r1, r2, r3
					    max r1, r1, c42.x
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    rcp r2.w, r0.w
					    mul r0, r1, r2
					    mul r1.xyz, r0.y, c1
					    mad r1.xyz, c0, r0.x, r1
					    mad r0.xyz, c2, r0.z, r1
					    mad r0.xyz, c3, r0.w, r0
					    mad r1.xyz, r0, c44.x, c44.y
					    mad r1.xyz, r0, r1, c44.z
					    mul r0.w, r5.y, r5.y
					    mad r0.w, r5.x, r5.x, -r0.w
					    mul r2, r5.ywzx, r5
					    dp4 r3.x, c25, r2
					    dp4 r3.y, c26, r2
					    dp4 r3.z, c27, r2
					    mad r2.xyz, c28, r0.w, r3
					    mad o8.xyz, r0, r1, r2
					    dp3 r0.z, c8, v1
					    dp3 r0.x, c9, v1
					    dp3 r0.y, c10, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o2.x, r0.z
					    mul r1.xyz, r0, r5.wxyw
					    mad r1.xyz, r5.ywxw, r0.yzxw, -r1
					    mul r0.z, c29.w, v1.w
					    mul r1.xyz, r0.z, r1
					    mov o2.y, r1.x
					    mov o2.z, r5.x
					    mov o3.x, r0.x
					    mov o4.x, r0.y
					    mov o3.y, r1.y
					    mov o4.y, r1.z
					    mov o3.z, r5.y
					    mov o4.z, r5.w
					    mov o5, v5
					    mad o0.xy, r7.w, c255, r7
					    mov o0.zw, r7
					
					// approximately 135 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						float _FaceDilate;
						vec4 unused_0_2[6];
						mat4x4 _EnvMatrix;
						vec4 unused_0_4[7];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_10[4];
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_15;
						vec4 _MainTex_ST;
						vec4 _FaceTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_4_2[13];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec2 u_xlat5;
					float u_xlat10;
					int u_xlati10;
					bool u_xlatb10;
					vec2 u_xlat11;
					float u_xlat15;
					float u_xlat16;
					int u_xlati16;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + glstate_matrix_mvp[3];
					    u_xlat15 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat11.x = floor(u_xlat15);
					    u_xlat11.y = (-u_xlat11.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat1.xy = u_xlat11.xy * _FaceTex_ST.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat10 = dot(in_NORMAL0.xyz, u_xlat2.xyz);
					    u_xlati16 = int((0.0<u_xlat10) ? 0xFFFFFFFFu : uint(0));
					    u_xlati10 = int((u_xlat10<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati10 = (-u_xlati16) + u_xlati10;
					    u_xlat10 = float(u_xlati10);
					    u_xlat2.xyz = vec3(u_xlat10) * in_NORMAL0.xyz;
					    u_xlat3.x = dot(u_xlat2.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(u_xlat2.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(u_xlat2.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2 = vec4(u_xlat10) * u_xlat3.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    u_xlat4.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat4.xyz;
					    vs_TEXCOORD1.w = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD2.w = u_xlat4.y;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_TEXCOORD3.w = u_xlat4.z;
					    vs_COLOR0 = in_COLOR0;
					    u_xlatb10 = 0.0>=in_TEXCOORD1.y;
					    u_xlat10 = u_xlatb10 ? 1.0 : float(0.0);
					    u_xlat15 = (-_WeightNormal) + _WeightBold;
					    u_xlat10 = u_xlat10 * u_xlat15 + _WeightNormal;
					    u_xlat10 = u_xlat10 / _GradientScale;
					    u_xlat15 = _FaceDilate * _ScaleRatioA;
					    vs_TEXCOORD4.x = u_xlat15 * 0.5 + u_xlat10;
					    u_xlat5.x = u_xlat0.y * glstate_matrix_mvp[1].w;
					    u_xlat0.x = glstate_matrix_mvp[0].w * u_xlat0.x + u_xlat5.x;
					    u_xlat0.x = glstate_matrix_mvp[2].w * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_mvp[3].w * in_POSITION0.w + u_xlat0.x;
					    u_xlat5.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat5.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat5.xy;
					    u_xlat5.xy = u_xlat5.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat0.xy = u_xlat0.xx / u_xlat5.xy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat5.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat5.x = u_xlat0.x * 1.5;
					    u_xlat10 = (-_PerspectiveFilter) + 1.0;
					    u_xlat5.x = u_xlat10 * u_xlat5.x;
					    u_xlat0.x = u_xlat0.x * 1.5 + (-u_xlat5.x);
					    u_xlat1.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat10 = dot(u_xlat2.xyw, u_xlat3.xyz);
					    vs_TEXCOORD4.y = abs(u_xlat10) * u_xlat0.x + u_xlat5.x;
					    u_xlat0.xyz = u_xlat1.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyz = _EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = _EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
					    u_xlat0 = (-u_xlat4.yyyy) + unity_4LightPosY0;
					    u_xlat1 = u_xlat2.yyyy * u_xlat0;
					    u_xlat0 = u_xlat0 * u_xlat0;
					    u_xlat3 = (-u_xlat4.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat4.zzzz) + unity_4LightPosZ0;
					    u_xlat1 = u_xlat3 * u_xlat2.xxxx + u_xlat1;
					    u_xlat0 = u_xlat3 * u_xlat3 + u_xlat0;
					    u_xlat0 = u_xlat4 * u_xlat4 + u_xlat0;
					    u_xlat1 = u_xlat4 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat15 = u_xlat2.y * u_xlat2.y;
					    u_xlat15 = u_xlat2.x * u_xlat2.x + (-u_xlat15);
					    u_xlat2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _EnvMatrix;
					//   float _FaceDilate;
					//   float4 _FaceTex_ST;
					//   float _GradientScale;
					//   float4 _MainTex_ST;
					//   float _PerspectiveFilter;
					//   float _ScaleRatioA;
					//   float _ScaleX;
					//   float _ScaleY;
					//   float4 _ScreenParams;
					//   float _VertexOffsetX;
					//   float _VertexOffsetY;
					//   float _WeightBold;
					//   float _WeightNormal;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 glstate_matrix_projection;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   _EnvMatrix                 c10      3
					//   glstate_matrix_projection  c13      2
					//   _WorldSpaceCameraPos       c15      1
					//   _ScreenParams              c16      1
					//   unity_SHBr                 c17      1
					//   unity_SHBg                 c18      1
					//   unity_SHBb                 c19      1
					//   unity_SHC                  c20      1
					//   unity_WorldTransformParams c21      1
					//   _FaceDilate                c22      1
					//   _WeightNormal              c23      1
					//   _WeightBold                c24      1
					//   _ScaleRatioA               c25      1
					//   _VertexOffsetX             c26      1
					//   _VertexOffsetY             c27      1
					//   _GradientScale             c28      1
					//   _ScaleX                    c29      1
					//   _ScaleY                    c30      1
					//   _PerspectiveFilter         c31      1
					//   _MainTex_ST                c32      1
					//   _FaceTex_ST                c33      1
					//
					
					    vs_3_0
					    def c34, 0, 1, 1.5, 0.5
					    def c35, 0.000244140625, 4096, 0.001953125, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_color v5
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_color o5
					    dcl_texcoord4 o6.xy
					    dcl_texcoord5 o7.xyz
					    dcl_texcoord6 o8.xyz
					    dcl_texcoord7 o9.x
					    mov r0.xy, c34
					    add r0.z, r0.y, -c31.x
					    mul r0.w, c28.x, v4_abs.y
					    mov r1.xy, c16
					    mul r1.zw, r1.xyxy, c13.xyxy
					    add r1.z, r1.w, r1.z
					    mul r1.z, r1.z, c29.x
					    rcp r2.x, r1.z
					    mul r1.xy, r1, c14
					    add r1.x, r1.y, r1.x
					    mul r1.x, r1.x, c30.x
					    rcp r2.y, r1.x
					    add r1.x, c26.x, v0.x
					    add r1.y, c27.x, v0.y
					    mov r1.zw, v0
					    dp4 r2.z, c3, r1
					    mul r2.xy, r2, r2.z
					    mul r2.xy, r2, r2
					    add r2.x, r2.y, r2.x
					    rsq r2.x, r2.x
					    mul r0.w, r0.w, r2.x
					    mul r2.x, r0.w, c34.z
					    mul r0.z, r0.z, r2.x
					    mad r0.w, r0.w, c34.z, -r0.z
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    add r3.xyz, -r2, c15
					    mov o2.w, r2.x
					    mov o3.w, r2.y
					    mov o4.w, r2.z
					    nrm r2.xyz, r3
					    mad r4, c15.xyzx, r0.yyyx, r0.xxxy
					    dp4 r5.x, c7, r4
					    dp4 r5.y, c8, r4
					    dp4 r5.z, c9, r4
					    add r4.xyz, -r1, r5
					    mad r1, r1.xyzx, c34.yyyx, c34.xxxy
					    dp3 r0.x, v2, r4
					    slt r0.y, -r0.x, r0.x
					    slt r0.x, r0.x, -r0.x
					    add r0.x, -r0.x, r0.y
					    mul r4.xyz, r0.x, v2
					    mul r5, r4.y, c8.xyzz
					    mad r5, r4.x, c7.xyzz, r5
					    mad r4, r4.z, c9.xyzz, r5
					    dp3 r0.x, r4.xyww, r4.xyww
					    rsq r0.x, r0.x
					    mul r4, r0.x, r4
					    dp3 r0.x, r4.xyww, r2
					    mad o6.y, r0_abs.x, r0.w, r0.z
					    sge r0.x, c34.x, v4.y
					    mov r2.x, c23.x
					    add r0.y, -r2.x, c24.x
					    mad r0.x, r0.x, r0.y, c23.x
					    mov r2.x, c22.x
					    mul r0.y, r2.x, c25.x
					    mul r0.y, r0.y, c34.w
					    rcp r0.z, c28.x
					    mad o6.x, r0.x, r0.z, r0.y
					    dp3 o7.x, c10, r3
					    dp3 o7.y, c11, r3
					    dp3 o7.z, c12, r3
					    dp4 r6.x, c0, r1
					    dp4 r6.y, c1, r1
					    dp4 r6.w, c3, r1
					    dp4 r0.x, c2, r1
					    mad o1.xy, v3, c32, c32.zwzw
					    mul r0.y, c35.x, v4.x
					    frc r0.z, r0.y
					    add r0.z, -r0.z, r0.y
					    mad r0.w, r0.z, -c35.y, v4.x
					    mul r0.yz, r0.xzww, c33.xxyw
					    mov r1.z, c35.z
					    mad o1.zw, r0.xyyz, r1.z, c33
					    mul r0.y, r4.y, r4.y
					    mad r0.y, r4.x, r4.x, -r0.y
					    mul r1, r4.ywzx, r4
					    dp4 r2.x, c17, r1
					    dp4 r2.y, c18, r1
					    dp4 r2.z, c19, r1
					    mad o8.xyz, c20, r0.y, r2
					    mov r6.z, r0.x
					    mov o9.x, r0.x
					    dp3 r0.z, c4, v1
					    dp3 r0.x, c5, v1
					    dp3 r0.y, c6, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o2.x, r0.z
					    mul r1.xyz, r0, r4.wxyw
					    mad r1.xyz, r4.ywxw, r0.yzxw, -r1
					    mul r0.z, c21.w, v1.w
					    mul r1.xyz, r0.z, r1
					    mov o2.y, r1.x
					    mov o2.z, r4.x
					    mov o3.x, r0.x
					    mov o4.x, r0.y
					    mov o3.y, r1.y
					    mov o4.y, r1.z
					    mov o3.z, r4.y
					    mov o4.z, r4.w
					    mov o5, v5
					    mad o0.xy, r6.w, c255, r6
					    mov o0.zw, r6
					
					// approximately 108 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						float _FaceDilate;
						vec4 unused_0_2[6];
						mat4x4 _EnvMatrix;
						vec4 unused_0_4[7];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_10[4];
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_15;
						vec4 _MainTex_ST;
						vec4 _FaceTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_4_2[13];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD4;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					int u_xlati1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					float u_xlat10;
					int u_xlati10;
					vec2 u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z;
					    u_xlat15 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat11.x = floor(u_xlat15);
					    u_xlat11.y = (-u_xlat11.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat1.xy = u_xlat11.xy * _FaceTex_ST.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat10 = dot(in_NORMAL0.xyz, u_xlat1.xyz);
					    u_xlati1 = int((0.0<u_xlat10) ? 0xFFFFFFFFu : uint(0));
					    u_xlati10 = int((u_xlat10<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati10 = (-u_xlati1) + u_xlati10;
					    u_xlat10 = float(u_xlati10);
					    u_xlat1.xyz = vec3(u_xlat10) * in_NORMAL0.xyz;
					    u_xlat2.x = dot(u_xlat1.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(u_xlat1.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1 = vec4(u_xlat10) * u_xlat2.xyzz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.wxy * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.ywx * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat1.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    u_xlat4.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat4.xyz;
					    vs_TEXCOORD1.w = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.w = u_xlat4.y;
					    vs_TEXCOORD3.z = u_xlat1.w;
					    vs_TEXCOORD3.w = u_xlat4.z;
					    u_xlat2.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat5.x = u_xlat0.y * glstate_matrix_mvp[1].w;
					    u_xlat0.x = glstate_matrix_mvp[0].w * u_xlat0.x + u_xlat5.x;
					    u_xlat0.x = glstate_matrix_mvp[2].w * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_mvp[3].w * in_POSITION0.w + u_xlat0.x;
					    u_xlat5.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat5.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat5.xy;
					    u_xlat5.xy = u_xlat5.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat0.xy = u_xlat0.xx / u_xlat5.xy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat5.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat5.x = u_xlat0.x * 1.5;
					    u_xlat10 = (-_PerspectiveFilter) + 1.0;
					    u_xlat5.x = u_xlat10 * u_xlat5.x;
					    u_xlat0.x = u_xlat0.x * 1.5 + (-u_xlat5.x);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyw, u_xlat3.xyz);
					    vs_TEXCOORD4.y = abs(u_xlat10) * u_xlat0.x + u_xlat5.x;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat5.x = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x + _WeightNormal;
					    u_xlat0.x = u_xlat0.x / _GradientScale;
					    u_xlat5.x = _FaceDilate * _ScaleRatioA;
					    vs_TEXCOORD4.x = u_xlat5.x * 0.5 + u_xlat0.x;
					    u_xlat0.xyz = u_xlat2.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyz = _EnvMatrix[0].xyz * u_xlat2.xxx + u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = _EnvMatrix[2].xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.x = u_xlat1.y * u_xlat1.y;
					    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat1.ywzx * u_xlat1;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD6.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _EnvMatrix;
					//   float _FaceDilate;
					//   float4 _FaceTex_ST;
					//   float _GradientScale;
					//   float4 _MainTex_ST;
					//   float _PerspectiveFilter;
					//   float _ScaleRatioA;
					//   float _ScaleX;
					//   float _ScaleY;
					//   float4 _ScreenParams;
					//   float _VertexOffsetX;
					//   float _VertexOffsetY;
					//   float _WeightBold;
					//   float _WeightNormal;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 glstate_matrix_projection;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_LightColor[8];
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_LightColor           c0       4
					//   glstate_matrix_mvp         c4       4
					//   unity_ObjectToWorld        c8       3
					//   unity_WorldToObject        c11      3
					//   _EnvMatrix                 c14      3
					//   glstate_matrix_projection  c17      2
					//   _WorldSpaceCameraPos       c19      1
					//   _ScreenParams              c20      1
					//   unity_4LightPosX0          c21      1
					//   unity_4LightPosY0          c22      1
					//   unity_4LightPosZ0          c23      1
					//   unity_4LightAtten0         c24      1
					//   unity_SHBr                 c25      1
					//   unity_SHBg                 c26      1
					//   unity_SHBb                 c27      1
					//   unity_SHC                  c28      1
					//   unity_WorldTransformParams c29      1
					//   _FaceDilate                c30      1
					//   _WeightNormal              c31      1
					//   _WeightBold                c32      1
					//   _ScaleRatioA               c33      1
					//   _VertexOffsetX             c34      1
					//   _VertexOffsetY             c35      1
					//   _GradientScale             c36      1
					//   _ScaleX                    c37      1
					//   _ScaleY                    c38      1
					//   _PerspectiveFilter         c39      1
					//   _MainTex_ST                c40      1
					//   _FaceTex_ST                c41      1
					//
					
					    vs_3_0
					    def c42, 0, 1, 1.5, 0.5
					    def c43, 0.000244140625, 4096, 0.001953125, 9.99999997e-007
					    def c44, 0.305306017, 0.682171106, 0.0125228781, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_color v5
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_color o5
					    dcl_texcoord4 o6.xy
					    dcl_texcoord5 o7.xyz
					    dcl_texcoord6 o8.xyz
					    dcl_texcoord7 o9.x
					    mov r0.xy, c42
					    add r0.z, r0.y, -c39.x
					    mul r0.w, c36.x, v4_abs.y
					    mov r1.xy, c20
					    mul r1.zw, r1.xyxy, c17.xyxy
					    add r1.z, r1.w, r1.z
					    mul r1.z, r1.z, c37.x
					    rcp r2.x, r1.z
					    mul r1.xy, r1, c18
					    add r1.x, r1.y, r1.x
					    mul r1.x, r1.x, c38.x
					    rcp r2.y, r1.x
					    add r1.x, c34.x, v0.x
					    add r1.y, c35.x, v0.y
					    mov r1.zw, v0
					    dp4 r2.z, c7, r1
					    mul r2.xy, r2, r2.z
					    mul r2.xy, r2, r2
					    add r2.x, r2.y, r2.x
					    rsq r2.x, r2.x
					    mul r0.w, r0.w, r2.x
					    mul r2.x, r0.w, c42.z
					    mul r0.z, r0.z, r2.x
					    mad r0.w, r0.w, c42.z, -r0.z
					    dp4 r2.x, c8, r1
					    dp4 r2.y, c9, r1
					    dp4 r2.z, c10, r1
					    add r3.xyz, -r2, c19
					    nrm r4.xyz, r3
					    mad r5, c19.xyzx, r0.yyyx, r0.xxxy
					    dp4 r6.x, c11, r5
					    dp4 r6.y, c12, r5
					    dp4 r6.z, c13, r5
					    add r5.xyz, -r1, r6
					    mad r1, r1.xyzx, c42.yyyx, c42.xxxy
					    dp3 r0.x, v2, r5
					    slt r2.w, -r0.x, r0.x
					    slt r0.x, r0.x, -r0.x
					    add r0.x, -r0.x, r2.w
					    mul r5.xyz, r0.x, v2
					    mul r6, r5.y, c12.xyzz
					    mad r6, r5.x, c11.xyzz, r6
					    mad r5, r5.z, c13.xyzz, r6
					    dp3 r0.x, r5.xyww, r5.xyww
					    rsq r0.x, r0.x
					    mul r5, r0.x, r5
					    dp3 r0.x, r5.xyww, r4
					    mad o6.y, r0_abs.x, r0.w, r0.z
					    sge r0.x, c42.x, v4.y
					    mov r4.x, c31.x
					    add r0.z, -r4.x, c32.x
					    mad r0.x, r0.x, r0.z, c31.x
					    mov r4.x, c30.x
					    mul r0.z, r4.x, c33.x
					    mul r0.z, r0.z, c42.w
					    rcp r0.w, c36.x
					    mad o6.x, r0.x, r0.w, r0.z
					    dp3 o7.x, c14, r3
					    dp3 o7.y, c15, r3
					    dp3 o7.z, c16, r3
					    dp4 r7.x, c4, r1
					    dp4 r7.y, c5, r1
					    dp4 r7.w, c7, r1
					    dp4 r0.x, c6, r1
					    mad o1.xy, v3, c40, c40.zwzw
					    mul r0.z, c43.x, v4.x
					    frc r0.w, r0.z
					    add r0.z, -r0.w, r0.z
					    mad r0.w, r0.z, -c43.y, v4.x
					    mul r0.zw, r0, c41.xyxy
					    mov r1.z, c43.z
					    mad o1.zw, r0, r1.z, c41
					    add r1, -r2.z, c23
					    mov o4.w, r2.z
					    add r3, -r2.x, c21
					    mov o2.w, r2.x
					    add r4, -r2.y, c22
					    mov o3.w, r2.y
					    mul r2, r5.y, r4
					    mul r4, r4, r4
					    mad r4, r3, r3, r4
					    mad r2, r3, r5.x, r2
					    mad r2, r1, r5.wwzw, r2
					    mad r1, r1, r1, r4
					    max r1, r1, c43.w
					    rsq r3.x, r1.x
					    rsq r3.y, r1.y
					    rsq r3.z, r1.z
					    rsq r3.w, r1.w
					    mad r1, r1, c24, r0.y
					    mul r2, r2, r3
					    max r2, r2, c42.x
					    rcp r3.x, r1.x
					    rcp r3.y, r1.y
					    rcp r3.z, r1.z
					    rcp r3.w, r1.w
					    mul r1, r2, r3
					    mul r0.yzw, r1.y, c1.xxyz
					    mad r0.yzw, c0.xxyz, r1.x, r0
					    mad r0.yzw, c2.xxyz, r1.z, r0
					    mad r0.yzw, c3.xxyz, r1.w, r0
					    mad r1.xyz, r0.yzww, c44.x, c44.y
					    mad r1.xyz, r0.yzww, r1, c44.z
					    mul r1.w, r5.y, r5.y
					    mad r1.w, r5.x, r5.x, -r1.w
					    mul r2, r5.ywzx, r5
					    dp4 r3.x, c25, r2
					    dp4 r3.y, c26, r2
					    dp4 r3.z, c27, r2
					    mad r2.xyz, c28, r1.w, r3
					    mad o8.xyz, r0.yzww, r1, r2
					    mov r7.z, r0.x
					    mov o9.x, r0.x
					    dp3 r0.z, c8, v1
					    dp3 r0.x, c9, v1
					    dp3 r0.y, c10, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o2.x, r0.z
					    mul r1.xyz, r0, r5.wxyw
					    mad r1.xyz, r5.ywxw, r0.yzxw, -r1
					    mul r0.z, c29.w, v1.w
					    mul r1.xyz, r0.z, r1
					    mov o2.y, r1.x
					    mov o2.z, r5.x
					    mov o3.x, r0.x
					    mov o4.x, r0.y
					    mov o3.y, r1.y
					    mov o4.y, r1.z
					    mov o3.z, r5.y
					    mov o4.z, r5.w
					    mov o5, v5
					    mad o0.xy, r7.w, c255, r7
					    mov o0.zw, r7
					
					// approximately 137 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						float _FaceDilate;
						vec4 unused_0_2[6];
						mat4x4 _EnvMatrix;
						vec4 unused_0_4[7];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_10[4];
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_15;
						vec4 _MainTex_ST;
						vec4 _FaceTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_4_2[13];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD4;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec2 u_xlat5;
					float u_xlat10;
					int u_xlati10;
					bool u_xlatb10;
					vec2 u_xlat11;
					float u_xlat15;
					float u_xlat16;
					int u_xlati16;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z;
					    u_xlat15 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat11.x = floor(u_xlat15);
					    u_xlat11.y = (-u_xlat11.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat1.xy = u_xlat11.xy * _FaceTex_ST.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat10 = dot(in_NORMAL0.xyz, u_xlat2.xyz);
					    u_xlati16 = int((0.0<u_xlat10) ? 0xFFFFFFFFu : uint(0));
					    u_xlati10 = int((u_xlat10<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati10 = (-u_xlati16) + u_xlati10;
					    u_xlat10 = float(u_xlati10);
					    u_xlat2.xyz = vec3(u_xlat10) * in_NORMAL0.xyz;
					    u_xlat3.x = dot(u_xlat2.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(u_xlat2.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(u_xlat2.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2 = vec4(u_xlat10) * u_xlat3.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    u_xlat4.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat4.xyz;
					    vs_TEXCOORD1.w = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD2.w = u_xlat4.y;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_TEXCOORD3.w = u_xlat4.z;
					    vs_COLOR0 = in_COLOR0;
					    u_xlatb10 = 0.0>=in_TEXCOORD1.y;
					    u_xlat10 = u_xlatb10 ? 1.0 : float(0.0);
					    u_xlat15 = (-_WeightNormal) + _WeightBold;
					    u_xlat10 = u_xlat10 * u_xlat15 + _WeightNormal;
					    u_xlat10 = u_xlat10 / _GradientScale;
					    u_xlat15 = _FaceDilate * _ScaleRatioA;
					    vs_TEXCOORD4.x = u_xlat15 * 0.5 + u_xlat10;
					    u_xlat5.x = u_xlat0.y * glstate_matrix_mvp[1].w;
					    u_xlat0.x = glstate_matrix_mvp[0].w * u_xlat0.x + u_xlat5.x;
					    u_xlat0.x = glstate_matrix_mvp[2].w * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_mvp[3].w * in_POSITION0.w + u_xlat0.x;
					    u_xlat5.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat5.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat5.xy;
					    u_xlat5.xy = u_xlat5.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat0.xy = u_xlat0.xx / u_xlat5.xy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat5.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat5.x = u_xlat0.x * 1.5;
					    u_xlat10 = (-_PerspectiveFilter) + 1.0;
					    u_xlat5.x = u_xlat10 * u_xlat5.x;
					    u_xlat0.x = u_xlat0.x * 1.5 + (-u_xlat5.x);
					    u_xlat1.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat10 = dot(u_xlat2.xyw, u_xlat3.xyz);
					    vs_TEXCOORD4.y = abs(u_xlat10) * u_xlat0.x + u_xlat5.x;
					    u_xlat0.xyz = u_xlat1.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyz = _EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = _EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
					    u_xlat0 = (-u_xlat4.yyyy) + unity_4LightPosY0;
					    u_xlat1 = u_xlat2.yyyy * u_xlat0;
					    u_xlat0 = u_xlat0 * u_xlat0;
					    u_xlat3 = (-u_xlat4.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat4.zzzz) + unity_4LightPosZ0;
					    u_xlat1 = u_xlat3 * u_xlat2.xxxx + u_xlat1;
					    u_xlat0 = u_xlat3 * u_xlat3 + u_xlat0;
					    u_xlat0 = u_xlat4 * u_xlat4 + u_xlat0;
					    u_xlat1 = u_xlat4 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat15 = u_xlat2.y * u_xlat2.y;
					    u_xlat15 = u_xlat2.x * u_xlat2.x + (-u_xlat15);
					    u_xlat2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _FaceColor;
					//   sampler2D _FaceTex;
					//   float _FaceUVSpeedX;
					//   float _FaceUVSpeedY;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float4 _OutlineColor;
					//   float _OutlineSoftness;
					//   sampler2D _OutlineTex;
					//   float _OutlineUVSpeedX;
					//   float _OutlineUVSpeedY;
					//   float _OutlineWidth;
					//   float _ScaleRatioA;
					//   float4 _Time;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _Time                c0       1
					//   _WorldSpaceLightPos0 c1       1
					//   unity_SHAr           c2       1
					//   unity_SHAg           c3       1
					//   unity_SHAb           c4       1
					//   _LightColor0         c5       1
					//   _FaceUVSpeedX        c6       1
					//   _FaceUVSpeedY        c7       1
					//   _FaceColor           c8       1
					//   _OutlineSoftness     c9       1
					//   _OutlineUVSpeedX     c10      1
					//   _OutlineUVSpeedY     c11      1
					//   _OutlineColor        c12      1
					//   _OutlineWidth        c13      1
					//   _ScaleRatioA         c14      1
					//   _FaceTex             s0       1
					//   _OutlineTex          s1       1
					//   _MainTex             s2       1
					//
					
					    ps_3_0
					    def c15, 0.5, 1, -9.99999975e-005, 10000
					    def c16, 1.05499995, -0.0549999997, 0, 0
					    def c17, 1, 0, 0.416666657, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1.z
					    dcl_texcoord2 v2.z
					    dcl_texcoord3 v3.z
					    dcl_color_pp v4
					    dcl_texcoord4 v5.xy
					    dcl_texcoord6_pp v6.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mov r0.x, c14.x
					    mul r0.y, r0.x, c13.x
					    mad r0.z, r0.y, -v5.y, c15.y
					    mul_pp r0.y, r0.y, v5.y
					    rsq r0.w, r0.y
					    rcp_pp r0.w, r0.w
					    cmp_pp r0.z, r0.z, r0.w, c15.y
					    texld r1, v0, s2
					    add r0.w, -r1.w, c15.x
					    add r0.w, r0.w, -v5.x
					    mad_pp r0.w, r0.w, v5.y, c15.x
					    mad_sat_pp r1.x, r0.y, c15.x, r0.w
					    mad_pp r0.y, r0.y, -c15.x, r0.w
					    mul_pp r0.z, r0.z, r1.x
					    mov r1.y, c0.y
					    mad r2.x, c10.x, r1.y, v0.z
					    mad r2.y, c11.x, r1.y, v0.w
					    texld r2, r2, s1
					    mul_pp r1.xzw, r2.xyyz, c12.xyyz
					    mul r0.w, c12.w, v4.w
					    mul_pp r2.w, r2.w, r0.w
					    mul_pp r2.xyz, r1.xzww, r2.w
					    mad r3.x, c6.x, r1.y, v0.z
					    mad r3.y, c7.x, r1.y, v0.w
					    texld r1, r3, s0
					    mul r3, c8, v4
					    mul_pp r1, r1, r3
					    mul_pp r1.xyz, r1.w, r1
					    lrp_pp r3, r0.z, r2, r1
					    mul r0.x, r0.x, c9.x
					    mul_pp r0.z, r0.x, v5.y
					    mad_pp r0.x, r0.x, v5.y, c15.y
					    rcp r0.x, r0.x
					    mad_pp r0.y, r0.z, c15.x, r0.y
					    mul_sat_pp r0.x, r0.x, r0.y
					    add_pp r0.x, -r0.x, c15.y
					    mad r0.y, r3.w, r0.x, c15.z
					    mul_pp r1, r0.x, r3
					    rcp r0.x, r1.w
					    cmp r0.x, r0.y, r0.x, c15.w
					    mul_pp r0.xyz, r0.x, r1
					    mov_pp oC0.w, r1.w
					    mul_pp r1.xyz, r0, c5
					    mad r2.xw, v1.z, c17.xyzy, c17.yyzx
					    mov r2.y, v2.z
					    mov r2.z, v3.z
					    dp4_pp r3.x, c2, r2
					    dp4_pp r3.y, c3, r2
					    dp4_pp r3.z, c4, r2
					    dp3_pp r0.w, r2, c1
					    max_pp r1.w, r0.w, c17.y
					    add_pp r2.xyz, r3, v6
					    max_pp r3.xyz, r2, c17.y
					    log_pp r2.x, r3.x
					    log_pp r2.y, r3.y
					    log_pp r2.z, r3.z
					    mul_pp r2.xyz, r2, c17.z
					    exp_pp r3.x, r2.x
					    exp_pp r3.y, r2.y
					    exp_pp r3.z, r2.z
					    mad_pp r2.xyz, r3, c16.x, c16.y
					    max_pp r3.xyz, r2, c17.y
					    mul_pp r0.xyz, r0, r3
					    mad_pp oC0.xyz, r1, r1.w, r0
					
					// approximately 64 instruction slots used (3 texture, 61 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _FaceUVSpeedX;
						float _FaceUVSpeedY;
						vec4 _FaceColor;
						float _OutlineSoftness;
						float _OutlineUVSpeedX;
						float _OutlineUVSpeedY;
						vec4 _OutlineColor;
						float _OutlineWidth;
						vec4 unused_0_11[15];
						float _ScaleRatioA;
						vec4 unused_0_13[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[4];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _FaceTex;
					uniform  sampler2D _OutlineTex;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat10;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = (-u_xlat0.w) + 0.5;
					    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.x);
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.y + 0.5;
					    u_xlat5.x = _OutlineWidth * _ScaleRatioA;
					    u_xlat5.y = _OutlineSoftness * _ScaleRatioA;
					    u_xlat5.xz = u_xlat5.xy * vs_TEXCOORD4.yy;
					    u_xlat1 = vs_COLOR0 * _FaceColor;
					    u_xlat2.x = vs_COLOR0.w * _OutlineColor.w;
					    u_xlat7.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat3 = texture(_FaceTex, u_xlat7.xy);
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat7.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat3 = texture(_OutlineTex, u_xlat7.xy);
					    u_xlat7.xyz = u_xlat3.xyz * _OutlineColor.xyz;
					    u_xlat3.w = u_xlat2.x * u_xlat3.w;
					    u_xlat2.x = (-u_xlat5.x) * 0.5 + u_xlat0.x;
					    u_xlat15 = u_xlat5.z * 0.5 + u_xlat2.x;
					    u_xlat10 = u_xlat5.y * vs_TEXCOORD4.y + 1.0;
					    u_xlat10 = u_xlat15 / u_xlat10;
					    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
					    u_xlat10 = (-u_xlat10) + 1.0;
					    u_xlat0.x = u_xlat5.x * 0.5 + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5.x = min(u_xlat5.x, 1.0);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat0.x = u_xlat5.x * u_xlat0.x;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat7.xyz * u_xlat3.www;
					    u_xlat2 = (-u_xlat1) + u_xlat3;
					    u_xlat1 = u_xlat0.xxxx * u_xlat2 + u_xlat1;
					    u_xlat0 = vec4(u_xlat10) * u_xlat1;
					    u_xlat1.x = max(u_xlat0.w, 9.99999975e-05);
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat1.xxx;
					    u_xlatb1 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb1){
					        u_xlatb1 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD2.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat7.x = vs_TEXCOORD1.w;
					        u_xlat7.y = vs_TEXCOORD2.w;
					        u_xlat7.z = vs_TEXCOORD3.w;
					        u_xlat1.xyz = (bool(u_xlatb1)) ? u_xlat6.xyz : u_xlat7.xyz;
					        u_xlat1.xyz = u_xlat1.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat1.yzw = u_xlat1.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat6.x = u_xlat1.y * 0.25;
					        u_xlat2.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat7.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat6.x = max(u_xlat6.x, u_xlat2.x);
					        u_xlat1.x = min(u_xlat7.x, u_xlat6.x);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat1.xzw);
					        u_xlat3.xyz = u_xlat1.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xyz);
					        u_xlat1.xyz = u_xlat1.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat1 = texture(unity_ProbeVolumeSH, u_xlat1.xyz);
					        u_xlat4.x = vs_TEXCOORD1.z;
					        u_xlat4.y = vs_TEXCOORD2.z;
					        u_xlat4.z = vs_TEXCOORD3.z;
					        u_xlat4.w = 1.0;
					        u_xlat2.x = dot(u_xlat2, u_xlat4);
					        u_xlat2.y = dot(u_xlat3, u_xlat4);
					        u_xlat2.z = dot(u_xlat1, u_xlat4);
					    } else {
					        u_xlat1.x = vs_TEXCOORD1.z;
					        u_xlat1.y = vs_TEXCOORD2.z;
					        u_xlat1.z = vs_TEXCOORD3.z;
					        u_xlat1.w = 1.0;
					        u_xlat2.x = dot(unity_SHAr, u_xlat1);
					        u_xlat2.y = dot(unity_SHAg, u_xlat1);
					        u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    }
					    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.x = vs_TEXCOORD1.z;
					    u_xlat2.y = vs_TEXCOORD2.z;
					    u_xlat2.z = vs_TEXCOORD3.z;
					    u_xlat16 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16 = max(u_xlat16, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * vec3(u_xlat16) + u_xlat0.xyz;
					    SV_Target0.w = u_xlat0.w;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _FaceColor;
					//   sampler2D _FaceTex;
					//   float _FaceUVSpeedX;
					//   float _FaceUVSpeedY;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float4 _OutlineColor;
					//   float _OutlineSoftness;
					//   sampler2D _OutlineTex;
					//   float _OutlineUVSpeedX;
					//   float _OutlineUVSpeedY;
					//   float _OutlineWidth;
					//   float _ScaleRatioA;
					//   float4 _Time;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _Time                c0       1
					//   _WorldSpaceLightPos0 c1       1
					//   unity_SHAr           c2       1
					//   unity_SHAg           c3       1
					//   unity_SHAb           c4       1
					//   unity_FogColor       c5       1
					//   unity_FogParams      c6       1
					//   _LightColor0         c7       1
					//   _FaceUVSpeedX        c8       1
					//   _FaceUVSpeedY        c9       1
					//   _FaceColor           c10      1
					//   _OutlineSoftness     c11      1
					//   _OutlineUVSpeedX     c12      1
					//   _OutlineUVSpeedY     c13      1
					//   _OutlineColor        c14      1
					//   _OutlineWidth        c15      1
					//   _ScaleRatioA         c16      1
					//   _FaceTex             s0       1
					//   _OutlineTex          s1       1
					//   _MainTex             s2       1
					//
					
					    ps_3_0
					    def c17, 0.5, 1, -9.99999975e-005, 10000
					    def c18, 1.05499995, -0.0549999997, 0, 0
					    def c19, 1, 0, 0.416666657, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1.z
					    dcl_texcoord2 v2.z
					    dcl_texcoord3 v3.z
					    dcl_color_pp v4
					    dcl_texcoord4 v5.xy
					    dcl_texcoord6_pp v6.xyz
					    dcl_texcoord7 v7.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mov r0.x, c16.x
					    mul r0.y, r0.x, c15.x
					    mad r0.z, r0.y, -v5.y, c17.y
					    mul_pp r0.y, r0.y, v5.y
					    rsq r0.w, r0.y
					    rcp_pp r0.w, r0.w
					    cmp_pp r0.z, r0.z, r0.w, c17.y
					    texld r1, v0, s2
					    add r0.w, -r1.w, c17.x
					    add r0.w, r0.w, -v5.x
					    mad_pp r0.w, r0.w, v5.y, c17.x
					    mad_sat_pp r1.x, r0.y, c17.x, r0.w
					    mad_pp r0.y, r0.y, -c17.x, r0.w
					    mul_pp r0.z, r0.z, r1.x
					    mov r1.y, c0.y
					    mad r2.x, c12.x, r1.y, v0.z
					    mad r2.y, c13.x, r1.y, v0.w
					    texld r2, r2, s1
					    mul_pp r1.xzw, r2.xyyz, c14.xyyz
					    mul r0.w, c14.w, v4.w
					    mul_pp r2.w, r2.w, r0.w
					    mul_pp r2.xyz, r1.xzww, r2.w
					    mad r3.x, c8.x, r1.y, v0.z
					    mad r3.y, c9.x, r1.y, v0.w
					    texld r1, r3, s0
					    mul r3, c10, v4
					    mul_pp r1, r1, r3
					    mul_pp r1.xyz, r1.w, r1
					    lrp_pp r3, r0.z, r2, r1
					    mul r0.x, r0.x, c11.x
					    mul_pp r0.z, r0.x, v5.y
					    mad_pp r0.x, r0.x, v5.y, c17.y
					    rcp r0.x, r0.x
					    mad_pp r0.y, r0.z, c17.x, r0.y
					    mul_sat_pp r0.x, r0.x, r0.y
					    add_pp r0.x, -r0.x, c17.y
					    mad r0.y, r3.w, r0.x, c17.z
					    mul_pp r1, r0.x, r3
					    rcp r0.x, r1.w
					    cmp r0.x, r0.y, r0.x, c17.w
					    mul_pp r0.xyz, r0.x, r1
					    mov_pp oC0.w, r1.w
					    mul_pp r1.xyz, r0, c7
					    mad r2.xw, v1.z, c19.xyzy, c19.yyzx
					    mov r2.y, v2.z
					    mov r2.z, v3.z
					    dp4_pp r3.x, c2, r2
					    dp4_pp r3.y, c3, r2
					    dp4_pp r3.z, c4, r2
					    dp3_pp r0.w, r2, c1
					    max_pp r1.w, r0.w, c19.y
					    add_pp r2.xyz, r3, v6
					    max_pp r3.xyz, r2, c19.y
					    log_pp r2.x, r3.x
					    log_pp r2.y, r3.y
					    log_pp r2.z, r3.z
					    mul_pp r2.xyz, r2, c19.z
					    exp_pp r3.x, r2.x
					    exp_pp r3.y, r2.y
					    exp_pp r3.z, r2.z
					    mad_pp r2.xyz, r3, c18.x, c18.y
					    max_pp r3.xyz, r2, c19.y
					    mul_pp r0.xyz, r0, r3
					    mad_pp r0.xyz, r1, r1.w, r0
					    add r0.xyz, r0, -c5
					    mul r0.w, c6.x, v7.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, r0, c5
					
					// approximately 69 instruction slots used (3 texture, 66 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 unused_0_2;
						float _FaceUVSpeedX;
						float _FaceUVSpeedY;
						vec4 _FaceColor;
						float _OutlineSoftness;
						float _OutlineUVSpeedX;
						float _OutlineUVSpeedY;
						vec4 _OutlineColor;
						float _OutlineWidth;
						vec4 unused_0_11[15];
						float _ScaleRatioA;
						vec4 unused_0_13[9];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[4];
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[4];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _FaceTex;
					uniform  sampler2D _OutlineTex;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD4;
					in  float vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					float u_xlat10;
					float u_xlat15;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = (-u_xlat0.w) + 0.5;
					    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD4.x);
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD4.y + 0.5;
					    u_xlat5.x = _OutlineWidth * _ScaleRatioA;
					    u_xlat5.y = _OutlineSoftness * _ScaleRatioA;
					    u_xlat5.xz = u_xlat5.xy * vs_TEXCOORD4.yy;
					    u_xlat1 = vs_COLOR0 * _FaceColor;
					    u_xlat2.x = vs_COLOR0.w * _OutlineColor.w;
					    u_xlat7.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat3 = texture(_FaceTex, u_xlat7.xy);
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat7.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat3 = texture(_OutlineTex, u_xlat7.xy);
					    u_xlat7.xyz = u_xlat3.xyz * _OutlineColor.xyz;
					    u_xlat3.w = u_xlat2.x * u_xlat3.w;
					    u_xlat2.x = (-u_xlat5.x) * 0.5 + u_xlat0.x;
					    u_xlat15 = u_xlat5.z * 0.5 + u_xlat2.x;
					    u_xlat10 = u_xlat5.y * vs_TEXCOORD4.y + 1.0;
					    u_xlat10 = u_xlat15 / u_xlat10;
					    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
					    u_xlat10 = (-u_xlat10) + 1.0;
					    u_xlat0.x = u_xlat5.x * 0.5 + u_xlat0.x;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat5.x = min(u_xlat5.x, 1.0);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat0.x = u_xlat5.x * u_xlat0.x;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat7.xyz * u_xlat3.www;
					    u_xlat2 = (-u_xlat1) + u_xlat3;
					    u_xlat1 = u_xlat0.xxxx * u_xlat2 + u_xlat1;
					    u_xlat0 = vec4(u_xlat10) * u_xlat1;
					    u_xlat1.x = max(u_xlat0.w, 9.99999975e-05);
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat1.xxx;
					    u_xlatb1 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb1){
					        u_xlatb1 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD2.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat7.x = vs_TEXCOORD1.w;
					        u_xlat7.y = vs_TEXCOORD2.w;
					        u_xlat7.z = vs_TEXCOORD3.w;
					        u_xlat1.xyz = (bool(u_xlatb1)) ? u_xlat6.xyz : u_xlat7.xyz;
					        u_xlat1.xyz = u_xlat1.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat1.yzw = u_xlat1.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat6.x = u_xlat1.y * 0.25;
					        u_xlat2.x = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat7.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat6.x = max(u_xlat6.x, u_xlat2.x);
					        u_xlat1.x = min(u_xlat7.x, u_xlat6.x);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat1.xzw);
					        u_xlat3.xyz = u_xlat1.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xyz);
					        u_xlat1.xyz = u_xlat1.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat1 = texture(unity_ProbeVolumeSH, u_xlat1.xyz);
					        u_xlat4.x = vs_TEXCOORD1.z;
					        u_xlat4.y = vs_TEXCOORD2.z;
					        u_xlat4.z = vs_TEXCOORD3.z;
					        u_xlat4.w = 1.0;
					        u_xlat2.x = dot(u_xlat2, u_xlat4);
					        u_xlat2.y = dot(u_xlat3, u_xlat4);
					        u_xlat2.z = dot(u_xlat1, u_xlat4);
					    } else {
					        u_xlat1.x = vs_TEXCOORD1.z;
					        u_xlat1.y = vs_TEXCOORD2.z;
					        u_xlat1.z = vs_TEXCOORD3.z;
					        u_xlat1.w = 1.0;
					        u_xlat2.x = dot(unity_SHAr, u_xlat1);
					        u_xlat2.y = dot(unity_SHAg, u_xlat1);
					        u_xlat2.z = dot(unity_SHAb, u_xlat1);
					    }
					    u_xlat1.xyz = u_xlat2.xyz + vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = log2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat1.xyz = exp2(u_xlat1.xyz);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat1.xyz = max(u_xlat1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat2.x = vs_TEXCOORD1.z;
					    u_xlat2.y = vs_TEXCOORD2.z;
					    u_xlat2.z = vs_TEXCOORD3.z;
					    u_xlat16 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16 = max(u_xlat16, 0.0);
					    u_xlat2.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat16) + u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat1.x = u_xlat1.x * _ProjectionParams.z;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = u_xlat1.x * unity_FogParams.x;
					    u_xlat1.x = u_xlat1.x * (-u_xlat1.x);
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = u_xlat1.xxx * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = u_xlat0.w;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "CASTER"
			LOD 300
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "SHADOWCASTER" "QUEUE" = "Transparent" "RenderType" = "Transparent" "SHADOWSUPPORT" = "true" }
			ColorMask RGB -1
			ZClip Off
			Cull Off
			Offset 1, 1
			Fog {
				Mode Off
			}
			GpuProgramID 129872
			Program "vp" {
				SubProgram "d3d9 " {
					Keywords { "SHADOWS_DEPTH" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _FaceDilate;
					//   float4 _MainTex_ST;
					//   float _OutlineWidth;
					//   float _ScaleRatioA;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_LightShadowBias;
					//
					//
					// Registers:
					//
					//   Name                  Reg   Size
					//   --------------------- ----- ----
					//   glstate_matrix_mvp    c0       4
					//   unity_LightShadowBias c4       1
					//   _MainTex_ST           c5       1
					//   _OutlineWidth         c6       1
					//   _FaceDilate           c7       1
					//   _ScaleRatioA          c8       1
					//
					
					    vs_3_0
					    def c9, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord1 o1.xy
					    dcl_texcoord2 o2.x
					    mad r0, v0.xyzx, c9.xxxy, c9.yyyx
					    dp4 r2.x, c0, r0
					    dp4 r2.y, c1, r0
					    dp4 r1.x, c2, r0
					    dp4 r0.x, c3, r0
					    rcp r0.y, r0.x
					    mov r2.w, r0.x
					    mul_sat r0.x, r0.y, c4.x
					    add r0.x, r0.x, r1.x
					    max r0.y, r0.x, c9.y
					    add r0.y, -r0.x, r0.y
					    mad r2.z, c4.y, r0.y, r0.x
					    mad o1.xy, v1, c5, c5.zwzw
					    mov r0.x, c9.x
					    mov r1.x, c8.x
					    mad r0.x, c6.x, -r1.x, r0.x
					    mad r0.x, c7.x, -r1.x, r0.x
					    mul o2.x, r0.x, c9.z
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 20 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_DEPTH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_ST;
						float _OutlineWidth;
						float _FaceDilate;
						float _ScaleRatioA;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_1_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD2;
					vec4 u_xlat0;
					float u_xlat1;
					float u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat1 = unity_LightShadowBias.x / u_xlat0.w;
					    u_xlat1 = max(u_xlat1, -1.0);
					    u_xlat1 = min(u_xlat1, 0.0);
					    u_xlat4 = u_xlat0.z + u_xlat1;
					    u_xlat1 = min(u_xlat0.w, u_xlat4);
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.x = (-u_xlat4) + u_xlat1;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat4;
					    u_xlat0.x = (-_OutlineWidth) * _ScaleRatioA + 1.0;
					    u_xlat0.x = (-_FaceDilate) * _ScaleRatioA + u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.5;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "SHADOWS_CUBE" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _FaceDilate;
					//   float4 _LightPositionRange;
					//   float4 _MainTex_ST;
					//   float _OutlineWidth;
					//   float _ScaleRatioA;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   _LightPositionRange c7       1
					//   _MainTex_ST         c8       1
					//   _OutlineWidth       c9       1
					//   _FaceDilate         c10      1
					//   _ScaleRatioA        c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_texcoord o0.xyz
					    dcl_position o1
					    dcl_texcoord1 o2.xy
					    dcl_texcoord2 o3.x
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o0.xyz, r0, -c7
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r2.x, c0, r0
					    dp4 r2.y, c1, r0
					    dp4 r2.z, c2, r0
					    dp4 r2.w, c3, r0
					    mad o2.xy, v1, c8, c8.zwzw
					    mov r0.x, c12.x
					    mov r1.x, c11.x
					    mad r0.x, c9.x, -r1.x, r0.x
					    mad r0.x, c10.x, -r1.x, r0.x
					    mul o3.x, r0.x, c12.z
					    mad o1.xy, r2.w, c255, r2
					    mov o1.zw, r2
					
					// approximately 17 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_ST;
						float _OutlineWidth;
						float _FaceDilate;
						float _ScaleRatioA;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_3[6];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD2;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat0.x = (-_OutlineWidth) * _ScaleRatioA + 1.0;
					    u_xlat0.x = (-_FaceDilate) * _ScaleRatioA + u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.5;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					Keywords { "SHADOWS_DEPTH" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c0, 0, 0, 0, 0
					    dcl_texcoord1 v0.xy
					    dcl_texcoord2 v1.x
					    dcl_2d s0
					    texld_pp r0, v0, s0
					    add r0, r0.w, -v1.x
					    texkill r0
					    mov oC0, c0.x
					
					// approximately 4 instruction slots used (1 texture, 3 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_DEPTH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat0.x = u_xlat0.w + (-vs_TEXCOORD2);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "SHADOWS_CUBE" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _LightPositionRange;
					//   sampler2D _MainTex;
					//   float4 unity_LightShadowBias;
					//
					//
					// Registers:
					//
					//   Name                  Reg   Size
					//   --------------------- ----- ----
					//   _LightPositionRange   c0       1
					//   unity_LightShadowBias c1       1
					//   _MainTex              s0       1
					//
					
					    ps_3_0
					    dcl_texcoord v0.xyz
					    dcl_texcoord1 v1.xy
					    dcl_texcoord2 v2.x
					    dcl_2d s0
					    texld_pp r0, v1, s0
					    add r0, r0.w, -v2.x
					    texkill r0
					    dp3 r0.x, v0, v0
					    rsq r0.x, r0.x
					    rcp r0.x, r0.x
					    add r0.x, r0.x, c1.x
					    mul oC0, r0.x, c0.w
					
					// approximately 8 instruction slots used (1 texture, 7 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityLighting {
						vec4 unused_0_0;
						vec4 _LightPositionRange;
						vec4 unused_0_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_1_2[20];
					};
					uniform  sampler2D _MainTex;
					in  vec3 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat0.x = u_xlat0.w + (-vs_TEXCOORD2);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + unity_LightShadowBias.x;
					    SV_Target0 = u_xlat0.xxxx * _LightPositionRange.wwww;
					    return;
					}"
				}
			}
		}
	}
	CustomEditor "TMPro.EditorUtilities.TMP_SDFShaderGUI"
}
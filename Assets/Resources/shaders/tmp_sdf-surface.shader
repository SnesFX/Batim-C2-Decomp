Shader "TextMeshPro/Distance Field (Surface)" {
	Properties {
		_FaceTex ("Fill Texture", 2D) = "white" {}
		_FaceUVSpeedX ("Face UV Speed X", Range(-5, 5)) = 0
		_FaceUVSpeedY ("Face UV Speed Y", Range(-5, 5)) = 0
		_FaceColor ("Fill Color", Vector) = (1,1,1,1)
		_FaceDilate ("Face Dilate", Range(-1, 1)) = 0
		_OutlineColor ("Outline Color", Vector) = (0,0,0,1)
		_OutlineTex ("Outline Texture", 2D) = "white" {}
		_OutlineUVSpeedX ("Outline UV Speed X", Range(-5, 5)) = 0
		_OutlineUVSpeedY ("Outline UV Speed Y", Range(-5, 5)) = 0
		_OutlineWidth ("Outline Thickness", Range(0, 1)) = 0
		_OutlineSoftness ("Outline Softness", Range(0, 1)) = 0
		_Bevel ("Bevel", Range(0, 1)) = 0.5
		_BevelOffset ("Bevel Offset", Range(-0.5, 0.5)) = 0
		_BevelWidth ("Bevel Width", Range(-0.5, 0.5)) = 0
		_BevelClamp ("Bevel Clamp", Range(0, 1)) = 0
		_BevelRoundness ("Bevel Roundness", Range(0, 1)) = 0
		_BumpMap ("Normalmap", 2D) = "bump" {}
		_BumpOutline ("Bump Outline", Range(0, 1)) = 0.5
		_BumpFace ("Bump Face", Range(0, 1)) = 0.5
		_ReflectFaceColor ("Face Color", Vector) = (0,0,0,1)
		_ReflectOutlineColor ("Outline Color", Vector) = (0,0,0,1)
		_Cube ("Reflection Cubemap", Cube) = "black" {}
		_EnvMatrixRotation ("Texture Rotation", Vector) = (0,0,0,0)
		_SpecColor ("Specular Color", Vector) = (0,0,0,1)
		_FaceShininess ("Face Shininess", Range(0, 1)) = 0
		_OutlineShininess ("Outline Shininess", Range(0, 1)) = 0
		_GlowColor ("Color", Vector) = (0,1,0,0.5)
		_GlowOffset ("Offset", Range(-1, 1)) = 0
		_GlowInner ("Inner", Range(0, 1)) = 0.05
		_GlowOuter ("Outer", Range(0, 1)) = 0.05
		_GlowPower ("Falloff", Range(1, 0)) = 0.75
		_WeightNormal ("Weight Normal", Float) = 0
		_WeightBold ("Weight Bold", Float) = 0.5
		_ShaderFlags ("Flags", Float) = 0
		_ScaleRatioA ("Scale RatioA", Float) = 1
		_ScaleRatioB ("Scale RatioB", Float) = 1
		_ScaleRatioC ("Scale RatioC", Float) = 1
		_MainTex ("Font Atlas", 2D) = "white" {}
		_TextureWidth ("Texture Width", Float) = 512
		_TextureHeight ("Texture Height", Float) = 512
		_GradientScale ("Gradient Scale", Float) = 5
		_ScaleX ("Scale X", Float) = 1
		_ScaleY ("Scale Y", Float) = 1
		_PerspectiveFilter ("Perspective Correction", Range(0, 1)) = 0.875
		_VertexOffsetX ("Vertex OffsetX", Float) = 0
		_VertexOffsetY ("Vertex OffsetY", Float) = 0
	}
	SubShader {
		LOD 300
		Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
		Pass {
			Name "FORWARD"
			LOD 300
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "ForwardBase" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
			Blend SrcAlpha OneMinusSrcAlpha, SrcAlpha OneMinusSrcAlpha
			ColorMask RGB -1
			ZClip Off
			ZWrite Off
			Cull Off
			GpuProgramID 60041
			Program "vp" {
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _EnvMatrix;
					//   float _FaceDilate;
					//   float4 _FaceTex_ST;
					//   float _GradientScale;
					//   float4 _MainTex_ST;
					//   float _PerspectiveFilter;
					//   float _ScaleRatioA;
					//   float _ScaleX;
					//   float _ScaleY;
					//   float4 _ScreenParams;
					//   float _VertexOffsetX;
					//   float _VertexOffsetY;
					//   float _WeightBold;
					//   float _WeightNormal;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 glstate_matrix_projection;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   _EnvMatrix                 c10      3
					//   glstate_matrix_projection  c13      2
					//   _WorldSpaceCameraPos       c15      1
					//   _ScreenParams              c16      1
					//   unity_SHBr                 c17      1
					//   unity_SHBg                 c18      1
					//   unity_SHBb                 c19      1
					//   unity_SHC                  c20      1
					//   unity_WorldTransformParams c21      1
					//   _FaceDilate                c22      1
					//   _WeightNormal              c23      1
					//   _WeightBold                c24      1
					//   _ScaleRatioA               c25      1
					//   _VertexOffsetX             c26      1
					//   _VertexOffsetY             c27      1
					//   _GradientScale             c28      1
					//   _ScaleX                    c29      1
					//   _ScaleY                    c30      1
					//   _PerspectiveFilter         c31      1
					//   _MainTex_ST                c32      1
					//   _FaceTex_ST                c33      1
					//
					
					    vs_3_0
					    def c34, 0, 1, 1.5, 0.5
					    def c35, 0.000244140625, 4096, 0.001953125, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_color v5
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_color o5
					    dcl_texcoord4 o6.xy
					    dcl_texcoord5 o7.xyz
					    dcl_texcoord6 o8.xyz
					    mov r0.xy, c34
					    add r0.z, r0.y, -c31.x
					    mul r0.w, c28.x, v4_abs.y
					    mov r1.xy, c16
					    mul r1.zw, r1.xyxy, c13.xyxy
					    add r1.z, r1.w, r1.z
					    mul r1.z, r1.z, c29.x
					    rcp r2.x, r1.z
					    mul r1.xy, r1, c14
					    add r1.x, r1.y, r1.x
					    mul r1.x, r1.x, c30.x
					    rcp r2.y, r1.x
					    add r1.x, c26.x, v0.x
					    add r1.y, c27.x, v0.y
					    mov r1.zw, v0
					    dp4 r2.z, c3, r1
					    mul r2.xy, r2, r2.z
					    mul r2.xy, r2, r2
					    add r2.x, r2.y, r2.x
					    rsq r2.x, r2.x
					    mul r0.w, r0.w, r2.x
					    mul r2.x, r0.w, c34.z
					    mul r0.z, r0.z, r2.x
					    mad r0.w, r0.w, c34.z, -r0.z
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    add r3.xyz, -r2, c15
					    mov o2.w, r2.x
					    mov o3.w, r2.y
					    mov o4.w, r2.z
					    nrm r2.xyz, r3
					    mad r4, c15.xyzx, r0.yyyx, r0.xxxy
					    dp4 r5.x, c7, r4
					    dp4 r5.y, c8, r4
					    dp4 r5.z, c9, r4
					    add r4.xyz, -r1, r5
					    mad r1, r1.xyzx, c34.yyyx, c34.xxxy
					    dp3 r0.x, v2, r4
					    slt r0.y, -r0.x, r0.x
					    slt r0.x, r0.x, -r0.x
					    add r0.x, -r0.x, r0.y
					    mul r4.xyz, r0.x, v2
					    mul r5, r4.y, c8.xyzz
					    mad r5, r4.x, c7.xyzz, r5
					    mad r4, r4.z, c9.xyzz, r5
					    dp3 r0.x, r4.xyww, r4.xyww
					    rsq r0.x, r0.x
					    mul r4, r0.x, r4
					    dp3 r0.x, r4.xyww, r2
					    mad o6.y, r0_abs.x, r0.w, r0.z
					    sge r0.x, c34.x, v4.y
					    mov r2.x, c23.x
					    add r0.y, -r2.x, c24.x
					    mad r0.x, r0.x, r0.y, c23.x
					    mov r2.x, c22.x
					    mul r0.y, r2.x, c25.x
					    mul r0.y, r0.y, c34.w
					    rcp r0.z, c28.x
					    mad o6.x, r0.x, r0.z, r0.y
					    dp3 o7.x, c10, r3
					    dp3 o7.y, c11, r3
					    dp3 o7.z, c12, r3
					    dp4 r6.x, c0, r1
					    dp4 r6.y, c1, r1
					    dp4 r6.z, c2, r1
					    dp4 r6.w, c3, r1
					    mad o1.xy, v3, c32, c32.zwzw
					    mul r0.x, c35.x, v4.x
					    frc r0.y, r0.x
					    add r0.z, -r0.y, r0.x
					    mad r0.w, r0.z, -c35.y, v4.x
					    mul r0.xy, r0.zwzw, c33
					    mov r0.z, c35.z
					    mad o1.zw, r0.xyxy, r0.z, c33
					    mul r0.x, r4.y, r4.y
					    mad r0.x, r4.x, r4.x, -r0.x
					    mul r1, r4.ywzx, r4
					    dp4 r2.x, c17, r1
					    dp4 r2.y, c18, r1
					    dp4 r2.z, c19, r1
					    mad o8.xyz, c20, r0.x, r2
					    dp3 r0.z, c4, v1
					    dp3 r0.x, c5, v1
					    dp3 r0.y, c6, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o2.x, r0.z
					    mul r1.xyz, r0, r4.wxyw
					    mad r1.xyz, r4.ywxw, r0.yzxw, -r1
					    mul r0.z, c21.w, v1.w
					    mul r1.xyz, r0.z, r1
					    mov o2.y, r1.x
					    mov o2.z, r4.x
					    mov o3.x, r0.x
					    mov o4.x, r0.y
					    mov o3.y, r1.y
					    mov o4.y, r1.z
					    mov o3.z, r4.y
					    mov o4.z, r4.w
					    mov o5, v5
					    mad o0.xy, r6.w, c255, r6
					    mov o0.zw, r6
					
					// approximately 106 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						float _FaceDilate;
						vec4 unused_0_2[6];
						mat4x4 _EnvMatrix;
						vec4 unused_0_4[7];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_10[4];
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_15;
						vec4 _MainTex_ST;
						vec4 _FaceTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_4_2[13];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					int u_xlati1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					float u_xlat10;
					int u_xlati10;
					vec2 u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + glstate_matrix_mvp[3];
					    u_xlat15 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat11.x = floor(u_xlat15);
					    u_xlat11.y = (-u_xlat11.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat1.xy = u_xlat11.xy * _FaceTex_ST.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat10 = dot(in_NORMAL0.xyz, u_xlat1.xyz);
					    u_xlati1 = int((0.0<u_xlat10) ? 0xFFFFFFFFu : uint(0));
					    u_xlati10 = int((u_xlat10<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati10 = (-u_xlati1) + u_xlati10;
					    u_xlat10 = float(u_xlati10);
					    u_xlat1.xyz = vec3(u_xlat10) * in_NORMAL0.xyz;
					    u_xlat2.x = dot(u_xlat1.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(u_xlat1.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1 = vec4(u_xlat10) * u_xlat2.xyzz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.wxy * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.ywx * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat1.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    u_xlat4.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat4.xyz;
					    vs_TEXCOORD1.w = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.w = u_xlat4.y;
					    vs_TEXCOORD3.z = u_xlat1.w;
					    vs_TEXCOORD3.w = u_xlat4.z;
					    u_xlat2.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat5.x = u_xlat0.y * glstate_matrix_mvp[1].w;
					    u_xlat0.x = glstate_matrix_mvp[0].w * u_xlat0.x + u_xlat5.x;
					    u_xlat0.x = glstate_matrix_mvp[2].w * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_mvp[3].w * in_POSITION0.w + u_xlat0.x;
					    u_xlat5.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat5.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat5.xy;
					    u_xlat5.xy = u_xlat5.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat0.xy = u_xlat0.xx / u_xlat5.xy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat5.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat5.x = u_xlat0.x * 1.5;
					    u_xlat10 = (-_PerspectiveFilter) + 1.0;
					    u_xlat5.x = u_xlat10 * u_xlat5.x;
					    u_xlat0.x = u_xlat0.x * 1.5 + (-u_xlat5.x);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyw, u_xlat3.xyz);
					    vs_TEXCOORD4.y = abs(u_xlat10) * u_xlat0.x + u_xlat5.x;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat5.x = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x + _WeightNormal;
					    u_xlat0.x = u_xlat0.x / _GradientScale;
					    u_xlat5.x = _FaceDilate * _ScaleRatioA;
					    vs_TEXCOORD4.x = u_xlat5.x * 0.5 + u_xlat0.x;
					    u_xlat0.xyz = u_xlat2.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyz = _EnvMatrix[0].xyz * u_xlat2.xxx + u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = _EnvMatrix[2].xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.x = u_xlat1.y * u_xlat1.y;
					    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat1.ywzx * u_xlat1;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD6.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _EnvMatrix;
					//   float _FaceDilate;
					//   float4 _FaceTex_ST;
					//   float _GradientScale;
					//   float4 _MainTex_ST;
					//   float _PerspectiveFilter;
					//   float _ScaleRatioA;
					//   float _ScaleX;
					//   float _ScaleY;
					//   float4 _ScreenParams;
					//   float _VertexOffsetX;
					//   float _VertexOffsetY;
					//   float _WeightBold;
					//   float _WeightNormal;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 glstate_matrix_projection;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_LightColor[8];
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_LightColor           c0       4
					//   glstate_matrix_mvp         c4       4
					//   unity_ObjectToWorld        c8       3
					//   unity_WorldToObject        c11      3
					//   _EnvMatrix                 c14      3
					//   glstate_matrix_projection  c17      2
					//   _WorldSpaceCameraPos       c19      1
					//   _ScreenParams              c20      1
					//   unity_4LightPosX0          c21      1
					//   unity_4LightPosY0          c22      1
					//   unity_4LightPosZ0          c23      1
					//   unity_4LightAtten0         c24      1
					//   unity_SHBr                 c25      1
					//   unity_SHBg                 c26      1
					//   unity_SHBb                 c27      1
					//   unity_SHC                  c28      1
					//   unity_WorldTransformParams c29      1
					//   _FaceDilate                c30      1
					//   _WeightNormal              c31      1
					//   _WeightBold                c32      1
					//   _ScaleRatioA               c33      1
					//   _VertexOffsetX             c34      1
					//   _VertexOffsetY             c35      1
					//   _GradientScale             c36      1
					//   _ScaleX                    c37      1
					//   _ScaleY                    c38      1
					//   _PerspectiveFilter         c39      1
					//   _MainTex_ST                c40      1
					//   _FaceTex_ST                c41      1
					//
					
					    vs_3_0
					    def c42, 0, 1, 1.5, 0.5
					    def c43, 0.000244140625, 4096, 0.001953125, 9.99999997e-007
					    def c44, 0.305306017, 0.682171106, 0.0125228781, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_color v5
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_color o5
					    dcl_texcoord4 o6.xy
					    dcl_texcoord5 o7.xyz
					    dcl_texcoord6 o8.xyz
					    mov r0.xy, c42
					    add r0.z, r0.y, -c39.x
					    mul r0.w, c36.x, v4_abs.y
					    mov r1.xy, c20
					    mul r1.zw, r1.xyxy, c17.xyxy
					    add r1.z, r1.w, r1.z
					    mul r1.z, r1.z, c37.x
					    rcp r2.x, r1.z
					    mul r1.xy, r1, c18
					    add r1.x, r1.y, r1.x
					    mul r1.x, r1.x, c38.x
					    rcp r2.y, r1.x
					    add r1.x, c34.x, v0.x
					    add r1.y, c35.x, v0.y
					    mov r1.zw, v0
					    dp4 r2.z, c7, r1
					    mul r2.xy, r2, r2.z
					    mul r2.xy, r2, r2
					    add r2.x, r2.y, r2.x
					    rsq r2.x, r2.x
					    mul r0.w, r0.w, r2.x
					    mul r2.x, r0.w, c42.z
					    mul r0.z, r0.z, r2.x
					    mad r0.w, r0.w, c42.z, -r0.z
					    dp4 r2.x, c8, r1
					    dp4 r2.y, c9, r1
					    dp4 r2.z, c10, r1
					    add r3.xyz, -r2, c19
					    nrm r4.xyz, r3
					    mad r5, c19.xyzx, r0.yyyx, r0.xxxy
					    dp4 r6.x, c11, r5
					    dp4 r6.y, c12, r5
					    dp4 r6.z, c13, r5
					    add r5.xyz, -r1, r6
					    mad r1, r1.xyzx, c42.yyyx, c42.xxxy
					    dp3 r0.x, v2, r5
					    slt r2.w, -r0.x, r0.x
					    slt r0.x, r0.x, -r0.x
					    add r0.x, -r0.x, r2.w
					    mul r5.xyz, r0.x, v2
					    mul r6, r5.y, c12.xyzz
					    mad r6, r5.x, c11.xyzz, r6
					    mad r5, r5.z, c13.xyzz, r6
					    dp3 r0.x, r5.xyww, r5.xyww
					    rsq r0.x, r0.x
					    mul r5, r0.x, r5
					    dp3 r0.x, r5.xyww, r4
					    mad o6.y, r0_abs.x, r0.w, r0.z
					    sge r0.x, c42.x, v4.y
					    mov r4.x, c31.x
					    add r0.z, -r4.x, c32.x
					    mad r0.x, r0.x, r0.z, c31.x
					    mov r4.x, c30.x
					    mul r0.z, r4.x, c33.x
					    mul r0.z, r0.z, c42.w
					    rcp r0.w, c36.x
					    mad o6.x, r0.x, r0.w, r0.z
					    dp3 o7.x, c14, r3
					    dp3 o7.y, c15, r3
					    dp3 o7.z, c16, r3
					    dp4 r7.x, c4, r1
					    dp4 r7.y, c5, r1
					    dp4 r7.z, c6, r1
					    dp4 r7.w, c7, r1
					    mad o1.xy, v3, c40, c40.zwzw
					    mul r0.x, c43.x, v4.x
					    frc r0.z, r0.x
					    add r0.z, -r0.z, r0.x
					    mad r0.w, r0.z, -c43.y, v4.x
					    mul r0.xz, r0.zyww, c41.xyyw
					    mov r1.z, c43.z
					    mad o1.zw, r0.xyxz, r1.z, c41
					    add r1, -r2.z, c23
					    mov o4.w, r2.z
					    add r3, -r2.x, c21
					    mov o2.w, r2.x
					    add r4, -r2.y, c22
					    mov o3.w, r2.y
					    mul r2, r5.y, r4
					    mul r4, r4, r4
					    mad r4, r3, r3, r4
					    mad r2, r3, r5.x, r2
					    mad r2, r1, r5.wwzw, r2
					    mad r1, r1, r1, r4
					    max r1, r1, c43.w
					    rsq r3.x, r1.x
					    rsq r3.y, r1.y
					    rsq r3.z, r1.z
					    rsq r3.w, r1.w
					    mad r0, r1, c24, r0.y
					    mul r1, r2, r3
					    max r1, r1, c42.x
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    rcp r2.w, r0.w
					    mul r0, r1, r2
					    mul r1.xyz, r0.y, c1
					    mad r1.xyz, c0, r0.x, r1
					    mad r0.xyz, c2, r0.z, r1
					    mad r0.xyz, c3, r0.w, r0
					    mad r1.xyz, r0, c44.x, c44.y
					    mad r1.xyz, r0, r1, c44.z
					    mul r0.w, r5.y, r5.y
					    mad r0.w, r5.x, r5.x, -r0.w
					    mul r2, r5.ywzx, r5
					    dp4 r3.x, c25, r2
					    dp4 r3.y, c26, r2
					    dp4 r3.z, c27, r2
					    mad r2.xyz, c28, r0.w, r3
					    mad o8.xyz, r0, r1, r2
					    dp3 r0.z, c8, v1
					    dp3 r0.x, c9, v1
					    dp3 r0.y, c10, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o2.x, r0.z
					    mul r1.xyz, r0, r5.wxyw
					    mad r1.xyz, r5.ywxw, r0.yzxw, -r1
					    mul r0.z, c29.w, v1.w
					    mul r1.xyz, r0.z, r1
					    mov o2.y, r1.x
					    mov o2.z, r5.x
					    mov o3.x, r0.x
					    mov o4.x, r0.y
					    mov o3.y, r1.y
					    mov o4.y, r1.z
					    mov o3.z, r5.y
					    mov o4.z, r5.w
					    mov o5, v5
					    mad o0.xy, r7.w, c255, r7
					    mov o0.zw, r7
					
					// approximately 135 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						float _FaceDilate;
						vec4 unused_0_2[6];
						mat4x4 _EnvMatrix;
						vec4 unused_0_4[7];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_10[4];
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_15;
						vec4 _MainTex_ST;
						vec4 _FaceTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_4_2[13];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec2 u_xlat5;
					float u_xlat10;
					int u_xlati10;
					bool u_xlatb10;
					vec2 u_xlat11;
					float u_xlat15;
					float u_xlat16;
					int u_xlati16;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + glstate_matrix_mvp[3];
					    u_xlat15 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat11.x = floor(u_xlat15);
					    u_xlat11.y = (-u_xlat11.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat1.xy = u_xlat11.xy * _FaceTex_ST.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat10 = dot(in_NORMAL0.xyz, u_xlat2.xyz);
					    u_xlati16 = int((0.0<u_xlat10) ? 0xFFFFFFFFu : uint(0));
					    u_xlati10 = int((u_xlat10<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati10 = (-u_xlati16) + u_xlati10;
					    u_xlat10 = float(u_xlati10);
					    u_xlat2.xyz = vec3(u_xlat10) * in_NORMAL0.xyz;
					    u_xlat3.x = dot(u_xlat2.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(u_xlat2.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(u_xlat2.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2 = vec4(u_xlat10) * u_xlat3.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    u_xlat4.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat4.xyz;
					    vs_TEXCOORD1.w = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD2.w = u_xlat4.y;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_TEXCOORD3.w = u_xlat4.z;
					    vs_COLOR0 = in_COLOR0;
					    u_xlatb10 = 0.0>=in_TEXCOORD1.y;
					    u_xlat10 = u_xlatb10 ? 1.0 : float(0.0);
					    u_xlat15 = (-_WeightNormal) + _WeightBold;
					    u_xlat10 = u_xlat10 * u_xlat15 + _WeightNormal;
					    u_xlat10 = u_xlat10 / _GradientScale;
					    u_xlat15 = _FaceDilate * _ScaleRatioA;
					    vs_TEXCOORD4.x = u_xlat15 * 0.5 + u_xlat10;
					    u_xlat5.x = u_xlat0.y * glstate_matrix_mvp[1].w;
					    u_xlat0.x = glstate_matrix_mvp[0].w * u_xlat0.x + u_xlat5.x;
					    u_xlat0.x = glstate_matrix_mvp[2].w * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_mvp[3].w * in_POSITION0.w + u_xlat0.x;
					    u_xlat5.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat5.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat5.xy;
					    u_xlat5.xy = u_xlat5.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat0.xy = u_xlat0.xx / u_xlat5.xy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat5.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat5.x = u_xlat0.x * 1.5;
					    u_xlat10 = (-_PerspectiveFilter) + 1.0;
					    u_xlat5.x = u_xlat10 * u_xlat5.x;
					    u_xlat0.x = u_xlat0.x * 1.5 + (-u_xlat5.x);
					    u_xlat1.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat10 = dot(u_xlat2.xyw, u_xlat3.xyz);
					    vs_TEXCOORD4.y = abs(u_xlat10) * u_xlat0.x + u_xlat5.x;
					    u_xlat0.xyz = u_xlat1.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyz = _EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = _EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
					    u_xlat0 = (-u_xlat4.yyyy) + unity_4LightPosY0;
					    u_xlat1 = u_xlat2.yyyy * u_xlat0;
					    u_xlat0 = u_xlat0 * u_xlat0;
					    u_xlat3 = (-u_xlat4.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat4.zzzz) + unity_4LightPosZ0;
					    u_xlat1 = u_xlat3 * u_xlat2.xxxx + u_xlat1;
					    u_xlat0 = u_xlat3 * u_xlat3 + u_xlat0;
					    u_xlat0 = u_xlat4 * u_xlat4 + u_xlat0;
					    u_xlat1 = u_xlat4 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat15 = u_xlat2.y * u_xlat2.y;
					    u_xlat15 = u_xlat2.x * u_xlat2.x + (-u_xlat15);
					    u_xlat2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _EnvMatrix;
					//   float _FaceDilate;
					//   float4 _FaceTex_ST;
					//   float _GradientScale;
					//   float4 _MainTex_ST;
					//   float _PerspectiveFilter;
					//   float _ScaleRatioA;
					//   float _ScaleX;
					//   float _ScaleY;
					//   float4 _ScreenParams;
					//   float _VertexOffsetX;
					//   float _VertexOffsetY;
					//   float _WeightBold;
					//   float _WeightNormal;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 glstate_matrix_projection;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   _EnvMatrix                 c10      3
					//   glstate_matrix_projection  c13      2
					//   _WorldSpaceCameraPos       c15      1
					//   _ScreenParams              c16      1
					//   unity_SHBr                 c17      1
					//   unity_SHBg                 c18      1
					//   unity_SHBb                 c19      1
					//   unity_SHC                  c20      1
					//   unity_WorldTransformParams c21      1
					//   _FaceDilate                c22      1
					//   _WeightNormal              c23      1
					//   _WeightBold                c24      1
					//   _ScaleRatioA               c25      1
					//   _VertexOffsetX             c26      1
					//   _VertexOffsetY             c27      1
					//   _GradientScale             c28      1
					//   _ScaleX                    c29      1
					//   _ScaleY                    c30      1
					//   _PerspectiveFilter         c31      1
					//   _MainTex_ST                c32      1
					//   _FaceTex_ST                c33      1
					//
					
					    vs_3_0
					    def c34, 0, 1, 1.5, 0.5
					    def c35, 0.000244140625, 4096, 0.001953125, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_color v5
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_color o5
					    dcl_texcoord4 o6.xy
					    dcl_texcoord5 o7.xyz
					    dcl_texcoord6 o8.xyz
					    dcl_texcoord7 o9.x
					    mov r0.xy, c34
					    add r0.z, r0.y, -c31.x
					    mul r0.w, c28.x, v4_abs.y
					    mov r1.xy, c16
					    mul r1.zw, r1.xyxy, c13.xyxy
					    add r1.z, r1.w, r1.z
					    mul r1.z, r1.z, c29.x
					    rcp r2.x, r1.z
					    mul r1.xy, r1, c14
					    add r1.x, r1.y, r1.x
					    mul r1.x, r1.x, c30.x
					    rcp r2.y, r1.x
					    add r1.x, c26.x, v0.x
					    add r1.y, c27.x, v0.y
					    mov r1.zw, v0
					    dp4 r2.z, c3, r1
					    mul r2.xy, r2, r2.z
					    mul r2.xy, r2, r2
					    add r2.x, r2.y, r2.x
					    rsq r2.x, r2.x
					    mul r0.w, r0.w, r2.x
					    mul r2.x, r0.w, c34.z
					    mul r0.z, r0.z, r2.x
					    mad r0.w, r0.w, c34.z, -r0.z
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    add r3.xyz, -r2, c15
					    mov o2.w, r2.x
					    mov o3.w, r2.y
					    mov o4.w, r2.z
					    nrm r2.xyz, r3
					    mad r4, c15.xyzx, r0.yyyx, r0.xxxy
					    dp4 r5.x, c7, r4
					    dp4 r5.y, c8, r4
					    dp4 r5.z, c9, r4
					    add r4.xyz, -r1, r5
					    mad r1, r1.xyzx, c34.yyyx, c34.xxxy
					    dp3 r0.x, v2, r4
					    slt r0.y, -r0.x, r0.x
					    slt r0.x, r0.x, -r0.x
					    add r0.x, -r0.x, r0.y
					    mul r4.xyz, r0.x, v2
					    mul r5, r4.y, c8.xyzz
					    mad r5, r4.x, c7.xyzz, r5
					    mad r4, r4.z, c9.xyzz, r5
					    dp3 r0.x, r4.xyww, r4.xyww
					    rsq r0.x, r0.x
					    mul r4, r0.x, r4
					    dp3 r0.x, r4.xyww, r2
					    mad o6.y, r0_abs.x, r0.w, r0.z
					    sge r0.x, c34.x, v4.y
					    mov r2.x, c23.x
					    add r0.y, -r2.x, c24.x
					    mad r0.x, r0.x, r0.y, c23.x
					    mov r2.x, c22.x
					    mul r0.y, r2.x, c25.x
					    mul r0.y, r0.y, c34.w
					    rcp r0.z, c28.x
					    mad o6.x, r0.x, r0.z, r0.y
					    dp3 o7.x, c10, r3
					    dp3 o7.y, c11, r3
					    dp3 o7.z, c12, r3
					    dp4 r6.x, c0, r1
					    dp4 r6.y, c1, r1
					    dp4 r6.w, c3, r1
					    dp4 r0.x, c2, r1
					    mad o1.xy, v3, c32, c32.zwzw
					    mul r0.y, c35.x, v4.x
					    frc r0.z, r0.y
					    add r0.z, -r0.z, r0.y
					    mad r0.w, r0.z, -c35.y, v4.x
					    mul r0.yz, r0.xzww, c33.xxyw
					    mov r1.z, c35.z
					    mad o1.zw, r0.xyyz, r1.z, c33
					    mul r0.y, r4.y, r4.y
					    mad r0.y, r4.x, r4.x, -r0.y
					    mul r1, r4.ywzx, r4
					    dp4 r2.x, c17, r1
					    dp4 r2.y, c18, r1
					    dp4 r2.z, c19, r1
					    mad o8.xyz, c20, r0.y, r2
					    mov r6.z, r0.x
					    mov o9.x, r0.x
					    dp3 r0.z, c4, v1
					    dp3 r0.x, c5, v1
					    dp3 r0.y, c6, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o2.x, r0.z
					    mul r1.xyz, r0, r4.wxyw
					    mad r1.xyz, r4.ywxw, r0.yzxw, -r1
					    mul r0.z, c21.w, v1.w
					    mul r1.xyz, r0.z, r1
					    mov o2.y, r1.x
					    mov o2.z, r4.x
					    mov o3.x, r0.x
					    mov o4.x, r0.y
					    mov o3.y, r1.y
					    mov o4.y, r1.z
					    mov o3.z, r4.y
					    mov o4.z, r4.w
					    mov o5, v5
					    mad o0.xy, r6.w, c255, r6
					    mov o0.zw, r6
					
					// approximately 108 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						float _FaceDilate;
						vec4 unused_0_2[6];
						mat4x4 _EnvMatrix;
						vec4 unused_0_4[7];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_10[4];
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_15;
						vec4 _MainTex_ST;
						vec4 _FaceTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_4_2[13];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD4;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					int u_xlati1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					float u_xlat10;
					int u_xlati10;
					vec2 u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z;
					    u_xlat15 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat11.x = floor(u_xlat15);
					    u_xlat11.y = (-u_xlat11.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat1.xy = u_xlat11.xy * _FaceTex_ST.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat10 = dot(in_NORMAL0.xyz, u_xlat1.xyz);
					    u_xlati1 = int((0.0<u_xlat10) ? 0xFFFFFFFFu : uint(0));
					    u_xlati10 = int((u_xlat10<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati10 = (-u_xlati1) + u_xlati10;
					    u_xlat10 = float(u_xlati10);
					    u_xlat1.xyz = vec3(u_xlat10) * in_NORMAL0.xyz;
					    u_xlat2.x = dot(u_xlat1.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(u_xlat1.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1 = vec4(u_xlat10) * u_xlat2.xyzz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.wxy * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.ywx * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat1.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    u_xlat4.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat4.xyz;
					    vs_TEXCOORD1.w = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.w = u_xlat4.y;
					    vs_TEXCOORD3.z = u_xlat1.w;
					    vs_TEXCOORD3.w = u_xlat4.z;
					    u_xlat2.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat5.x = u_xlat0.y * glstate_matrix_mvp[1].w;
					    u_xlat0.x = glstate_matrix_mvp[0].w * u_xlat0.x + u_xlat5.x;
					    u_xlat0.x = glstate_matrix_mvp[2].w * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_mvp[3].w * in_POSITION0.w + u_xlat0.x;
					    u_xlat5.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat5.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat5.xy;
					    u_xlat5.xy = u_xlat5.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat0.xy = u_xlat0.xx / u_xlat5.xy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat5.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat5.x = u_xlat0.x * 1.5;
					    u_xlat10 = (-_PerspectiveFilter) + 1.0;
					    u_xlat5.x = u_xlat10 * u_xlat5.x;
					    u_xlat0.x = u_xlat0.x * 1.5 + (-u_xlat5.x);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyw, u_xlat3.xyz);
					    vs_TEXCOORD4.y = abs(u_xlat10) * u_xlat0.x + u_xlat5.x;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat5.x = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x + _WeightNormal;
					    u_xlat0.x = u_xlat0.x / _GradientScale;
					    u_xlat5.x = _FaceDilate * _ScaleRatioA;
					    vs_TEXCOORD4.x = u_xlat5.x * 0.5 + u_xlat0.x;
					    u_xlat0.xyz = u_xlat2.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyz = _EnvMatrix[0].xyz * u_xlat2.xxx + u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = _EnvMatrix[2].xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.x = u_xlat1.y * u_xlat1.y;
					    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat1.ywzx * u_xlat1;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD6.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _EnvMatrix;
					//   float _FaceDilate;
					//   float4 _FaceTex_ST;
					//   float _GradientScale;
					//   float4 _MainTex_ST;
					//   float _PerspectiveFilter;
					//   float _ScaleRatioA;
					//   float _ScaleX;
					//   float _ScaleY;
					//   float4 _ScreenParams;
					//   float _VertexOffsetX;
					//   float _VertexOffsetY;
					//   float _WeightBold;
					//   float _WeightNormal;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 glstate_matrix_projection;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_LightColor[8];
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_LightColor           c0       4
					//   glstate_matrix_mvp         c4       4
					//   unity_ObjectToWorld        c8       3
					//   unity_WorldToObject        c11      3
					//   _EnvMatrix                 c14      3
					//   glstate_matrix_projection  c17      2
					//   _WorldSpaceCameraPos       c19      1
					//   _ScreenParams              c20      1
					//   unity_4LightPosX0          c21      1
					//   unity_4LightPosY0          c22      1
					//   unity_4LightPosZ0          c23      1
					//   unity_4LightAtten0         c24      1
					//   unity_SHBr                 c25      1
					//   unity_SHBg                 c26      1
					//   unity_SHBb                 c27      1
					//   unity_SHC                  c28      1
					//   unity_WorldTransformParams c29      1
					//   _FaceDilate                c30      1
					//   _WeightNormal              c31      1
					//   _WeightBold                c32      1
					//   _ScaleRatioA               c33      1
					//   _VertexOffsetX             c34      1
					//   _VertexOffsetY             c35      1
					//   _GradientScale             c36      1
					//   _ScaleX                    c37      1
					//   _ScaleY                    c38      1
					//   _PerspectiveFilter         c39      1
					//   _MainTex_ST                c40      1
					//   _FaceTex_ST                c41      1
					//
					
					    vs_3_0
					    def c42, 0, 1, 1.5, 0.5
					    def c43, 0.000244140625, 4096, 0.001953125, 9.99999997e-007
					    def c44, 0.305306017, 0.682171106, 0.0125228781, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_color v5
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_color o5
					    dcl_texcoord4 o6.xy
					    dcl_texcoord5 o7.xyz
					    dcl_texcoord6 o8.xyz
					    dcl_texcoord7 o9.x
					    mov r0.xy, c42
					    add r0.z, r0.y, -c39.x
					    mul r0.w, c36.x, v4_abs.y
					    mov r1.xy, c20
					    mul r1.zw, r1.xyxy, c17.xyxy
					    add r1.z, r1.w, r1.z
					    mul r1.z, r1.z, c37.x
					    rcp r2.x, r1.z
					    mul r1.xy, r1, c18
					    add r1.x, r1.y, r1.x
					    mul r1.x, r1.x, c38.x
					    rcp r2.y, r1.x
					    add r1.x, c34.x, v0.x
					    add r1.y, c35.x, v0.y
					    mov r1.zw, v0
					    dp4 r2.z, c7, r1
					    mul r2.xy, r2, r2.z
					    mul r2.xy, r2, r2
					    add r2.x, r2.y, r2.x
					    rsq r2.x, r2.x
					    mul r0.w, r0.w, r2.x
					    mul r2.x, r0.w, c42.z
					    mul r0.z, r0.z, r2.x
					    mad r0.w, r0.w, c42.z, -r0.z
					    dp4 r2.x, c8, r1
					    dp4 r2.y, c9, r1
					    dp4 r2.z, c10, r1
					    add r3.xyz, -r2, c19
					    nrm r4.xyz, r3
					    mad r5, c19.xyzx, r0.yyyx, r0.xxxy
					    dp4 r6.x, c11, r5
					    dp4 r6.y, c12, r5
					    dp4 r6.z, c13, r5
					    add r5.xyz, -r1, r6
					    mad r1, r1.xyzx, c42.yyyx, c42.xxxy
					    dp3 r0.x, v2, r5
					    slt r2.w, -r0.x, r0.x
					    slt r0.x, r0.x, -r0.x
					    add r0.x, -r0.x, r2.w
					    mul r5.xyz, r0.x, v2
					    mul r6, r5.y, c12.xyzz
					    mad r6, r5.x, c11.xyzz, r6
					    mad r5, r5.z, c13.xyzz, r6
					    dp3 r0.x, r5.xyww, r5.xyww
					    rsq r0.x, r0.x
					    mul r5, r0.x, r5
					    dp3 r0.x, r5.xyww, r4
					    mad o6.y, r0_abs.x, r0.w, r0.z
					    sge r0.x, c42.x, v4.y
					    mov r4.x, c31.x
					    add r0.z, -r4.x, c32.x
					    mad r0.x, r0.x, r0.z, c31.x
					    mov r4.x, c30.x
					    mul r0.z, r4.x, c33.x
					    mul r0.z, r0.z, c42.w
					    rcp r0.w, c36.x
					    mad o6.x, r0.x, r0.w, r0.z
					    dp3 o7.x, c14, r3
					    dp3 o7.y, c15, r3
					    dp3 o7.z, c16, r3
					    dp4 r7.x, c4, r1
					    dp4 r7.y, c5, r1
					    dp4 r7.w, c7, r1
					    dp4 r0.x, c6, r1
					    mad o1.xy, v3, c40, c40.zwzw
					    mul r0.z, c43.x, v4.x
					    frc r0.w, r0.z
					    add r0.z, -r0.w, r0.z
					    mad r0.w, r0.z, -c43.y, v4.x
					    mul r0.zw, r0, c41.xyxy
					    mov r1.z, c43.z
					    mad o1.zw, r0, r1.z, c41
					    add r1, -r2.z, c23
					    mov o4.w, r2.z
					    add r3, -r2.x, c21
					    mov o2.w, r2.x
					    add r4, -r2.y, c22
					    mov o3.w, r2.y
					    mul r2, r5.y, r4
					    mul r4, r4, r4
					    mad r4, r3, r3, r4
					    mad r2, r3, r5.x, r2
					    mad r2, r1, r5.wwzw, r2
					    mad r1, r1, r1, r4
					    max r1, r1, c43.w
					    rsq r3.x, r1.x
					    rsq r3.y, r1.y
					    rsq r3.z, r1.z
					    rsq r3.w, r1.w
					    mad r1, r1, c24, r0.y
					    mul r2, r2, r3
					    max r2, r2, c42.x
					    rcp r3.x, r1.x
					    rcp r3.y, r1.y
					    rcp r3.z, r1.z
					    rcp r3.w, r1.w
					    mul r1, r2, r3
					    mul r0.yzw, r1.y, c1.xxyz
					    mad r0.yzw, c0.xxyz, r1.x, r0
					    mad r0.yzw, c2.xxyz, r1.z, r0
					    mad r0.yzw, c3.xxyz, r1.w, r0
					    mad r1.xyz, r0.yzww, c44.x, c44.y
					    mad r1.xyz, r0.yzww, r1, c44.z
					    mul r1.w, r5.y, r5.y
					    mad r1.w, r5.x, r5.x, -r1.w
					    mul r2, r5.ywzx, r5
					    dp4 r3.x, c25, r2
					    dp4 r3.y, c26, r2
					    dp4 r3.z, c27, r2
					    mad r2.xyz, c28, r1.w, r3
					    mad o8.xyz, r0.yzww, r1, r2
					    mov r7.z, r0.x
					    mov o9.x, r0.x
					    dp3 r0.z, c8, v1
					    dp3 r0.x, c9, v1
					    dp3 r0.y, c10, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o2.x, r0.z
					    mul r1.xyz, r0, r5.wxyw
					    mad r1.xyz, r5.ywxw, r0.yzxw, -r1
					    mul r0.z, c29.w, v1.w
					    mul r1.xyz, r0.z, r1
					    mov o2.y, r1.x
					    mov o2.z, r5.x
					    mov o3.x, r0.x
					    mov o4.x, r0.y
					    mov o3.y, r1.y
					    mov o4.y, r1.z
					    mov o3.z, r5.y
					    mov o4.z, r5.w
					    mov o5, v5
					    mad o0.xy, r7.w, c255, r7
					    mov o0.zw, r7
					
					// approximately 137 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						float _FaceDilate;
						vec4 unused_0_2[6];
						mat4x4 _EnvMatrix;
						vec4 unused_0_4[7];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_10[4];
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_15;
						vec4 _MainTex_ST;
						vec4 _FaceTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_4_2[13];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD4;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec2 u_xlat5;
					float u_xlat10;
					int u_xlati10;
					bool u_xlatb10;
					vec2 u_xlat11;
					float u_xlat15;
					float u_xlat16;
					int u_xlati16;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z;
					    u_xlat15 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat11.x = floor(u_xlat15);
					    u_xlat11.y = (-u_xlat11.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat1.xy = u_xlat11.xy * _FaceTex_ST.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat10 = dot(in_NORMAL0.xyz, u_xlat2.xyz);
					    u_xlati16 = int((0.0<u_xlat10) ? 0xFFFFFFFFu : uint(0));
					    u_xlati10 = int((u_xlat10<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati10 = (-u_xlati16) + u_xlati10;
					    u_xlat10 = float(u_xlati10);
					    u_xlat2.xyz = vec3(u_xlat10) * in_NORMAL0.xyz;
					    u_xlat3.x = dot(u_xlat2.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(u_xlat2.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(u_xlat2.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2 = vec4(u_xlat10) * u_xlat3.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    u_xlat4.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat4.xyz;
					    vs_TEXCOORD1.w = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD2.w = u_xlat4.y;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_TEXCOORD3.w = u_xlat4.z;
					    vs_COLOR0 = in_COLOR0;
					    u_xlatb10 = 0.0>=in_TEXCOORD1.y;
					    u_xlat10 = u_xlatb10 ? 1.0 : float(0.0);
					    u_xlat15 = (-_WeightNormal) + _WeightBold;
					    u_xlat10 = u_xlat10 * u_xlat15 + _WeightNormal;
					    u_xlat10 = u_xlat10 / _GradientScale;
					    u_xlat15 = _FaceDilate * _ScaleRatioA;
					    vs_TEXCOORD4.x = u_xlat15 * 0.5 + u_xlat10;
					    u_xlat5.x = u_xlat0.y * glstate_matrix_mvp[1].w;
					    u_xlat0.x = glstate_matrix_mvp[0].w * u_xlat0.x + u_xlat5.x;
					    u_xlat0.x = glstate_matrix_mvp[2].w * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_mvp[3].w * in_POSITION0.w + u_xlat0.x;
					    u_xlat5.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat5.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat5.xy;
					    u_xlat5.xy = u_xlat5.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat0.xy = u_xlat0.xx / u_xlat5.xy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat5.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat5.x = u_xlat0.x * 1.5;
					    u_xlat10 = (-_PerspectiveFilter) + 1.0;
					    u_xlat5.x = u_xlat10 * u_xlat5.x;
					    u_xlat0.x = u_xlat0.x * 1.5 + (-u_xlat5.x);
					    u_xlat1.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat10 = dot(u_xlat2.xyw, u_xlat3.xyz);
					    vs_TEXCOORD4.y = abs(u_xlat10) * u_xlat0.x + u_xlat5.x;
					    u_xlat0.xyz = u_xlat1.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyz = _EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = _EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
					    u_xlat0 = (-u_xlat4.yyyy) + unity_4LightPosY0;
					    u_xlat1 = u_xlat2.yyyy * u_xlat0;
					    u_xlat0 = u_xlat0 * u_xlat0;
					    u_xlat3 = (-u_xlat4.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat4.zzzz) + unity_4LightPosZ0;
					    u_xlat1 = u_xlat3 * u_xlat2.xxxx + u_xlat1;
					    u_xlat0 = u_xlat3 * u_xlat3 + u_xlat0;
					    u_xlat0 = u_xlat4 * u_xlat4 + u_xlat0;
					    u_xlat1 = u_xlat4 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat15 = u_xlat2.y * u_xlat2.y;
					    u_xlat15 = u_xlat2.x * u_xlat2.x + (-u_xlat15);
					    u_xlat2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "GLOW_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _EnvMatrix;
					//   float _FaceDilate;
					//   float4 _FaceTex_ST;
					//   float _GradientScale;
					//   float4 _MainTex_ST;
					//   float _PerspectiveFilter;
					//   float _ScaleRatioA;
					//   float _ScaleX;
					//   float _ScaleY;
					//   float4 _ScreenParams;
					//   float _VertexOffsetX;
					//   float _VertexOffsetY;
					//   float _WeightBold;
					//   float _WeightNormal;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 glstate_matrix_projection;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   _EnvMatrix                 c10      3
					//   glstate_matrix_projection  c13      2
					//   _WorldSpaceCameraPos       c15      1
					//   _ScreenParams              c16      1
					//   unity_SHBr                 c17      1
					//   unity_SHBg                 c18      1
					//   unity_SHBb                 c19      1
					//   unity_SHC                  c20      1
					//   unity_WorldTransformParams c21      1
					//   _FaceDilate                c22      1
					//   _WeightNormal              c23      1
					//   _WeightBold                c24      1
					//   _ScaleRatioA               c25      1
					//   _VertexOffsetX             c26      1
					//   _VertexOffsetY             c27      1
					//   _GradientScale             c28      1
					//   _ScaleX                    c29      1
					//   _ScaleY                    c30      1
					//   _PerspectiveFilter         c31      1
					//   _MainTex_ST                c32      1
					//   _FaceTex_ST                c33      1
					//
					
					    vs_3_0
					    def c34, 0, 1, 1.5, 0.5
					    def c35, 0.000244140625, 4096, 0.001953125, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_color v5
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_color o5
					    dcl_texcoord4 o6.xy
					    dcl_texcoord5 o7.xyz
					    dcl_texcoord6 o8.xyz
					    mov r0.xy, c34
					    add r0.z, r0.y, -c31.x
					    mul r0.w, c28.x, v4_abs.y
					    mov r1.xy, c16
					    mul r1.zw, r1.xyxy, c13.xyxy
					    add r1.z, r1.w, r1.z
					    mul r1.z, r1.z, c29.x
					    rcp r2.x, r1.z
					    mul r1.xy, r1, c14
					    add r1.x, r1.y, r1.x
					    mul r1.x, r1.x, c30.x
					    rcp r2.y, r1.x
					    add r1.x, c26.x, v0.x
					    add r1.y, c27.x, v0.y
					    mov r1.zw, v0
					    dp4 r2.z, c3, r1
					    mul r2.xy, r2, r2.z
					    mul r2.xy, r2, r2
					    add r2.x, r2.y, r2.x
					    rsq r2.x, r2.x
					    mul r0.w, r0.w, r2.x
					    mul r2.x, r0.w, c34.z
					    mul r0.z, r0.z, r2.x
					    mad r0.w, r0.w, c34.z, -r0.z
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    add r3.xyz, -r2, c15
					    mov o2.w, r2.x
					    mov o3.w, r2.y
					    mov o4.w, r2.z
					    nrm r2.xyz, r3
					    mad r4, c15.xyzx, r0.yyyx, r0.xxxy
					    dp4 r5.x, c7, r4
					    dp4 r5.y, c8, r4
					    dp4 r5.z, c9, r4
					    add r4.xyz, -r1, r5
					    mad r1, r1.xyzx, c34.yyyx, c34.xxxy
					    dp3 r0.x, v2, r4
					    slt r0.y, -r0.x, r0.x
					    slt r0.x, r0.x, -r0.x
					    add r0.x, -r0.x, r0.y
					    mul r4.xyz, r0.x, v2
					    mul r5, r4.y, c8.xyzz
					    mad r5, r4.x, c7.xyzz, r5
					    mad r4, r4.z, c9.xyzz, r5
					    dp3 r0.x, r4.xyww, r4.xyww
					    rsq r0.x, r0.x
					    mul r4, r0.x, r4
					    dp3 r0.x, r4.xyww, r2
					    mad o6.y, r0_abs.x, r0.w, r0.z
					    sge r0.x, c34.x, v4.y
					    mov r2.x, c23.x
					    add r0.y, -r2.x, c24.x
					    mad r0.x, r0.x, r0.y, c23.x
					    mov r2.x, c22.x
					    mul r0.y, r2.x, c25.x
					    mul r0.y, r0.y, c34.w
					    rcp r0.z, c28.x
					    mad o6.x, r0.x, r0.z, r0.y
					    dp3 o7.x, c10, r3
					    dp3 o7.y, c11, r3
					    dp3 o7.z, c12, r3
					    dp4 r6.x, c0, r1
					    dp4 r6.y, c1, r1
					    dp4 r6.z, c2, r1
					    dp4 r6.w, c3, r1
					    mad o1.xy, v3, c32, c32.zwzw
					    mul r0.x, c35.x, v4.x
					    frc r0.y, r0.x
					    add r0.z, -r0.y, r0.x
					    mad r0.w, r0.z, -c35.y, v4.x
					    mul r0.xy, r0.zwzw, c33
					    mov r0.z, c35.z
					    mad o1.zw, r0.xyxy, r0.z, c33
					    mul r0.x, r4.y, r4.y
					    mad r0.x, r4.x, r4.x, -r0.x
					    mul r1, r4.ywzx, r4
					    dp4 r2.x, c17, r1
					    dp4 r2.y, c18, r1
					    dp4 r2.z, c19, r1
					    mad o8.xyz, c20, r0.x, r2
					    dp3 r0.z, c4, v1
					    dp3 r0.x, c5, v1
					    dp3 r0.y, c6, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o2.x, r0.z
					    mul r1.xyz, r0, r4.wxyw
					    mad r1.xyz, r4.ywxw, r0.yzxw, -r1
					    mul r0.z, c21.w, v1.w
					    mul r1.xyz, r0.z, r1
					    mov o2.y, r1.x
					    mov o2.z, r4.x
					    mov o3.x, r0.x
					    mov o4.x, r0.y
					    mov o3.y, r1.y
					    mov o4.y, r1.z
					    mov o3.z, r4.y
					    mov o4.z, r4.w
					    mov o5, v5
					    mad o0.xy, r6.w, c255, r6
					    mov o0.zw, r6
					
					// approximately 106 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "GLOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						float _FaceDilate;
						vec4 unused_0_2[6];
						mat4x4 _EnvMatrix;
						vec4 unused_0_4[7];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_10[4];
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_15;
						vec4 _MainTex_ST;
						vec4 _FaceTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_4_2[13];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					int u_xlati1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					float u_xlat10;
					int u_xlati10;
					vec2 u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + glstate_matrix_mvp[3];
					    u_xlat15 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat11.x = floor(u_xlat15);
					    u_xlat11.y = (-u_xlat11.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat1.xy = u_xlat11.xy * _FaceTex_ST.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat10 = dot(in_NORMAL0.xyz, u_xlat1.xyz);
					    u_xlati1 = int((0.0<u_xlat10) ? 0xFFFFFFFFu : uint(0));
					    u_xlati10 = int((u_xlat10<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati10 = (-u_xlati1) + u_xlati10;
					    u_xlat10 = float(u_xlati10);
					    u_xlat1.xyz = vec3(u_xlat10) * in_NORMAL0.xyz;
					    u_xlat2.x = dot(u_xlat1.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(u_xlat1.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1 = vec4(u_xlat10) * u_xlat2.xyzz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.wxy * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.ywx * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat1.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    u_xlat4.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat4.xyz;
					    vs_TEXCOORD1.w = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.w = u_xlat4.y;
					    vs_TEXCOORD3.z = u_xlat1.w;
					    vs_TEXCOORD3.w = u_xlat4.z;
					    u_xlat2.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat5.x = u_xlat0.y * glstate_matrix_mvp[1].w;
					    u_xlat0.x = glstate_matrix_mvp[0].w * u_xlat0.x + u_xlat5.x;
					    u_xlat0.x = glstate_matrix_mvp[2].w * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_mvp[3].w * in_POSITION0.w + u_xlat0.x;
					    u_xlat5.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat5.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat5.xy;
					    u_xlat5.xy = u_xlat5.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat0.xy = u_xlat0.xx / u_xlat5.xy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat5.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat5.x = u_xlat0.x * 1.5;
					    u_xlat10 = (-_PerspectiveFilter) + 1.0;
					    u_xlat5.x = u_xlat10 * u_xlat5.x;
					    u_xlat0.x = u_xlat0.x * 1.5 + (-u_xlat5.x);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyw, u_xlat3.xyz);
					    vs_TEXCOORD4.y = abs(u_xlat10) * u_xlat0.x + u_xlat5.x;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat5.x = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x + _WeightNormal;
					    u_xlat0.x = u_xlat0.x / _GradientScale;
					    u_xlat5.x = _FaceDilate * _ScaleRatioA;
					    vs_TEXCOORD4.x = u_xlat5.x * 0.5 + u_xlat0.x;
					    u_xlat0.xyz = u_xlat2.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyz = _EnvMatrix[0].xyz * u_xlat2.xxx + u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = _EnvMatrix[2].xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.x = u_xlat1.y * u_xlat1.y;
					    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat1.ywzx * u_xlat1;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD6.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "GLOW_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _EnvMatrix;
					//   float _FaceDilate;
					//   float4 _FaceTex_ST;
					//   float _GradientScale;
					//   float4 _MainTex_ST;
					//   float _PerspectiveFilter;
					//   float _ScaleRatioA;
					//   float _ScaleX;
					//   float _ScaleY;
					//   float4 _ScreenParams;
					//   float _VertexOffsetX;
					//   float _VertexOffsetY;
					//   float _WeightBold;
					//   float _WeightNormal;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 glstate_matrix_projection;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_LightColor[8];
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_LightColor           c0       4
					//   glstate_matrix_mvp         c4       4
					//   unity_ObjectToWorld        c8       3
					//   unity_WorldToObject        c11      3
					//   _EnvMatrix                 c14      3
					//   glstate_matrix_projection  c17      2
					//   _WorldSpaceCameraPos       c19      1
					//   _ScreenParams              c20      1
					//   unity_4LightPosX0          c21      1
					//   unity_4LightPosY0          c22      1
					//   unity_4LightPosZ0          c23      1
					//   unity_4LightAtten0         c24      1
					//   unity_SHBr                 c25      1
					//   unity_SHBg                 c26      1
					//   unity_SHBb                 c27      1
					//   unity_SHC                  c28      1
					//   unity_WorldTransformParams c29      1
					//   _FaceDilate                c30      1
					//   _WeightNormal              c31      1
					//   _WeightBold                c32      1
					//   _ScaleRatioA               c33      1
					//   _VertexOffsetX             c34      1
					//   _VertexOffsetY             c35      1
					//   _GradientScale             c36      1
					//   _ScaleX                    c37      1
					//   _ScaleY                    c38      1
					//   _PerspectiveFilter         c39      1
					//   _MainTex_ST                c40      1
					//   _FaceTex_ST                c41      1
					//
					
					    vs_3_0
					    def c42, 0, 1, 1.5, 0.5
					    def c43, 0.000244140625, 4096, 0.001953125, 9.99999997e-007
					    def c44, 0.305306017, 0.682171106, 0.0125228781, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_color v5
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_color o5
					    dcl_texcoord4 o6.xy
					    dcl_texcoord5 o7.xyz
					    dcl_texcoord6 o8.xyz
					    mov r0.xy, c42
					    add r0.z, r0.y, -c39.x
					    mul r0.w, c36.x, v4_abs.y
					    mov r1.xy, c20
					    mul r1.zw, r1.xyxy, c17.xyxy
					    add r1.z, r1.w, r1.z
					    mul r1.z, r1.z, c37.x
					    rcp r2.x, r1.z
					    mul r1.xy, r1, c18
					    add r1.x, r1.y, r1.x
					    mul r1.x, r1.x, c38.x
					    rcp r2.y, r1.x
					    add r1.x, c34.x, v0.x
					    add r1.y, c35.x, v0.y
					    mov r1.zw, v0
					    dp4 r2.z, c7, r1
					    mul r2.xy, r2, r2.z
					    mul r2.xy, r2, r2
					    add r2.x, r2.y, r2.x
					    rsq r2.x, r2.x
					    mul r0.w, r0.w, r2.x
					    mul r2.x, r0.w, c42.z
					    mul r0.z, r0.z, r2.x
					    mad r0.w, r0.w, c42.z, -r0.z
					    dp4 r2.x, c8, r1
					    dp4 r2.y, c9, r1
					    dp4 r2.z, c10, r1
					    add r3.xyz, -r2, c19
					    nrm r4.xyz, r3
					    mad r5, c19.xyzx, r0.yyyx, r0.xxxy
					    dp4 r6.x, c11, r5
					    dp4 r6.y, c12, r5
					    dp4 r6.z, c13, r5
					    add r5.xyz, -r1, r6
					    mad r1, r1.xyzx, c42.yyyx, c42.xxxy
					    dp3 r0.x, v2, r5
					    slt r2.w, -r0.x, r0.x
					    slt r0.x, r0.x, -r0.x
					    add r0.x, -r0.x, r2.w
					    mul r5.xyz, r0.x, v2
					    mul r6, r5.y, c12.xyzz
					    mad r6, r5.x, c11.xyzz, r6
					    mad r5, r5.z, c13.xyzz, r6
					    dp3 r0.x, r5.xyww, r5.xyww
					    rsq r0.x, r0.x
					    mul r5, r0.x, r5
					    dp3 r0.x, r5.xyww, r4
					    mad o6.y, r0_abs.x, r0.w, r0.z
					    sge r0.x, c42.x, v4.y
					    mov r4.x, c31.x
					    add r0.z, -r4.x, c32.x
					    mad r0.x, r0.x, r0.z, c31.x
					    mov r4.x, c30.x
					    mul r0.z, r4.x, c33.x
					    mul r0.z, r0.z, c42.w
					    rcp r0.w, c36.x
					    mad o6.x, r0.x, r0.w, r0.z
					    dp3 o7.x, c14, r3
					    dp3 o7.y, c15, r3
					    dp3 o7.z, c16, r3
					    dp4 r7.x, c4, r1
					    dp4 r7.y, c5, r1
					    dp4 r7.z, c6, r1
					    dp4 r7.w, c7, r1
					    mad o1.xy, v3, c40, c40.zwzw
					    mul r0.x, c43.x, v4.x
					    frc r0.z, r0.x
					    add r0.z, -r0.z, r0.x
					    mad r0.w, r0.z, -c43.y, v4.x
					    mul r0.xz, r0.zyww, c41.xyyw
					    mov r1.z, c43.z
					    mad o1.zw, r0.xyxz, r1.z, c41
					    add r1, -r2.z, c23
					    mov o4.w, r2.z
					    add r3, -r2.x, c21
					    mov o2.w, r2.x
					    add r4, -r2.y, c22
					    mov o3.w, r2.y
					    mul r2, r5.y, r4
					    mul r4, r4, r4
					    mad r4, r3, r3, r4
					    mad r2, r3, r5.x, r2
					    mad r2, r1, r5.wwzw, r2
					    mad r1, r1, r1, r4
					    max r1, r1, c43.w
					    rsq r3.x, r1.x
					    rsq r3.y, r1.y
					    rsq r3.z, r1.z
					    rsq r3.w, r1.w
					    mad r0, r1, c24, r0.y
					    mul r1, r2, r3
					    max r1, r1, c42.x
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    rcp r2.w, r0.w
					    mul r0, r1, r2
					    mul r1.xyz, r0.y, c1
					    mad r1.xyz, c0, r0.x, r1
					    mad r0.xyz, c2, r0.z, r1
					    mad r0.xyz, c3, r0.w, r0
					    mad r1.xyz, r0, c44.x, c44.y
					    mad r1.xyz, r0, r1, c44.z
					    mul r0.w, r5.y, r5.y
					    mad r0.w, r5.x, r5.x, -r0.w
					    mul r2, r5.ywzx, r5
					    dp4 r3.x, c25, r2
					    dp4 r3.y, c26, r2
					    dp4 r3.z, c27, r2
					    mad r2.xyz, c28, r0.w, r3
					    mad o8.xyz, r0, r1, r2
					    dp3 r0.z, c8, v1
					    dp3 r0.x, c9, v1
					    dp3 r0.y, c10, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o2.x, r0.z
					    mul r1.xyz, r0, r5.wxyw
					    mad r1.xyz, r5.ywxw, r0.yzxw, -r1
					    mul r0.z, c29.w, v1.w
					    mul r1.xyz, r0.z, r1
					    mov o2.y, r1.x
					    mov o2.z, r5.x
					    mov o3.x, r0.x
					    mov o4.x, r0.y
					    mov o3.y, r1.y
					    mov o4.y, r1.z
					    mov o3.z, r5.y
					    mov o4.z, r5.w
					    mov o5, v5
					    mad o0.xy, r7.w, c255, r7
					    mov o0.zw, r7
					
					// approximately 135 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" "GLOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						float _FaceDilate;
						vec4 unused_0_2[6];
						mat4x4 _EnvMatrix;
						vec4 unused_0_4[7];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_10[4];
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_15;
						vec4 _MainTex_ST;
						vec4 _FaceTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_4_2[13];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec2 u_xlat5;
					float u_xlat10;
					int u_xlati10;
					bool u_xlatb10;
					vec2 u_xlat11;
					float u_xlat15;
					float u_xlat16;
					int u_xlati16;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + glstate_matrix_mvp[3];
					    u_xlat15 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat11.x = floor(u_xlat15);
					    u_xlat11.y = (-u_xlat11.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat1.xy = u_xlat11.xy * _FaceTex_ST.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat10 = dot(in_NORMAL0.xyz, u_xlat2.xyz);
					    u_xlati16 = int((0.0<u_xlat10) ? 0xFFFFFFFFu : uint(0));
					    u_xlati10 = int((u_xlat10<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati10 = (-u_xlati16) + u_xlati10;
					    u_xlat10 = float(u_xlati10);
					    u_xlat2.xyz = vec3(u_xlat10) * in_NORMAL0.xyz;
					    u_xlat3.x = dot(u_xlat2.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(u_xlat2.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(u_xlat2.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2 = vec4(u_xlat10) * u_xlat3.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    u_xlat4.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat4.xyz;
					    vs_TEXCOORD1.w = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD2.w = u_xlat4.y;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_TEXCOORD3.w = u_xlat4.z;
					    vs_COLOR0 = in_COLOR0;
					    u_xlatb10 = 0.0>=in_TEXCOORD1.y;
					    u_xlat10 = u_xlatb10 ? 1.0 : float(0.0);
					    u_xlat15 = (-_WeightNormal) + _WeightBold;
					    u_xlat10 = u_xlat10 * u_xlat15 + _WeightNormal;
					    u_xlat10 = u_xlat10 / _GradientScale;
					    u_xlat15 = _FaceDilate * _ScaleRatioA;
					    vs_TEXCOORD4.x = u_xlat15 * 0.5 + u_xlat10;
					    u_xlat5.x = u_xlat0.y * glstate_matrix_mvp[1].w;
					    u_xlat0.x = glstate_matrix_mvp[0].w * u_xlat0.x + u_xlat5.x;
					    u_xlat0.x = glstate_matrix_mvp[2].w * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_mvp[3].w * in_POSITION0.w + u_xlat0.x;
					    u_xlat5.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat5.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat5.xy;
					    u_xlat5.xy = u_xlat5.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat0.xy = u_xlat0.xx / u_xlat5.xy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat5.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat5.x = u_xlat0.x * 1.5;
					    u_xlat10 = (-_PerspectiveFilter) + 1.0;
					    u_xlat5.x = u_xlat10 * u_xlat5.x;
					    u_xlat0.x = u_xlat0.x * 1.5 + (-u_xlat5.x);
					    u_xlat1.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat10 = dot(u_xlat2.xyw, u_xlat3.xyz);
					    vs_TEXCOORD4.y = abs(u_xlat10) * u_xlat0.x + u_xlat5.x;
					    u_xlat0.xyz = u_xlat1.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyz = _EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = _EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
					    u_xlat0 = (-u_xlat4.yyyy) + unity_4LightPosY0;
					    u_xlat1 = u_xlat2.yyyy * u_xlat0;
					    u_xlat0 = u_xlat0 * u_xlat0;
					    u_xlat3 = (-u_xlat4.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat4.zzzz) + unity_4LightPosZ0;
					    u_xlat1 = u_xlat3 * u_xlat2.xxxx + u_xlat1;
					    u_xlat0 = u_xlat3 * u_xlat3 + u_xlat0;
					    u_xlat0 = u_xlat4 * u_xlat4 + u_xlat0;
					    u_xlat1 = u_xlat4 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat15 = u_xlat2.y * u_xlat2.y;
					    u_xlat15 = u_xlat2.x * u_xlat2.x + (-u_xlat15);
					    u_xlat2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "GLOW_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _EnvMatrix;
					//   float _FaceDilate;
					//   float4 _FaceTex_ST;
					//   float _GradientScale;
					//   float4 _MainTex_ST;
					//   float _PerspectiveFilter;
					//   float _ScaleRatioA;
					//   float _ScaleX;
					//   float _ScaleY;
					//   float4 _ScreenParams;
					//   float _VertexOffsetX;
					//   float _VertexOffsetY;
					//   float _WeightBold;
					//   float _WeightNormal;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 glstate_matrix_projection;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   _EnvMatrix                 c10      3
					//   glstate_matrix_projection  c13      2
					//   _WorldSpaceCameraPos       c15      1
					//   _ScreenParams              c16      1
					//   unity_SHBr                 c17      1
					//   unity_SHBg                 c18      1
					//   unity_SHBb                 c19      1
					//   unity_SHC                  c20      1
					//   unity_WorldTransformParams c21      1
					//   _FaceDilate                c22      1
					//   _WeightNormal              c23      1
					//   _WeightBold                c24      1
					//   _ScaleRatioA               c25      1
					//   _VertexOffsetX             c26      1
					//   _VertexOffsetY             c27      1
					//   _GradientScale             c28      1
					//   _ScaleX                    c29      1
					//   _ScaleY                    c30      1
					//   _PerspectiveFilter         c31      1
					//   _MainTex_ST                c32      1
					//   _FaceTex_ST                c33      1
					//
					
					    vs_3_0
					    def c34, 0, 1, 1.5, 0.5
					    def c35, 0.000244140625, 4096, 0.001953125, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_color v5
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_color o5
					    dcl_texcoord4 o6.xy
					    dcl_texcoord5 o7.xyz
					    dcl_texcoord6 o8.xyz
					    dcl_texcoord7 o9.x
					    mov r0.xy, c34
					    add r0.z, r0.y, -c31.x
					    mul r0.w, c28.x, v4_abs.y
					    mov r1.xy, c16
					    mul r1.zw, r1.xyxy, c13.xyxy
					    add r1.z, r1.w, r1.z
					    mul r1.z, r1.z, c29.x
					    rcp r2.x, r1.z
					    mul r1.xy, r1, c14
					    add r1.x, r1.y, r1.x
					    mul r1.x, r1.x, c30.x
					    rcp r2.y, r1.x
					    add r1.x, c26.x, v0.x
					    add r1.y, c27.x, v0.y
					    mov r1.zw, v0
					    dp4 r2.z, c3, r1
					    mul r2.xy, r2, r2.z
					    mul r2.xy, r2, r2
					    add r2.x, r2.y, r2.x
					    rsq r2.x, r2.x
					    mul r0.w, r0.w, r2.x
					    mul r2.x, r0.w, c34.z
					    mul r0.z, r0.z, r2.x
					    mad r0.w, r0.w, c34.z, -r0.z
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    add r3.xyz, -r2, c15
					    mov o2.w, r2.x
					    mov o3.w, r2.y
					    mov o4.w, r2.z
					    nrm r2.xyz, r3
					    mad r4, c15.xyzx, r0.yyyx, r0.xxxy
					    dp4 r5.x, c7, r4
					    dp4 r5.y, c8, r4
					    dp4 r5.z, c9, r4
					    add r4.xyz, -r1, r5
					    mad r1, r1.xyzx, c34.yyyx, c34.xxxy
					    dp3 r0.x, v2, r4
					    slt r0.y, -r0.x, r0.x
					    slt r0.x, r0.x, -r0.x
					    add r0.x, -r0.x, r0.y
					    mul r4.xyz, r0.x, v2
					    mul r5, r4.y, c8.xyzz
					    mad r5, r4.x, c7.xyzz, r5
					    mad r4, r4.z, c9.xyzz, r5
					    dp3 r0.x, r4.xyww, r4.xyww
					    rsq r0.x, r0.x
					    mul r4, r0.x, r4
					    dp3 r0.x, r4.xyww, r2
					    mad o6.y, r0_abs.x, r0.w, r0.z
					    sge r0.x, c34.x, v4.y
					    mov r2.x, c23.x
					    add r0.y, -r2.x, c24.x
					    mad r0.x, r0.x, r0.y, c23.x
					    mov r2.x, c22.x
					    mul r0.y, r2.x, c25.x
					    mul r0.y, r0.y, c34.w
					    rcp r0.z, c28.x
					    mad o6.x, r0.x, r0.z, r0.y
					    dp3 o7.x, c10, r3
					    dp3 o7.y, c11, r3
					    dp3 o7.z, c12, r3
					    dp4 r6.x, c0, r1
					    dp4 r6.y, c1, r1
					    dp4 r6.w, c3, r1
					    dp4 r0.x, c2, r1
					    mad o1.xy, v3, c32, c32.zwzw
					    mul r0.y, c35.x, v4.x
					    frc r0.z, r0.y
					    add r0.z, -r0.z, r0.y
					    mad r0.w, r0.z, -c35.y, v4.x
					    mul r0.yz, r0.xzww, c33.xxyw
					    mov r1.z, c35.z
					    mad o1.zw, r0.xyyz, r1.z, c33
					    mul r0.y, r4.y, r4.y
					    mad r0.y, r4.x, r4.x, -r0.y
					    mul r1, r4.ywzx, r4
					    dp4 r2.x, c17, r1
					    dp4 r2.y, c18, r1
					    dp4 r2.z, c19, r1
					    mad o8.xyz, c20, r0.y, r2
					    mov r6.z, r0.x
					    mov o9.x, r0.x
					    dp3 r0.z, c4, v1
					    dp3 r0.x, c5, v1
					    dp3 r0.y, c6, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o2.x, r0.z
					    mul r1.xyz, r0, r4.wxyw
					    mad r1.xyz, r4.ywxw, r0.yzxw, -r1
					    mul r0.z, c21.w, v1.w
					    mul r1.xyz, r0.z, r1
					    mov o2.y, r1.x
					    mov o2.z, r4.x
					    mov o3.x, r0.x
					    mov o4.x, r0.y
					    mov o3.y, r1.y
					    mov o4.y, r1.z
					    mov o3.z, r4.y
					    mov o4.z, r4.w
					    mov o5, v5
					    mad o0.xy, r6.w, c255, r6
					    mov o0.zw, r6
					
					// approximately 108 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "GLOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						float _FaceDilate;
						vec4 unused_0_2[6];
						mat4x4 _EnvMatrix;
						vec4 unused_0_4[7];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_10[4];
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_15;
						vec4 _MainTex_ST;
						vec4 _FaceTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_4_2[13];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD4;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					int u_xlati1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					float u_xlat10;
					int u_xlati10;
					vec2 u_xlat11;
					float u_xlat15;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z;
					    u_xlat15 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat11.x = floor(u_xlat15);
					    u_xlat11.y = (-u_xlat11.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat1.xy = u_xlat11.xy * _FaceTex_ST.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat10 = dot(in_NORMAL0.xyz, u_xlat1.xyz);
					    u_xlati1 = int((0.0<u_xlat10) ? 0xFFFFFFFFu : uint(0));
					    u_xlati10 = int((u_xlat10<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati10 = (-u_xlati1) + u_xlati10;
					    u_xlat10 = float(u_xlati10);
					    u_xlat1.xyz = vec3(u_xlat10) * in_NORMAL0.xyz;
					    u_xlat2.x = dot(u_xlat1.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(u_xlat1.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat1 = vec4(u_xlat10) * u_xlat2.xyzz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.wxy * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.ywx * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat1.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    u_xlat4.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat4.xyz;
					    vs_TEXCOORD1.w = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.w = u_xlat4.y;
					    vs_TEXCOORD3.z = u_xlat1.w;
					    vs_TEXCOORD3.w = u_xlat4.z;
					    u_xlat2.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat5.x = u_xlat0.y * glstate_matrix_mvp[1].w;
					    u_xlat0.x = glstate_matrix_mvp[0].w * u_xlat0.x + u_xlat5.x;
					    u_xlat0.x = glstate_matrix_mvp[2].w * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_mvp[3].w * in_POSITION0.w + u_xlat0.x;
					    u_xlat5.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat5.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat5.xy;
					    u_xlat5.xy = u_xlat5.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat0.xy = u_xlat0.xx / u_xlat5.xy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat5.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat5.x = u_xlat0.x * 1.5;
					    u_xlat10 = (-_PerspectiveFilter) + 1.0;
					    u_xlat5.x = u_xlat10 * u_xlat5.x;
					    u_xlat0.x = u_xlat0.x * 1.5 + (-u_xlat5.x);
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyw, u_xlat3.xyz);
					    vs_TEXCOORD4.y = abs(u_xlat10) * u_xlat0.x + u_xlat5.x;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat5.x = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x + _WeightNormal;
					    u_xlat0.x = u_xlat0.x / _GradientScale;
					    u_xlat5.x = _FaceDilate * _ScaleRatioA;
					    vs_TEXCOORD4.x = u_xlat5.x * 0.5 + u_xlat0.x;
					    u_xlat0.xyz = u_xlat2.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyz = _EnvMatrix[0].xyz * u_xlat2.xxx + u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = _EnvMatrix[2].xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.x = u_xlat1.y * u_xlat1.y;
					    u_xlat0.x = u_xlat1.x * u_xlat1.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat1.ywzx * u_xlat1;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD6.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "VERTEXLIGHT_ON" "GLOW_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _EnvMatrix;
					//   float _FaceDilate;
					//   float4 _FaceTex_ST;
					//   float _GradientScale;
					//   float4 _MainTex_ST;
					//   float _PerspectiveFilter;
					//   float _ScaleRatioA;
					//   float _ScaleX;
					//   float _ScaleY;
					//   float4 _ScreenParams;
					//   float _VertexOffsetX;
					//   float _VertexOffsetY;
					//   float _WeightBold;
					//   float _WeightNormal;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 glstate_matrix_projection;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_LightColor[8];
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_LightColor           c0       4
					//   glstate_matrix_mvp         c4       4
					//   unity_ObjectToWorld        c8       3
					//   unity_WorldToObject        c11      3
					//   _EnvMatrix                 c14      3
					//   glstate_matrix_projection  c17      2
					//   _WorldSpaceCameraPos       c19      1
					//   _ScreenParams              c20      1
					//   unity_4LightPosX0          c21      1
					//   unity_4LightPosY0          c22      1
					//   unity_4LightPosZ0          c23      1
					//   unity_4LightAtten0         c24      1
					//   unity_SHBr                 c25      1
					//   unity_SHBg                 c26      1
					//   unity_SHBb                 c27      1
					//   unity_SHC                  c28      1
					//   unity_WorldTransformParams c29      1
					//   _FaceDilate                c30      1
					//   _WeightNormal              c31      1
					//   _WeightBold                c32      1
					//   _ScaleRatioA               c33      1
					//   _VertexOffsetX             c34      1
					//   _VertexOffsetY             c35      1
					//   _GradientScale             c36      1
					//   _ScaleX                    c37      1
					//   _ScaleY                    c38      1
					//   _PerspectiveFilter         c39      1
					//   _MainTex_ST                c40      1
					//   _FaceTex_ST                c41      1
					//
					
					    vs_3_0
					    def c42, 0, 1, 1.5, 0.5
					    def c43, 0.000244140625, 4096, 0.001953125, 9.99999997e-007
					    def c44, 0.305306017, 0.682171106, 0.0125228781, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_color v5
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3
					    dcl_texcoord3 o4
					    dcl_color o5
					    dcl_texcoord4 o6.xy
					    dcl_texcoord5 o7.xyz
					    dcl_texcoord6 o8.xyz
					    dcl_texcoord7 o9.x
					    mov r0.xy, c42
					    add r0.z, r0.y, -c39.x
					    mul r0.w, c36.x, v4_abs.y
					    mov r1.xy, c20
					    mul r1.zw, r1.xyxy, c17.xyxy
					    add r1.z, r1.w, r1.z
					    mul r1.z, r1.z, c37.x
					    rcp r2.x, r1.z
					    mul r1.xy, r1, c18
					    add r1.x, r1.y, r1.x
					    mul r1.x, r1.x, c38.x
					    rcp r2.y, r1.x
					    add r1.x, c34.x, v0.x
					    add r1.y, c35.x, v0.y
					    mov r1.zw, v0
					    dp4 r2.z, c7, r1
					    mul r2.xy, r2, r2.z
					    mul r2.xy, r2, r2
					    add r2.x, r2.y, r2.x
					    rsq r2.x, r2.x
					    mul r0.w, r0.w, r2.x
					    mul r2.x, r0.w, c42.z
					    mul r0.z, r0.z, r2.x
					    mad r0.w, r0.w, c42.z, -r0.z
					    dp4 r2.x, c8, r1
					    dp4 r2.y, c9, r1
					    dp4 r2.z, c10, r1
					    add r3.xyz, -r2, c19
					    nrm r4.xyz, r3
					    mad r5, c19.xyzx, r0.yyyx, r0.xxxy
					    dp4 r6.x, c11, r5
					    dp4 r6.y, c12, r5
					    dp4 r6.z, c13, r5
					    add r5.xyz, -r1, r6
					    mad r1, r1.xyzx, c42.yyyx, c42.xxxy
					    dp3 r0.x, v2, r5
					    slt r2.w, -r0.x, r0.x
					    slt r0.x, r0.x, -r0.x
					    add r0.x, -r0.x, r2.w
					    mul r5.xyz, r0.x, v2
					    mul r6, r5.y, c12.xyzz
					    mad r6, r5.x, c11.xyzz, r6
					    mad r5, r5.z, c13.xyzz, r6
					    dp3 r0.x, r5.xyww, r5.xyww
					    rsq r0.x, r0.x
					    mul r5, r0.x, r5
					    dp3 r0.x, r5.xyww, r4
					    mad o6.y, r0_abs.x, r0.w, r0.z
					    sge r0.x, c42.x, v4.y
					    mov r4.x, c31.x
					    add r0.z, -r4.x, c32.x
					    mad r0.x, r0.x, r0.z, c31.x
					    mov r4.x, c30.x
					    mul r0.z, r4.x, c33.x
					    mul r0.z, r0.z, c42.w
					    rcp r0.w, c36.x
					    mad o6.x, r0.x, r0.w, r0.z
					    dp3 o7.x, c14, r3
					    dp3 o7.y, c15, r3
					    dp3 o7.z, c16, r3
					    dp4 r7.x, c4, r1
					    dp4 r7.y, c5, r1
					    dp4 r7.w, c7, r1
					    dp4 r0.x, c6, r1
					    mad o1.xy, v3, c40, c40.zwzw
					    mul r0.z, c43.x, v4.x
					    frc r0.w, r0.z
					    add r0.z, -r0.w, r0.z
					    mad r0.w, r0.z, -c43.y, v4.x
					    mul r0.zw, r0, c41.xyxy
					    mov r1.z, c43.z
					    mad o1.zw, r0, r1.z, c41
					    add r1, -r2.z, c23
					    mov o4.w, r2.z
					    add r3, -r2.x, c21
					    mov o2.w, r2.x
					    add r4, -r2.y, c22
					    mov o3.w, r2.y
					    mul r2, r5.y, r4
					    mul r4, r4, r4
					    mad r4, r3, r3, r4
					    mad r2, r3, r5.x, r2
					    mad r2, r1, r5.wwzw, r2
					    mad r1, r1, r1, r4
					    max r1, r1, c43.w
					    rsq r3.x, r1.x
					    rsq r3.y, r1.y
					    rsq r3.z, r1.z
					    rsq r3.w, r1.w
					    mad r1, r1, c24, r0.y
					    mul r2, r2, r3
					    max r2, r2, c42.x
					    rcp r3.x, r1.x
					    rcp r3.y, r1.y
					    rcp r3.z, r1.z
					    rcp r3.w, r1.w
					    mul r1, r2, r3
					    mul r0.yzw, r1.y, c1.xxyz
					    mad r0.yzw, c0.xxyz, r1.x, r0
					    mad r0.yzw, c2.xxyz, r1.z, r0
					    mad r0.yzw, c3.xxyz, r1.w, r0
					    mad r1.xyz, r0.yzww, c44.x, c44.y
					    mad r1.xyz, r0.yzww, r1, c44.z
					    mul r1.w, r5.y, r5.y
					    mad r1.w, r5.x, r5.x, -r1.w
					    mul r2, r5.ywzx, r5
					    dp4 r3.x, c25, r2
					    dp4 r3.y, c26, r2
					    dp4 r3.z, c27, r2
					    mad r2.xyz, c28, r1.w, r3
					    mad o8.xyz, r0.yzww, r1, r2
					    mov r7.z, r0.x
					    mov o9.x, r0.x
					    dp3 r0.z, c8, v1
					    dp3 r0.x, c9, v1
					    dp3 r0.y, c10, v1
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul r0.xyz, r0.w, r0
					    mov o2.x, r0.z
					    mul r1.xyz, r0, r5.wxyw
					    mad r1.xyz, r5.ywxw, r0.yzxw, -r1
					    mul r0.z, c29.w, v1.w
					    mul r1.xyz, r0.z, r1
					    mov o2.y, r1.x
					    mov o2.z, r5.x
					    mov o3.x, r0.x
					    mov o4.x, r0.y
					    mov o3.y, r1.y
					    mov o4.y, r1.z
					    mov o3.z, r5.y
					    mov o4.z, r5.w
					    mov o5, v5
					    mad o0.xy, r7.w, c255, r7
					    mov o0.zw, r7
					
					// approximately 137 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "VERTEXLIGHT_ON" "GLOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						float _FaceDilate;
						vec4 unused_0_2[6];
						mat4x4 _EnvMatrix;
						vec4 unused_0_4[7];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_10[4];
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_15;
						vec4 _MainTex_ST;
						vec4 _FaceTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_3_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_4_2[13];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD4;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec2 u_xlat5;
					float u_xlat10;
					int u_xlati10;
					bool u_xlatb10;
					vec2 u_xlat11;
					float u_xlat15;
					float u_xlat16;
					int u_xlati16;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z;
					    u_xlat15 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat11.x = floor(u_xlat15);
					    u_xlat11.y = (-u_xlat11.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat1.xy = u_xlat11.xy * _FaceTex_ST.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat15 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat1.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * unity_WorldToObject[1].xyz;
					    u_xlat2.xyz = unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat2.xyz = (-u_xlat0.xyz) + u_xlat2.xyz;
					    u_xlat10 = dot(in_NORMAL0.xyz, u_xlat2.xyz);
					    u_xlati16 = int((0.0<u_xlat10) ? 0xFFFFFFFFu : uint(0));
					    u_xlati10 = int((u_xlat10<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati10 = (-u_xlati16) + u_xlati10;
					    u_xlat10 = float(u_xlati10);
					    u_xlat2.xyz = vec3(u_xlat10) * in_NORMAL0.xyz;
					    u_xlat3.x = dot(u_xlat2.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(u_xlat2.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(u_xlat2.xyz, unity_WorldToObject[2].xyz);
					    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat2 = vec4(u_xlat10) * u_xlat3.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    u_xlat4.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat4.xyz;
					    vs_TEXCOORD1.w = u_xlat4.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD2.w = u_xlat4.y;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_TEXCOORD3.w = u_xlat4.z;
					    vs_COLOR0 = in_COLOR0;
					    u_xlatb10 = 0.0>=in_TEXCOORD1.y;
					    u_xlat10 = u_xlatb10 ? 1.0 : float(0.0);
					    u_xlat15 = (-_WeightNormal) + _WeightBold;
					    u_xlat10 = u_xlat10 * u_xlat15 + _WeightNormal;
					    u_xlat10 = u_xlat10 / _GradientScale;
					    u_xlat15 = _FaceDilate * _ScaleRatioA;
					    vs_TEXCOORD4.x = u_xlat15 * 0.5 + u_xlat10;
					    u_xlat5.x = u_xlat0.y * glstate_matrix_mvp[1].w;
					    u_xlat0.x = glstate_matrix_mvp[0].w * u_xlat0.x + u_xlat5.x;
					    u_xlat0.x = glstate_matrix_mvp[2].w * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_mvp[3].w * in_POSITION0.w + u_xlat0.x;
					    u_xlat5.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat5.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat5.xy;
					    u_xlat5.xy = u_xlat5.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat0.xy = u_xlat0.xx / u_xlat5.xy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat5.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat0.x = u_xlat0.x * u_xlat5.x;
					    u_xlat5.x = u_xlat0.x * 1.5;
					    u_xlat10 = (-_PerspectiveFilter) + 1.0;
					    u_xlat5.x = u_xlat10 * u_xlat5.x;
					    u_xlat0.x = u_xlat0.x * 1.5 + (-u_xlat5.x);
					    u_xlat1.xyz = (-u_xlat4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat10 = dot(u_xlat2.xyw, u_xlat3.xyz);
					    vs_TEXCOORD4.y = abs(u_xlat10) * u_xlat0.x + u_xlat5.x;
					    u_xlat0.xyz = u_xlat1.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyz = _EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;
					    vs_TEXCOORD5.xyz = _EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;
					    u_xlat0 = (-u_xlat4.yyyy) + unity_4LightPosY0;
					    u_xlat1 = u_xlat2.yyyy * u_xlat0;
					    u_xlat0 = u_xlat0 * u_xlat0;
					    u_xlat3 = (-u_xlat4.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat4.zzzz) + unity_4LightPosZ0;
					    u_xlat1 = u_xlat3 * u_xlat2.xxxx + u_xlat1;
					    u_xlat0 = u_xlat3 * u_xlat3 + u_xlat0;
					    u_xlat0 = u_xlat4 * u_xlat4 + u_xlat0;
					    u_xlat1 = u_xlat4 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat15 = u_xlat2.y * u_xlat2.y;
					    u_xlat15 = u_xlat2.x * u_xlat2.x + (-u_xlat15);
					    u_xlat2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat3.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Bevel;
					//   float _BevelClamp;
					//   float _BevelOffset;
					//   float _BevelRoundness;
					//   float _BevelWidth;
					//   float _BumpFace;
					//   sampler2D _BumpMap;
					//   float _BumpOutline;
					//   samplerCUBE _Cube;
					//   float4 _FaceColor;
					//   float _FaceShininess;
					//   sampler2D _FaceTex;
					//   float _FaceUVSpeedX;
					//   float _FaceUVSpeedY;
					//   float _GradientScale;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float4 _OutlineColor;
					//   float _OutlineShininess;
					//   float _OutlineSoftness;
					//   sampler2D _OutlineTex;
					//   float _OutlineUVSpeedX;
					//   float _OutlineUVSpeedY;
					//   float _OutlineWidth;
					//   float4 _ReflectFaceColor;
					//   float4 _ReflectOutlineColor;
					//   float _ScaleRatioA;
					//   float _ShaderFlags;
					//   float4 _SpecColor;
					//   float _TextureHeight;
					//   float _TextureWidth;
					//   float4 _Time;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_ObjectToWorld  c0       3
					//   _Time                c3       1
					//   _WorldSpaceCameraPos c4       1
					//   _WorldSpaceLightPos0 c5       1
					//   unity_SHAr           c6       1
					//   unity_SHAg           c7       1
					//   unity_SHAb           c8       1
					//   _LightColor0         c9       1
					//   _SpecColor           c10      1
					//   _FaceUVSpeedX        c11      1
					//   _FaceUVSpeedY        c12      1
					//   _FaceColor           c13      1
					//   _OutlineSoftness     c14      1
					//   _OutlineUVSpeedX     c15      1
					//   _OutlineUVSpeedY     c16      1
					//   _OutlineColor        c17      1
					//   _OutlineWidth        c18      1
					//   _Bevel               c19      1
					//   _BevelOffset         c20      1
					//   _BevelWidth          c21      1
					//   _BevelClamp          c22      1
					//   _BevelRoundness      c23      1
					//   _BumpOutline         c24      1
					//   _BumpFace            c25      1
					//   _ReflectFaceColor    c26      1
					//   _ReflectOutlineColor c27      1
					//   _ShaderFlags         c28      1
					//   _ScaleRatioA         c29      1
					//   _TextureWidth        c30      1
					//   _TextureHeight       c31      1
					//   _GradientScale       c32      1
					//   _FaceShininess       c33      1
					//   _OutlineShininess    c34      1
					//   _FaceTex             s0       1
					//   _OutlineTex          s1       1
					//   _BumpMap             s2       1
					//   _Cube                s3       1
					//   _MainTex             s4       1
					//
					
					    ps_3_0
					    def c35, 10000, 0.00999999978, 2, -1
					    def c36, 0.249999955, 0.25, 6.28318548, -3.14159274
					    def c37, -2.52398507e-007, 2.47609005e-005, -0.00138883968, 0.0416666418
					    def c38, 0.416666657, 1.05499995, -0.0549999997, 128
					    def c39, 0, 0.5, 1, -9.99999975e-005
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2
					    dcl_texcoord3 v3
					    dcl_color_pp v4
					    dcl_texcoord4 v5.xy
					    dcl_texcoord5 v6.xyz
					    dcl_texcoord6_pp v7.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_cube s3
					    dcl_2d s4
					    mov r0.x, v1.w
					    mov r0.y, v2.w
					    mov r0.z, v3.w
					    add r0.xyz, -r0, c4
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mad_pp r0.xyz, r0, r0.w, c5
					    nrm_pp r1.xyz, r0
					    add r0.x, c20.x, v5.x
					    rcp r2.x, c30.x
					    rcp r2.w, c31.x
					    mov r2.yz, c39.x
					    add r3, -r2, v0.xyxy
					    add r2, r2, v0.xyxy
					    texld r4, r3, s4
					    texld r3, r3.zwzw, s4
					    mov r3.z, r3.w
					    mov r3.x, r4.w
					    texld r4, r2, s4
					    texld r2, r2.zwzw, s4
					    mov r3.w, r2.w
					    mov r3.y, r4.w
					    add r0, r0.x, r3
					    mov r2.x, c18.x
					    add r1.w, r2.x, c21.x
					    max r2.y, c35.y, r1.w
					    rcp r1.w, r2.y
					    mul r2.y, r2.y, c19.x
					    mul r2.y, r2.y, c32.x
					    mul r2.y, r2.y, -c35.z
					    lrp_sat r3, r1.w, r0, c39.y
					    mad r0, r3, c35.z, c35.w
					    add r0, -r0_abs, c39.z
					    mov r4.yz, c39
					    mul r1.w, r4.y, c28.x
					    frc r1.w, r1_abs.w
					    cmp r1.w, c28.x, r1.w, -r1.w
					    add r1.w, r1.w, -c39.y
					    cmp r0, r1.w, r0, r3
					    mad r3, r0, c36.x, c36.y
					    frc r3, r3
					    mad r3, r3, c36.z, c36.w
					    mul r3, r3, r3
					    mad r5, r3, c37.x, c37.y
					    mad r5, r3, r5, c37.z
					    mad r5, r3, r5, c37.w
					    mad r5, r3, r5, -c39.y
					    mad r3, r3, r5, c39.z
					    lrp r5, c23.x, r3, r0
					    add r0.x, r4.z, -c22.x
					    min r3, r0.x, r5
					    mul r0.xy, r2.y, r3.xzzw
					    mad r0.xy, r3.ywzw, r2.y, -r0
					    mov r0.w, -c39.z
					    dp2add r1.w, r0.wyzw, r0.wyzw, c39.x
					    mul r2.yzw, r0.xwyw, c39.xzzx
					    rsq r0.y, r1.w
					    mul r2.yzw, r0.y, r2
					    mov r0.z, c39.z
					    dp2add r0.y, r0.zxzw, r0.zxzw, c39.x
					    rsq r0.y, r0.y
					    mul r3.x, r0.y, r0.x
					    mul r3.yz, r0.y, c39.xzxw
					    mul r0.xyz, r2.yzww, r3
					    mad r0.xyz, r3.zxyw, r2.zwyw, -r0
					    mov r2.y, c3.y
					    mad r3.x, c15.x, r2.y, v0.z
					    mad r3.y, c16.x, r2.y, v0.w
					    texld r3, r3, s1
					    mul_pp r3.xyz, r3, c17
					    mul r0.w, c17.w, v4.w
					    mul_pp r4.w, r3.w, r0.w
					    mul_pp r4.xyz, r3, r4.w
					    mad r3.x, c11.x, r2.y, v0.z
					    mad r3.y, c12.x, r2.y, v0.w
					    texld r3, r3, s0
					    mul r5, c13, v4
					    mul_pp r3, r3, r5
					    mul_pp r3.xyz, r3.w, r3
					    mul r0.w, r2.x, c29.x
					    mad r1.w, r0.w, -v5.y, c39.z
					    mul_pp r0.w, r0.w, v5.y
					    rsq r2.x, r0.w
					    rcp_pp r2.x, r2.x
					    cmp_pp r1.w, r1.w, r2.x, c39.z
					    texld r2, v0, s4
					    add r2.x, -r2.w, c39.y
					    add r2.x, r2.x, -v5.x
					    mad_pp r2.x, r2.x, v5.y, c39.y
					    mad_sat_pp r2.y, r0.w, c39.y, r2.x
					    mad_pp r0.w, r0.w, -c39.y, r2.x
					    mul_pp r1.w, r1.w, r2.y
					    lrp_pp r5, r1.w, r4, r3
					    mov r2.x, c29.x
					    mul r1.w, r2.x, c14.x
					    mul_pp r2.x, r1.w, v5.y
					    mad_pp r1.w, r1.w, v5.y, c39.z
					    rcp r1.w, r1.w
					    mad_pp r0.w, r2.x, c39.y, r0.w
					    mul_sat_pp r0.w, r1.w, r0.w
					    add_pp r0.w, -r0.w, c39.z
					    mul_pp r3, r0.w, r5
					    mad r0.w, r5.w, r0.w, c39.w
					    mov r2.x, c25.x
					    add r1.w, -r2.x, c24.x
					    mad r1.w, r2.y, r1.w, c25.x
					    texld_pp r4, v0.zwzw, s2
					    mad_pp r4.xy, r4.wyzw, c35.z, c35.w
					    dp2add_sat_pp r2.x, r4, r4, c39.x
					    add_pp r2.x, -r2.x, c39.z
					    rsq_pp r2.x, r2.x
					    rcp_pp r4.z, r2.x
					    mad r2.xzw, r4.xyyz, r1.w, -c39.xyxz
					    mad r2.xzw, r3.w, r2, c39.xyxz
					    add r0.xyz, r0, -r2.xzww
					    nrm r4.xyz, r0
					    dp3_pp r5.x, v1, -r4
					    dp3_pp r5.y, v2, -r4
					    dp3_pp r5.z, v3, -r4
					    dp3_pp r0.x, r5, r1
					    max r1.x, r0.x, c39.x
					    mov r0.x, c33.x
					    add r0.x, -r0.x, c34.x
					    mad_pp r0.x, r2.y, r0.x, c33.x
					    mul r0.x, r0.x, c38.w
					    pow r2.x, r1.x, r0.x
					    mov r0.xyz, c9
					    mul r0.xyz, r0, c10
					    mul r0.xyz, r2.x, r0
					    rcp r1.x, r3.w
					    cmp r0.w, r0.w, r1.x, c35.x
					    mul_pp r1.xyz, r0.w, r3
					    mul_pp r2.xzw, r1.xyyz, c9.xyyz
					    dp3_pp r0.w, r5, c5
					    max_pp r1.w, r0.w, c39.x
					    mad_pp r0.xyz, r2.xzww, r1.w, r0
					    mov r5.w, c39.z
					    dp4_pp r3.x, c6, r5
					    dp4_pp r3.y, c7, r5
					    dp4_pp r3.z, c8, r5
					    add_pp r2.xzw, r3.xyyz, v7.xyyz
					    max_pp r3.xyz, r2.xzww, c39.x
					    log_pp r5.x, r3.x
					    log_pp r5.y, r3.y
					    log_pp r5.z, r3.z
					    mul_pp r2.xzw, r5.xyyz, c38.x
					    exp_pp r3.x, r2.x
					    exp_pp r3.y, r2.z
					    exp_pp r3.z, r2.w
					    mad_pp r2.xzw, r3.xyyz, c38.y, c38.z
					    max_pp r3.xyz, r2.xzww, c39.x
					    mad_pp r0.xyz, r1, r3, r0
					    mov r1.xyz, c26
					    add r1.xyz, -r1, c27
					    mad r1.xyz, r2.y, r1, c26
					    dp3 r2.x, c0, r4
					    dp3 r2.y, c1, r4
					    dp3 r2.z, c2, r4
					    dp3 r0.w, v6, r2
					    add r0.w, r0.w, r0.w
					    mad r2.xyz, r2, -r0.w, v6
					    texld_pp r2, r2, s3
					    mul r1.xyz, r1, r2
					    mad_pp oC0.xyz, r1, r3.w, r0
					    mov_pp oC0.w, r3.w
					
					// approximately 174 instruction slots used (9 texture, 165 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						float _FaceUVSpeedX;
						float _FaceUVSpeedY;
						vec4 _FaceColor;
						float _OutlineSoftness;
						float _OutlineUVSpeedX;
						float _OutlineUVSpeedY;
						vec4 _OutlineColor;
						float _OutlineWidth;
						float _Bevel;
						float _BevelOffset;
						float _BevelWidth;
						float _BevelClamp;
						float _BevelRoundness;
						float _BumpOutline;
						float _BumpFace;
						vec4 _ReflectFaceColor;
						vec4 _ReflectOutlineColor;
						vec4 unused_0_20[12];
						float _ShaderFlags;
						float _ScaleRatioA;
						vec4 unused_0_23[4];
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _FaceShininess;
						float _OutlineShininess;
						vec4 unused_0_29[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[4];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[12];
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_2[6];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _FaceTex;
					uniform  sampler2D _OutlineTex;
					uniform  sampler2D _BumpMap;
					uniform  samplerCube _Cube;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					bool u_xlatb4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					float u_xlat12;
					vec2 u_xlat13;
					bool u_xlatb13;
					float u_xlat18;
					float u_xlat21;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat9.x = vs_TEXCOORD1.w;
					    u_xlat9.y = vs_TEXCOORD2.w;
					    u_xlat9.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);
					    u_xlat2.z = 0.0;
					    u_xlat3 = (-u_xlat2.xzzy) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = texture(_MainTex, u_xlat3.xy);
					    u_xlat2 = u_xlat2.xzzy + vs_TEXCOORD0.xyxy;
					    u_xlat5 = texture(_MainTex, u_xlat2.xy);
					    u_xlat3 = texture(_MainTex, u_xlat3.zw);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat6 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat28 = (-u_xlat6.w) + 0.5;
					    u_xlat28 = u_xlat28 + (-vs_TEXCOORD4.x);
					    u_xlat28 = u_xlat28 * vs_TEXCOORD4.y + 0.5;
					    u_xlat3.x = _OutlineWidth * _ScaleRatioA;
					    u_xlat3.y = _OutlineSoftness * _ScaleRatioA;
					    u_xlat3.xz = u_xlat3.xy * vs_TEXCOORD4.yy;
					    u_xlat6 = vs_COLOR0 * _FaceColor;
					    u_xlat4.x = vs_COLOR0.w * _OutlineColor.w;
					    u_xlat13.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat7 = texture(_FaceTex, u_xlat13.xy);
					    u_xlat6 = u_xlat6 * u_xlat7;
					    u_xlat13.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat7 = texture(_OutlineTex, u_xlat13.xy);
					    u_xlat5.xyz = u_xlat7.xyz * _OutlineColor.xyz;
					    u_xlat7.w = u_xlat4.x * u_xlat7.w;
					    u_xlat4.x = (-u_xlat3.x) * 0.5 + u_xlat28;
					    u_xlat21 = u_xlat3.z * 0.5 + u_xlat4.x;
					    u_xlat12 = u_xlat3.y * vs_TEXCOORD4.y + 1.0;
					    u_xlat12 = u_xlat21 / u_xlat12;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat28 = u_xlat3.x * 0.5 + u_xlat28;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat3.x = min(u_xlat3.x, 1.0);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat3.x = u_xlat28 * u_xlat3.x;
					    u_xlat6.xyz = u_xlat6.www * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat5.xyz * u_xlat7.www;
					    u_xlat7 = (-u_xlat6) + u_xlat7;
					    u_xlat6 = u_xlat3.xxxx * u_xlat7 + u_xlat6;
					    u_xlat6 = vec4(u_xlat12) * u_xlat6;
					    u_xlat3.x = max(u_xlat6.w, 9.99999975e-05);
					    u_xlat3.xyz = u_xlat6.xyz / u_xlat3.xxx;
					    u_xlat4.x = _ShaderFlags * 0.5;
					    u_xlatb13 = u_xlat4.x>=(-u_xlat4.x);
					    u_xlat4.x = fract(abs(u_xlat4.x));
					    u_xlat4.x = (u_xlatb13) ? u_xlat4.x : (-u_xlat4.x);
					    u_xlatb4 = u_xlat4.x>=0.5;
					    u_xlat13.x = vs_TEXCOORD4.x + _BevelOffset;
					    u_xlat2.x = u_xlat4.w;
					    u_xlat2.y = u_xlat5.w;
					    u_xlat2.z = u_xlat3.w;
					    u_xlat2 = u_xlat13.xxxx + u_xlat2;
					    u_xlat30 = _BevelWidth + _OutlineWidth;
					    u_xlat30 = max(u_xlat30, 0.00999999978);
					    u_xlat2 = u_xlat2 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat2 = u_xlat2 / vec4(u_xlat30);
					    u_xlat2 = u_xlat2 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat5 = u_xlat2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat5 = -abs(u_xlat5) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = (bool(u_xlatb4)) ? u_xlat5 : u_xlat2;
					    u_xlat4 = u_xlat2 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);
					    u_xlat4 = sin(u_xlat4);
					    u_xlat4 = (-u_xlat2) + u_xlat4;
					    u_xlat2 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat4 + u_xlat2;
					    u_xlat4.x = (-_BevelClamp) + 1.0;
					    u_xlat2 = min(u_xlat2, u_xlat4.xxxx);
					    u_xlat30 = u_xlat30 * _Bevel;
					    u_xlat30 = u_xlat30 * _GradientScale;
					    u_xlat30 = u_xlat30 * -2.0;
					    u_xlat2.xz = u_xlat2.xz * vec2(u_xlat30);
					    u_xlat2.yz = u_xlat2.wy * vec2(u_xlat30) + (-u_xlat2.zx);
					    u_xlat2.x = float(-1.0);
					    u_xlat2.w = float(1.0);
					    u_xlat29 = dot(u_xlat2.zw, u_xlat2.zw);
					    u_xlat29 = inversesqrt(u_xlat29);
					    u_xlat4.yz = vec2(u_xlat29) * vec2(1.0, 0.0);
					    u_xlat4.x = u_xlat29 * u_xlat2.z;
					    u_xlat29 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat29 = inversesqrt(u_xlat29);
					    u_xlat2.z = 0.0;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat4.zxy * u_xlat2.yzx + (-u_xlat5.xyz);
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.zw);
					    u_xlat4.xy = u_xlat4.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat29 = min(u_xlat29, 1.0);
					    u_xlat29 = (-u_xlat29) + 1.0;
					    u_xlat4.z = sqrt(u_xlat29);
					    u_xlat29 = (-_BumpFace) + _BumpOutline;
					    u_xlat29 = u_xlat28 * u_xlat29 + _BumpFace;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat29) + vec3(-0.0, -0.0, -1.0);
					    u_xlat4.xyz = u_xlat6.www * u_xlat4.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat4.xyz);
					    u_xlat29 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat29 = inversesqrt(u_xlat29);
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat4.xyz;
					    u_xlat29 = dot(vs_TEXCOORD5.xyz, u_xlat4.xyz);
					    u_xlat29 = u_xlat29 + u_xlat29;
					    u_xlat4.xyz = u_xlat4.xyz * (-vec3(u_xlat29)) + vs_TEXCOORD5.xyz;
					    u_xlat4 = texture(_Cube, u_xlat4.xyz);
					    u_xlat5.xyz = (-_ReflectFaceColor.xyz) + _ReflectOutlineColor.xyz;
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz + _ReflectFaceColor.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xyz;
					    u_xlat29 = (-_FaceShininess) + _OutlineShininess;
					    u_xlat28 = u_xlat28 * u_xlat29 + _FaceShininess;
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, (-u_xlat2.xyz));
					    u_xlat5.y = dot(vs_TEXCOORD2.xyz, (-u_xlat2.xyz));
					    u_xlat5.z = dot(vs_TEXCOORD3.xyz, (-u_xlat2.xyz));
					    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb2){
					        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat11.xyz = vs_TEXCOORD2.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat11.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat11.xyz;
					        u_xlat11.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat11.xyz;
					        u_xlat11.xyz = u_xlat11.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat9.xyz = (bool(u_xlatb2)) ? u_xlat11.xyz : u_xlat9.xyz;
					        u_xlat9.xyz = u_xlat9.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat9.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat9.x = u_xlat2.y * 0.25;
					        u_xlat18 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat27 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat9.x = max(u_xlat18, u_xlat9.x);
					        u_xlat2.x = min(u_xlat27, u_xlat9.x);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					        u_xlat9.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat8 = texture(unity_ProbeVolumeSH, u_xlat9.xyz);
					        u_xlat9.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat9.xyz);
					        u_xlat5.w = 1.0;
					        u_xlat6.x = dot(u_xlat7, u_xlat5);
					        u_xlat6.y = dot(u_xlat8, u_xlat5);
					        u_xlat6.z = dot(u_xlat2, u_xlat5);
					    } else {
					        u_xlat5.w = 1.0;
					        u_xlat6.x = dot(unity_SHAr, u_xlat5);
					        u_xlat6.y = dot(unity_SHAg, u_xlat5);
					        u_xlat6.z = dot(unity_SHAb, u_xlat5);
					    }
					    u_xlat9.xyz = u_xlat6.xyz + vs_TEXCOORD6.xyz;
					    u_xlat9.xyz = max(u_xlat9.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat9.xyz = log2(u_xlat9.xyz);
					    u_xlat9.xyz = u_xlat9.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat9.xyz = exp2(u_xlat9.xyz);
					    u_xlat9.xyz = u_xlat9.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat9.xyz = max(u_xlat9.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat1.x = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat10.x = u_xlat28 * 128.0;
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * u_xlat10.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10.xyz = u_xlat3.xyz * _LightColor0.xyz;
					    u_xlat2.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat10.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat9.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat4.xyz * u_xlat6.www + u_xlat0.xyz;
					    SV_Target0.w = u_xlat6.w;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Bevel;
					//   float _BevelClamp;
					//   float _BevelOffset;
					//   float _BevelRoundness;
					//   float _BevelWidth;
					//   float _BumpFace;
					//   sampler2D _BumpMap;
					//   float _BumpOutline;
					//   samplerCUBE _Cube;
					//   float4 _FaceColor;
					//   float _FaceShininess;
					//   sampler2D _FaceTex;
					//   float _FaceUVSpeedX;
					//   float _FaceUVSpeedY;
					//   float _GradientScale;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float4 _OutlineColor;
					//   float _OutlineShininess;
					//   float _OutlineSoftness;
					//   sampler2D _OutlineTex;
					//   float _OutlineUVSpeedX;
					//   float _OutlineUVSpeedY;
					//   float _OutlineWidth;
					//   float4 _ReflectFaceColor;
					//   float4 _ReflectOutlineColor;
					//   float _ScaleRatioA;
					//   float _ShaderFlags;
					//   float4 _SpecColor;
					//   float _TextureHeight;
					//   float _TextureWidth;
					//   float4 _Time;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_ObjectToWorld  c0       3
					//   _Time                c3       1
					//   _WorldSpaceCameraPos c4       1
					//   _WorldSpaceLightPos0 c5       1
					//   unity_SHAr           c6       1
					//   unity_SHAg           c7       1
					//   unity_SHAb           c8       1
					//   unity_FogColor       c9       1
					//   unity_FogParams      c10      1
					//   _LightColor0         c11      1
					//   _SpecColor           c12      1
					//   _FaceUVSpeedX        c13      1
					//   _FaceUVSpeedY        c14      1
					//   _FaceColor           c15      1
					//   _OutlineSoftness     c16      1
					//   _OutlineUVSpeedX     c17      1
					//   _OutlineUVSpeedY     c18      1
					//   _OutlineColor        c19      1
					//   _OutlineWidth        c20      1
					//   _Bevel               c21      1
					//   _BevelOffset         c22      1
					//   _BevelWidth          c23      1
					//   _BevelClamp          c24      1
					//   _BevelRoundness      c25      1
					//   _BumpOutline         c26      1
					//   _BumpFace            c27      1
					//   _ReflectFaceColor    c28      1
					//   _ReflectOutlineColor c29      1
					//   _ShaderFlags         c30      1
					//   _ScaleRatioA         c31      1
					//   _TextureWidth        c32      1
					//   _TextureHeight       c33      1
					//   _GradientScale       c34      1
					//   _FaceShininess       c35      1
					//   _OutlineShininess    c36      1
					//   _FaceTex             s0       1
					//   _OutlineTex          s1       1
					//   _BumpMap             s2       1
					//   _Cube                s3       1
					//   _MainTex             s4       1
					//
					
					    ps_3_0
					    def c37, 10000, 0.00999999978, 2, -1
					    def c38, 0.249999955, 0.25, 6.28318548, -3.14159274
					    def c39, -2.52398507e-007, 2.47609005e-005, -0.00138883968, 0.0416666418
					    def c40, 0.416666657, 1.05499995, -0.0549999997, 128
					    def c41, 0, 0.5, 1, -9.99999975e-005
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2
					    dcl_texcoord3 v3
					    dcl_color_pp v4
					    dcl_texcoord4 v5.xy
					    dcl_texcoord5 v6.xyz
					    dcl_texcoord6_pp v7.xyz
					    dcl_texcoord7 v8.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_cube s3
					    dcl_2d s4
					    mov r0.x, v1.w
					    mov r0.y, v2.w
					    mov r0.z, v3.w
					    add r0.xyz, -r0, c4
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mad_pp r0.xyz, r0, r0.w, c5
					    nrm_pp r1.xyz, r0
					    add r0.x, c22.x, v5.x
					    rcp r2.x, c32.x
					    rcp r2.w, c33.x
					    mov r2.yz, c41.x
					    add r3, -r2, v0.xyxy
					    add r2, r2, v0.xyxy
					    texld r4, r3, s4
					    texld r3, r3.zwzw, s4
					    mov r3.z, r3.w
					    mov r3.x, r4.w
					    texld r4, r2, s4
					    texld r2, r2.zwzw, s4
					    mov r3.w, r2.w
					    mov r3.y, r4.w
					    add r0, r0.x, r3
					    mov r2.x, c20.x
					    add r1.w, r2.x, c23.x
					    max r2.y, c37.y, r1.w
					    rcp r1.w, r2.y
					    mul r2.y, r2.y, c21.x
					    mul r2.y, r2.y, c34.x
					    mul r2.y, r2.y, -c37.z
					    lrp_sat r3, r1.w, r0, c41.y
					    mad r0, r3, c37.z, c37.w
					    add r0, -r0_abs, c41.z
					    mov r4.yz, c41
					    mul r1.w, r4.y, c30.x
					    frc r1.w, r1_abs.w
					    cmp r1.w, c30.x, r1.w, -r1.w
					    add r1.w, r1.w, -c41.y
					    cmp r0, r1.w, r0, r3
					    mad r3, r0, c38.x, c38.y
					    frc r3, r3
					    mad r3, r3, c38.z, c38.w
					    mul r3, r3, r3
					    mad r5, r3, c39.x, c39.y
					    mad r5, r3, r5, c39.z
					    mad r5, r3, r5, c39.w
					    mad r5, r3, r5, -c41.y
					    mad r3, r3, r5, c41.z
					    lrp r5, c25.x, r3, r0
					    add r0.x, r4.z, -c24.x
					    min r3, r0.x, r5
					    mul r0.xy, r2.y, r3.xzzw
					    mad r0.xy, r3.ywzw, r2.y, -r0
					    mov r0.w, -c41.z
					    dp2add r1.w, r0.wyzw, r0.wyzw, c41.x
					    mul r2.yzw, r0.xwyw, c41.xzzx
					    rsq r0.y, r1.w
					    mul r2.yzw, r0.y, r2
					    mov r0.z, c41.z
					    dp2add r0.y, r0.zxzw, r0.zxzw, c41.x
					    rsq r0.y, r0.y
					    mul r3.x, r0.y, r0.x
					    mul r3.yz, r0.y, c41.xzxw
					    mul r0.xyz, r2.yzww, r3
					    mad r0.xyz, r3.zxyw, r2.zwyw, -r0
					    mov r2.y, c3.y
					    mad r3.x, c17.x, r2.y, v0.z
					    mad r3.y, c18.x, r2.y, v0.w
					    texld r3, r3, s1
					    mul_pp r3.xyz, r3, c19
					    mul r0.w, c19.w, v4.w
					    mul_pp r4.w, r3.w, r0.w
					    mul_pp r4.xyz, r3, r4.w
					    mad r3.x, c13.x, r2.y, v0.z
					    mad r3.y, c14.x, r2.y, v0.w
					    texld r3, r3, s0
					    mul r5, c15, v4
					    mul_pp r3, r3, r5
					    mul_pp r3.xyz, r3.w, r3
					    mul r0.w, r2.x, c31.x
					    mad r1.w, r0.w, -v5.y, c41.z
					    mul_pp r0.w, r0.w, v5.y
					    rsq r2.x, r0.w
					    rcp_pp r2.x, r2.x
					    cmp_pp r1.w, r1.w, r2.x, c41.z
					    texld r2, v0, s4
					    add r2.x, -r2.w, c41.y
					    add r2.x, r2.x, -v5.x
					    mad_pp r2.x, r2.x, v5.y, c41.y
					    mad_sat_pp r2.y, r0.w, c41.y, r2.x
					    mad_pp r0.w, r0.w, -c41.y, r2.x
					    mul_pp r1.w, r1.w, r2.y
					    lrp_pp r5, r1.w, r4, r3
					    mov r2.x, c31.x
					    mul r1.w, r2.x, c16.x
					    mul_pp r2.x, r1.w, v5.y
					    mad_pp r1.w, r1.w, v5.y, c41.z
					    rcp r1.w, r1.w
					    mad_pp r0.w, r2.x, c41.y, r0.w
					    mul_sat_pp r0.w, r1.w, r0.w
					    add_pp r0.w, -r0.w, c41.z
					    mul_pp r3, r0.w, r5
					    mad r0.w, r5.w, r0.w, c41.w
					    mov r2.x, c27.x
					    add r1.w, -r2.x, c26.x
					    mad r1.w, r2.y, r1.w, c27.x
					    texld_pp r4, v0.zwzw, s2
					    mad_pp r4.xy, r4.wyzw, c37.z, c37.w
					    dp2add_sat_pp r2.x, r4, r4, c41.x
					    add_pp r2.x, -r2.x, c41.z
					    rsq_pp r2.x, r2.x
					    rcp_pp r4.z, r2.x
					    mad r2.xzw, r4.xyyz, r1.w, -c41.xyxz
					    mad r2.xzw, r3.w, r2, c41.xyxz
					    add r0.xyz, r0, -r2.xzww
					    nrm r4.xyz, r0
					    dp3_pp r5.x, v1, -r4
					    dp3_pp r5.y, v2, -r4
					    dp3_pp r5.z, v3, -r4
					    dp3_pp r0.x, r5, r1
					    max r1.x, r0.x, c41.x
					    mov r0.x, c35.x
					    add r0.x, -r0.x, c36.x
					    mad_pp r0.x, r2.y, r0.x, c35.x
					    mul r0.x, r0.x, c40.w
					    pow r2.x, r1.x, r0.x
					    mov r0.xyz, c11
					    mul r0.xyz, r0, c12
					    mul r0.xyz, r2.x, r0
					    rcp r1.x, r3.w
					    cmp r0.w, r0.w, r1.x, c37.x
					    mul_pp r1.xyz, r0.w, r3
					    mul_pp r2.xzw, r1.xyyz, c11.xyyz
					    dp3_pp r0.w, r5, c5
					    max_pp r1.w, r0.w, c41.x
					    mad_pp r0.xyz, r2.xzww, r1.w, r0
					    mov r5.w, c41.z
					    dp4_pp r3.x, c6, r5
					    dp4_pp r3.y, c7, r5
					    dp4_pp r3.z, c8, r5
					    add_pp r2.xzw, r3.xyyz, v7.xyyz
					    max_pp r3.xyz, r2.xzww, c41.x
					    log_pp r5.x, r3.x
					    log_pp r5.y, r3.y
					    log_pp r5.z, r3.z
					    mul_pp r2.xzw, r5.xyyz, c40.x
					    exp_pp r3.x, r2.x
					    exp_pp r3.y, r2.z
					    exp_pp r3.z, r2.w
					    mad_pp r2.xzw, r3.xyyz, c40.y, c40.z
					    max_pp r3.xyz, r2.xzww, c41.x
					    mad_pp r0.xyz, r1, r3, r0
					    mov r1.xyz, c28
					    add r1.xyz, -r1, c29
					    mad r1.xyz, r2.y, r1, c28
					    dp3 r2.x, c0, r4
					    dp3 r2.y, c1, r4
					    dp3 r2.z, c2, r4
					    dp3 r0.w, v6, r2
					    add r0.w, r0.w, r0.w
					    mad r2.xyz, r2, -r0.w, v6
					    texld_pp r2, r2, s3
					    mul r1.xyz, r1, r2
					    mad_pp r0.xyz, r1, r3.w, r0
					    mov_pp oC0.w, r3.w
					    add r0.xyz, r0, -c9
					    mul r0.w, c10.x, v8.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, r0, c9
					
					// approximately 179 instruction slots used (9 texture, 170 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						float _FaceUVSpeedX;
						float _FaceUVSpeedY;
						vec4 _FaceColor;
						float _OutlineSoftness;
						float _OutlineUVSpeedX;
						float _OutlineUVSpeedY;
						vec4 _OutlineColor;
						float _OutlineWidth;
						float _Bevel;
						float _BevelOffset;
						float _BevelWidth;
						float _BevelClamp;
						float _BevelRoundness;
						float _BumpOutline;
						float _BumpFace;
						vec4 _ReflectFaceColor;
						vec4 _ReflectOutlineColor;
						vec4 unused_0_20[12];
						float _ShaderFlags;
						float _ScaleRatioA;
						vec4 unused_0_23[4];
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _FaceShininess;
						float _OutlineShininess;
						vec4 unused_0_29[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[4];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[12];
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_2[6];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _FaceTex;
					uniform  sampler2D _OutlineTex;
					uniform  sampler2D _BumpMap;
					uniform  samplerCube _Cube;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD4;
					in  float vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					bool u_xlatb4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					float u_xlat12;
					vec2 u_xlat13;
					bool u_xlatb13;
					float u_xlat18;
					float u_xlat21;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					float u_xlat30;
					void main()
					{
					    u_xlat9.x = vs_TEXCOORD1.w;
					    u_xlat9.y = vs_TEXCOORD2.w;
					    u_xlat9.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);
					    u_xlat2.z = 0.0;
					    u_xlat3 = (-u_xlat2.xzzy) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = texture(_MainTex, u_xlat3.xy);
					    u_xlat2 = u_xlat2.xzzy + vs_TEXCOORD0.xyxy;
					    u_xlat5 = texture(_MainTex, u_xlat2.xy);
					    u_xlat3 = texture(_MainTex, u_xlat3.zw);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat6 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat28 = (-u_xlat6.w) + 0.5;
					    u_xlat28 = u_xlat28 + (-vs_TEXCOORD4.x);
					    u_xlat28 = u_xlat28 * vs_TEXCOORD4.y + 0.5;
					    u_xlat3.x = _OutlineWidth * _ScaleRatioA;
					    u_xlat3.y = _OutlineSoftness * _ScaleRatioA;
					    u_xlat3.xz = u_xlat3.xy * vs_TEXCOORD4.yy;
					    u_xlat6 = vs_COLOR0 * _FaceColor;
					    u_xlat4.x = vs_COLOR0.w * _OutlineColor.w;
					    u_xlat13.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat7 = texture(_FaceTex, u_xlat13.xy);
					    u_xlat6 = u_xlat6 * u_xlat7;
					    u_xlat13.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat7 = texture(_OutlineTex, u_xlat13.xy);
					    u_xlat5.xyz = u_xlat7.xyz * _OutlineColor.xyz;
					    u_xlat7.w = u_xlat4.x * u_xlat7.w;
					    u_xlat4.x = (-u_xlat3.x) * 0.5 + u_xlat28;
					    u_xlat21 = u_xlat3.z * 0.5 + u_xlat4.x;
					    u_xlat12 = u_xlat3.y * vs_TEXCOORD4.y + 1.0;
					    u_xlat12 = u_xlat21 / u_xlat12;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat28 = u_xlat3.x * 0.5 + u_xlat28;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat3.x = min(u_xlat3.x, 1.0);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat3.x = u_xlat28 * u_xlat3.x;
					    u_xlat6.xyz = u_xlat6.www * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat5.xyz * u_xlat7.www;
					    u_xlat7 = (-u_xlat6) + u_xlat7;
					    u_xlat6 = u_xlat3.xxxx * u_xlat7 + u_xlat6;
					    u_xlat6 = vec4(u_xlat12) * u_xlat6;
					    u_xlat3.x = max(u_xlat6.w, 9.99999975e-05);
					    u_xlat3.xyz = u_xlat6.xyz / u_xlat3.xxx;
					    u_xlat4.x = _ShaderFlags * 0.5;
					    u_xlatb13 = u_xlat4.x>=(-u_xlat4.x);
					    u_xlat4.x = fract(abs(u_xlat4.x));
					    u_xlat4.x = (u_xlatb13) ? u_xlat4.x : (-u_xlat4.x);
					    u_xlatb4 = u_xlat4.x>=0.5;
					    u_xlat13.x = vs_TEXCOORD4.x + _BevelOffset;
					    u_xlat2.x = u_xlat4.w;
					    u_xlat2.y = u_xlat5.w;
					    u_xlat2.z = u_xlat3.w;
					    u_xlat2 = u_xlat13.xxxx + u_xlat2;
					    u_xlat30 = _BevelWidth + _OutlineWidth;
					    u_xlat30 = max(u_xlat30, 0.00999999978);
					    u_xlat2 = u_xlat2 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat2 = u_xlat2 / vec4(u_xlat30);
					    u_xlat2 = u_xlat2 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat5 = u_xlat2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat5 = -abs(u_xlat5) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = (bool(u_xlatb4)) ? u_xlat5 : u_xlat2;
					    u_xlat4 = u_xlat2 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);
					    u_xlat4 = sin(u_xlat4);
					    u_xlat4 = (-u_xlat2) + u_xlat4;
					    u_xlat2 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat4 + u_xlat2;
					    u_xlat4.x = (-_BevelClamp) + 1.0;
					    u_xlat2 = min(u_xlat2, u_xlat4.xxxx);
					    u_xlat30 = u_xlat30 * _Bevel;
					    u_xlat30 = u_xlat30 * _GradientScale;
					    u_xlat30 = u_xlat30 * -2.0;
					    u_xlat2.xz = u_xlat2.xz * vec2(u_xlat30);
					    u_xlat2.yz = u_xlat2.wy * vec2(u_xlat30) + (-u_xlat2.zx);
					    u_xlat2.x = float(-1.0);
					    u_xlat2.w = float(1.0);
					    u_xlat29 = dot(u_xlat2.zw, u_xlat2.zw);
					    u_xlat29 = inversesqrt(u_xlat29);
					    u_xlat4.yz = vec2(u_xlat29) * vec2(1.0, 0.0);
					    u_xlat4.x = u_xlat29 * u_xlat2.z;
					    u_xlat29 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat29 = inversesqrt(u_xlat29);
					    u_xlat2.z = 0.0;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat4.zxy * u_xlat2.yzx + (-u_xlat5.xyz);
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.zw);
					    u_xlat4.xy = u_xlat4.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat29 = min(u_xlat29, 1.0);
					    u_xlat29 = (-u_xlat29) + 1.0;
					    u_xlat4.z = sqrt(u_xlat29);
					    u_xlat29 = (-_BumpFace) + _BumpOutline;
					    u_xlat29 = u_xlat28 * u_xlat29 + _BumpFace;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat29) + vec3(-0.0, -0.0, -1.0);
					    u_xlat4.xyz = u_xlat6.www * u_xlat4.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat4.xyz);
					    u_xlat29 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat29 = inversesqrt(u_xlat29);
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat4.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat4.xyz;
					    u_xlat29 = dot(vs_TEXCOORD5.xyz, u_xlat4.xyz);
					    u_xlat29 = u_xlat29 + u_xlat29;
					    u_xlat4.xyz = u_xlat4.xyz * (-vec3(u_xlat29)) + vs_TEXCOORD5.xyz;
					    u_xlat4 = texture(_Cube, u_xlat4.xyz);
					    u_xlat5.xyz = (-_ReflectFaceColor.xyz) + _ReflectOutlineColor.xyz;
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz + _ReflectFaceColor.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat5.xyz;
					    u_xlat29 = (-_FaceShininess) + _OutlineShininess;
					    u_xlat28 = u_xlat28 * u_xlat29 + _FaceShininess;
					    u_xlat5.x = dot(vs_TEXCOORD1.xyz, (-u_xlat2.xyz));
					    u_xlat5.y = dot(vs_TEXCOORD2.xyz, (-u_xlat2.xyz));
					    u_xlat5.z = dot(vs_TEXCOORD3.xyz, (-u_xlat2.xyz));
					    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb2){
					        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat11.xyz = vs_TEXCOORD2.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat11.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat11.xyz;
					        u_xlat11.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat11.xyz;
					        u_xlat11.xyz = u_xlat11.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat9.xyz = (bool(u_xlatb2)) ? u_xlat11.xyz : u_xlat9.xyz;
					        u_xlat9.xyz = u_xlat9.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat2.yzw = u_xlat9.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat9.x = u_xlat2.y * 0.25;
					        u_xlat18 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat27 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat9.x = max(u_xlat18, u_xlat9.x);
					        u_xlat2.x = min(u_xlat27, u_xlat9.x);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat2.xzw);
					        u_xlat9.xyz = u_xlat2.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat8 = texture(unity_ProbeVolumeSH, u_xlat9.xyz);
					        u_xlat9.xyz = u_xlat2.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat2 = texture(unity_ProbeVolumeSH, u_xlat9.xyz);
					        u_xlat5.w = 1.0;
					        u_xlat6.x = dot(u_xlat7, u_xlat5);
					        u_xlat6.y = dot(u_xlat8, u_xlat5);
					        u_xlat6.z = dot(u_xlat2, u_xlat5);
					    } else {
					        u_xlat5.w = 1.0;
					        u_xlat6.x = dot(unity_SHAr, u_xlat5);
					        u_xlat6.y = dot(unity_SHAg, u_xlat5);
					        u_xlat6.z = dot(unity_SHAb, u_xlat5);
					    }
					    u_xlat9.xyz = u_xlat6.xyz + vs_TEXCOORD6.xyz;
					    u_xlat9.xyz = max(u_xlat9.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat9.xyz = log2(u_xlat9.xyz);
					    u_xlat9.xyz = u_xlat9.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat9.xyz = exp2(u_xlat9.xyz);
					    u_xlat9.xyz = u_xlat9.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat9.xyz = max(u_xlat9.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat1.x = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat10.x = u_xlat28 * 128.0;
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * u_xlat10.x;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat10.xyz = u_xlat3.xyz * _LightColor0.xyz;
					    u_xlat2.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat10.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat9.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat4.xyz * u_xlat6.www + u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat27 = u_xlat27 * _ProjectionParams.z;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = u_xlat27 * unity_FogParams.x;
					    u_xlat27 = u_xlat27 * (-u_xlat27);
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat27) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = u_xlat6.w;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "GLOW_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Bevel;
					//   float _BevelClamp;
					//   float _BevelOffset;
					//   float _BevelRoundness;
					//   float _BevelWidth;
					//   float _BumpFace;
					//   sampler2D _BumpMap;
					//   float _BumpOutline;
					//   samplerCUBE _Cube;
					//   float4 _FaceColor;
					//   float _FaceShininess;
					//   sampler2D _FaceTex;
					//   float _FaceUVSpeedX;
					//   float _FaceUVSpeedY;
					//   float4 _GlowColor;
					//   float _GlowInner;
					//   float _GlowOffset;
					//   float _GlowOuter;
					//   float _GlowPower;
					//   float _GradientScale;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float4 _OutlineColor;
					//   float _OutlineShininess;
					//   float _OutlineSoftness;
					//   sampler2D _OutlineTex;
					//   float _OutlineUVSpeedX;
					//   float _OutlineUVSpeedY;
					//   float _OutlineWidth;
					//   float4 _ReflectFaceColor;
					//   float4 _ReflectOutlineColor;
					//   float _ScaleRatioA;
					//   float _ScaleRatioB;
					//   float _ShaderFlags;
					//   float4 _SpecColor;
					//   float _TextureHeight;
					//   float _TextureWidth;
					//   float4 _Time;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_ObjectToWorld  c0       3
					//   _Time                c3       1
					//   _WorldSpaceCameraPos c4       1
					//   _WorldSpaceLightPos0 c5       1
					//   unity_SHAr           c6       1
					//   unity_SHAg           c7       1
					//   unity_SHAb           c8       1
					//   _LightColor0         c9       1
					//   _SpecColor           c10      1
					//   _FaceUVSpeedX        c11      1
					//   _FaceUVSpeedY        c12      1
					//   _FaceColor           c13      1
					//   _OutlineSoftness     c14      1
					//   _OutlineUVSpeedX     c15      1
					//   _OutlineUVSpeedY     c16      1
					//   _OutlineColor        c17      1
					//   _OutlineWidth        c18      1
					//   _Bevel               c19      1
					//   _BevelOffset         c20      1
					//   _BevelWidth          c21      1
					//   _BevelClamp          c22      1
					//   _BevelRoundness      c23      1
					//   _BumpOutline         c24      1
					//   _BumpFace            c25      1
					//   _ReflectFaceColor    c26      1
					//   _ReflectOutlineColor c27      1
					//   _GlowColor           c28      1
					//   _GlowOffset          c29      1
					//   _GlowOuter           c30      1
					//   _GlowInner           c31      1
					//   _GlowPower           c32      1
					//   _ShaderFlags         c33      1
					//   _ScaleRatioA         c34      1
					//   _ScaleRatioB         c35      1
					//   _TextureWidth        c36      1
					//   _TextureHeight       c37      1
					//   _GradientScale       c38      1
					//   _FaceShininess       c39      1
					//   _OutlineShininess    c40      1
					//   _FaceTex             s0       1
					//   _OutlineTex          s1       1
					//   _BumpMap             s2       1
					//   _Cube                s3       1
					//   _MainTex             s4       1
					//
					
					    ps_3_0
					    def c41, 10000, 0.00999999978, 2, -1
					    def c42, 0.249999955, 0.25, 6.28318548, -3.14159274
					    def c43, -2.52398507e-007, 2.47609005e-005, -0.00138883968, 0.0416666418
					    def c44, 0.416666657, 1.05499995, -0.0549999997, 128
					    def c45, 0, 0.5, 1, -9.99999975e-005
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2
					    dcl_texcoord3 v3
					    dcl_color_pp v4
					    dcl_texcoord4 v5.xy
					    dcl_texcoord5 v6.xyz
					    dcl_texcoord6_pp v7.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_cube s3
					    dcl_2d s4
					    mov r0.x, c35.x
					    mul r0.y, r0.x, c29.x
					    mul r0.y, r0.y, v5.y
					    texld r1, v0, s4
					    add r0.z, -r1.w, c45.y
					    add r0.z, r0.z, -v5.x
					    mad_pp r0.z, r0.z, v5.y, c45.y
					    mad r0.y, r0.y, -c45.y, r0.z
					    mul r0.x, r0.x, c30.x
					    cmp r0.x, r0.y, r0.x, c31.x
					    mul r0.x, r0.x, v5.y
					    mad r0.w, r0.x, c45.y, c45.z
					    rcp r0.w, r0.w
					    mul r0.y, r0.w, r0.y
					    abs_sat r0.y, r0.y
					    pow r1.x, r0.y, c32.x
					    add r0.y, -r1.x, c45.z
					    mul r0.w, r0.x, c45.y
					    mad r0.x, r0.x, -c45.y, c45.z
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    cmp r0.x, r0.x, r0.w, c45.z
					    mul r0.x, r0.x, r0.y
					    mov r1.xyz, c45
					    dp2add_sat r0.x, c28.w, r0.x, r1.x
					    mul r0.x, r0.x, v4.w
					    mov r0.y, c3.y
					    mad r2.x, c15.x, r0.y, v0.z
					    mad r2.y, c16.x, r0.y, v0.w
					    texld r2, r2, s1
					    mul_pp r2.xyz, r2, c17
					    mul r0.w, c17.w, v4.w
					    mul_pp r3.w, r2.w, r0.w
					    mul_pp r3.xyz, r2, r3.w
					    mad r2.x, c11.x, r0.y, v0.z
					    mad r2.y, c12.x, r0.y, v0.w
					    texld r2, r2, s0
					    mul r4, c13, v4
					    mul_pp r2, r2, r4
					    mul_pp r2.xyz, r2.w, r2
					    mov r1.x, c18.x
					    mul r0.y, r1.x, c34.x
					    mad r0.w, r0.y, -v5.y, c45.z
					    mul_pp r0.y, r0.y, v5.y
					    rsq r1.w, r0.y
					    rcp_pp r1.w, r1.w
					    cmp_pp r0.w, r0.w, r1.w, c45.z
					    mad_sat_pp r1.w, r0.y, c45.y, r0.z
					    mad_pp r0.y, r0.y, -c45.y, r0.z
					    mul_pp r0.z, r0.w, r1.w
					    lrp_pp r4, r0.z, r3, r2
					    mov r2.x, c34.x
					    mul r0.z, r2.x, c14.x
					    mul_pp r0.w, r0.z, v5.y
					    mad_pp r0.z, r0.z, v5.y, c45.z
					    rcp r0.z, r0.z
					    mad_pp r0.y, r0.w, c45.y, r0.y
					    mul_sat_pp r0.y, r0.z, r0.y
					    add_pp r0.y, -r0.y, c45.z
					    mad r0.z, r4.w, r0.y, c45.w
					    mul_pp r2, r0.y, r4
					    mad r0.y, r4.w, -r0.y, c45.z
					    mad_pp r0.y, r0.y, r0.x, r2.w
					    rcp r0.w, r2.w
					    cmp r0.z, r0.z, r0.w, c41.x
					    mul r2.xyz, r0.z, r2
					    mul r2.xyz, r2.w, r2
					    lrp r3.xyz, r0.x, c28, r2
					    mul r0.xzw, r0.x, c28.xyyz
					    add r2.x, r0.y, c45.w
					    rcp r2.y, r0.y
					    mov_pp oC0.w, r0.y
					    cmp r0.y, r2.x, r2.y, c41.x
					    mul_pp r2.xyz, r0.y, r3
					    mul_pp r3.xyz, r2, c9
					    add r0.y, c20.x, v5.x
					    rcp r4.x, c36.x
					    rcp r4.w, c37.x
					    mov r4.yz, c45.x
					    add r5, -r4, v0.xyxy
					    add r4, r4, v0.xyxy
					    texld r6, r5, s4
					    texld r5, r5.zwzw, s4
					    mov r5.z, r5.w
					    mov r5.x, r6.w
					    texld r6, r4, s4
					    texld r4, r4.zwzw, s4
					    mov r5.w, r4.w
					    mov r5.y, r6.w
					    add r4, r0.y, r5
					    add r0.y, r1.x, c21.x
					    max r1.x, c41.y, r0.y
					    rcp r0.y, r1.x
					    mul r1.x, r1.x, c19.x
					    mul r1.x, r1.x, c38.x
					    mul r1.x, r1.x, -c41.z
					    lrp_sat r5, r0.y, r4, c45.y
					    mad r4, r5, c41.z, c41.w
					    add r4, -r4_abs, c45.z
					    mul r0.y, r1.y, c33.x
					    frc r0.y, r0_abs.y
					    cmp r0.y, c33.x, r0.y, -r0.y
					    add r0.y, r0.y, -c45.y
					    cmp r4, r0.y, r4, r5
					    mad r5, r4, c42.x, c42.y
					    frc r5, r5
					    mad r5, r5, c42.z, c42.w
					    mul r5, r5, r5
					    mad r6, r5, c43.x, c43.y
					    mad r6, r5, r6, c43.z
					    mad r6, r5, r6, c43.w
					    mad r6, r5, r6, -c45.y
					    mad r5, r5, r6, c45.z
					    lrp r6, c23.x, r5, r4
					    add r0.y, r1.z, -c22.x
					    min r4, r0.y, r6
					    mul r1.yz, r1.x, r4.xxzw
					    mad r4.xy, r4.ywzw, r1.x, -r1.yzzw
					    mov r4.w, -c45.z
					    dp2add r0.y, r4.wyzw, r4.wyzw, c45.x
					    mul r1.xyz, r4.wyww, c45.zzxw
					    rsq r0.y, r0.y
					    mul r1.xyz, r0.y, r1
					    mov r4.z, c45.z
					    dp2add r0.y, r4.zxzw, r4.zxzw, c45.x
					    rsq r0.y, r0.y
					    mul r4.x, r0.y, r4.x
					    mul r4.yz, r0.y, c45.xzxw
					    mul r5.xyz, r1, r4
					    mad r1.xyz, r4.zxyw, r1.yzxw, -r5
					    mov r4.x, c25.x
					    add r0.y, -r4.x, c24.x
					    mad r0.y, r1.w, r0.y, c25.x
					    texld_pp r4, v0.zwzw, s2
					    mad_pp r4.xy, r4.wyzw, c41.z, c41.w
					    dp2add_sat_pp r3.w, r4, r4, c45.x
					    add_pp r3.w, -r3.w, c45.z
					    rsq_pp r3.w, r3.w
					    rcp_pp r4.z, r3.w
					    mad r4.xyz, r4, r0.y, -c45.xxzw
					    mad r4.xyz, r2.w, r4, c45.xxzw
					    add r1.xyz, r1, -r4
					    nrm r4.xyz, r1
					    dp3_pp r5.x, v1, -r4
					    dp3_pp r5.y, v2, -r4
					    dp3_pp r5.z, v3, -r4
					    mov r1.x, v1.w
					    mov r1.y, v2.w
					    mov r1.z, v3.w
					    add r1.xyz, -r1, c4
					    dp3 r0.y, r1, r1
					    rsq r0.y, r0.y
					    mad_pp r1.xyz, r1, r0.y, c5
					    nrm_pp r6.xyz, r1
					    dp3_pp r0.y, r5, r6
					    max r1.x, r0.y, c45.x
					    mov r6.x, c39.x
					    add r0.y, -r6.x, c40.x
					    mad_pp r0.y, r1.w, r0.y, c39.x
					    mul r0.y, r0.y, c44.w
					    pow r3.w, r1.x, r0.y
					    mov r1.xyz, c9
					    mul r1.xyz, r1, c10
					    mul r1.xyz, r3.w, r1
					    dp3_pp r0.y, r5, c5
					    max_pp r3.w, r0.y, c45.x
					    mad_pp r1.xyz, r3, r3.w, r1
					    mov r5.w, c45.z
					    dp4_pp r3.x, c6, r5
					    dp4_pp r3.y, c7, r5
					    dp4_pp r3.z, c8, r5
					    add_pp r3.xyz, r3, v7
					    max_pp r5.xyz, r3, c45.x
					    log_pp r3.x, r5.x
					    log_pp r3.y, r5.y
					    log_pp r3.z, r5.z
					    mul_pp r3.xyz, r3, c44.x
					    exp_pp r5.x, r3.x
					    exp_pp r5.y, r3.y
					    exp_pp r5.z, r3.z
					    mad_pp r3.xyz, r5, c44.y, c44.z
					    max_pp r5.xyz, r3, c45.x
					    mad_pp r1.xyz, r2, r5, r1
					    dp3 r2.x, c0, r4
					    dp3 r2.y, c1, r4
					    dp3 r2.z, c2, r4
					    dp3 r0.y, v6, r2
					    add r0.y, r0.y, r0.y
					    mad r2.xyz, r2, -r0.y, v6
					    texld_pp r3, r2, s3
					    mov r2.xyz, c26
					    add r2.xyz, -r2, c27
					    mad r2.xyz, r1.w, r2, c26
					    mul r2.xyz, r2, r3
					    mad_pp r0.xyz, r2, r2.w, r0.xzww
					    add_pp oC0.xyz, r0, r1
					
					// approximately 208 instruction slots used (9 texture, 199 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "GLOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						float _FaceUVSpeedX;
						float _FaceUVSpeedY;
						vec4 _FaceColor;
						float _OutlineSoftness;
						float _OutlineUVSpeedX;
						float _OutlineUVSpeedY;
						vec4 _OutlineColor;
						float _OutlineWidth;
						float _Bevel;
						float _BevelOffset;
						float _BevelWidth;
						float _BevelClamp;
						float _BevelRoundness;
						float _BumpOutline;
						float _BumpFace;
						vec4 _ReflectFaceColor;
						vec4 _ReflectOutlineColor;
						vec4 unused_0_20[10];
						vec4 _GlowColor;
						float _GlowOffset;
						float _GlowOuter;
						float _GlowInner;
						float _GlowPower;
						float _ShaderFlags;
						float _ScaleRatioA;
						float _ScaleRatioB;
						vec4 unused_0_29[3];
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _FaceShininess;
						float _OutlineShininess;
						vec4 unused_0_35[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[4];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[12];
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_2[6];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _FaceTex;
					uniform  sampler2D _OutlineTex;
					uniform  sampler2D _BumpMap;
					uniform  samplerCube _Cube;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					float u_xlat10;
					float u_xlat12;
					vec2 u_xlat13;
					float u_xlat18;
					float u_xlat21;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat9.x = vs_TEXCOORD1.w;
					    u_xlat9.y = vs_TEXCOORD2.w;
					    u_xlat9.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);
					    u_xlat2.z = 0.0;
					    u_xlat3 = (-u_xlat2.xzzy) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = texture(_MainTex, u_xlat3.xy);
					    u_xlat2 = u_xlat2.xzzy + vs_TEXCOORD0.xyxy;
					    u_xlat5 = texture(_MainTex, u_xlat2.xy);
					    u_xlat3 = texture(_MainTex, u_xlat3.zw);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat6 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat28 = (-u_xlat6.w) + 0.5;
					    u_xlat28 = u_xlat28 + (-vs_TEXCOORD4.x);
					    u_xlat28 = u_xlat28 * vs_TEXCOORD4.y + 0.5;
					    u_xlat3.x = _OutlineWidth * _ScaleRatioA;
					    u_xlat3.y = _OutlineSoftness * _ScaleRatioA;
					    u_xlat3.xz = u_xlat3.xy * vs_TEXCOORD4.yy;
					    u_xlat6 = vs_COLOR0 * _FaceColor;
					    u_xlat4.x = vs_COLOR0.w * _OutlineColor.w;
					    u_xlat13.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat7 = texture(_FaceTex, u_xlat13.xy);
					    u_xlat6 = u_xlat6 * u_xlat7;
					    u_xlat13.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat7 = texture(_OutlineTex, u_xlat13.xy);
					    u_xlat5.xyz = u_xlat7.xyz * _OutlineColor.xyz;
					    u_xlat7.w = u_xlat4.x * u_xlat7.w;
					    u_xlat4.x = (-u_xlat3.x) * 0.5 + u_xlat28;
					    u_xlat21 = u_xlat3.z * 0.5 + u_xlat4.x;
					    u_xlat12 = u_xlat3.y * vs_TEXCOORD4.y + 1.0;
					    u_xlat12 = u_xlat21 / u_xlat12;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat21 = u_xlat3.x * 0.5 + u_xlat28;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat3.x = min(u_xlat3.x, 1.0);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat3.x = u_xlat3.x * u_xlat21;
					    u_xlat6.xyz = u_xlat6.www * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat5.xyz * u_xlat7.www;
					    u_xlat7 = (-u_xlat6) + u_xlat7;
					    u_xlat6 = u_xlat3.xxxx * u_xlat7 + u_xlat6;
					    u_xlat7 = vec4(u_xlat12) * u_xlat6;
					    u_xlat3.x = max(u_xlat7.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat7.xyz / u_xlat3.xxx;
					    u_xlat3.x = _ShaderFlags * 0.5;
					    u_xlatb5 = u_xlat3.x>=(-u_xlat3.x);
					    u_xlat3.x = fract(abs(u_xlat3.x));
					    u_xlat3.x = (u_xlatb5) ? u_xlat3.x : (-u_xlat3.x);
					    u_xlatb3 = u_xlat3.x>=0.5;
					    u_xlat5.x = vs_TEXCOORD4.x + _BevelOffset;
					    u_xlat2.x = u_xlat4.w;
					    u_xlat2.y = u_xlat5.w;
					    u_xlat2.z = u_xlat3.w;
					    u_xlat2 = u_xlat5.xxxx + u_xlat2;
					    u_xlat30 = _BevelWidth + _OutlineWidth;
					    u_xlat30 = max(u_xlat30, 0.00999999978);
					    u_xlat2 = u_xlat2 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat2 = u_xlat2 / vec4(u_xlat30);
					    u_xlat2 = u_xlat2 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat5 = u_xlat2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat5 = -abs(u_xlat5) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = (bool(u_xlatb3)) ? u_xlat5 : u_xlat2;
					    u_xlat5 = u_xlat2 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);
					    u_xlat5 = sin(u_xlat5);
					    u_xlat5 = (-u_xlat2) + u_xlat5;
					    u_xlat2 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat5 + u_xlat2;
					    u_xlat3.x = (-_BevelClamp) + 1.0;
					    u_xlat2 = min(u_xlat2, u_xlat3.xxxx);
					    u_xlat3.x = u_xlat30 * _Bevel;
					    u_xlat3.x = u_xlat3.x * _GradientScale;
					    u_xlat3.x = u_xlat3.x * -2.0;
					    u_xlat2.xz = u_xlat2.xz * u_xlat3.xx;
					    u_xlat2.yz = u_xlat2.wy * u_xlat3.xx + (-u_xlat2.zx);
					    u_xlat2.x = float(-1.0);
					    u_xlat2.w = float(1.0);
					    u_xlat29 = dot(u_xlat2.zw, u_xlat2.zw);
					    u_xlat29 = inversesqrt(u_xlat29);
					    u_xlat5.yz = vec2(u_xlat29) * vec2(1.0, 0.0);
					    u_xlat5.x = u_xlat29 * u_xlat2.z;
					    u_xlat29 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat29 = inversesqrt(u_xlat29);
					    u_xlat2.z = 0.0;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat2.xyz * u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.zxy * u_xlat2.yzx + (-u_xlat6.xyz);
					    u_xlat5 = texture(_BumpMap, vs_TEXCOORD0.zw);
					    u_xlat5.xy = u_xlat5.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat29 = min(u_xlat29, 1.0);
					    u_xlat29 = (-u_xlat29) + 1.0;
					    u_xlat5.z = sqrt(u_xlat29);
					    u_xlat29 = (-_BumpFace) + _BumpOutline;
					    u_xlat29 = u_xlat21 * u_xlat29 + _BumpFace;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat29) + vec3(-0.0, -0.0, -1.0);
					    u_xlat5.xyz = u_xlat7.www * u_xlat5.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat5.xyz);
					    u_xlat29 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat29 = inversesqrt(u_xlat29);
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat5.xyz = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat5.xyz;
					    u_xlat5.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat5.xyz;
					    u_xlat29 = dot(vs_TEXCOORD5.xyz, u_xlat5.xyz);
					    u_xlat29 = u_xlat29 + u_xlat29;
					    u_xlat5.xyz = u_xlat5.xyz * (-vec3(u_xlat29)) + vs_TEXCOORD5.xyz;
					    u_xlat5 = texture(_Cube, u_xlat5.xyz);
					    u_xlat6.xyz = (-_ReflectFaceColor.xyz) + _ReflectOutlineColor.xyz;
					    u_xlat6.xyz = vec3(u_xlat21) * u_xlat6.xyz + _ReflectFaceColor.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xyz;
					    u_xlat29 = _GlowOffset * _ScaleRatioB;
					    u_xlat29 = u_xlat29 * vs_TEXCOORD4.y;
					    u_xlat28 = (-u_xlat29) * 0.5 + u_xlat28;
					    u_xlatb29 = u_xlat28>=0.0;
					    u_xlat29 = u_xlatb29 ? 1.0 : float(0.0);
					    u_xlat3.x = _GlowOuter * _ScaleRatioB + (-_GlowInner);
					    u_xlat29 = u_xlat29 * u_xlat3.x + _GlowInner;
					    u_xlat29 = u_xlat29 * vs_TEXCOORD4.y;
					    u_xlat3.x = u_xlat29 * 0.5;
					    u_xlat29 = u_xlat29 * 0.5 + 1.0;
					    u_xlat28 = u_xlat28 / u_xlat29;
					    u_xlat28 = min(abs(u_xlat28), 1.0);
					    u_xlat28 = log2(u_xlat28);
					    u_xlat28 = u_xlat28 * _GlowPower;
					    u_xlat28 = exp2(u_xlat28);
					    u_xlat28 = (-u_xlat28) + 1.0;
					    u_xlat29 = min(u_xlat3.x, 1.0);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat28 = u_xlat28 * u_xlat29;
					    u_xlat28 = dot(_GlowColor.ww, vec2(u_xlat28));
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat29 = u_xlat28 * vs_COLOR0.w;
					    u_xlat6.xyz = vec3(u_xlat29) * _GlowColor.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat7.www + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat7.www * u_xlat4.xyz;
					    u_xlat28 = (-u_xlat28) * vs_COLOR0.w + 1.0;
					    u_xlat4.xyz = vec3(u_xlat28) * u_xlat4.xyz + u_xlat6.xyz;
					    u_xlat28 = (-u_xlat6.w) * u_xlat12 + 1.0;
					    u_xlat28 = u_xlat28 * u_xlat29 + u_xlat7.w;
					    u_xlat29 = max(u_xlat28, 9.99999975e-05);
					    u_xlat3.xyw = u_xlat4.xyz / vec3(u_xlat29);
					    u_xlat29 = (-_FaceShininess) + _OutlineShininess;
					    u_xlat29 = u_xlat21 * u_xlat29 + _FaceShininess;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, (-u_xlat2.xyz));
					    u_xlat4.y = dot(vs_TEXCOORD2.xyz, (-u_xlat2.xyz));
					    u_xlat4.z = dot(vs_TEXCOORD3.xyz, (-u_xlat2.xyz));
					    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb2){
					        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD2.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat9.xyz = (bool(u_xlatb2)) ? u_xlat6.xyz : u_xlat9.xyz;
					        u_xlat9.xyz = u_xlat9.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat9.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat9.x = u_xlat6.y * 0.25;
					        u_xlat18 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat27 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat9.x = max(u_xlat18, u_xlat9.x);
					        u_xlat6.x = min(u_xlat27, u_xlat9.x);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					        u_xlat9.xyz = u_xlat6.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat8 = texture(unity_ProbeVolumeSH, u_xlat9.xyz);
					        u_xlat9.xyz = u_xlat6.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat9.xyz);
					        u_xlat4.w = 1.0;
					        u_xlat2.x = dot(u_xlat7, u_xlat4);
					        u_xlat2.y = dot(u_xlat8, u_xlat4);
					        u_xlat2.z = dot(u_xlat6, u_xlat4);
					    } else {
					        u_xlat4.w = 1.0;
					        u_xlat2.x = dot(unity_SHAr, u_xlat4);
					        u_xlat2.y = dot(unity_SHAg, u_xlat4);
					        u_xlat2.z = dot(unity_SHAb, u_xlat4);
					    }
					    u_xlat9.xyz = u_xlat2.xyz + vs_TEXCOORD6.xyz;
					    u_xlat9.xyz = max(u_xlat9.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat9.xyz = log2(u_xlat9.xyz);
					    u_xlat9.xyz = u_xlat9.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat9.xyz = exp2(u_xlat9.xyz);
					    u_xlat9.xyz = u_xlat9.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat9.xyz = max(u_xlat9.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat10 = u_xlat29 * 128.0;
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * u_xlat10;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat2.xyz = u_xlat3.xyw * _LightColor0.xyz;
					    u_xlat4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat3.xyw * u_xlat9.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat5.xyz + u_xlat0.xyz;
					    SV_Target0.w = u_xlat28;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "GLOW_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Bevel;
					//   float _BevelClamp;
					//   float _BevelOffset;
					//   float _BevelRoundness;
					//   float _BevelWidth;
					//   float _BumpFace;
					//   sampler2D _BumpMap;
					//   float _BumpOutline;
					//   samplerCUBE _Cube;
					//   float4 _FaceColor;
					//   float _FaceShininess;
					//   sampler2D _FaceTex;
					//   float _FaceUVSpeedX;
					//   float _FaceUVSpeedY;
					//   float4 _GlowColor;
					//   float _GlowInner;
					//   float _GlowOffset;
					//   float _GlowOuter;
					//   float _GlowPower;
					//   float _GradientScale;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float4 _OutlineColor;
					//   float _OutlineShininess;
					//   float _OutlineSoftness;
					//   sampler2D _OutlineTex;
					//   float _OutlineUVSpeedX;
					//   float _OutlineUVSpeedY;
					//   float _OutlineWidth;
					//   float4 _ReflectFaceColor;
					//   float4 _ReflectOutlineColor;
					//   float _ScaleRatioA;
					//   float _ScaleRatioB;
					//   float _ShaderFlags;
					//   float4 _SpecColor;
					//   float _TextureHeight;
					//   float _TextureWidth;
					//   float4 _Time;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_ObjectToWorld  c0       3
					//   _Time                c3       1
					//   _WorldSpaceCameraPos c4       1
					//   _WorldSpaceLightPos0 c5       1
					//   unity_SHAr           c6       1
					//   unity_SHAg           c7       1
					//   unity_SHAb           c8       1
					//   unity_FogColor       c9       1
					//   unity_FogParams      c10      1
					//   _LightColor0         c11      1
					//   _SpecColor           c12      1
					//   _FaceUVSpeedX        c13      1
					//   _FaceUVSpeedY        c14      1
					//   _FaceColor           c15      1
					//   _OutlineSoftness     c16      1
					//   _OutlineUVSpeedX     c17      1
					//   _OutlineUVSpeedY     c18      1
					//   _OutlineColor        c19      1
					//   _OutlineWidth        c20      1
					//   _Bevel               c21      1
					//   _BevelOffset         c22      1
					//   _BevelWidth          c23      1
					//   _BevelClamp          c24      1
					//   _BevelRoundness      c25      1
					//   _BumpOutline         c26      1
					//   _BumpFace            c27      1
					//   _ReflectFaceColor    c28      1
					//   _ReflectOutlineColor c29      1
					//   _GlowColor           c30      1
					//   _GlowOffset          c31      1
					//   _GlowOuter           c32      1
					//   _GlowInner           c33      1
					//   _GlowPower           c34      1
					//   _ShaderFlags         c35      1
					//   _ScaleRatioA         c36      1
					//   _ScaleRatioB         c37      1
					//   _TextureWidth        c38      1
					//   _TextureHeight       c39      1
					//   _GradientScale       c40      1
					//   _FaceShininess       c41      1
					//   _OutlineShininess    c42      1
					//   _FaceTex             s0       1
					//   _OutlineTex          s1       1
					//   _BumpMap             s2       1
					//   _Cube                s3       1
					//   _MainTex             s4       1
					//
					
					    ps_3_0
					    def c43, 10000, 0.00999999978, 2, -1
					    def c44, 0.249999955, 0.25, 6.28318548, -3.14159274
					    def c45, -2.52398507e-007, 2.47609005e-005, -0.00138883968, 0.0416666418
					    def c46, 0.416666657, 1.05499995, -0.0549999997, 128
					    def c47, 0, 0.5, 1, -9.99999975e-005
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2
					    dcl_texcoord3 v3
					    dcl_color_pp v4
					    dcl_texcoord4 v5.xy
					    dcl_texcoord5 v6.xyz
					    dcl_texcoord6_pp v7.xyz
					    dcl_texcoord7 v8.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_cube s3
					    dcl_2d s4
					    mov r0.x, c37.x
					    mul r0.y, r0.x, c31.x
					    mul r0.y, r0.y, v5.y
					    texld r1, v0, s4
					    add r0.z, -r1.w, c47.y
					    add r0.z, r0.z, -v5.x
					    mad_pp r0.z, r0.z, v5.y, c47.y
					    mad r0.y, r0.y, -c47.y, r0.z
					    mul r0.x, r0.x, c32.x
					    cmp r0.x, r0.y, r0.x, c33.x
					    mul r0.x, r0.x, v5.y
					    mad r0.w, r0.x, c47.y, c47.z
					    rcp r0.w, r0.w
					    mul r0.y, r0.w, r0.y
					    abs_sat r0.y, r0.y
					    pow r1.x, r0.y, c34.x
					    add r0.y, -r1.x, c47.z
					    mul r0.w, r0.x, c47.y
					    mad r0.x, r0.x, -c47.y, c47.z
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    cmp r0.x, r0.x, r0.w, c47.z
					    mul r0.x, r0.x, r0.y
					    mov r1.xyz, c47
					    dp2add_sat r0.x, c30.w, r0.x, r1.x
					    mul r0.x, r0.x, v4.w
					    mov r0.y, c3.y
					    mad r2.x, c17.x, r0.y, v0.z
					    mad r2.y, c18.x, r0.y, v0.w
					    texld r2, r2, s1
					    mul_pp r2.xyz, r2, c19
					    mul r0.w, c19.w, v4.w
					    mul_pp r3.w, r2.w, r0.w
					    mul_pp r3.xyz, r2, r3.w
					    mad r2.x, c13.x, r0.y, v0.z
					    mad r2.y, c14.x, r0.y, v0.w
					    texld r2, r2, s0
					    mul r4, c15, v4
					    mul_pp r2, r2, r4
					    mul_pp r2.xyz, r2.w, r2
					    mov r1.x, c20.x
					    mul r0.y, r1.x, c36.x
					    mad r0.w, r0.y, -v5.y, c47.z
					    mul_pp r0.y, r0.y, v5.y
					    rsq r1.w, r0.y
					    rcp_pp r1.w, r1.w
					    cmp_pp r0.w, r0.w, r1.w, c47.z
					    mad_sat_pp r1.w, r0.y, c47.y, r0.z
					    mad_pp r0.y, r0.y, -c47.y, r0.z
					    mul_pp r0.z, r0.w, r1.w
					    lrp_pp r4, r0.z, r3, r2
					    mov r2.x, c36.x
					    mul r0.z, r2.x, c16.x
					    mul_pp r0.w, r0.z, v5.y
					    mad_pp r0.z, r0.z, v5.y, c47.z
					    rcp r0.z, r0.z
					    mad_pp r0.y, r0.w, c47.y, r0.y
					    mul_sat_pp r0.y, r0.z, r0.y
					    add_pp r0.y, -r0.y, c47.z
					    mad r0.z, r4.w, r0.y, c47.w
					    mul_pp r2, r0.y, r4
					    mad r0.y, r4.w, -r0.y, c47.z
					    mad_pp r0.y, r0.y, r0.x, r2.w
					    rcp r0.w, r2.w
					    cmp r0.z, r0.z, r0.w, c43.x
					    mul r2.xyz, r0.z, r2
					    mul r2.xyz, r2.w, r2
					    lrp r3.xyz, r0.x, c30, r2
					    mul r0.xzw, r0.x, c30.xyyz
					    add r2.x, r0.y, c47.w
					    rcp r2.y, r0.y
					    mov_pp oC0.w, r0.y
					    cmp r0.y, r2.x, r2.y, c43.x
					    mul_pp r2.xyz, r0.y, r3
					    mul_pp r3.xyz, r2, c11
					    add r0.y, c22.x, v5.x
					    rcp r4.x, c38.x
					    rcp r4.w, c39.x
					    mov r4.yz, c47.x
					    add r5, -r4, v0.xyxy
					    add r4, r4, v0.xyxy
					    texld r6, r5, s4
					    texld r5, r5.zwzw, s4
					    mov r5.z, r5.w
					    mov r5.x, r6.w
					    texld r6, r4, s4
					    texld r4, r4.zwzw, s4
					    mov r5.w, r4.w
					    mov r5.y, r6.w
					    add r4, r0.y, r5
					    add r0.y, r1.x, c23.x
					    max r1.x, c43.y, r0.y
					    rcp r0.y, r1.x
					    mul r1.x, r1.x, c21.x
					    mul r1.x, r1.x, c40.x
					    mul r1.x, r1.x, -c43.z
					    lrp_sat r5, r0.y, r4, c47.y
					    mad r4, r5, c43.z, c43.w
					    add r4, -r4_abs, c47.z
					    mul r0.y, r1.y, c35.x
					    frc r0.y, r0_abs.y
					    cmp r0.y, c35.x, r0.y, -r0.y
					    add r0.y, r0.y, -c47.y
					    cmp r4, r0.y, r4, r5
					    mad r5, r4, c44.x, c44.y
					    frc r5, r5
					    mad r5, r5, c44.z, c44.w
					    mul r5, r5, r5
					    mad r6, r5, c45.x, c45.y
					    mad r6, r5, r6, c45.z
					    mad r6, r5, r6, c45.w
					    mad r6, r5, r6, -c47.y
					    mad r5, r5, r6, c47.z
					    lrp r6, c25.x, r5, r4
					    add r0.y, r1.z, -c24.x
					    min r4, r0.y, r6
					    mul r1.yz, r1.x, r4.xxzw
					    mad r4.xy, r4.ywzw, r1.x, -r1.yzzw
					    mov r4.w, -c47.z
					    dp2add r0.y, r4.wyzw, r4.wyzw, c47.x
					    mul r1.xyz, r4.wyww, c47.zzxw
					    rsq r0.y, r0.y
					    mul r1.xyz, r0.y, r1
					    mov r4.z, c47.z
					    dp2add r0.y, r4.zxzw, r4.zxzw, c47.x
					    rsq r0.y, r0.y
					    mul r4.x, r0.y, r4.x
					    mul r4.yz, r0.y, c47.xzxw
					    mul r5.xyz, r1, r4
					    mad r1.xyz, r4.zxyw, r1.yzxw, -r5
					    mov r4.x, c27.x
					    add r0.y, -r4.x, c26.x
					    mad r0.y, r1.w, r0.y, c27.x
					    texld_pp r4, v0.zwzw, s2
					    mad_pp r4.xy, r4.wyzw, c43.z, c43.w
					    dp2add_sat_pp r3.w, r4, r4, c47.x
					    add_pp r3.w, -r3.w, c47.z
					    rsq_pp r3.w, r3.w
					    rcp_pp r4.z, r3.w
					    mad r4.xyz, r4, r0.y, -c47.xxzw
					    mad r4.xyz, r2.w, r4, c47.xxzw
					    add r1.xyz, r1, -r4
					    nrm r4.xyz, r1
					    dp3_pp r5.x, v1, -r4
					    dp3_pp r5.y, v2, -r4
					    dp3_pp r5.z, v3, -r4
					    mov r1.x, v1.w
					    mov r1.y, v2.w
					    mov r1.z, v3.w
					    add r1.xyz, -r1, c4
					    dp3 r0.y, r1, r1
					    rsq r0.y, r0.y
					    mad_pp r1.xyz, r1, r0.y, c5
					    nrm_pp r6.xyz, r1
					    dp3_pp r0.y, r5, r6
					    max r1.x, r0.y, c47.x
					    mov r6.x, c41.x
					    add r0.y, -r6.x, c42.x
					    mad_pp r0.y, r1.w, r0.y, c41.x
					    mul r0.y, r0.y, c46.w
					    pow r3.w, r1.x, r0.y
					    mov r1.xyz, c11
					    mul r1.xyz, r1, c12
					    mul r1.xyz, r3.w, r1
					    dp3_pp r0.y, r5, c5
					    max_pp r3.w, r0.y, c47.x
					    mad_pp r1.xyz, r3, r3.w, r1
					    mov r5.w, c47.z
					    dp4_pp r3.x, c6, r5
					    dp4_pp r3.y, c7, r5
					    dp4_pp r3.z, c8, r5
					    add_pp r3.xyz, r3, v7
					    max_pp r5.xyz, r3, c47.x
					    log_pp r3.x, r5.x
					    log_pp r3.y, r5.y
					    log_pp r3.z, r5.z
					    mul_pp r3.xyz, r3, c46.x
					    exp_pp r5.x, r3.x
					    exp_pp r5.y, r3.y
					    exp_pp r5.z, r3.z
					    mad_pp r3.xyz, r5, c46.y, c46.z
					    max_pp r5.xyz, r3, c47.x
					    mad_pp r1.xyz, r2, r5, r1
					    dp3 r2.x, c0, r4
					    dp3 r2.y, c1, r4
					    dp3 r2.z, c2, r4
					    dp3 r0.y, v6, r2
					    add r0.y, r0.y, r0.y
					    mad r2.xyz, r2, -r0.y, v6
					    texld_pp r3, r2, s3
					    mov r2.xyz, c28
					    add r2.xyz, -r2, c29
					    mad r2.xyz, r1.w, r2, c28
					    mul r2.xyz, r2, r3
					    mad_pp r0.xyz, r2, r2.w, r0.xzww
					    add_pp r0.xyz, r0, r1
					    add r0.xyz, r0, -c9
					    mul r0.w, c10.x, v8.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mad_pp oC0.xyz, r0.w, r0, c9
					
					// approximately 213 instruction slots used (9 texture, 204 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "GLOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						float _FaceUVSpeedX;
						float _FaceUVSpeedY;
						vec4 _FaceColor;
						float _OutlineSoftness;
						float _OutlineUVSpeedX;
						float _OutlineUVSpeedY;
						vec4 _OutlineColor;
						float _OutlineWidth;
						float _Bevel;
						float _BevelOffset;
						float _BevelWidth;
						float _BevelClamp;
						float _BevelRoundness;
						float _BumpOutline;
						float _BumpFace;
						vec4 _ReflectFaceColor;
						vec4 _ReflectOutlineColor;
						vec4 unused_0_20[10];
						vec4 _GlowColor;
						float _GlowOffset;
						float _GlowOuter;
						float _GlowInner;
						float _GlowPower;
						float _ShaderFlags;
						float _ScaleRatioA;
						float _ScaleRatioB;
						vec4 unused_0_29[3];
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _FaceShininess;
						float _OutlineShininess;
						vec4 unused_0_35[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[4];
					};
					layout(std140) uniform UnityPerDraw {
						vec4 unused_3_0[12];
						mat4x4 unity_ObjectToWorld;
						vec4 unused_3_2[6];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _FaceTex;
					uniform  sampler2D _OutlineTex;
					uniform  sampler2D _BumpMap;
					uniform  samplerCube _Cube;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD4;
					in  float vs_TEXCOORD7;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					bool u_xlatb2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					bool u_xlatb5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec3 u_xlat9;
					float u_xlat10;
					float u_xlat12;
					vec2 u_xlat13;
					float u_xlat18;
					float u_xlat21;
					float u_xlat27;
					float u_xlat28;
					float u_xlat29;
					bool u_xlatb29;
					float u_xlat30;
					void main()
					{
					    u_xlat9.x = vs_TEXCOORD1.w;
					    u_xlat9.y = vs_TEXCOORD2.w;
					    u_xlat9.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = (-u_xlat9.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);
					    u_xlat2.z = 0.0;
					    u_xlat3 = (-u_xlat2.xzzy) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = texture(_MainTex, u_xlat3.xy);
					    u_xlat2 = u_xlat2.xzzy + vs_TEXCOORD0.xyxy;
					    u_xlat5 = texture(_MainTex, u_xlat2.xy);
					    u_xlat3 = texture(_MainTex, u_xlat3.zw);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat6 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat28 = (-u_xlat6.w) + 0.5;
					    u_xlat28 = u_xlat28 + (-vs_TEXCOORD4.x);
					    u_xlat28 = u_xlat28 * vs_TEXCOORD4.y + 0.5;
					    u_xlat3.x = _OutlineWidth * _ScaleRatioA;
					    u_xlat3.y = _OutlineSoftness * _ScaleRatioA;
					    u_xlat3.xz = u_xlat3.xy * vs_TEXCOORD4.yy;
					    u_xlat6 = vs_COLOR0 * _FaceColor;
					    u_xlat4.x = vs_COLOR0.w * _OutlineColor.w;
					    u_xlat13.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat7 = texture(_FaceTex, u_xlat13.xy);
					    u_xlat6 = u_xlat6 * u_xlat7;
					    u_xlat13.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat7 = texture(_OutlineTex, u_xlat13.xy);
					    u_xlat5.xyz = u_xlat7.xyz * _OutlineColor.xyz;
					    u_xlat7.w = u_xlat4.x * u_xlat7.w;
					    u_xlat4.x = (-u_xlat3.x) * 0.5 + u_xlat28;
					    u_xlat21 = u_xlat3.z * 0.5 + u_xlat4.x;
					    u_xlat12 = u_xlat3.y * vs_TEXCOORD4.y + 1.0;
					    u_xlat12 = u_xlat21 / u_xlat12;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat21 = u_xlat3.x * 0.5 + u_xlat28;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat3.x = min(u_xlat3.x, 1.0);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat3.x = u_xlat3.x * u_xlat21;
					    u_xlat6.xyz = u_xlat6.www * u_xlat6.xyz;
					    u_xlat7.xyz = u_xlat5.xyz * u_xlat7.www;
					    u_xlat7 = (-u_xlat6) + u_xlat7;
					    u_xlat6 = u_xlat3.xxxx * u_xlat7 + u_xlat6;
					    u_xlat7 = vec4(u_xlat12) * u_xlat6;
					    u_xlat3.x = max(u_xlat7.w, 9.99999975e-05);
					    u_xlat4.xyz = u_xlat7.xyz / u_xlat3.xxx;
					    u_xlat3.x = _ShaderFlags * 0.5;
					    u_xlatb5 = u_xlat3.x>=(-u_xlat3.x);
					    u_xlat3.x = fract(abs(u_xlat3.x));
					    u_xlat3.x = (u_xlatb5) ? u_xlat3.x : (-u_xlat3.x);
					    u_xlatb3 = u_xlat3.x>=0.5;
					    u_xlat5.x = vs_TEXCOORD4.x + _BevelOffset;
					    u_xlat2.x = u_xlat4.w;
					    u_xlat2.y = u_xlat5.w;
					    u_xlat2.z = u_xlat3.w;
					    u_xlat2 = u_xlat5.xxxx + u_xlat2;
					    u_xlat30 = _BevelWidth + _OutlineWidth;
					    u_xlat30 = max(u_xlat30, 0.00999999978);
					    u_xlat2 = u_xlat2 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat2 = u_xlat2 / vec4(u_xlat30);
					    u_xlat2 = u_xlat2 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat5 = u_xlat2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat5 = -abs(u_xlat5) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat2 = (bool(u_xlatb3)) ? u_xlat5 : u_xlat2;
					    u_xlat5 = u_xlat2 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);
					    u_xlat5 = sin(u_xlat5);
					    u_xlat5 = (-u_xlat2) + u_xlat5;
					    u_xlat2 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat5 + u_xlat2;
					    u_xlat3.x = (-_BevelClamp) + 1.0;
					    u_xlat2 = min(u_xlat2, u_xlat3.xxxx);
					    u_xlat3.x = u_xlat30 * _Bevel;
					    u_xlat3.x = u_xlat3.x * _GradientScale;
					    u_xlat3.x = u_xlat3.x * -2.0;
					    u_xlat2.xz = u_xlat2.xz * u_xlat3.xx;
					    u_xlat2.yz = u_xlat2.wy * u_xlat3.xx + (-u_xlat2.zx);
					    u_xlat2.x = float(-1.0);
					    u_xlat2.w = float(1.0);
					    u_xlat29 = dot(u_xlat2.zw, u_xlat2.zw);
					    u_xlat29 = inversesqrt(u_xlat29);
					    u_xlat5.yz = vec2(u_xlat29) * vec2(1.0, 0.0);
					    u_xlat5.x = u_xlat29 * u_xlat2.z;
					    u_xlat29 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat29 = inversesqrt(u_xlat29);
					    u_xlat2.z = 0.0;
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat6.xyz = u_xlat2.xyz * u_xlat5.xyz;
					    u_xlat2.xyz = u_xlat5.zxy * u_xlat2.yzx + (-u_xlat6.xyz);
					    u_xlat5 = texture(_BumpMap, vs_TEXCOORD0.zw);
					    u_xlat5.xy = u_xlat5.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat29 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat29 = min(u_xlat29, 1.0);
					    u_xlat29 = (-u_xlat29) + 1.0;
					    u_xlat5.z = sqrt(u_xlat29);
					    u_xlat29 = (-_BumpFace) + _BumpOutline;
					    u_xlat29 = u_xlat21 * u_xlat29 + _BumpFace;
					    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat29) + vec3(-0.0, -0.0, -1.0);
					    u_xlat5.xyz = u_xlat7.www * u_xlat5.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat5.xyz);
					    u_xlat29 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat29 = inversesqrt(u_xlat29);
					    u_xlat2.xyz = vec3(u_xlat29) * u_xlat2.xyz;
					    u_xlat5.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat5.xyz = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat5.xyz;
					    u_xlat5.xyz = unity_ObjectToWorld[2].xyz * u_xlat2.zzz + u_xlat5.xyz;
					    u_xlat29 = dot(vs_TEXCOORD5.xyz, u_xlat5.xyz);
					    u_xlat29 = u_xlat29 + u_xlat29;
					    u_xlat5.xyz = u_xlat5.xyz * (-vec3(u_xlat29)) + vs_TEXCOORD5.xyz;
					    u_xlat5 = texture(_Cube, u_xlat5.xyz);
					    u_xlat6.xyz = (-_ReflectFaceColor.xyz) + _ReflectOutlineColor.xyz;
					    u_xlat6.xyz = vec3(u_xlat21) * u_xlat6.xyz + _ReflectFaceColor.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xyz;
					    u_xlat29 = _GlowOffset * _ScaleRatioB;
					    u_xlat29 = u_xlat29 * vs_TEXCOORD4.y;
					    u_xlat28 = (-u_xlat29) * 0.5 + u_xlat28;
					    u_xlatb29 = u_xlat28>=0.0;
					    u_xlat29 = u_xlatb29 ? 1.0 : float(0.0);
					    u_xlat3.x = _GlowOuter * _ScaleRatioB + (-_GlowInner);
					    u_xlat29 = u_xlat29 * u_xlat3.x + _GlowInner;
					    u_xlat29 = u_xlat29 * vs_TEXCOORD4.y;
					    u_xlat3.x = u_xlat29 * 0.5;
					    u_xlat29 = u_xlat29 * 0.5 + 1.0;
					    u_xlat28 = u_xlat28 / u_xlat29;
					    u_xlat28 = min(abs(u_xlat28), 1.0);
					    u_xlat28 = log2(u_xlat28);
					    u_xlat28 = u_xlat28 * _GlowPower;
					    u_xlat28 = exp2(u_xlat28);
					    u_xlat28 = (-u_xlat28) + 1.0;
					    u_xlat29 = min(u_xlat3.x, 1.0);
					    u_xlat29 = sqrt(u_xlat29);
					    u_xlat28 = u_xlat28 * u_xlat29;
					    u_xlat28 = dot(_GlowColor.ww, vec2(u_xlat28));
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat29 = u_xlat28 * vs_COLOR0.w;
					    u_xlat6.xyz = vec3(u_xlat29) * _GlowColor.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * u_xlat7.www + u_xlat6.xyz;
					    u_xlat4.xyz = u_xlat7.www * u_xlat4.xyz;
					    u_xlat28 = (-u_xlat28) * vs_COLOR0.w + 1.0;
					    u_xlat4.xyz = vec3(u_xlat28) * u_xlat4.xyz + u_xlat6.xyz;
					    u_xlat28 = (-u_xlat6.w) * u_xlat12 + 1.0;
					    u_xlat28 = u_xlat28 * u_xlat29 + u_xlat7.w;
					    u_xlat29 = max(u_xlat28, 9.99999975e-05);
					    u_xlat3.xyw = u_xlat4.xyz / vec3(u_xlat29);
					    u_xlat29 = (-_FaceShininess) + _OutlineShininess;
					    u_xlat29 = u_xlat21 * u_xlat29 + _FaceShininess;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, (-u_xlat2.xyz));
					    u_xlat4.y = dot(vs_TEXCOORD2.xyz, (-u_xlat2.xyz));
					    u_xlat4.z = dot(vs_TEXCOORD3.xyz, (-u_xlat2.xyz));
					    u_xlatb2 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb2){
					        u_xlatb2 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD2.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD1.www + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD3.www + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat9.xyz = (bool(u_xlatb2)) ? u_xlat6.xyz : u_xlat9.xyz;
					        u_xlat9.xyz = u_xlat9.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat9.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat9.x = u_xlat6.y * 0.25;
					        u_xlat18 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat27 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat9.x = max(u_xlat18, u_xlat9.x);
					        u_xlat6.x = min(u_xlat27, u_xlat9.x);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					        u_xlat9.xyz = u_xlat6.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat8 = texture(unity_ProbeVolumeSH, u_xlat9.xyz);
					        u_xlat9.xyz = u_xlat6.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat9.xyz);
					        u_xlat4.w = 1.0;
					        u_xlat2.x = dot(u_xlat7, u_xlat4);
					        u_xlat2.y = dot(u_xlat8, u_xlat4);
					        u_xlat2.z = dot(u_xlat6, u_xlat4);
					    } else {
					        u_xlat4.w = 1.0;
					        u_xlat2.x = dot(unity_SHAr, u_xlat4);
					        u_xlat2.y = dot(unity_SHAg, u_xlat4);
					        u_xlat2.z = dot(unity_SHAb, u_xlat4);
					    }
					    u_xlat9.xyz = u_xlat2.xyz + vs_TEXCOORD6.xyz;
					    u_xlat9.xyz = max(u_xlat9.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat9.xyz = log2(u_xlat9.xyz);
					    u_xlat9.xyz = u_xlat9.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat9.xyz = exp2(u_xlat9.xyz);
					    u_xlat9.xyz = u_xlat9.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat9.xyz = max(u_xlat9.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat10 = u_xlat29 * 128.0;
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * u_xlat10;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat2.xyz = u_xlat3.xyw * _LightColor0.xyz;
					    u_xlat4.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat1.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat3.xyw * u_xlat9.xyz + u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat27 = (-u_xlat27) + 1.0;
					    u_xlat27 = u_xlat27 * _ProjectionParams.z;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = u_xlat27 * unity_FogParams.x;
					    u_xlat27 = u_xlat27 * (-u_xlat27);
					    u_xlat27 = exp2(u_xlat27);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat27) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = u_xlat28;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "FORWARD"
			LOD 300
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "ForwardAdd" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
			Blend SrcAlpha One, SrcAlpha One
			ColorMask RGB -1
			ZClip Off
			ZWrite Off
			Cull Off
			GpuProgramID 67285
			Program "vp" {
				SubProgram "d3d9 " {
					Keywords { "POINT" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _EnvMatrix;
					//   float _FaceDilate;
					//   float4 _FaceTex_ST;
					//   float _GradientScale;
					//   float4 _MainTex_ST;
					//   float _PerspectiveFilter;
					//   float _ScaleRatioA;
					//   float _ScaleX;
					//   float _ScaleY;
					//   float4 _ScreenParams;
					//   float _VertexOffsetX;
					//   float _VertexOffsetY;
					//   float _WeightBold;
					//   float _WeightNormal;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 glstate_matrix_projection;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   _EnvMatrix                 c10      3
					//   glstate_matrix_projection  c13      2
					//   _WorldSpaceCameraPos       c15      1
					//   _ScreenParams              c16      1
					//   unity_WorldTransformParams c17      1
					//   _FaceDilate                c18      1
					//   _WeightNormal              c19      1
					//   _WeightBold                c20      1
					//   _ScaleRatioA               c21      1
					//   _VertexOffsetX             c22      1
					//   _VertexOffsetY             c23      1
					//   _GradientScale             c24      1
					//   _ScaleX                    c25      1
					//   _ScaleY                    c26      1
					//   _PerspectiveFilter         c27      1
					//   _MainTex_ST                c28      1
					//   _FaceTex_ST                c29      1
					//
					
					    vs_3_0
					    def c30, 0, 1, 1.5, 0.5
					    def c31, 0.000244140625, 4096, 0.001953125, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_color v5
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_color o6
					    dcl_texcoord5 o7.xy
					    dcl_texcoord6 o8.xyz
					    mov r0.xy, c30
					    mad r1, c15.xyzx, r0.yyyx, r0.xxxy
					    dp4 r2.x, c7, r1
					    dp4 r2.y, c8, r1
					    dp4 r2.z, c9, r1
					    add r1.x, c22.x, v0.x
					    add r1.y, c23.x, v0.y
					    mov r1.zw, v0
					    add r0.xzw, -r1.xyyz, r2.xyyz
					    dp3 r0.x, v2, r0.xzww
					    slt r0.z, -r0.x, r0.x
					    slt r0.x, r0.x, -r0.x
					    add r0.x, -r0.x, r0.z
					    mul r0.xzw, r0.x, v2.xyyz
					    mul r2.xyz, r0.z, c8.zxyw
					    mad r2.xyz, r0.x, c7.zxyw, r2
					    mad r0.xzw, r0.w, c9.zyxy, r2.xyyz
					    dp3 r2.x, r0.xzww, r0.xzww
					    rsq r2.x, r2.x
					    mul r0.xzw, r0, r2.x
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    add r3.xyz, -r2, c15
					    mov o5.xyz, r2
					    nrm r2.xyz, r3
					    dp3 r2.x, r0.zwxw, r2
					    dp4 r1.w, c3, r1
					    mad r4, r1.xyzx, c30.yyyx, c30.xxxy
					    mov r1.xy, c16
					    mul r2.yz, r1.xxyw, c13.xxyw
					    add r1.z, r2.z, r2.y
					    mul r1.z, r1.z, c25.x
					    rcp r5.x, r1.z
					    mul r1.xy, r1, c14
					    add r1.x, r1.y, r1.x
					    mul r1.x, r1.x, c26.x
					    rcp r5.y, r1.x
					    mul r1.xy, r1.w, r5
					    mul r1.xy, r1, r1
					    add r1.x, r1.y, r1.x
					    rsq r1.x, r1.x
					    mul r1.y, c24.x, v4_abs.y
					    mul r1.x, r1.x, r1.y
					    mul r1.y, r1.x, c30.z
					    add r0.y, r0.y, -c27.x
					    mul r0.y, r0.y, r1.y
					    mad r1.x, r1.x, c30.z, -r0.y
					    mad o7.y, r2_abs.x, r1.x, r0.y
					    sge r0.y, c30.x, v4.y
					    mov r1.x, c19.x
					    add r1.x, -r1.x, c20.x
					    mad r0.y, r0.y, r1.x, c19.x
					    mov r1.x, c18.x
					    mul r1.x, r1.x, c21.x
					    mul r1.x, r1.x, c30.w
					    rcp r1.y, c24.x
					    mad o7.x, r0.y, r1.y, r1.x
					    dp3 o8.x, c10, r3
					    dp3 o8.y, c11, r3
					    dp3 o8.z, c12, r3
					    dp4 r6.x, c0, r4
					    dp4 r6.y, c1, r4
					    dp4 r6.z, c2, r4
					    dp4 r6.w, c3, r4
					    mad o1.xy, v3, c28, c28.zwzw
					    mul r0.y, c31.x, v4.x
					    frc r1.x, r0.y
					    add r1.z, r0.y, -r1.x
					    mad r1.w, r1.z, -c31.y, v4.x
					    mul r1.xy, r1.zwzw, c29
					    mov r1.z, c31.z
					    mad o1.zw, r1.xyxy, r1.z, c29
					    dp3 r1.z, c4, v1
					    dp3 r1.x, c5, v1
					    dp3 r1.y, c6, v1
					    dp3 r0.y, r1, r1
					    rsq r0.y, r0.y
					    mul r1.xyz, r0.y, r1
					    mov o2.x, r1.z
					    mul r2.xyz, r0.xzww, r1
					    mad r2.xyz, r0.wxzw, r1.yzxw, -r2
					    mul r0.y, c17.w, v1.w
					    mul r2.xyz, r0.y, r2
					    mov o2.y, r2.x
					    mov o2.z, r0.z
					    mov o3.x, r1.x
					    mov o4.x, r1.y
					    mov o3.y, r2.y
					    mov o4.y, r2.z
					    mov o3.z, r0.w
					    mov o4.z, r0.x
					    mov o6, v5
					    mad o0.xy, r6.w, c255, r6
					    mov o0.zw, r6
					
					// approximately 97 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						float _FaceDilate;
						vec4 unused_0_2[6];
						mat4x4 _EnvMatrix;
						vec4 unused_0_4[7];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_10[4];
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_15;
						vec4 _MainTex_ST;
						vec4 _FaceTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[13];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat4;
					float u_xlat8;
					int u_xlati8;
					vec2 u_xlat9;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + glstate_matrix_mvp[3];
					    u_xlat12 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat9.x = floor(u_xlat12);
					    u_xlat9.y = (-u_xlat9.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat1.xy = u_xlat9.xy * _FaceTex_ST.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat8 = dot(in_NORMAL0.xyz, u_xlat1.xyz);
					    u_xlati12 = int((0.0<u_xlat8) ? 0xFFFFFFFFu : uint(0));
					    u_xlati8 = int((u_xlat8<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati8 = (-u_xlati12) + u_xlati8;
					    u_xlat8 = float(u_xlati8);
					    u_xlat1.xyz = vec3(u_xlat8) * in_NORMAL0.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, unity_WorldToObject[2].xyz);
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat2.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat8 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat4.x = u_xlat0.y * glstate_matrix_mvp[1].w;
					    u_xlat0.x = glstate_matrix_mvp[0].w * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = glstate_matrix_mvp[2].w * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_mvp[3].w * in_POSITION0.w + u_xlat0.x;
					    u_xlat4.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat4.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat4.xy;
					    u_xlat4.xy = u_xlat4.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat0.xy = u_xlat0.xx / u_xlat4.xy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat4.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat4.x = u_xlat0.x * 1.5;
					    u_xlat8 = (-_PerspectiveFilter) + 1.0;
					    u_xlat4.x = u_xlat8 * u_xlat4.x;
					    u_xlat0.x = u_xlat0.x * 1.5 + (-u_xlat4.x);
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat1.yzx, u_xlat3.xyz);
					    vs_TEXCOORD5.y = abs(u_xlat8) * u_xlat0.x + u_xlat4.x;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat4.x = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x + _WeightNormal;
					    u_xlat0.x = u_xlat0.x / _GradientScale;
					    u_xlat4.x = _FaceDilate * _ScaleRatioA;
					    vs_TEXCOORD5.x = u_xlat4.x * 0.5 + u_xlat0.x;
					    u_xlat0.xyz = u_xlat2.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyz = _EnvMatrix[0].xyz * u_xlat2.xxx + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = _EnvMatrix[2].xyz * u_xlat2.zzz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _EnvMatrix;
					//   float _FaceDilate;
					//   float4 _FaceTex_ST;
					//   float _GradientScale;
					//   float4 _MainTex_ST;
					//   float _PerspectiveFilter;
					//   float _ScaleRatioA;
					//   float _ScaleX;
					//   float _ScaleY;
					//   float4 _ScreenParams;
					//   float _VertexOffsetX;
					//   float _VertexOffsetY;
					//   float _WeightBold;
					//   float _WeightNormal;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 glstate_matrix_projection;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   _EnvMatrix                 c10      3
					//   glstate_matrix_projection  c13      2
					//   _WorldSpaceCameraPos       c15      1
					//   _ScreenParams              c16      1
					//   unity_WorldTransformParams c17      1
					//   _FaceDilate                c18      1
					//   _WeightNormal              c19      1
					//   _WeightBold                c20      1
					//   _ScaleRatioA               c21      1
					//   _VertexOffsetX             c22      1
					//   _VertexOffsetY             c23      1
					//   _GradientScale             c24      1
					//   _ScaleX                    c25      1
					//   _ScaleY                    c26      1
					//   _PerspectiveFilter         c27      1
					//   _MainTex_ST                c28      1
					//   _FaceTex_ST                c29      1
					//
					
					    vs_3_0
					    def c30, 0, 1, 1.5, 0.5
					    def c31, 0.000244140625, 4096, 0.001953125, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_color v5
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_color o6
					    dcl_texcoord5 o7.xy
					    dcl_texcoord6 o8.xyz
					    mov r0.xy, c30
					    mad r1, c15.xyzx, r0.yyyx, r0.xxxy
					    dp4 r2.x, c7, r1
					    dp4 r2.y, c8, r1
					    dp4 r2.z, c9, r1
					    add r1.x, c22.x, v0.x
					    add r1.y, c23.x, v0.y
					    mov r1.zw, v0
					    add r0.xzw, -r1.xyyz, r2.xyyz
					    dp3 r0.x, v2, r0.xzww
					    slt r0.z, -r0.x, r0.x
					    slt r0.x, r0.x, -r0.x
					    add r0.x, -r0.x, r0.z
					    mul r0.xzw, r0.x, v2.xyyz
					    mul r2.xyz, r0.z, c8.zxyw
					    mad r2.xyz, r0.x, c7.zxyw, r2
					    mad r0.xzw, r0.w, c9.zyxy, r2.xyyz
					    dp3 r2.x, r0.xzww, r0.xzww
					    rsq r2.x, r2.x
					    mul r0.xzw, r0, r2.x
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    add r3.xyz, -r2, c15
					    mov o5.xyz, r2
					    nrm r2.xyz, r3
					    dp3 r2.x, r0.zwxw, r2
					    dp4 r1.w, c3, r1
					    mad r4, r1.xyzx, c30.yyyx, c30.xxxy
					    mov r1.xy, c16
					    mul r2.yz, r1.xxyw, c13.xxyw
					    add r1.z, r2.z, r2.y
					    mul r1.z, r1.z, c25.x
					    rcp r5.x, r1.z
					    mul r1.xy, r1, c14
					    add r1.x, r1.y, r1.x
					    mul r1.x, r1.x, c26.x
					    rcp r5.y, r1.x
					    mul r1.xy, r1.w, r5
					    mul r1.xy, r1, r1
					    add r1.x, r1.y, r1.x
					    rsq r1.x, r1.x
					    mul r1.y, c24.x, v4_abs.y
					    mul r1.x, r1.x, r1.y
					    mul r1.y, r1.x, c30.z
					    add r0.y, r0.y, -c27.x
					    mul r0.y, r0.y, r1.y
					    mad r1.x, r1.x, c30.z, -r0.y
					    mad o7.y, r2_abs.x, r1.x, r0.y
					    sge r0.y, c30.x, v4.y
					    mov r1.x, c19.x
					    add r1.x, -r1.x, c20.x
					    mad r0.y, r0.y, r1.x, c19.x
					    mov r1.x, c18.x
					    mul r1.x, r1.x, c21.x
					    mul r1.x, r1.x, c30.w
					    rcp r1.y, c24.x
					    mad o7.x, r0.y, r1.y, r1.x
					    dp3 o8.x, c10, r3
					    dp3 o8.y, c11, r3
					    dp3 o8.z, c12, r3
					    dp4 r6.x, c0, r4
					    dp4 r6.y, c1, r4
					    dp4 r6.z, c2, r4
					    dp4 r6.w, c3, r4
					    mad o1.xy, v3, c28, c28.zwzw
					    mul r0.y, c31.x, v4.x
					    frc r1.x, r0.y
					    add r1.z, r0.y, -r1.x
					    mad r1.w, r1.z, -c31.y, v4.x
					    mul r1.xy, r1.zwzw, c29
					    mov r1.z, c31.z
					    mad o1.zw, r1.xyxy, r1.z, c29
					    dp3 r1.z, c4, v1
					    dp3 r1.x, c5, v1
					    dp3 r1.y, c6, v1
					    dp3 r0.y, r1, r1
					    rsq r0.y, r0.y
					    mul r1.xyz, r0.y, r1
					    mov o2.x, r1.z
					    mul r2.xyz, r0.xzww, r1
					    mad r2.xyz, r0.wxzw, r1.yzxw, -r2
					    mul r0.y, c17.w, v1.w
					    mul r2.xyz, r0.y, r2
					    mov o2.y, r2.x
					    mov o2.z, r0.z
					    mov o3.x, r1.x
					    mov o4.x, r1.y
					    mov o3.y, r2.y
					    mov o4.y, r2.z
					    mov o3.z, r0.w
					    mov o4.z, r0.x
					    mov o6, v5
					    mad o0.xy, r6.w, c255, r6
					    mov o0.zw, r6
					
					// approximately 97 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						float _FaceDilate;
						vec4 unused_0_2[6];
						mat4x4 _EnvMatrix;
						vec4 unused_0_4[7];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_10[4];
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_15;
						vec4 _MainTex_ST;
						vec4 _FaceTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[13];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat4;
					float u_xlat8;
					int u_xlati8;
					vec2 u_xlat9;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + glstate_matrix_mvp[3];
					    u_xlat12 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat9.x = floor(u_xlat12);
					    u_xlat9.y = (-u_xlat9.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat1.xy = u_xlat9.xy * _FaceTex_ST.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat8 = dot(in_NORMAL0.xyz, u_xlat1.xyz);
					    u_xlati12 = int((0.0<u_xlat8) ? 0xFFFFFFFFu : uint(0));
					    u_xlati8 = int((u_xlat8<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati8 = (-u_xlati12) + u_xlati8;
					    u_xlat8 = float(u_xlati8);
					    u_xlat1.xyz = vec3(u_xlat8) * in_NORMAL0.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, unity_WorldToObject[2].xyz);
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat2.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat8 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat4.x = u_xlat0.y * glstate_matrix_mvp[1].w;
					    u_xlat0.x = glstate_matrix_mvp[0].w * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = glstate_matrix_mvp[2].w * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_mvp[3].w * in_POSITION0.w + u_xlat0.x;
					    u_xlat4.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat4.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat4.xy;
					    u_xlat4.xy = u_xlat4.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat0.xy = u_xlat0.xx / u_xlat4.xy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat4.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat4.x = u_xlat0.x * 1.5;
					    u_xlat8 = (-_PerspectiveFilter) + 1.0;
					    u_xlat4.x = u_xlat8 * u_xlat4.x;
					    u_xlat0.x = u_xlat0.x * 1.5 + (-u_xlat4.x);
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat1.yzx, u_xlat3.xyz);
					    vs_TEXCOORD5.y = abs(u_xlat8) * u_xlat0.x + u_xlat4.x;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat4.x = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x + _WeightNormal;
					    u_xlat0.x = u_xlat0.x / _GradientScale;
					    u_xlat4.x = _FaceDilate * _ScaleRatioA;
					    vs_TEXCOORD5.x = u_xlat4.x * 0.5 + u_xlat0.x;
					    u_xlat0.xyz = u_xlat2.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyz = _EnvMatrix[0].xyz * u_xlat2.xxx + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = _EnvMatrix[2].xyz * u_xlat2.zzz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "SPOT" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _EnvMatrix;
					//   float _FaceDilate;
					//   float4 _FaceTex_ST;
					//   float _GradientScale;
					//   float4 _MainTex_ST;
					//   float _PerspectiveFilter;
					//   float _ScaleRatioA;
					//   float _ScaleX;
					//   float _ScaleY;
					//   float4 _ScreenParams;
					//   float _VertexOffsetX;
					//   float _VertexOffsetY;
					//   float _WeightBold;
					//   float _WeightNormal;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 glstate_matrix_projection;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   _EnvMatrix                 c10      3
					//   glstate_matrix_projection  c13      2
					//   _WorldSpaceCameraPos       c15      1
					//   _ScreenParams              c16      1
					//   unity_WorldTransformParams c17      1
					//   _FaceDilate                c18      1
					//   _WeightNormal              c19      1
					//   _WeightBold                c20      1
					//   _ScaleRatioA               c21      1
					//   _VertexOffsetX             c22      1
					//   _VertexOffsetY             c23      1
					//   _GradientScale             c24      1
					//   _ScaleX                    c25      1
					//   _ScaleY                    c26      1
					//   _PerspectiveFilter         c27      1
					//   _MainTex_ST                c28      1
					//   _FaceTex_ST                c29      1
					//
					
					    vs_3_0
					    def c30, 0, 1, 1.5, 0.5
					    def c31, 0.000244140625, 4096, 0.001953125, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_color v5
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_color o6
					    dcl_texcoord5 o7.xy
					    dcl_texcoord6 o8.xyz
					    mov r0.xy, c30
					    mad r1, c15.xyzx, r0.yyyx, r0.xxxy
					    dp4 r2.x, c7, r1
					    dp4 r2.y, c8, r1
					    dp4 r2.z, c9, r1
					    add r1.x, c22.x, v0.x
					    add r1.y, c23.x, v0.y
					    mov r1.zw, v0
					    add r0.xzw, -r1.xyyz, r2.xyyz
					    dp3 r0.x, v2, r0.xzww
					    slt r0.z, -r0.x, r0.x
					    slt r0.x, r0.x, -r0.x
					    add r0.x, -r0.x, r0.z
					    mul r0.xzw, r0.x, v2.xyyz
					    mul r2.xyz, r0.z, c8.zxyw
					    mad r2.xyz, r0.x, c7.zxyw, r2
					    mad r0.xzw, r0.w, c9.zyxy, r2.xyyz
					    dp3 r2.x, r0.xzww, r0.xzww
					    rsq r2.x, r2.x
					    mul r0.xzw, r0, r2.x
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    add r3.xyz, -r2, c15
					    mov o5.xyz, r2
					    nrm r2.xyz, r3
					    dp3 r2.x, r0.zwxw, r2
					    dp4 r1.w, c3, r1
					    mad r4, r1.xyzx, c30.yyyx, c30.xxxy
					    mov r1.xy, c16
					    mul r2.yz, r1.xxyw, c13.xxyw
					    add r1.z, r2.z, r2.y
					    mul r1.z, r1.z, c25.x
					    rcp r5.x, r1.z
					    mul r1.xy, r1, c14
					    add r1.x, r1.y, r1.x
					    mul r1.x, r1.x, c26.x
					    rcp r5.y, r1.x
					    mul r1.xy, r1.w, r5
					    mul r1.xy, r1, r1
					    add r1.x, r1.y, r1.x
					    rsq r1.x, r1.x
					    mul r1.y, c24.x, v4_abs.y
					    mul r1.x, r1.x, r1.y
					    mul r1.y, r1.x, c30.z
					    add r0.y, r0.y, -c27.x
					    mul r0.y, r0.y, r1.y
					    mad r1.x, r1.x, c30.z, -r0.y
					    mad o7.y, r2_abs.x, r1.x, r0.y
					    sge r0.y, c30.x, v4.y
					    mov r1.x, c19.x
					    add r1.x, -r1.x, c20.x
					    mad r0.y, r0.y, r1.x, c19.x
					    mov r1.x, c18.x
					    mul r1.x, r1.x, c21.x
					    mul r1.x, r1.x, c30.w
					    rcp r1.y, c24.x
					    mad o7.x, r0.y, r1.y, r1.x
					    dp3 o8.x, c10, r3
					    dp3 o8.y, c11, r3
					    dp3 o8.z, c12, r3
					    dp4 r6.x, c0, r4
					    dp4 r6.y, c1, r4
					    dp4 r6.z, c2, r4
					    dp4 r6.w, c3, r4
					    mad o1.xy, v3, c28, c28.zwzw
					    mul r0.y, c31.x, v4.x
					    frc r1.x, r0.y
					    add r1.z, r0.y, -r1.x
					    mad r1.w, r1.z, -c31.y, v4.x
					    mul r1.xy, r1.zwzw, c29
					    mov r1.z, c31.z
					    mad o1.zw, r1.xyxy, r1.z, c29
					    dp3 r1.z, c4, v1
					    dp3 r1.x, c5, v1
					    dp3 r1.y, c6, v1
					    dp3 r0.y, r1, r1
					    rsq r0.y, r0.y
					    mul r1.xyz, r0.y, r1
					    mov o2.x, r1.z
					    mul r2.xyz, r0.xzww, r1
					    mad r2.xyz, r0.wxzw, r1.yzxw, -r2
					    mul r0.y, c17.w, v1.w
					    mul r2.xyz, r0.y, r2
					    mov o2.y, r2.x
					    mov o2.z, r0.z
					    mov o3.x, r1.x
					    mov o4.x, r1.y
					    mov o3.y, r2.y
					    mov o4.y, r2.z
					    mov o3.z, r0.w
					    mov o4.z, r0.x
					    mov o6, v5
					    mad o0.xy, r6.w, c255, r6
					    mov o0.zw, r6
					
					// approximately 97 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						float _FaceDilate;
						vec4 unused_0_2[6];
						mat4x4 _EnvMatrix;
						vec4 unused_0_4[7];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_10[4];
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_15;
						vec4 _MainTex_ST;
						vec4 _FaceTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[13];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat4;
					float u_xlat8;
					int u_xlati8;
					vec2 u_xlat9;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + glstate_matrix_mvp[3];
					    u_xlat12 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat9.x = floor(u_xlat12);
					    u_xlat9.y = (-u_xlat9.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat1.xy = u_xlat9.xy * _FaceTex_ST.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat8 = dot(in_NORMAL0.xyz, u_xlat1.xyz);
					    u_xlati12 = int((0.0<u_xlat8) ? 0xFFFFFFFFu : uint(0));
					    u_xlati8 = int((u_xlat8<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati8 = (-u_xlati12) + u_xlati8;
					    u_xlat8 = float(u_xlati8);
					    u_xlat1.xyz = vec3(u_xlat8) * in_NORMAL0.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, unity_WorldToObject[2].xyz);
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat2.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat8 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat4.x = u_xlat0.y * glstate_matrix_mvp[1].w;
					    u_xlat0.x = glstate_matrix_mvp[0].w * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = glstate_matrix_mvp[2].w * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_mvp[3].w * in_POSITION0.w + u_xlat0.x;
					    u_xlat4.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat4.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat4.xy;
					    u_xlat4.xy = u_xlat4.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat0.xy = u_xlat0.xx / u_xlat4.xy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat4.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat4.x = u_xlat0.x * 1.5;
					    u_xlat8 = (-_PerspectiveFilter) + 1.0;
					    u_xlat4.x = u_xlat8 * u_xlat4.x;
					    u_xlat0.x = u_xlat0.x * 1.5 + (-u_xlat4.x);
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat1.yzx, u_xlat3.xyz);
					    vs_TEXCOORD5.y = abs(u_xlat8) * u_xlat0.x + u_xlat4.x;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat4.x = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x + _WeightNormal;
					    u_xlat0.x = u_xlat0.x / _GradientScale;
					    u_xlat4.x = _FaceDilate * _ScaleRatioA;
					    vs_TEXCOORD5.x = u_xlat4.x * 0.5 + u_xlat0.x;
					    u_xlat0.xyz = u_xlat2.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyz = _EnvMatrix[0].xyz * u_xlat2.xxx + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = _EnvMatrix[2].xyz * u_xlat2.zzz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT_COOKIE" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _EnvMatrix;
					//   float _FaceDilate;
					//   float4 _FaceTex_ST;
					//   float _GradientScale;
					//   float4 _MainTex_ST;
					//   float _PerspectiveFilter;
					//   float _ScaleRatioA;
					//   float _ScaleX;
					//   float _ScaleY;
					//   float4 _ScreenParams;
					//   float _VertexOffsetX;
					//   float _VertexOffsetY;
					//   float _WeightBold;
					//   float _WeightNormal;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 glstate_matrix_projection;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   _EnvMatrix                 c10      3
					//   glstate_matrix_projection  c13      2
					//   _WorldSpaceCameraPos       c15      1
					//   _ScreenParams              c16      1
					//   unity_WorldTransformParams c17      1
					//   _FaceDilate                c18      1
					//   _WeightNormal              c19      1
					//   _WeightBold                c20      1
					//   _ScaleRatioA               c21      1
					//   _VertexOffsetX             c22      1
					//   _VertexOffsetY             c23      1
					//   _GradientScale             c24      1
					//   _ScaleX                    c25      1
					//   _ScaleY                    c26      1
					//   _PerspectiveFilter         c27      1
					//   _MainTex_ST                c28      1
					//   _FaceTex_ST                c29      1
					//
					
					    vs_3_0
					    def c30, 0, 1, 1.5, 0.5
					    def c31, 0.000244140625, 4096, 0.001953125, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_color v5
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_color o6
					    dcl_texcoord5 o7.xy
					    dcl_texcoord6 o8.xyz
					    mov r0.xy, c30
					    mad r1, c15.xyzx, r0.yyyx, r0.xxxy
					    dp4 r2.x, c7, r1
					    dp4 r2.y, c8, r1
					    dp4 r2.z, c9, r1
					    add r1.x, c22.x, v0.x
					    add r1.y, c23.x, v0.y
					    mov r1.zw, v0
					    add r0.xzw, -r1.xyyz, r2.xyyz
					    dp3 r0.x, v2, r0.xzww
					    slt r0.z, -r0.x, r0.x
					    slt r0.x, r0.x, -r0.x
					    add r0.x, -r0.x, r0.z
					    mul r0.xzw, r0.x, v2.xyyz
					    mul r2.xyz, r0.z, c8.zxyw
					    mad r2.xyz, r0.x, c7.zxyw, r2
					    mad r0.xzw, r0.w, c9.zyxy, r2.xyyz
					    dp3 r2.x, r0.xzww, r0.xzww
					    rsq r2.x, r2.x
					    mul r0.xzw, r0, r2.x
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    add r3.xyz, -r2, c15
					    mov o5.xyz, r2
					    nrm r2.xyz, r3
					    dp3 r2.x, r0.zwxw, r2
					    dp4 r1.w, c3, r1
					    mad r4, r1.xyzx, c30.yyyx, c30.xxxy
					    mov r1.xy, c16
					    mul r2.yz, r1.xxyw, c13.xxyw
					    add r1.z, r2.z, r2.y
					    mul r1.z, r1.z, c25.x
					    rcp r5.x, r1.z
					    mul r1.xy, r1, c14
					    add r1.x, r1.y, r1.x
					    mul r1.x, r1.x, c26.x
					    rcp r5.y, r1.x
					    mul r1.xy, r1.w, r5
					    mul r1.xy, r1, r1
					    add r1.x, r1.y, r1.x
					    rsq r1.x, r1.x
					    mul r1.y, c24.x, v4_abs.y
					    mul r1.x, r1.x, r1.y
					    mul r1.y, r1.x, c30.z
					    add r0.y, r0.y, -c27.x
					    mul r0.y, r0.y, r1.y
					    mad r1.x, r1.x, c30.z, -r0.y
					    mad o7.y, r2_abs.x, r1.x, r0.y
					    sge r0.y, c30.x, v4.y
					    mov r1.x, c19.x
					    add r1.x, -r1.x, c20.x
					    mad r0.y, r0.y, r1.x, c19.x
					    mov r1.x, c18.x
					    mul r1.x, r1.x, c21.x
					    mul r1.x, r1.x, c30.w
					    rcp r1.y, c24.x
					    mad o7.x, r0.y, r1.y, r1.x
					    dp3 o8.x, c10, r3
					    dp3 o8.y, c11, r3
					    dp3 o8.z, c12, r3
					    dp4 r6.x, c0, r4
					    dp4 r6.y, c1, r4
					    dp4 r6.z, c2, r4
					    dp4 r6.w, c3, r4
					    mad o1.xy, v3, c28, c28.zwzw
					    mul r0.y, c31.x, v4.x
					    frc r1.x, r0.y
					    add r1.z, r0.y, -r1.x
					    mad r1.w, r1.z, -c31.y, v4.x
					    mul r1.xy, r1.zwzw, c29
					    mov r1.z, c31.z
					    mad o1.zw, r1.xyxy, r1.z, c29
					    dp3 r1.z, c4, v1
					    dp3 r1.x, c5, v1
					    dp3 r1.y, c6, v1
					    dp3 r0.y, r1, r1
					    rsq r0.y, r0.y
					    mul r1.xyz, r0.y, r1
					    mov o2.x, r1.z
					    mul r2.xyz, r0.xzww, r1
					    mad r2.xyz, r0.wxzw, r1.yzxw, -r2
					    mul r0.y, c17.w, v1.w
					    mul r2.xyz, r0.y, r2
					    mov o2.y, r2.x
					    mov o2.z, r0.z
					    mov o3.x, r1.x
					    mov o4.x, r1.y
					    mov o3.y, r2.y
					    mov o4.y, r2.z
					    mov o3.z, r0.w
					    mov o4.z, r0.x
					    mov o6, v5
					    mad o0.xy, r6.w, c255, r6
					    mov o0.zw, r6
					
					// approximately 97 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						float _FaceDilate;
						vec4 unused_0_2[6];
						mat4x4 _EnvMatrix;
						vec4 unused_0_4[7];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_10[4];
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_15;
						vec4 _MainTex_ST;
						vec4 _FaceTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[13];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat4;
					float u_xlat8;
					int u_xlati8;
					vec2 u_xlat9;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + glstate_matrix_mvp[3];
					    u_xlat12 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat9.x = floor(u_xlat12);
					    u_xlat9.y = (-u_xlat9.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat1.xy = u_xlat9.xy * _FaceTex_ST.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat8 = dot(in_NORMAL0.xyz, u_xlat1.xyz);
					    u_xlati12 = int((0.0<u_xlat8) ? 0xFFFFFFFFu : uint(0));
					    u_xlati8 = int((u_xlat8<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati8 = (-u_xlati12) + u_xlati8;
					    u_xlat8 = float(u_xlati8);
					    u_xlat1.xyz = vec3(u_xlat8) * in_NORMAL0.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, unity_WorldToObject[2].xyz);
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat2.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat8 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat4.x = u_xlat0.y * glstate_matrix_mvp[1].w;
					    u_xlat0.x = glstate_matrix_mvp[0].w * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = glstate_matrix_mvp[2].w * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_mvp[3].w * in_POSITION0.w + u_xlat0.x;
					    u_xlat4.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat4.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat4.xy;
					    u_xlat4.xy = u_xlat4.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat0.xy = u_xlat0.xx / u_xlat4.xy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat4.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat4.x = u_xlat0.x * 1.5;
					    u_xlat8 = (-_PerspectiveFilter) + 1.0;
					    u_xlat4.x = u_xlat8 * u_xlat4.x;
					    u_xlat0.x = u_xlat0.x * 1.5 + (-u_xlat4.x);
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat1.yzx, u_xlat3.xyz);
					    vs_TEXCOORD5.y = abs(u_xlat8) * u_xlat0.x + u_xlat4.x;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat4.x = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x + _WeightNormal;
					    u_xlat0.x = u_xlat0.x / _GradientScale;
					    u_xlat4.x = _FaceDilate * _ScaleRatioA;
					    vs_TEXCOORD5.x = u_xlat4.x * 0.5 + u_xlat0.x;
					    u_xlat0.xyz = u_xlat2.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyz = _EnvMatrix[0].xyz * u_xlat2.xxx + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = _EnvMatrix[2].xyz * u_xlat2.zzz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _EnvMatrix;
					//   float _FaceDilate;
					//   float4 _FaceTex_ST;
					//   float _GradientScale;
					//   float4 _MainTex_ST;
					//   float _PerspectiveFilter;
					//   float _ScaleRatioA;
					//   float _ScaleX;
					//   float _ScaleY;
					//   float4 _ScreenParams;
					//   float _VertexOffsetX;
					//   float _VertexOffsetY;
					//   float _WeightBold;
					//   float _WeightNormal;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 glstate_matrix_projection;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   _EnvMatrix                 c10      3
					//   glstate_matrix_projection  c13      2
					//   _WorldSpaceCameraPos       c15      1
					//   _ScreenParams              c16      1
					//   unity_WorldTransformParams c17      1
					//   _FaceDilate                c18      1
					//   _WeightNormal              c19      1
					//   _WeightBold                c20      1
					//   _ScaleRatioA               c21      1
					//   _VertexOffsetX             c22      1
					//   _VertexOffsetY             c23      1
					//   _GradientScale             c24      1
					//   _ScaleX                    c25      1
					//   _ScaleY                    c26      1
					//   _PerspectiveFilter         c27      1
					//   _MainTex_ST                c28      1
					//   _FaceTex_ST                c29      1
					//
					
					    vs_3_0
					    def c30, 0, 1, 1.5, 0.5
					    def c31, 0.000244140625, 4096, 0.001953125, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_color v5
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_color o6
					    dcl_texcoord5 o7.xy
					    dcl_texcoord6 o8.xyz
					    mov r0.xy, c30
					    mad r1, c15.xyzx, r0.yyyx, r0.xxxy
					    dp4 r2.x, c7, r1
					    dp4 r2.y, c8, r1
					    dp4 r2.z, c9, r1
					    add r1.x, c22.x, v0.x
					    add r1.y, c23.x, v0.y
					    mov r1.zw, v0
					    add r0.xzw, -r1.xyyz, r2.xyyz
					    dp3 r0.x, v2, r0.xzww
					    slt r0.z, -r0.x, r0.x
					    slt r0.x, r0.x, -r0.x
					    add r0.x, -r0.x, r0.z
					    mul r0.xzw, r0.x, v2.xyyz
					    mul r2.xyz, r0.z, c8.zxyw
					    mad r2.xyz, r0.x, c7.zxyw, r2
					    mad r0.xzw, r0.w, c9.zyxy, r2.xyyz
					    dp3 r2.x, r0.xzww, r0.xzww
					    rsq r2.x, r2.x
					    mul r0.xzw, r0, r2.x
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    add r3.xyz, -r2, c15
					    mov o5.xyz, r2
					    nrm r2.xyz, r3
					    dp3 r2.x, r0.zwxw, r2
					    dp4 r1.w, c3, r1
					    mad r4, r1.xyzx, c30.yyyx, c30.xxxy
					    mov r1.xy, c16
					    mul r2.yz, r1.xxyw, c13.xxyw
					    add r1.z, r2.z, r2.y
					    mul r1.z, r1.z, c25.x
					    rcp r5.x, r1.z
					    mul r1.xy, r1, c14
					    add r1.x, r1.y, r1.x
					    mul r1.x, r1.x, c26.x
					    rcp r5.y, r1.x
					    mul r1.xy, r1.w, r5
					    mul r1.xy, r1, r1
					    add r1.x, r1.y, r1.x
					    rsq r1.x, r1.x
					    mul r1.y, c24.x, v4_abs.y
					    mul r1.x, r1.x, r1.y
					    mul r1.y, r1.x, c30.z
					    add r0.y, r0.y, -c27.x
					    mul r0.y, r0.y, r1.y
					    mad r1.x, r1.x, c30.z, -r0.y
					    mad o7.y, r2_abs.x, r1.x, r0.y
					    sge r0.y, c30.x, v4.y
					    mov r1.x, c19.x
					    add r1.x, -r1.x, c20.x
					    mad r0.y, r0.y, r1.x, c19.x
					    mov r1.x, c18.x
					    mul r1.x, r1.x, c21.x
					    mul r1.x, r1.x, c30.w
					    rcp r1.y, c24.x
					    mad o7.x, r0.y, r1.y, r1.x
					    dp3 o8.x, c10, r3
					    dp3 o8.y, c11, r3
					    dp3 o8.z, c12, r3
					    dp4 r6.x, c0, r4
					    dp4 r6.y, c1, r4
					    dp4 r6.z, c2, r4
					    dp4 r6.w, c3, r4
					    mad o1.xy, v3, c28, c28.zwzw
					    mul r0.y, c31.x, v4.x
					    frc r1.x, r0.y
					    add r1.z, r0.y, -r1.x
					    mad r1.w, r1.z, -c31.y, v4.x
					    mul r1.xy, r1.zwzw, c29
					    mov r1.z, c31.z
					    mad o1.zw, r1.xyxy, r1.z, c29
					    dp3 r1.z, c4, v1
					    dp3 r1.x, c5, v1
					    dp3 r1.y, c6, v1
					    dp3 r0.y, r1, r1
					    rsq r0.y, r0.y
					    mul r1.xyz, r0.y, r1
					    mov o2.x, r1.z
					    mul r2.xyz, r0.xzww, r1
					    mad r2.xyz, r0.wxzw, r1.yzxw, -r2
					    mul r0.y, c17.w, v1.w
					    mul r2.xyz, r0.y, r2
					    mov o2.y, r2.x
					    mov o2.z, r0.z
					    mov o3.x, r1.x
					    mov o4.x, r1.y
					    mov o3.y, r2.y
					    mov o4.y, r2.z
					    mov o3.z, r0.w
					    mov o4.z, r0.x
					    mov o6, v5
					    mad o0.xy, r6.w, c255, r6
					    mov o0.zw, r6
					
					// approximately 97 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						float _FaceDilate;
						vec4 unused_0_2[6];
						mat4x4 _EnvMatrix;
						vec4 unused_0_4[7];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_10[4];
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_15;
						vec4 _MainTex_ST;
						vec4 _FaceTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[13];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat4;
					float u_xlat8;
					int u_xlati8;
					vec2 u_xlat9;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + glstate_matrix_mvp[3];
					    u_xlat12 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat9.x = floor(u_xlat12);
					    u_xlat9.y = (-u_xlat9.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat1.xy = u_xlat9.xy * _FaceTex_ST.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat8 = dot(in_NORMAL0.xyz, u_xlat1.xyz);
					    u_xlati12 = int((0.0<u_xlat8) ? 0xFFFFFFFFu : uint(0));
					    u_xlati8 = int((u_xlat8<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati8 = (-u_xlati12) + u_xlati8;
					    u_xlat8 = float(u_xlati8);
					    u_xlat1.xyz = vec3(u_xlat8) * in_NORMAL0.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, unity_WorldToObject[2].xyz);
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat2.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat8 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat4.x = u_xlat0.y * glstate_matrix_mvp[1].w;
					    u_xlat0.x = glstate_matrix_mvp[0].w * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = glstate_matrix_mvp[2].w * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_mvp[3].w * in_POSITION0.w + u_xlat0.x;
					    u_xlat4.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat4.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat4.xy;
					    u_xlat4.xy = u_xlat4.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat0.xy = u_xlat0.xx / u_xlat4.xy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat4.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat4.x = u_xlat0.x * 1.5;
					    u_xlat8 = (-_PerspectiveFilter) + 1.0;
					    u_xlat4.x = u_xlat8 * u_xlat4.x;
					    u_xlat0.x = u_xlat0.x * 1.5 + (-u_xlat4.x);
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat1.yzx, u_xlat3.xyz);
					    vs_TEXCOORD5.y = abs(u_xlat8) * u_xlat0.x + u_xlat4.x;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat4.x = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x + _WeightNormal;
					    u_xlat0.x = u_xlat0.x / _GradientScale;
					    u_xlat4.x = _FaceDilate * _ScaleRatioA;
					    vs_TEXCOORD5.x = u_xlat4.x * 0.5 + u_xlat0.x;
					    u_xlat0.xyz = u_xlat2.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyz = _EnvMatrix[0].xyz * u_xlat2.xxx + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = _EnvMatrix[2].xyz * u_xlat2.zzz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _EnvMatrix;
					//   float _FaceDilate;
					//   float4 _FaceTex_ST;
					//   float _GradientScale;
					//   float4 _MainTex_ST;
					//   float _PerspectiveFilter;
					//   float _ScaleRatioA;
					//   float _ScaleX;
					//   float _ScaleY;
					//   float4 _ScreenParams;
					//   float _VertexOffsetX;
					//   float _VertexOffsetY;
					//   float _WeightBold;
					//   float _WeightNormal;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 glstate_matrix_projection;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   _EnvMatrix                 c10      3
					//   glstate_matrix_projection  c13      2
					//   _WorldSpaceCameraPos       c15      1
					//   _ScreenParams              c16      1
					//   unity_WorldTransformParams c17      1
					//   _FaceDilate                c18      1
					//   _WeightNormal              c19      1
					//   _WeightBold                c20      1
					//   _ScaleRatioA               c21      1
					//   _VertexOffsetX             c22      1
					//   _VertexOffsetY             c23      1
					//   _GradientScale             c24      1
					//   _ScaleX                    c25      1
					//   _ScaleY                    c26      1
					//   _PerspectiveFilter         c27      1
					//   _MainTex_ST                c28      1
					//   _FaceTex_ST                c29      1
					//
					
					    vs_3_0
					    def c30, 0, 1, 1.5, 0.5
					    def c31, 0.000244140625, 4096, 0.001953125, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_color v5
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_color o6
					    dcl_texcoord5 o7.xy
					    dcl_texcoord6 o8.xyz
					    dcl_texcoord7 o9.x
					    mov r0.xy, c30
					    mad r1, c15.xyzx, r0.yyyx, r0.xxxy
					    dp4 r2.x, c7, r1
					    dp4 r2.y, c8, r1
					    dp4 r2.z, c9, r1
					    add r1.x, c22.x, v0.x
					    add r1.y, c23.x, v0.y
					    mov r1.zw, v0
					    add r0.xzw, -r1.xyyz, r2.xyyz
					    dp3 r0.x, v2, r0.xzww
					    slt r0.z, -r0.x, r0.x
					    slt r0.x, r0.x, -r0.x
					    add r0.x, -r0.x, r0.z
					    mul r0.xzw, r0.x, v2.xyyz
					    mul r2.xyz, r0.z, c8.zxyw
					    mad r2.xyz, r0.x, c7.zxyw, r2
					    mad r0.xzw, r0.w, c9.zyxy, r2.xyyz
					    dp3 r2.x, r0.xzww, r0.xzww
					    rsq r2.x, r2.x
					    mul r0.xzw, r0, r2.x
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    add r3.xyz, -r2, c15
					    mov o5.xyz, r2
					    nrm r2.xyz, r3
					    dp3 r2.x, r0.zwxw, r2
					    dp4 r1.w, c3, r1
					    mad r4, r1.xyzx, c30.yyyx, c30.xxxy
					    mov r1.xy, c16
					    mul r2.yz, r1.xxyw, c13.xxyw
					    add r1.z, r2.z, r2.y
					    mul r1.z, r1.z, c25.x
					    rcp r5.x, r1.z
					    mul r1.xy, r1, c14
					    add r1.x, r1.y, r1.x
					    mul r1.x, r1.x, c26.x
					    rcp r5.y, r1.x
					    mul r1.xy, r1.w, r5
					    mul r1.xy, r1, r1
					    add r1.x, r1.y, r1.x
					    rsq r1.x, r1.x
					    mul r1.y, c24.x, v4_abs.y
					    mul r1.x, r1.x, r1.y
					    mul r1.y, r1.x, c30.z
					    add r0.y, r0.y, -c27.x
					    mul r0.y, r0.y, r1.y
					    mad r1.x, r1.x, c30.z, -r0.y
					    mad o7.y, r2_abs.x, r1.x, r0.y
					    sge r0.y, c30.x, v4.y
					    mov r1.x, c19.x
					    add r1.x, -r1.x, c20.x
					    mad r0.y, r0.y, r1.x, c19.x
					    mov r1.x, c18.x
					    mul r1.x, r1.x, c21.x
					    mul r1.x, r1.x, c30.w
					    rcp r1.y, c24.x
					    mad o7.x, r0.y, r1.y, r1.x
					    dp3 o8.x, c10, r3
					    dp3 o8.y, c11, r3
					    dp3 o8.z, c12, r3
					    dp4 r6.x, c0, r4
					    dp4 r6.y, c1, r4
					    dp4 r6.w, c3, r4
					    dp4 r0.y, c2, r4
					    mad o1.xy, v3, c28, c28.zwzw
					    mul r1.x, c31.x, v4.x
					    frc r1.y, r1.x
					    add r1.z, -r1.y, r1.x
					    mad r1.w, r1.z, -c31.y, v4.x
					    mul r1.xy, r1.zwzw, c29
					    mov r1.z, c31.z
					    mad o1.zw, r1.xyxy, r1.z, c29
					    mov r6.z, r0.y
					    mov o9.x, r0.y
					    dp3 r1.z, c4, v1
					    dp3 r1.x, c5, v1
					    dp3 r1.y, c6, v1
					    dp3 r0.y, r1, r1
					    rsq r0.y, r0.y
					    mul r1.xyz, r0.y, r1
					    mov o2.x, r1.z
					    mul r2.xyz, r0.xzww, r1
					    mad r2.xyz, r0.wxzw, r1.yzxw, -r2
					    mul r0.y, c17.w, v1.w
					    mul r2.xyz, r0.y, r2
					    mov o2.y, r2.x
					    mov o2.z, r0.z
					    mov o3.x, r1.x
					    mov o4.x, r1.y
					    mov o3.y, r2.y
					    mov o4.y, r2.z
					    mov o3.z, r0.w
					    mov o4.z, r0.x
					    mov o6, v5
					    mad o0.xy, r6.w, c255, r6
					    mov o0.zw, r6
					
					// approximately 99 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						float _FaceDilate;
						vec4 unused_0_2[6];
						mat4x4 _EnvMatrix;
						vec4 unused_0_4[7];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_10[4];
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_15;
						vec4 _MainTex_ST;
						vec4 _FaceTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[13];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD6;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat4;
					float u_xlat8;
					int u_xlati8;
					vec2 u_xlat9;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z;
					    u_xlat12 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat9.x = floor(u_xlat12);
					    u_xlat9.y = (-u_xlat9.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat1.xy = u_xlat9.xy * _FaceTex_ST.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat8 = dot(in_NORMAL0.xyz, u_xlat1.xyz);
					    u_xlati12 = int((0.0<u_xlat8) ? 0xFFFFFFFFu : uint(0));
					    u_xlati8 = int((u_xlat8<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati8 = (-u_xlati12) + u_xlati8;
					    u_xlat8 = float(u_xlati8);
					    u_xlat1.xyz = vec3(u_xlat8) * in_NORMAL0.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, unity_WorldToObject[2].xyz);
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat2.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat8 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat4.x = u_xlat0.y * glstate_matrix_mvp[1].w;
					    u_xlat0.x = glstate_matrix_mvp[0].w * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = glstate_matrix_mvp[2].w * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_mvp[3].w * in_POSITION0.w + u_xlat0.x;
					    u_xlat4.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat4.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat4.xy;
					    u_xlat4.xy = u_xlat4.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat0.xy = u_xlat0.xx / u_xlat4.xy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat4.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat4.x = u_xlat0.x * 1.5;
					    u_xlat8 = (-_PerspectiveFilter) + 1.0;
					    u_xlat4.x = u_xlat8 * u_xlat4.x;
					    u_xlat0.x = u_xlat0.x * 1.5 + (-u_xlat4.x);
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat1.yzx, u_xlat3.xyz);
					    vs_TEXCOORD5.y = abs(u_xlat8) * u_xlat0.x + u_xlat4.x;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat4.x = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x + _WeightNormal;
					    u_xlat0.x = u_xlat0.x / _GradientScale;
					    u_xlat4.x = _FaceDilate * _ScaleRatioA;
					    vs_TEXCOORD5.x = u_xlat4.x * 0.5 + u_xlat0.x;
					    u_xlat0.xyz = u_xlat2.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyz = _EnvMatrix[0].xyz * u_xlat2.xxx + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = _EnvMatrix[2].xyz * u_xlat2.zzz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _EnvMatrix;
					//   float _FaceDilate;
					//   float4 _FaceTex_ST;
					//   float _GradientScale;
					//   float4 _MainTex_ST;
					//   float _PerspectiveFilter;
					//   float _ScaleRatioA;
					//   float _ScaleX;
					//   float _ScaleY;
					//   float4 _ScreenParams;
					//   float _VertexOffsetX;
					//   float _VertexOffsetY;
					//   float _WeightBold;
					//   float _WeightNormal;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 glstate_matrix_projection;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   _EnvMatrix                 c10      3
					//   glstate_matrix_projection  c13      2
					//   _WorldSpaceCameraPos       c15      1
					//   _ScreenParams              c16      1
					//   unity_WorldTransformParams c17      1
					//   _FaceDilate                c18      1
					//   _WeightNormal              c19      1
					//   _WeightBold                c20      1
					//   _ScaleRatioA               c21      1
					//   _VertexOffsetX             c22      1
					//   _VertexOffsetY             c23      1
					//   _GradientScale             c24      1
					//   _ScaleX                    c25      1
					//   _ScaleY                    c26      1
					//   _PerspectiveFilter         c27      1
					//   _MainTex_ST                c28      1
					//   _FaceTex_ST                c29      1
					//
					
					    vs_3_0
					    def c30, 0, 1, 1.5, 0.5
					    def c31, 0.000244140625, 4096, 0.001953125, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_color v5
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_color o6
					    dcl_texcoord5 o7.xy
					    dcl_texcoord6 o8.xyz
					    dcl_texcoord7 o9.x
					    mov r0.xy, c30
					    mad r1, c15.xyzx, r0.yyyx, r0.xxxy
					    dp4 r2.x, c7, r1
					    dp4 r2.y, c8, r1
					    dp4 r2.z, c9, r1
					    add r1.x, c22.x, v0.x
					    add r1.y, c23.x, v0.y
					    mov r1.zw, v0
					    add r0.xzw, -r1.xyyz, r2.xyyz
					    dp3 r0.x, v2, r0.xzww
					    slt r0.z, -r0.x, r0.x
					    slt r0.x, r0.x, -r0.x
					    add r0.x, -r0.x, r0.z
					    mul r0.xzw, r0.x, v2.xyyz
					    mul r2.xyz, r0.z, c8.zxyw
					    mad r2.xyz, r0.x, c7.zxyw, r2
					    mad r0.xzw, r0.w, c9.zyxy, r2.xyyz
					    dp3 r2.x, r0.xzww, r0.xzww
					    rsq r2.x, r2.x
					    mul r0.xzw, r0, r2.x
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    add r3.xyz, -r2, c15
					    mov o5.xyz, r2
					    nrm r2.xyz, r3
					    dp3 r2.x, r0.zwxw, r2
					    dp4 r1.w, c3, r1
					    mad r4, r1.xyzx, c30.yyyx, c30.xxxy
					    mov r1.xy, c16
					    mul r2.yz, r1.xxyw, c13.xxyw
					    add r1.z, r2.z, r2.y
					    mul r1.z, r1.z, c25.x
					    rcp r5.x, r1.z
					    mul r1.xy, r1, c14
					    add r1.x, r1.y, r1.x
					    mul r1.x, r1.x, c26.x
					    rcp r5.y, r1.x
					    mul r1.xy, r1.w, r5
					    mul r1.xy, r1, r1
					    add r1.x, r1.y, r1.x
					    rsq r1.x, r1.x
					    mul r1.y, c24.x, v4_abs.y
					    mul r1.x, r1.x, r1.y
					    mul r1.y, r1.x, c30.z
					    add r0.y, r0.y, -c27.x
					    mul r0.y, r0.y, r1.y
					    mad r1.x, r1.x, c30.z, -r0.y
					    mad o7.y, r2_abs.x, r1.x, r0.y
					    sge r0.y, c30.x, v4.y
					    mov r1.x, c19.x
					    add r1.x, -r1.x, c20.x
					    mad r0.y, r0.y, r1.x, c19.x
					    mov r1.x, c18.x
					    mul r1.x, r1.x, c21.x
					    mul r1.x, r1.x, c30.w
					    rcp r1.y, c24.x
					    mad o7.x, r0.y, r1.y, r1.x
					    dp3 o8.x, c10, r3
					    dp3 o8.y, c11, r3
					    dp3 o8.z, c12, r3
					    dp4 r6.x, c0, r4
					    dp4 r6.y, c1, r4
					    dp4 r6.w, c3, r4
					    dp4 r0.y, c2, r4
					    mad o1.xy, v3, c28, c28.zwzw
					    mul r1.x, c31.x, v4.x
					    frc r1.y, r1.x
					    add r1.z, -r1.y, r1.x
					    mad r1.w, r1.z, -c31.y, v4.x
					    mul r1.xy, r1.zwzw, c29
					    mov r1.z, c31.z
					    mad o1.zw, r1.xyxy, r1.z, c29
					    mov r6.z, r0.y
					    mov o9.x, r0.y
					    dp3 r1.z, c4, v1
					    dp3 r1.x, c5, v1
					    dp3 r1.y, c6, v1
					    dp3 r0.y, r1, r1
					    rsq r0.y, r0.y
					    mul r1.xyz, r0.y, r1
					    mov o2.x, r1.z
					    mul r2.xyz, r0.xzww, r1
					    mad r2.xyz, r0.wxzw, r1.yzxw, -r2
					    mul r0.y, c17.w, v1.w
					    mul r2.xyz, r0.y, r2
					    mov o2.y, r2.x
					    mov o2.z, r0.z
					    mov o3.x, r1.x
					    mov o4.x, r1.y
					    mov o3.y, r2.y
					    mov o4.y, r2.z
					    mov o3.z, r0.w
					    mov o4.z, r0.x
					    mov o6, v5
					    mad o0.xy, r6.w, c255, r6
					    mov o0.zw, r6
					
					// approximately 99 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						float _FaceDilate;
						vec4 unused_0_2[6];
						mat4x4 _EnvMatrix;
						vec4 unused_0_4[7];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_10[4];
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_15;
						vec4 _MainTex_ST;
						vec4 _FaceTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[13];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD6;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat4;
					float u_xlat8;
					int u_xlati8;
					vec2 u_xlat9;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z;
					    u_xlat12 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat9.x = floor(u_xlat12);
					    u_xlat9.y = (-u_xlat9.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat1.xy = u_xlat9.xy * _FaceTex_ST.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat8 = dot(in_NORMAL0.xyz, u_xlat1.xyz);
					    u_xlati12 = int((0.0<u_xlat8) ? 0xFFFFFFFFu : uint(0));
					    u_xlati8 = int((u_xlat8<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati8 = (-u_xlati12) + u_xlati8;
					    u_xlat8 = float(u_xlati8);
					    u_xlat1.xyz = vec3(u_xlat8) * in_NORMAL0.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, unity_WorldToObject[2].xyz);
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat2.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat8 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat4.x = u_xlat0.y * glstate_matrix_mvp[1].w;
					    u_xlat0.x = glstate_matrix_mvp[0].w * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = glstate_matrix_mvp[2].w * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_mvp[3].w * in_POSITION0.w + u_xlat0.x;
					    u_xlat4.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat4.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat4.xy;
					    u_xlat4.xy = u_xlat4.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat0.xy = u_xlat0.xx / u_xlat4.xy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat4.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat4.x = u_xlat0.x * 1.5;
					    u_xlat8 = (-_PerspectiveFilter) + 1.0;
					    u_xlat4.x = u_xlat8 * u_xlat4.x;
					    u_xlat0.x = u_xlat0.x * 1.5 + (-u_xlat4.x);
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat1.yzx, u_xlat3.xyz);
					    vs_TEXCOORD5.y = abs(u_xlat8) * u_xlat0.x + u_xlat4.x;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat4.x = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x + _WeightNormal;
					    u_xlat0.x = u_xlat0.x / _GradientScale;
					    u_xlat4.x = _FaceDilate * _ScaleRatioA;
					    vs_TEXCOORD5.x = u_xlat4.x * 0.5 + u_xlat0.x;
					    u_xlat0.xyz = u_xlat2.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyz = _EnvMatrix[0].xyz * u_xlat2.xxx + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = _EnvMatrix[2].xyz * u_xlat2.zzz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "SPOT" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _EnvMatrix;
					//   float _FaceDilate;
					//   float4 _FaceTex_ST;
					//   float _GradientScale;
					//   float4 _MainTex_ST;
					//   float _PerspectiveFilter;
					//   float _ScaleRatioA;
					//   float _ScaleX;
					//   float _ScaleY;
					//   float4 _ScreenParams;
					//   float _VertexOffsetX;
					//   float _VertexOffsetY;
					//   float _WeightBold;
					//   float _WeightNormal;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 glstate_matrix_projection;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   _EnvMatrix                 c10      3
					//   glstate_matrix_projection  c13      2
					//   _WorldSpaceCameraPos       c15      1
					//   _ScreenParams              c16      1
					//   unity_WorldTransformParams c17      1
					//   _FaceDilate                c18      1
					//   _WeightNormal              c19      1
					//   _WeightBold                c20      1
					//   _ScaleRatioA               c21      1
					//   _VertexOffsetX             c22      1
					//   _VertexOffsetY             c23      1
					//   _GradientScale             c24      1
					//   _ScaleX                    c25      1
					//   _ScaleY                    c26      1
					//   _PerspectiveFilter         c27      1
					//   _MainTex_ST                c28      1
					//   _FaceTex_ST                c29      1
					//
					
					    vs_3_0
					    def c30, 0, 1, 1.5, 0.5
					    def c31, 0.000244140625, 4096, 0.001953125, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_color v5
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_color o6
					    dcl_texcoord5 o7.xy
					    dcl_texcoord6 o8.xyz
					    dcl_texcoord7 o9.x
					    mov r0.xy, c30
					    mad r1, c15.xyzx, r0.yyyx, r0.xxxy
					    dp4 r2.x, c7, r1
					    dp4 r2.y, c8, r1
					    dp4 r2.z, c9, r1
					    add r1.x, c22.x, v0.x
					    add r1.y, c23.x, v0.y
					    mov r1.zw, v0
					    add r0.xzw, -r1.xyyz, r2.xyyz
					    dp3 r0.x, v2, r0.xzww
					    slt r0.z, -r0.x, r0.x
					    slt r0.x, r0.x, -r0.x
					    add r0.x, -r0.x, r0.z
					    mul r0.xzw, r0.x, v2.xyyz
					    mul r2.xyz, r0.z, c8.zxyw
					    mad r2.xyz, r0.x, c7.zxyw, r2
					    mad r0.xzw, r0.w, c9.zyxy, r2.xyyz
					    dp3 r2.x, r0.xzww, r0.xzww
					    rsq r2.x, r2.x
					    mul r0.xzw, r0, r2.x
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    add r3.xyz, -r2, c15
					    mov o5.xyz, r2
					    nrm r2.xyz, r3
					    dp3 r2.x, r0.zwxw, r2
					    dp4 r1.w, c3, r1
					    mad r4, r1.xyzx, c30.yyyx, c30.xxxy
					    mov r1.xy, c16
					    mul r2.yz, r1.xxyw, c13.xxyw
					    add r1.z, r2.z, r2.y
					    mul r1.z, r1.z, c25.x
					    rcp r5.x, r1.z
					    mul r1.xy, r1, c14
					    add r1.x, r1.y, r1.x
					    mul r1.x, r1.x, c26.x
					    rcp r5.y, r1.x
					    mul r1.xy, r1.w, r5
					    mul r1.xy, r1, r1
					    add r1.x, r1.y, r1.x
					    rsq r1.x, r1.x
					    mul r1.y, c24.x, v4_abs.y
					    mul r1.x, r1.x, r1.y
					    mul r1.y, r1.x, c30.z
					    add r0.y, r0.y, -c27.x
					    mul r0.y, r0.y, r1.y
					    mad r1.x, r1.x, c30.z, -r0.y
					    mad o7.y, r2_abs.x, r1.x, r0.y
					    sge r0.y, c30.x, v4.y
					    mov r1.x, c19.x
					    add r1.x, -r1.x, c20.x
					    mad r0.y, r0.y, r1.x, c19.x
					    mov r1.x, c18.x
					    mul r1.x, r1.x, c21.x
					    mul r1.x, r1.x, c30.w
					    rcp r1.y, c24.x
					    mad o7.x, r0.y, r1.y, r1.x
					    dp3 o8.x, c10, r3
					    dp3 o8.y, c11, r3
					    dp3 o8.z, c12, r3
					    dp4 r6.x, c0, r4
					    dp4 r6.y, c1, r4
					    dp4 r6.w, c3, r4
					    dp4 r0.y, c2, r4
					    mad o1.xy, v3, c28, c28.zwzw
					    mul r1.x, c31.x, v4.x
					    frc r1.y, r1.x
					    add r1.z, -r1.y, r1.x
					    mad r1.w, r1.z, -c31.y, v4.x
					    mul r1.xy, r1.zwzw, c29
					    mov r1.z, c31.z
					    mad o1.zw, r1.xyxy, r1.z, c29
					    mov r6.z, r0.y
					    mov o9.x, r0.y
					    dp3 r1.z, c4, v1
					    dp3 r1.x, c5, v1
					    dp3 r1.y, c6, v1
					    dp3 r0.y, r1, r1
					    rsq r0.y, r0.y
					    mul r1.xyz, r0.y, r1
					    mov o2.x, r1.z
					    mul r2.xyz, r0.xzww, r1
					    mad r2.xyz, r0.wxzw, r1.yzxw, -r2
					    mul r0.y, c17.w, v1.w
					    mul r2.xyz, r0.y, r2
					    mov o2.y, r2.x
					    mov o2.z, r0.z
					    mov o3.x, r1.x
					    mov o4.x, r1.y
					    mov o3.y, r2.y
					    mov o4.y, r2.z
					    mov o3.z, r0.w
					    mov o4.z, r0.x
					    mov o6, v5
					    mad o0.xy, r6.w, c255, r6
					    mov o0.zw, r6
					
					// approximately 99 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						float _FaceDilate;
						vec4 unused_0_2[6];
						mat4x4 _EnvMatrix;
						vec4 unused_0_4[7];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_10[4];
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_15;
						vec4 _MainTex_ST;
						vec4 _FaceTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[13];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD6;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat4;
					float u_xlat8;
					int u_xlati8;
					vec2 u_xlat9;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z;
					    u_xlat12 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat9.x = floor(u_xlat12);
					    u_xlat9.y = (-u_xlat9.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat1.xy = u_xlat9.xy * _FaceTex_ST.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat8 = dot(in_NORMAL0.xyz, u_xlat1.xyz);
					    u_xlati12 = int((0.0<u_xlat8) ? 0xFFFFFFFFu : uint(0));
					    u_xlati8 = int((u_xlat8<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati8 = (-u_xlati12) + u_xlati8;
					    u_xlat8 = float(u_xlati8);
					    u_xlat1.xyz = vec3(u_xlat8) * in_NORMAL0.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, unity_WorldToObject[2].xyz);
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat2.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat8 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat4.x = u_xlat0.y * glstate_matrix_mvp[1].w;
					    u_xlat0.x = glstate_matrix_mvp[0].w * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = glstate_matrix_mvp[2].w * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_mvp[3].w * in_POSITION0.w + u_xlat0.x;
					    u_xlat4.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat4.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat4.xy;
					    u_xlat4.xy = u_xlat4.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat0.xy = u_xlat0.xx / u_xlat4.xy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat4.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat4.x = u_xlat0.x * 1.5;
					    u_xlat8 = (-_PerspectiveFilter) + 1.0;
					    u_xlat4.x = u_xlat8 * u_xlat4.x;
					    u_xlat0.x = u_xlat0.x * 1.5 + (-u_xlat4.x);
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat1.yzx, u_xlat3.xyz);
					    vs_TEXCOORD5.y = abs(u_xlat8) * u_xlat0.x + u_xlat4.x;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat4.x = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x + _WeightNormal;
					    u_xlat0.x = u_xlat0.x / _GradientScale;
					    u_xlat4.x = _FaceDilate * _ScaleRatioA;
					    vs_TEXCOORD5.x = u_xlat4.x * 0.5 + u_xlat0.x;
					    u_xlat0.xyz = u_xlat2.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyz = _EnvMatrix[0].xyz * u_xlat2.xxx + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = _EnvMatrix[2].xyz * u_xlat2.zzz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT_COOKIE" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _EnvMatrix;
					//   float _FaceDilate;
					//   float4 _FaceTex_ST;
					//   float _GradientScale;
					//   float4 _MainTex_ST;
					//   float _PerspectiveFilter;
					//   float _ScaleRatioA;
					//   float _ScaleX;
					//   float _ScaleY;
					//   float4 _ScreenParams;
					//   float _VertexOffsetX;
					//   float _VertexOffsetY;
					//   float _WeightBold;
					//   float _WeightNormal;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 glstate_matrix_projection;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   _EnvMatrix                 c10      3
					//   glstate_matrix_projection  c13      2
					//   _WorldSpaceCameraPos       c15      1
					//   _ScreenParams              c16      1
					//   unity_WorldTransformParams c17      1
					//   _FaceDilate                c18      1
					//   _WeightNormal              c19      1
					//   _WeightBold                c20      1
					//   _ScaleRatioA               c21      1
					//   _VertexOffsetX             c22      1
					//   _VertexOffsetY             c23      1
					//   _GradientScale             c24      1
					//   _ScaleX                    c25      1
					//   _ScaleY                    c26      1
					//   _PerspectiveFilter         c27      1
					//   _MainTex_ST                c28      1
					//   _FaceTex_ST                c29      1
					//
					
					    vs_3_0
					    def c30, 0, 1, 1.5, 0.5
					    def c31, 0.000244140625, 4096, 0.001953125, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_color v5
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_color o6
					    dcl_texcoord5 o7.xy
					    dcl_texcoord6 o8.xyz
					    dcl_texcoord7 o9.x
					    mov r0.xy, c30
					    mad r1, c15.xyzx, r0.yyyx, r0.xxxy
					    dp4 r2.x, c7, r1
					    dp4 r2.y, c8, r1
					    dp4 r2.z, c9, r1
					    add r1.x, c22.x, v0.x
					    add r1.y, c23.x, v0.y
					    mov r1.zw, v0
					    add r0.xzw, -r1.xyyz, r2.xyyz
					    dp3 r0.x, v2, r0.xzww
					    slt r0.z, -r0.x, r0.x
					    slt r0.x, r0.x, -r0.x
					    add r0.x, -r0.x, r0.z
					    mul r0.xzw, r0.x, v2.xyyz
					    mul r2.xyz, r0.z, c8.zxyw
					    mad r2.xyz, r0.x, c7.zxyw, r2
					    mad r0.xzw, r0.w, c9.zyxy, r2.xyyz
					    dp3 r2.x, r0.xzww, r0.xzww
					    rsq r2.x, r2.x
					    mul r0.xzw, r0, r2.x
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    add r3.xyz, -r2, c15
					    mov o5.xyz, r2
					    nrm r2.xyz, r3
					    dp3 r2.x, r0.zwxw, r2
					    dp4 r1.w, c3, r1
					    mad r4, r1.xyzx, c30.yyyx, c30.xxxy
					    mov r1.xy, c16
					    mul r2.yz, r1.xxyw, c13.xxyw
					    add r1.z, r2.z, r2.y
					    mul r1.z, r1.z, c25.x
					    rcp r5.x, r1.z
					    mul r1.xy, r1, c14
					    add r1.x, r1.y, r1.x
					    mul r1.x, r1.x, c26.x
					    rcp r5.y, r1.x
					    mul r1.xy, r1.w, r5
					    mul r1.xy, r1, r1
					    add r1.x, r1.y, r1.x
					    rsq r1.x, r1.x
					    mul r1.y, c24.x, v4_abs.y
					    mul r1.x, r1.x, r1.y
					    mul r1.y, r1.x, c30.z
					    add r0.y, r0.y, -c27.x
					    mul r0.y, r0.y, r1.y
					    mad r1.x, r1.x, c30.z, -r0.y
					    mad o7.y, r2_abs.x, r1.x, r0.y
					    sge r0.y, c30.x, v4.y
					    mov r1.x, c19.x
					    add r1.x, -r1.x, c20.x
					    mad r0.y, r0.y, r1.x, c19.x
					    mov r1.x, c18.x
					    mul r1.x, r1.x, c21.x
					    mul r1.x, r1.x, c30.w
					    rcp r1.y, c24.x
					    mad o7.x, r0.y, r1.y, r1.x
					    dp3 o8.x, c10, r3
					    dp3 o8.y, c11, r3
					    dp3 o8.z, c12, r3
					    dp4 r6.x, c0, r4
					    dp4 r6.y, c1, r4
					    dp4 r6.w, c3, r4
					    dp4 r0.y, c2, r4
					    mad o1.xy, v3, c28, c28.zwzw
					    mul r1.x, c31.x, v4.x
					    frc r1.y, r1.x
					    add r1.z, -r1.y, r1.x
					    mad r1.w, r1.z, -c31.y, v4.x
					    mul r1.xy, r1.zwzw, c29
					    mov r1.z, c31.z
					    mad o1.zw, r1.xyxy, r1.z, c29
					    mov r6.z, r0.y
					    mov o9.x, r0.y
					    dp3 r1.z, c4, v1
					    dp3 r1.x, c5, v1
					    dp3 r1.y, c6, v1
					    dp3 r0.y, r1, r1
					    rsq r0.y, r0.y
					    mul r1.xyz, r0.y, r1
					    mov o2.x, r1.z
					    mul r2.xyz, r0.xzww, r1
					    mad r2.xyz, r0.wxzw, r1.yzxw, -r2
					    mul r0.y, c17.w, v1.w
					    mul r2.xyz, r0.y, r2
					    mov o2.y, r2.x
					    mov o2.z, r0.z
					    mov o3.x, r1.x
					    mov o4.x, r1.y
					    mov o3.y, r2.y
					    mov o4.y, r2.z
					    mov o3.z, r0.w
					    mov o4.z, r0.x
					    mov o6, v5
					    mad o0.xy, r6.w, c255, r6
					    mov o0.zw, r6
					
					// approximately 99 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						float _FaceDilate;
						vec4 unused_0_2[6];
						mat4x4 _EnvMatrix;
						vec4 unused_0_4[7];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_10[4];
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_15;
						vec4 _MainTex_ST;
						vec4 _FaceTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[13];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD6;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat4;
					float u_xlat8;
					int u_xlati8;
					vec2 u_xlat9;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z;
					    u_xlat12 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat9.x = floor(u_xlat12);
					    u_xlat9.y = (-u_xlat9.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat1.xy = u_xlat9.xy * _FaceTex_ST.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat8 = dot(in_NORMAL0.xyz, u_xlat1.xyz);
					    u_xlati12 = int((0.0<u_xlat8) ? 0xFFFFFFFFu : uint(0));
					    u_xlati8 = int((u_xlat8<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati8 = (-u_xlati12) + u_xlati8;
					    u_xlat8 = float(u_xlati8);
					    u_xlat1.xyz = vec3(u_xlat8) * in_NORMAL0.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, unity_WorldToObject[2].xyz);
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat2.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat8 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat4.x = u_xlat0.y * glstate_matrix_mvp[1].w;
					    u_xlat0.x = glstate_matrix_mvp[0].w * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = glstate_matrix_mvp[2].w * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_mvp[3].w * in_POSITION0.w + u_xlat0.x;
					    u_xlat4.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat4.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat4.xy;
					    u_xlat4.xy = u_xlat4.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat0.xy = u_xlat0.xx / u_xlat4.xy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat4.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat4.x = u_xlat0.x * 1.5;
					    u_xlat8 = (-_PerspectiveFilter) + 1.0;
					    u_xlat4.x = u_xlat8 * u_xlat4.x;
					    u_xlat0.x = u_xlat0.x * 1.5 + (-u_xlat4.x);
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat1.yzx, u_xlat3.xyz);
					    vs_TEXCOORD5.y = abs(u_xlat8) * u_xlat0.x + u_xlat4.x;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat4.x = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x + _WeightNormal;
					    u_xlat0.x = u_xlat0.x / _GradientScale;
					    u_xlat4.x = _FaceDilate * _ScaleRatioA;
					    vs_TEXCOORD5.x = u_xlat4.x * 0.5 + u_xlat0.x;
					    u_xlat0.xyz = u_xlat2.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyz = _EnvMatrix[0].xyz * u_xlat2.xxx + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = _EnvMatrix[2].xyz * u_xlat2.zzz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _EnvMatrix;
					//   float _FaceDilate;
					//   float4 _FaceTex_ST;
					//   float _GradientScale;
					//   float4 _MainTex_ST;
					//   float _PerspectiveFilter;
					//   float _ScaleRatioA;
					//   float _ScaleX;
					//   float _ScaleY;
					//   float4 _ScreenParams;
					//   float _VertexOffsetX;
					//   float _VertexOffsetY;
					//   float _WeightBold;
					//   float _WeightNormal;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 glstate_matrix_projection;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   _EnvMatrix                 c10      3
					//   glstate_matrix_projection  c13      2
					//   _WorldSpaceCameraPos       c15      1
					//   _ScreenParams              c16      1
					//   unity_WorldTransformParams c17      1
					//   _FaceDilate                c18      1
					//   _WeightNormal              c19      1
					//   _WeightBold                c20      1
					//   _ScaleRatioA               c21      1
					//   _VertexOffsetX             c22      1
					//   _VertexOffsetY             c23      1
					//   _GradientScale             c24      1
					//   _ScaleX                    c25      1
					//   _ScaleY                    c26      1
					//   _PerspectiveFilter         c27      1
					//   _MainTex_ST                c28      1
					//   _FaceTex_ST                c29      1
					//
					
					    vs_3_0
					    def c30, 0, 1, 1.5, 0.5
					    def c31, 0.000244140625, 4096, 0.001953125, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_color v5
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_color o6
					    dcl_texcoord5 o7.xy
					    dcl_texcoord6 o8.xyz
					    dcl_texcoord7 o9.x
					    mov r0.xy, c30
					    mad r1, c15.xyzx, r0.yyyx, r0.xxxy
					    dp4 r2.x, c7, r1
					    dp4 r2.y, c8, r1
					    dp4 r2.z, c9, r1
					    add r1.x, c22.x, v0.x
					    add r1.y, c23.x, v0.y
					    mov r1.zw, v0
					    add r0.xzw, -r1.xyyz, r2.xyyz
					    dp3 r0.x, v2, r0.xzww
					    slt r0.z, -r0.x, r0.x
					    slt r0.x, r0.x, -r0.x
					    add r0.x, -r0.x, r0.z
					    mul r0.xzw, r0.x, v2.xyyz
					    mul r2.xyz, r0.z, c8.zxyw
					    mad r2.xyz, r0.x, c7.zxyw, r2
					    mad r0.xzw, r0.w, c9.zyxy, r2.xyyz
					    dp3 r2.x, r0.xzww, r0.xzww
					    rsq r2.x, r2.x
					    mul r0.xzw, r0, r2.x
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    add r3.xyz, -r2, c15
					    mov o5.xyz, r2
					    nrm r2.xyz, r3
					    dp3 r2.x, r0.zwxw, r2
					    dp4 r1.w, c3, r1
					    mad r4, r1.xyzx, c30.yyyx, c30.xxxy
					    mov r1.xy, c16
					    mul r2.yz, r1.xxyw, c13.xxyw
					    add r1.z, r2.z, r2.y
					    mul r1.z, r1.z, c25.x
					    rcp r5.x, r1.z
					    mul r1.xy, r1, c14
					    add r1.x, r1.y, r1.x
					    mul r1.x, r1.x, c26.x
					    rcp r5.y, r1.x
					    mul r1.xy, r1.w, r5
					    mul r1.xy, r1, r1
					    add r1.x, r1.y, r1.x
					    rsq r1.x, r1.x
					    mul r1.y, c24.x, v4_abs.y
					    mul r1.x, r1.x, r1.y
					    mul r1.y, r1.x, c30.z
					    add r0.y, r0.y, -c27.x
					    mul r0.y, r0.y, r1.y
					    mad r1.x, r1.x, c30.z, -r0.y
					    mad o7.y, r2_abs.x, r1.x, r0.y
					    sge r0.y, c30.x, v4.y
					    mov r1.x, c19.x
					    add r1.x, -r1.x, c20.x
					    mad r0.y, r0.y, r1.x, c19.x
					    mov r1.x, c18.x
					    mul r1.x, r1.x, c21.x
					    mul r1.x, r1.x, c30.w
					    rcp r1.y, c24.x
					    mad o7.x, r0.y, r1.y, r1.x
					    dp3 o8.x, c10, r3
					    dp3 o8.y, c11, r3
					    dp3 o8.z, c12, r3
					    dp4 r6.x, c0, r4
					    dp4 r6.y, c1, r4
					    dp4 r6.w, c3, r4
					    dp4 r0.y, c2, r4
					    mad o1.xy, v3, c28, c28.zwzw
					    mul r1.x, c31.x, v4.x
					    frc r1.y, r1.x
					    add r1.z, -r1.y, r1.x
					    mad r1.w, r1.z, -c31.y, v4.x
					    mul r1.xy, r1.zwzw, c29
					    mov r1.z, c31.z
					    mad o1.zw, r1.xyxy, r1.z, c29
					    mov r6.z, r0.y
					    mov o9.x, r0.y
					    dp3 r1.z, c4, v1
					    dp3 r1.x, c5, v1
					    dp3 r1.y, c6, v1
					    dp3 r0.y, r1, r1
					    rsq r0.y, r0.y
					    mul r1.xyz, r0.y, r1
					    mov o2.x, r1.z
					    mul r2.xyz, r0.xzww, r1
					    mad r2.xyz, r0.wxzw, r1.yzxw, -r2
					    mul r0.y, c17.w, v1.w
					    mul r2.xyz, r0.y, r2
					    mov o2.y, r2.x
					    mov o2.z, r0.z
					    mov o3.x, r1.x
					    mov o4.x, r1.y
					    mov o3.y, r2.y
					    mov o4.y, r2.z
					    mov o3.z, r0.w
					    mov o4.z, r0.x
					    mov o6, v5
					    mad o0.xy, r6.w, c255, r6
					    mov o0.zw, r6
					
					// approximately 99 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						float _FaceDilate;
						vec4 unused_0_2[6];
						mat4x4 _EnvMatrix;
						vec4 unused_0_4[7];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_10[4];
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_15;
						vec4 _MainTex_ST;
						vec4 _FaceTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[13];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD6;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat4;
					float u_xlat8;
					int u_xlati8;
					vec2 u_xlat9;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z;
					    u_xlat12 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat9.x = floor(u_xlat12);
					    u_xlat9.y = (-u_xlat9.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat1.xy = u_xlat9.xy * _FaceTex_ST.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat8 = dot(in_NORMAL0.xyz, u_xlat1.xyz);
					    u_xlati12 = int((0.0<u_xlat8) ? 0xFFFFFFFFu : uint(0));
					    u_xlati8 = int((u_xlat8<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati8 = (-u_xlati12) + u_xlati8;
					    u_xlat8 = float(u_xlati8);
					    u_xlat1.xyz = vec3(u_xlat8) * in_NORMAL0.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, unity_WorldToObject[2].xyz);
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat2.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat8 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat4.x = u_xlat0.y * glstate_matrix_mvp[1].w;
					    u_xlat0.x = glstate_matrix_mvp[0].w * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = glstate_matrix_mvp[2].w * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_mvp[3].w * in_POSITION0.w + u_xlat0.x;
					    u_xlat4.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat4.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat4.xy;
					    u_xlat4.xy = u_xlat4.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat0.xy = u_xlat0.xx / u_xlat4.xy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat4.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat4.x = u_xlat0.x * 1.5;
					    u_xlat8 = (-_PerspectiveFilter) + 1.0;
					    u_xlat4.x = u_xlat8 * u_xlat4.x;
					    u_xlat0.x = u_xlat0.x * 1.5 + (-u_xlat4.x);
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat1.yzx, u_xlat3.xyz);
					    vs_TEXCOORD5.y = abs(u_xlat8) * u_xlat0.x + u_xlat4.x;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat4.x = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x + _WeightNormal;
					    u_xlat0.x = u_xlat0.x / _GradientScale;
					    u_xlat4.x = _FaceDilate * _ScaleRatioA;
					    vs_TEXCOORD5.x = u_xlat4.x * 0.5 + u_xlat0.x;
					    u_xlat0.xyz = u_xlat2.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyz = _EnvMatrix[0].xyz * u_xlat2.xxx + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = _EnvMatrix[2].xyz * u_xlat2.zzz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT" "GLOW_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _EnvMatrix;
					//   float _FaceDilate;
					//   float4 _FaceTex_ST;
					//   float _GradientScale;
					//   float4 _MainTex_ST;
					//   float _PerspectiveFilter;
					//   float _ScaleRatioA;
					//   float _ScaleX;
					//   float _ScaleY;
					//   float4 _ScreenParams;
					//   float _VertexOffsetX;
					//   float _VertexOffsetY;
					//   float _WeightBold;
					//   float _WeightNormal;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 glstate_matrix_projection;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   _EnvMatrix                 c10      3
					//   glstate_matrix_projection  c13      2
					//   _WorldSpaceCameraPos       c15      1
					//   _ScreenParams              c16      1
					//   unity_WorldTransformParams c17      1
					//   _FaceDilate                c18      1
					//   _WeightNormal              c19      1
					//   _WeightBold                c20      1
					//   _ScaleRatioA               c21      1
					//   _VertexOffsetX             c22      1
					//   _VertexOffsetY             c23      1
					//   _GradientScale             c24      1
					//   _ScaleX                    c25      1
					//   _ScaleY                    c26      1
					//   _PerspectiveFilter         c27      1
					//   _MainTex_ST                c28      1
					//   _FaceTex_ST                c29      1
					//
					
					    vs_3_0
					    def c30, 0, 1, 1.5, 0.5
					    def c31, 0.000244140625, 4096, 0.001953125, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_color v5
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_color o6
					    dcl_texcoord5 o7.xy
					    dcl_texcoord6 o8.xyz
					    mov r0.xy, c30
					    mad r1, c15.xyzx, r0.yyyx, r0.xxxy
					    dp4 r2.x, c7, r1
					    dp4 r2.y, c8, r1
					    dp4 r2.z, c9, r1
					    add r1.x, c22.x, v0.x
					    add r1.y, c23.x, v0.y
					    mov r1.zw, v0
					    add r0.xzw, -r1.xyyz, r2.xyyz
					    dp3 r0.x, v2, r0.xzww
					    slt r0.z, -r0.x, r0.x
					    slt r0.x, r0.x, -r0.x
					    add r0.x, -r0.x, r0.z
					    mul r0.xzw, r0.x, v2.xyyz
					    mul r2.xyz, r0.z, c8.zxyw
					    mad r2.xyz, r0.x, c7.zxyw, r2
					    mad r0.xzw, r0.w, c9.zyxy, r2.xyyz
					    dp3 r2.x, r0.xzww, r0.xzww
					    rsq r2.x, r2.x
					    mul r0.xzw, r0, r2.x
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    add r3.xyz, -r2, c15
					    mov o5.xyz, r2
					    nrm r2.xyz, r3
					    dp3 r2.x, r0.zwxw, r2
					    dp4 r1.w, c3, r1
					    mad r4, r1.xyzx, c30.yyyx, c30.xxxy
					    mov r1.xy, c16
					    mul r2.yz, r1.xxyw, c13.xxyw
					    add r1.z, r2.z, r2.y
					    mul r1.z, r1.z, c25.x
					    rcp r5.x, r1.z
					    mul r1.xy, r1, c14
					    add r1.x, r1.y, r1.x
					    mul r1.x, r1.x, c26.x
					    rcp r5.y, r1.x
					    mul r1.xy, r1.w, r5
					    mul r1.xy, r1, r1
					    add r1.x, r1.y, r1.x
					    rsq r1.x, r1.x
					    mul r1.y, c24.x, v4_abs.y
					    mul r1.x, r1.x, r1.y
					    mul r1.y, r1.x, c30.z
					    add r0.y, r0.y, -c27.x
					    mul r0.y, r0.y, r1.y
					    mad r1.x, r1.x, c30.z, -r0.y
					    mad o7.y, r2_abs.x, r1.x, r0.y
					    sge r0.y, c30.x, v4.y
					    mov r1.x, c19.x
					    add r1.x, -r1.x, c20.x
					    mad r0.y, r0.y, r1.x, c19.x
					    mov r1.x, c18.x
					    mul r1.x, r1.x, c21.x
					    mul r1.x, r1.x, c30.w
					    rcp r1.y, c24.x
					    mad o7.x, r0.y, r1.y, r1.x
					    dp3 o8.x, c10, r3
					    dp3 o8.y, c11, r3
					    dp3 o8.z, c12, r3
					    dp4 r6.x, c0, r4
					    dp4 r6.y, c1, r4
					    dp4 r6.z, c2, r4
					    dp4 r6.w, c3, r4
					    mad o1.xy, v3, c28, c28.zwzw
					    mul r0.y, c31.x, v4.x
					    frc r1.x, r0.y
					    add r1.z, r0.y, -r1.x
					    mad r1.w, r1.z, -c31.y, v4.x
					    mul r1.xy, r1.zwzw, c29
					    mov r1.z, c31.z
					    mad o1.zw, r1.xyxy, r1.z, c29
					    dp3 r1.z, c4, v1
					    dp3 r1.x, c5, v1
					    dp3 r1.y, c6, v1
					    dp3 r0.y, r1, r1
					    rsq r0.y, r0.y
					    mul r1.xyz, r0.y, r1
					    mov o2.x, r1.z
					    mul r2.xyz, r0.xzww, r1
					    mad r2.xyz, r0.wxzw, r1.yzxw, -r2
					    mul r0.y, c17.w, v1.w
					    mul r2.xyz, r0.y, r2
					    mov o2.y, r2.x
					    mov o2.z, r0.z
					    mov o3.x, r1.x
					    mov o4.x, r1.y
					    mov o3.y, r2.y
					    mov o4.y, r2.z
					    mov o3.z, r0.w
					    mov o4.z, r0.x
					    mov o6, v5
					    mad o0.xy, r6.w, c255, r6
					    mov o0.zw, r6
					
					// approximately 97 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "GLOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						float _FaceDilate;
						vec4 unused_0_2[6];
						mat4x4 _EnvMatrix;
						vec4 unused_0_4[7];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_10[4];
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_15;
						vec4 _MainTex_ST;
						vec4 _FaceTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[13];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat4;
					float u_xlat8;
					int u_xlati8;
					vec2 u_xlat9;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + glstate_matrix_mvp[3];
					    u_xlat12 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat9.x = floor(u_xlat12);
					    u_xlat9.y = (-u_xlat9.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat1.xy = u_xlat9.xy * _FaceTex_ST.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat8 = dot(in_NORMAL0.xyz, u_xlat1.xyz);
					    u_xlati12 = int((0.0<u_xlat8) ? 0xFFFFFFFFu : uint(0));
					    u_xlati8 = int((u_xlat8<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati8 = (-u_xlati12) + u_xlati8;
					    u_xlat8 = float(u_xlati8);
					    u_xlat1.xyz = vec3(u_xlat8) * in_NORMAL0.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, unity_WorldToObject[2].xyz);
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat2.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat8 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat4.x = u_xlat0.y * glstate_matrix_mvp[1].w;
					    u_xlat0.x = glstate_matrix_mvp[0].w * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = glstate_matrix_mvp[2].w * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_mvp[3].w * in_POSITION0.w + u_xlat0.x;
					    u_xlat4.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat4.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat4.xy;
					    u_xlat4.xy = u_xlat4.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat0.xy = u_xlat0.xx / u_xlat4.xy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat4.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat4.x = u_xlat0.x * 1.5;
					    u_xlat8 = (-_PerspectiveFilter) + 1.0;
					    u_xlat4.x = u_xlat8 * u_xlat4.x;
					    u_xlat0.x = u_xlat0.x * 1.5 + (-u_xlat4.x);
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat1.yzx, u_xlat3.xyz);
					    vs_TEXCOORD5.y = abs(u_xlat8) * u_xlat0.x + u_xlat4.x;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat4.x = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x + _WeightNormal;
					    u_xlat0.x = u_xlat0.x / _GradientScale;
					    u_xlat4.x = _FaceDilate * _ScaleRatioA;
					    vs_TEXCOORD5.x = u_xlat4.x * 0.5 + u_xlat0.x;
					    u_xlat0.xyz = u_xlat2.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyz = _EnvMatrix[0].xyz * u_xlat2.xxx + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = _EnvMatrix[2].xyz * u_xlat2.zzz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "GLOW_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _EnvMatrix;
					//   float _FaceDilate;
					//   float4 _FaceTex_ST;
					//   float _GradientScale;
					//   float4 _MainTex_ST;
					//   float _PerspectiveFilter;
					//   float _ScaleRatioA;
					//   float _ScaleX;
					//   float _ScaleY;
					//   float4 _ScreenParams;
					//   float _VertexOffsetX;
					//   float _VertexOffsetY;
					//   float _WeightBold;
					//   float _WeightNormal;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 glstate_matrix_projection;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   _EnvMatrix                 c10      3
					//   glstate_matrix_projection  c13      2
					//   _WorldSpaceCameraPos       c15      1
					//   _ScreenParams              c16      1
					//   unity_WorldTransformParams c17      1
					//   _FaceDilate                c18      1
					//   _WeightNormal              c19      1
					//   _WeightBold                c20      1
					//   _ScaleRatioA               c21      1
					//   _VertexOffsetX             c22      1
					//   _VertexOffsetY             c23      1
					//   _GradientScale             c24      1
					//   _ScaleX                    c25      1
					//   _ScaleY                    c26      1
					//   _PerspectiveFilter         c27      1
					//   _MainTex_ST                c28      1
					//   _FaceTex_ST                c29      1
					//
					
					    vs_3_0
					    def c30, 0, 1, 1.5, 0.5
					    def c31, 0.000244140625, 4096, 0.001953125, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_color v5
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_color o6
					    dcl_texcoord5 o7.xy
					    dcl_texcoord6 o8.xyz
					    mov r0.xy, c30
					    mad r1, c15.xyzx, r0.yyyx, r0.xxxy
					    dp4 r2.x, c7, r1
					    dp4 r2.y, c8, r1
					    dp4 r2.z, c9, r1
					    add r1.x, c22.x, v0.x
					    add r1.y, c23.x, v0.y
					    mov r1.zw, v0
					    add r0.xzw, -r1.xyyz, r2.xyyz
					    dp3 r0.x, v2, r0.xzww
					    slt r0.z, -r0.x, r0.x
					    slt r0.x, r0.x, -r0.x
					    add r0.x, -r0.x, r0.z
					    mul r0.xzw, r0.x, v2.xyyz
					    mul r2.xyz, r0.z, c8.zxyw
					    mad r2.xyz, r0.x, c7.zxyw, r2
					    mad r0.xzw, r0.w, c9.zyxy, r2.xyyz
					    dp3 r2.x, r0.xzww, r0.xzww
					    rsq r2.x, r2.x
					    mul r0.xzw, r0, r2.x
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    add r3.xyz, -r2, c15
					    mov o5.xyz, r2
					    nrm r2.xyz, r3
					    dp3 r2.x, r0.zwxw, r2
					    dp4 r1.w, c3, r1
					    mad r4, r1.xyzx, c30.yyyx, c30.xxxy
					    mov r1.xy, c16
					    mul r2.yz, r1.xxyw, c13.xxyw
					    add r1.z, r2.z, r2.y
					    mul r1.z, r1.z, c25.x
					    rcp r5.x, r1.z
					    mul r1.xy, r1, c14
					    add r1.x, r1.y, r1.x
					    mul r1.x, r1.x, c26.x
					    rcp r5.y, r1.x
					    mul r1.xy, r1.w, r5
					    mul r1.xy, r1, r1
					    add r1.x, r1.y, r1.x
					    rsq r1.x, r1.x
					    mul r1.y, c24.x, v4_abs.y
					    mul r1.x, r1.x, r1.y
					    mul r1.y, r1.x, c30.z
					    add r0.y, r0.y, -c27.x
					    mul r0.y, r0.y, r1.y
					    mad r1.x, r1.x, c30.z, -r0.y
					    mad o7.y, r2_abs.x, r1.x, r0.y
					    sge r0.y, c30.x, v4.y
					    mov r1.x, c19.x
					    add r1.x, -r1.x, c20.x
					    mad r0.y, r0.y, r1.x, c19.x
					    mov r1.x, c18.x
					    mul r1.x, r1.x, c21.x
					    mul r1.x, r1.x, c30.w
					    rcp r1.y, c24.x
					    mad o7.x, r0.y, r1.y, r1.x
					    dp3 o8.x, c10, r3
					    dp3 o8.y, c11, r3
					    dp3 o8.z, c12, r3
					    dp4 r6.x, c0, r4
					    dp4 r6.y, c1, r4
					    dp4 r6.z, c2, r4
					    dp4 r6.w, c3, r4
					    mad o1.xy, v3, c28, c28.zwzw
					    mul r0.y, c31.x, v4.x
					    frc r1.x, r0.y
					    add r1.z, r0.y, -r1.x
					    mad r1.w, r1.z, -c31.y, v4.x
					    mul r1.xy, r1.zwzw, c29
					    mov r1.z, c31.z
					    mad o1.zw, r1.xyxy, r1.z, c29
					    dp3 r1.z, c4, v1
					    dp3 r1.x, c5, v1
					    dp3 r1.y, c6, v1
					    dp3 r0.y, r1, r1
					    rsq r0.y, r0.y
					    mul r1.xyz, r0.y, r1
					    mov o2.x, r1.z
					    mul r2.xyz, r0.xzww, r1
					    mad r2.xyz, r0.wxzw, r1.yzxw, -r2
					    mul r0.y, c17.w, v1.w
					    mul r2.xyz, r0.y, r2
					    mov o2.y, r2.x
					    mov o2.z, r0.z
					    mov o3.x, r1.x
					    mov o4.x, r1.y
					    mov o3.y, r2.y
					    mov o4.y, r2.z
					    mov o3.z, r0.w
					    mov o4.z, r0.x
					    mov o6, v5
					    mad o0.xy, r6.w, c255, r6
					    mov o0.zw, r6
					
					// approximately 97 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "GLOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						float _FaceDilate;
						vec4 unused_0_2[6];
						mat4x4 _EnvMatrix;
						vec4 unused_0_4[7];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_10[4];
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_15;
						vec4 _MainTex_ST;
						vec4 _FaceTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[13];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat4;
					float u_xlat8;
					int u_xlati8;
					vec2 u_xlat9;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + glstate_matrix_mvp[3];
					    u_xlat12 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat9.x = floor(u_xlat12);
					    u_xlat9.y = (-u_xlat9.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat1.xy = u_xlat9.xy * _FaceTex_ST.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat8 = dot(in_NORMAL0.xyz, u_xlat1.xyz);
					    u_xlati12 = int((0.0<u_xlat8) ? 0xFFFFFFFFu : uint(0));
					    u_xlati8 = int((u_xlat8<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati8 = (-u_xlati12) + u_xlati8;
					    u_xlat8 = float(u_xlati8);
					    u_xlat1.xyz = vec3(u_xlat8) * in_NORMAL0.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, unity_WorldToObject[2].xyz);
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat2.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat8 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat4.x = u_xlat0.y * glstate_matrix_mvp[1].w;
					    u_xlat0.x = glstate_matrix_mvp[0].w * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = glstate_matrix_mvp[2].w * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_mvp[3].w * in_POSITION0.w + u_xlat0.x;
					    u_xlat4.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat4.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat4.xy;
					    u_xlat4.xy = u_xlat4.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat0.xy = u_xlat0.xx / u_xlat4.xy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat4.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat4.x = u_xlat0.x * 1.5;
					    u_xlat8 = (-_PerspectiveFilter) + 1.0;
					    u_xlat4.x = u_xlat8 * u_xlat4.x;
					    u_xlat0.x = u_xlat0.x * 1.5 + (-u_xlat4.x);
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat1.yzx, u_xlat3.xyz);
					    vs_TEXCOORD5.y = abs(u_xlat8) * u_xlat0.x + u_xlat4.x;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat4.x = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x + _WeightNormal;
					    u_xlat0.x = u_xlat0.x / _GradientScale;
					    u_xlat4.x = _FaceDilate * _ScaleRatioA;
					    vs_TEXCOORD5.x = u_xlat4.x * 0.5 + u_xlat0.x;
					    u_xlat0.xyz = u_xlat2.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyz = _EnvMatrix[0].xyz * u_xlat2.xxx + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = _EnvMatrix[2].xyz * u_xlat2.zzz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "SPOT" "GLOW_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _EnvMatrix;
					//   float _FaceDilate;
					//   float4 _FaceTex_ST;
					//   float _GradientScale;
					//   float4 _MainTex_ST;
					//   float _PerspectiveFilter;
					//   float _ScaleRatioA;
					//   float _ScaleX;
					//   float _ScaleY;
					//   float4 _ScreenParams;
					//   float _VertexOffsetX;
					//   float _VertexOffsetY;
					//   float _WeightBold;
					//   float _WeightNormal;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 glstate_matrix_projection;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   _EnvMatrix                 c10      3
					//   glstate_matrix_projection  c13      2
					//   _WorldSpaceCameraPos       c15      1
					//   _ScreenParams              c16      1
					//   unity_WorldTransformParams c17      1
					//   _FaceDilate                c18      1
					//   _WeightNormal              c19      1
					//   _WeightBold                c20      1
					//   _ScaleRatioA               c21      1
					//   _VertexOffsetX             c22      1
					//   _VertexOffsetY             c23      1
					//   _GradientScale             c24      1
					//   _ScaleX                    c25      1
					//   _ScaleY                    c26      1
					//   _PerspectiveFilter         c27      1
					//   _MainTex_ST                c28      1
					//   _FaceTex_ST                c29      1
					//
					
					    vs_3_0
					    def c30, 0, 1, 1.5, 0.5
					    def c31, 0.000244140625, 4096, 0.001953125, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_color v5
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_color o6
					    dcl_texcoord5 o7.xy
					    dcl_texcoord6 o8.xyz
					    mov r0.xy, c30
					    mad r1, c15.xyzx, r0.yyyx, r0.xxxy
					    dp4 r2.x, c7, r1
					    dp4 r2.y, c8, r1
					    dp4 r2.z, c9, r1
					    add r1.x, c22.x, v0.x
					    add r1.y, c23.x, v0.y
					    mov r1.zw, v0
					    add r0.xzw, -r1.xyyz, r2.xyyz
					    dp3 r0.x, v2, r0.xzww
					    slt r0.z, -r0.x, r0.x
					    slt r0.x, r0.x, -r0.x
					    add r0.x, -r0.x, r0.z
					    mul r0.xzw, r0.x, v2.xyyz
					    mul r2.xyz, r0.z, c8.zxyw
					    mad r2.xyz, r0.x, c7.zxyw, r2
					    mad r0.xzw, r0.w, c9.zyxy, r2.xyyz
					    dp3 r2.x, r0.xzww, r0.xzww
					    rsq r2.x, r2.x
					    mul r0.xzw, r0, r2.x
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    add r3.xyz, -r2, c15
					    mov o5.xyz, r2
					    nrm r2.xyz, r3
					    dp3 r2.x, r0.zwxw, r2
					    dp4 r1.w, c3, r1
					    mad r4, r1.xyzx, c30.yyyx, c30.xxxy
					    mov r1.xy, c16
					    mul r2.yz, r1.xxyw, c13.xxyw
					    add r1.z, r2.z, r2.y
					    mul r1.z, r1.z, c25.x
					    rcp r5.x, r1.z
					    mul r1.xy, r1, c14
					    add r1.x, r1.y, r1.x
					    mul r1.x, r1.x, c26.x
					    rcp r5.y, r1.x
					    mul r1.xy, r1.w, r5
					    mul r1.xy, r1, r1
					    add r1.x, r1.y, r1.x
					    rsq r1.x, r1.x
					    mul r1.y, c24.x, v4_abs.y
					    mul r1.x, r1.x, r1.y
					    mul r1.y, r1.x, c30.z
					    add r0.y, r0.y, -c27.x
					    mul r0.y, r0.y, r1.y
					    mad r1.x, r1.x, c30.z, -r0.y
					    mad o7.y, r2_abs.x, r1.x, r0.y
					    sge r0.y, c30.x, v4.y
					    mov r1.x, c19.x
					    add r1.x, -r1.x, c20.x
					    mad r0.y, r0.y, r1.x, c19.x
					    mov r1.x, c18.x
					    mul r1.x, r1.x, c21.x
					    mul r1.x, r1.x, c30.w
					    rcp r1.y, c24.x
					    mad o7.x, r0.y, r1.y, r1.x
					    dp3 o8.x, c10, r3
					    dp3 o8.y, c11, r3
					    dp3 o8.z, c12, r3
					    dp4 r6.x, c0, r4
					    dp4 r6.y, c1, r4
					    dp4 r6.z, c2, r4
					    dp4 r6.w, c3, r4
					    mad o1.xy, v3, c28, c28.zwzw
					    mul r0.y, c31.x, v4.x
					    frc r1.x, r0.y
					    add r1.z, r0.y, -r1.x
					    mad r1.w, r1.z, -c31.y, v4.x
					    mul r1.xy, r1.zwzw, c29
					    mov r1.z, c31.z
					    mad o1.zw, r1.xyxy, r1.z, c29
					    dp3 r1.z, c4, v1
					    dp3 r1.x, c5, v1
					    dp3 r1.y, c6, v1
					    dp3 r0.y, r1, r1
					    rsq r0.y, r0.y
					    mul r1.xyz, r0.y, r1
					    mov o2.x, r1.z
					    mul r2.xyz, r0.xzww, r1
					    mad r2.xyz, r0.wxzw, r1.yzxw, -r2
					    mul r0.y, c17.w, v1.w
					    mul r2.xyz, r0.y, r2
					    mov o2.y, r2.x
					    mov o2.z, r0.z
					    mov o3.x, r1.x
					    mov o4.x, r1.y
					    mov o3.y, r2.y
					    mov o4.y, r2.z
					    mov o3.z, r0.w
					    mov o4.z, r0.x
					    mov o6, v5
					    mad o0.xy, r6.w, c255, r6
					    mov o0.zw, r6
					
					// approximately 97 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "GLOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						float _FaceDilate;
						vec4 unused_0_2[6];
						mat4x4 _EnvMatrix;
						vec4 unused_0_4[7];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_10[4];
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_15;
						vec4 _MainTex_ST;
						vec4 _FaceTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[13];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat4;
					float u_xlat8;
					int u_xlati8;
					vec2 u_xlat9;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + glstate_matrix_mvp[3];
					    u_xlat12 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat9.x = floor(u_xlat12);
					    u_xlat9.y = (-u_xlat9.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat1.xy = u_xlat9.xy * _FaceTex_ST.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat8 = dot(in_NORMAL0.xyz, u_xlat1.xyz);
					    u_xlati12 = int((0.0<u_xlat8) ? 0xFFFFFFFFu : uint(0));
					    u_xlati8 = int((u_xlat8<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati8 = (-u_xlati12) + u_xlati8;
					    u_xlat8 = float(u_xlati8);
					    u_xlat1.xyz = vec3(u_xlat8) * in_NORMAL0.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, unity_WorldToObject[2].xyz);
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat2.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat8 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat4.x = u_xlat0.y * glstate_matrix_mvp[1].w;
					    u_xlat0.x = glstate_matrix_mvp[0].w * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = glstate_matrix_mvp[2].w * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_mvp[3].w * in_POSITION0.w + u_xlat0.x;
					    u_xlat4.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat4.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat4.xy;
					    u_xlat4.xy = u_xlat4.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat0.xy = u_xlat0.xx / u_xlat4.xy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat4.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat4.x = u_xlat0.x * 1.5;
					    u_xlat8 = (-_PerspectiveFilter) + 1.0;
					    u_xlat4.x = u_xlat8 * u_xlat4.x;
					    u_xlat0.x = u_xlat0.x * 1.5 + (-u_xlat4.x);
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat1.yzx, u_xlat3.xyz);
					    vs_TEXCOORD5.y = abs(u_xlat8) * u_xlat0.x + u_xlat4.x;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat4.x = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x + _WeightNormal;
					    u_xlat0.x = u_xlat0.x / _GradientScale;
					    u_xlat4.x = _FaceDilate * _ScaleRatioA;
					    vs_TEXCOORD5.x = u_xlat4.x * 0.5 + u_xlat0.x;
					    u_xlat0.xyz = u_xlat2.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyz = _EnvMatrix[0].xyz * u_xlat2.xxx + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = _EnvMatrix[2].xyz * u_xlat2.zzz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT_COOKIE" "GLOW_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _EnvMatrix;
					//   float _FaceDilate;
					//   float4 _FaceTex_ST;
					//   float _GradientScale;
					//   float4 _MainTex_ST;
					//   float _PerspectiveFilter;
					//   float _ScaleRatioA;
					//   float _ScaleX;
					//   float _ScaleY;
					//   float4 _ScreenParams;
					//   float _VertexOffsetX;
					//   float _VertexOffsetY;
					//   float _WeightBold;
					//   float _WeightNormal;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 glstate_matrix_projection;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   _EnvMatrix                 c10      3
					//   glstate_matrix_projection  c13      2
					//   _WorldSpaceCameraPos       c15      1
					//   _ScreenParams              c16      1
					//   unity_WorldTransformParams c17      1
					//   _FaceDilate                c18      1
					//   _WeightNormal              c19      1
					//   _WeightBold                c20      1
					//   _ScaleRatioA               c21      1
					//   _VertexOffsetX             c22      1
					//   _VertexOffsetY             c23      1
					//   _GradientScale             c24      1
					//   _ScaleX                    c25      1
					//   _ScaleY                    c26      1
					//   _PerspectiveFilter         c27      1
					//   _MainTex_ST                c28      1
					//   _FaceTex_ST                c29      1
					//
					
					    vs_3_0
					    def c30, 0, 1, 1.5, 0.5
					    def c31, 0.000244140625, 4096, 0.001953125, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_color v5
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_color o6
					    dcl_texcoord5 o7.xy
					    dcl_texcoord6 o8.xyz
					    mov r0.xy, c30
					    mad r1, c15.xyzx, r0.yyyx, r0.xxxy
					    dp4 r2.x, c7, r1
					    dp4 r2.y, c8, r1
					    dp4 r2.z, c9, r1
					    add r1.x, c22.x, v0.x
					    add r1.y, c23.x, v0.y
					    mov r1.zw, v0
					    add r0.xzw, -r1.xyyz, r2.xyyz
					    dp3 r0.x, v2, r0.xzww
					    slt r0.z, -r0.x, r0.x
					    slt r0.x, r0.x, -r0.x
					    add r0.x, -r0.x, r0.z
					    mul r0.xzw, r0.x, v2.xyyz
					    mul r2.xyz, r0.z, c8.zxyw
					    mad r2.xyz, r0.x, c7.zxyw, r2
					    mad r0.xzw, r0.w, c9.zyxy, r2.xyyz
					    dp3 r2.x, r0.xzww, r0.xzww
					    rsq r2.x, r2.x
					    mul r0.xzw, r0, r2.x
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    add r3.xyz, -r2, c15
					    mov o5.xyz, r2
					    nrm r2.xyz, r3
					    dp3 r2.x, r0.zwxw, r2
					    dp4 r1.w, c3, r1
					    mad r4, r1.xyzx, c30.yyyx, c30.xxxy
					    mov r1.xy, c16
					    mul r2.yz, r1.xxyw, c13.xxyw
					    add r1.z, r2.z, r2.y
					    mul r1.z, r1.z, c25.x
					    rcp r5.x, r1.z
					    mul r1.xy, r1, c14
					    add r1.x, r1.y, r1.x
					    mul r1.x, r1.x, c26.x
					    rcp r5.y, r1.x
					    mul r1.xy, r1.w, r5
					    mul r1.xy, r1, r1
					    add r1.x, r1.y, r1.x
					    rsq r1.x, r1.x
					    mul r1.y, c24.x, v4_abs.y
					    mul r1.x, r1.x, r1.y
					    mul r1.y, r1.x, c30.z
					    add r0.y, r0.y, -c27.x
					    mul r0.y, r0.y, r1.y
					    mad r1.x, r1.x, c30.z, -r0.y
					    mad o7.y, r2_abs.x, r1.x, r0.y
					    sge r0.y, c30.x, v4.y
					    mov r1.x, c19.x
					    add r1.x, -r1.x, c20.x
					    mad r0.y, r0.y, r1.x, c19.x
					    mov r1.x, c18.x
					    mul r1.x, r1.x, c21.x
					    mul r1.x, r1.x, c30.w
					    rcp r1.y, c24.x
					    mad o7.x, r0.y, r1.y, r1.x
					    dp3 o8.x, c10, r3
					    dp3 o8.y, c11, r3
					    dp3 o8.z, c12, r3
					    dp4 r6.x, c0, r4
					    dp4 r6.y, c1, r4
					    dp4 r6.z, c2, r4
					    dp4 r6.w, c3, r4
					    mad o1.xy, v3, c28, c28.zwzw
					    mul r0.y, c31.x, v4.x
					    frc r1.x, r0.y
					    add r1.z, r0.y, -r1.x
					    mad r1.w, r1.z, -c31.y, v4.x
					    mul r1.xy, r1.zwzw, c29
					    mov r1.z, c31.z
					    mad o1.zw, r1.xyxy, r1.z, c29
					    dp3 r1.z, c4, v1
					    dp3 r1.x, c5, v1
					    dp3 r1.y, c6, v1
					    dp3 r0.y, r1, r1
					    rsq r0.y, r0.y
					    mul r1.xyz, r0.y, r1
					    mov o2.x, r1.z
					    mul r2.xyz, r0.xzww, r1
					    mad r2.xyz, r0.wxzw, r1.yzxw, -r2
					    mul r0.y, c17.w, v1.w
					    mul r2.xyz, r0.y, r2
					    mov o2.y, r2.x
					    mov o2.z, r0.z
					    mov o3.x, r1.x
					    mov o4.x, r1.y
					    mov o3.y, r2.y
					    mov o4.y, r2.z
					    mov o3.z, r0.w
					    mov o4.z, r0.x
					    mov o6, v5
					    mad o0.xy, r6.w, c255, r6
					    mov o0.zw, r6
					
					// approximately 97 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "GLOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						float _FaceDilate;
						vec4 unused_0_2[6];
						mat4x4 _EnvMatrix;
						vec4 unused_0_4[7];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_10[4];
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_15;
						vec4 _MainTex_ST;
						vec4 _FaceTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[13];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat4;
					float u_xlat8;
					int u_xlati8;
					vec2 u_xlat9;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + glstate_matrix_mvp[3];
					    u_xlat12 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat9.x = floor(u_xlat12);
					    u_xlat9.y = (-u_xlat9.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat1.xy = u_xlat9.xy * _FaceTex_ST.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat8 = dot(in_NORMAL0.xyz, u_xlat1.xyz);
					    u_xlati12 = int((0.0<u_xlat8) ? 0xFFFFFFFFu : uint(0));
					    u_xlati8 = int((u_xlat8<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati8 = (-u_xlati12) + u_xlati8;
					    u_xlat8 = float(u_xlati8);
					    u_xlat1.xyz = vec3(u_xlat8) * in_NORMAL0.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, unity_WorldToObject[2].xyz);
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat2.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat8 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat4.x = u_xlat0.y * glstate_matrix_mvp[1].w;
					    u_xlat0.x = glstate_matrix_mvp[0].w * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = glstate_matrix_mvp[2].w * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_mvp[3].w * in_POSITION0.w + u_xlat0.x;
					    u_xlat4.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat4.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat4.xy;
					    u_xlat4.xy = u_xlat4.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat0.xy = u_xlat0.xx / u_xlat4.xy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat4.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat4.x = u_xlat0.x * 1.5;
					    u_xlat8 = (-_PerspectiveFilter) + 1.0;
					    u_xlat4.x = u_xlat8 * u_xlat4.x;
					    u_xlat0.x = u_xlat0.x * 1.5 + (-u_xlat4.x);
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat1.yzx, u_xlat3.xyz);
					    vs_TEXCOORD5.y = abs(u_xlat8) * u_xlat0.x + u_xlat4.x;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat4.x = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x + _WeightNormal;
					    u_xlat0.x = u_xlat0.x / _GradientScale;
					    u_xlat4.x = _FaceDilate * _ScaleRatioA;
					    vs_TEXCOORD5.x = u_xlat4.x * 0.5 + u_xlat0.x;
					    u_xlat0.xyz = u_xlat2.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyz = _EnvMatrix[0].xyz * u_xlat2.xxx + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = _EnvMatrix[2].xyz * u_xlat2.zzz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL_COOKIE" "GLOW_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _EnvMatrix;
					//   float _FaceDilate;
					//   float4 _FaceTex_ST;
					//   float _GradientScale;
					//   float4 _MainTex_ST;
					//   float _PerspectiveFilter;
					//   float _ScaleRatioA;
					//   float _ScaleX;
					//   float _ScaleY;
					//   float4 _ScreenParams;
					//   float _VertexOffsetX;
					//   float _VertexOffsetY;
					//   float _WeightBold;
					//   float _WeightNormal;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 glstate_matrix_projection;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   _EnvMatrix                 c10      3
					//   glstate_matrix_projection  c13      2
					//   _WorldSpaceCameraPos       c15      1
					//   _ScreenParams              c16      1
					//   unity_WorldTransformParams c17      1
					//   _FaceDilate                c18      1
					//   _WeightNormal              c19      1
					//   _WeightBold                c20      1
					//   _ScaleRatioA               c21      1
					//   _VertexOffsetX             c22      1
					//   _VertexOffsetY             c23      1
					//   _GradientScale             c24      1
					//   _ScaleX                    c25      1
					//   _ScaleY                    c26      1
					//   _PerspectiveFilter         c27      1
					//   _MainTex_ST                c28      1
					//   _FaceTex_ST                c29      1
					//
					
					    vs_3_0
					    def c30, 0, 1, 1.5, 0.5
					    def c31, 0.000244140625, 4096, 0.001953125, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_color v5
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_color o6
					    dcl_texcoord5 o7.xy
					    dcl_texcoord6 o8.xyz
					    mov r0.xy, c30
					    mad r1, c15.xyzx, r0.yyyx, r0.xxxy
					    dp4 r2.x, c7, r1
					    dp4 r2.y, c8, r1
					    dp4 r2.z, c9, r1
					    add r1.x, c22.x, v0.x
					    add r1.y, c23.x, v0.y
					    mov r1.zw, v0
					    add r0.xzw, -r1.xyyz, r2.xyyz
					    dp3 r0.x, v2, r0.xzww
					    slt r0.z, -r0.x, r0.x
					    slt r0.x, r0.x, -r0.x
					    add r0.x, -r0.x, r0.z
					    mul r0.xzw, r0.x, v2.xyyz
					    mul r2.xyz, r0.z, c8.zxyw
					    mad r2.xyz, r0.x, c7.zxyw, r2
					    mad r0.xzw, r0.w, c9.zyxy, r2.xyyz
					    dp3 r2.x, r0.xzww, r0.xzww
					    rsq r2.x, r2.x
					    mul r0.xzw, r0, r2.x
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    add r3.xyz, -r2, c15
					    mov o5.xyz, r2
					    nrm r2.xyz, r3
					    dp3 r2.x, r0.zwxw, r2
					    dp4 r1.w, c3, r1
					    mad r4, r1.xyzx, c30.yyyx, c30.xxxy
					    mov r1.xy, c16
					    mul r2.yz, r1.xxyw, c13.xxyw
					    add r1.z, r2.z, r2.y
					    mul r1.z, r1.z, c25.x
					    rcp r5.x, r1.z
					    mul r1.xy, r1, c14
					    add r1.x, r1.y, r1.x
					    mul r1.x, r1.x, c26.x
					    rcp r5.y, r1.x
					    mul r1.xy, r1.w, r5
					    mul r1.xy, r1, r1
					    add r1.x, r1.y, r1.x
					    rsq r1.x, r1.x
					    mul r1.y, c24.x, v4_abs.y
					    mul r1.x, r1.x, r1.y
					    mul r1.y, r1.x, c30.z
					    add r0.y, r0.y, -c27.x
					    mul r0.y, r0.y, r1.y
					    mad r1.x, r1.x, c30.z, -r0.y
					    mad o7.y, r2_abs.x, r1.x, r0.y
					    sge r0.y, c30.x, v4.y
					    mov r1.x, c19.x
					    add r1.x, -r1.x, c20.x
					    mad r0.y, r0.y, r1.x, c19.x
					    mov r1.x, c18.x
					    mul r1.x, r1.x, c21.x
					    mul r1.x, r1.x, c30.w
					    rcp r1.y, c24.x
					    mad o7.x, r0.y, r1.y, r1.x
					    dp3 o8.x, c10, r3
					    dp3 o8.y, c11, r3
					    dp3 o8.z, c12, r3
					    dp4 r6.x, c0, r4
					    dp4 r6.y, c1, r4
					    dp4 r6.z, c2, r4
					    dp4 r6.w, c3, r4
					    mad o1.xy, v3, c28, c28.zwzw
					    mul r0.y, c31.x, v4.x
					    frc r1.x, r0.y
					    add r1.z, r0.y, -r1.x
					    mad r1.w, r1.z, -c31.y, v4.x
					    mul r1.xy, r1.zwzw, c29
					    mov r1.z, c31.z
					    mad o1.zw, r1.xyxy, r1.z, c29
					    dp3 r1.z, c4, v1
					    dp3 r1.x, c5, v1
					    dp3 r1.y, c6, v1
					    dp3 r0.y, r1, r1
					    rsq r0.y, r0.y
					    mul r1.xyz, r0.y, r1
					    mov o2.x, r1.z
					    mul r2.xyz, r0.xzww, r1
					    mad r2.xyz, r0.wxzw, r1.yzxw, -r2
					    mul r0.y, c17.w, v1.w
					    mul r2.xyz, r0.y, r2
					    mov o2.y, r2.x
					    mov o2.z, r0.z
					    mov o3.x, r1.x
					    mov o4.x, r1.y
					    mov o3.y, r2.y
					    mov o4.y, r2.z
					    mov o3.z, r0.w
					    mov o4.z, r0.x
					    mov o6, v5
					    mad o0.xy, r6.w, c255, r6
					    mov o0.zw, r6
					
					// approximately 97 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "GLOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						float _FaceDilate;
						vec4 unused_0_2[6];
						mat4x4 _EnvMatrix;
						vec4 unused_0_4[7];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_10[4];
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_15;
						vec4 _MainTex_ST;
						vec4 _FaceTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[13];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat4;
					float u_xlat8;
					int u_xlati8;
					vec2 u_xlat9;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    gl_Position = u_xlat1 + glstate_matrix_mvp[3];
					    u_xlat12 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat9.x = floor(u_xlat12);
					    u_xlat9.y = (-u_xlat9.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat1.xy = u_xlat9.xy * _FaceTex_ST.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat8 = dot(in_NORMAL0.xyz, u_xlat1.xyz);
					    u_xlati12 = int((0.0<u_xlat8) ? 0xFFFFFFFFu : uint(0));
					    u_xlati8 = int((u_xlat8<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati8 = (-u_xlati12) + u_xlati8;
					    u_xlat8 = float(u_xlati8);
					    u_xlat1.xyz = vec3(u_xlat8) * in_NORMAL0.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, unity_WorldToObject[2].xyz);
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat2.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat8 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat4.x = u_xlat0.y * glstate_matrix_mvp[1].w;
					    u_xlat0.x = glstate_matrix_mvp[0].w * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = glstate_matrix_mvp[2].w * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_mvp[3].w * in_POSITION0.w + u_xlat0.x;
					    u_xlat4.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat4.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat4.xy;
					    u_xlat4.xy = u_xlat4.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat0.xy = u_xlat0.xx / u_xlat4.xy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat4.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat4.x = u_xlat0.x * 1.5;
					    u_xlat8 = (-_PerspectiveFilter) + 1.0;
					    u_xlat4.x = u_xlat8 * u_xlat4.x;
					    u_xlat0.x = u_xlat0.x * 1.5 + (-u_xlat4.x);
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat1.yzx, u_xlat3.xyz);
					    vs_TEXCOORD5.y = abs(u_xlat8) * u_xlat0.x + u_xlat4.x;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat4.x = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x + _WeightNormal;
					    u_xlat0.x = u_xlat0.x / _GradientScale;
					    u_xlat4.x = _FaceDilate * _ScaleRatioA;
					    vs_TEXCOORD5.x = u_xlat4.x * 0.5 + u_xlat0.x;
					    u_xlat0.xyz = u_xlat2.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyz = _EnvMatrix[0].xyz * u_xlat2.xxx + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = _EnvMatrix[2].xyz * u_xlat2.zzz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT" "FOG_EXP2" "GLOW_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _EnvMatrix;
					//   float _FaceDilate;
					//   float4 _FaceTex_ST;
					//   float _GradientScale;
					//   float4 _MainTex_ST;
					//   float _PerspectiveFilter;
					//   float _ScaleRatioA;
					//   float _ScaleX;
					//   float _ScaleY;
					//   float4 _ScreenParams;
					//   float _VertexOffsetX;
					//   float _VertexOffsetY;
					//   float _WeightBold;
					//   float _WeightNormal;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 glstate_matrix_projection;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   _EnvMatrix                 c10      3
					//   glstate_matrix_projection  c13      2
					//   _WorldSpaceCameraPos       c15      1
					//   _ScreenParams              c16      1
					//   unity_WorldTransformParams c17      1
					//   _FaceDilate                c18      1
					//   _WeightNormal              c19      1
					//   _WeightBold                c20      1
					//   _ScaleRatioA               c21      1
					//   _VertexOffsetX             c22      1
					//   _VertexOffsetY             c23      1
					//   _GradientScale             c24      1
					//   _ScaleX                    c25      1
					//   _ScaleY                    c26      1
					//   _PerspectiveFilter         c27      1
					//   _MainTex_ST                c28      1
					//   _FaceTex_ST                c29      1
					//
					
					    vs_3_0
					    def c30, 0, 1, 1.5, 0.5
					    def c31, 0.000244140625, 4096, 0.001953125, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_color v5
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_color o6
					    dcl_texcoord5 o7.xy
					    dcl_texcoord6 o8.xyz
					    dcl_texcoord7 o9.x
					    mov r0.xy, c30
					    mad r1, c15.xyzx, r0.yyyx, r0.xxxy
					    dp4 r2.x, c7, r1
					    dp4 r2.y, c8, r1
					    dp4 r2.z, c9, r1
					    add r1.x, c22.x, v0.x
					    add r1.y, c23.x, v0.y
					    mov r1.zw, v0
					    add r0.xzw, -r1.xyyz, r2.xyyz
					    dp3 r0.x, v2, r0.xzww
					    slt r0.z, -r0.x, r0.x
					    slt r0.x, r0.x, -r0.x
					    add r0.x, -r0.x, r0.z
					    mul r0.xzw, r0.x, v2.xyyz
					    mul r2.xyz, r0.z, c8.zxyw
					    mad r2.xyz, r0.x, c7.zxyw, r2
					    mad r0.xzw, r0.w, c9.zyxy, r2.xyyz
					    dp3 r2.x, r0.xzww, r0.xzww
					    rsq r2.x, r2.x
					    mul r0.xzw, r0, r2.x
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    add r3.xyz, -r2, c15
					    mov o5.xyz, r2
					    nrm r2.xyz, r3
					    dp3 r2.x, r0.zwxw, r2
					    dp4 r1.w, c3, r1
					    mad r4, r1.xyzx, c30.yyyx, c30.xxxy
					    mov r1.xy, c16
					    mul r2.yz, r1.xxyw, c13.xxyw
					    add r1.z, r2.z, r2.y
					    mul r1.z, r1.z, c25.x
					    rcp r5.x, r1.z
					    mul r1.xy, r1, c14
					    add r1.x, r1.y, r1.x
					    mul r1.x, r1.x, c26.x
					    rcp r5.y, r1.x
					    mul r1.xy, r1.w, r5
					    mul r1.xy, r1, r1
					    add r1.x, r1.y, r1.x
					    rsq r1.x, r1.x
					    mul r1.y, c24.x, v4_abs.y
					    mul r1.x, r1.x, r1.y
					    mul r1.y, r1.x, c30.z
					    add r0.y, r0.y, -c27.x
					    mul r0.y, r0.y, r1.y
					    mad r1.x, r1.x, c30.z, -r0.y
					    mad o7.y, r2_abs.x, r1.x, r0.y
					    sge r0.y, c30.x, v4.y
					    mov r1.x, c19.x
					    add r1.x, -r1.x, c20.x
					    mad r0.y, r0.y, r1.x, c19.x
					    mov r1.x, c18.x
					    mul r1.x, r1.x, c21.x
					    mul r1.x, r1.x, c30.w
					    rcp r1.y, c24.x
					    mad o7.x, r0.y, r1.y, r1.x
					    dp3 o8.x, c10, r3
					    dp3 o8.y, c11, r3
					    dp3 o8.z, c12, r3
					    dp4 r6.x, c0, r4
					    dp4 r6.y, c1, r4
					    dp4 r6.w, c3, r4
					    dp4 r0.y, c2, r4
					    mad o1.xy, v3, c28, c28.zwzw
					    mul r1.x, c31.x, v4.x
					    frc r1.y, r1.x
					    add r1.z, -r1.y, r1.x
					    mad r1.w, r1.z, -c31.y, v4.x
					    mul r1.xy, r1.zwzw, c29
					    mov r1.z, c31.z
					    mad o1.zw, r1.xyxy, r1.z, c29
					    mov r6.z, r0.y
					    mov o9.x, r0.y
					    dp3 r1.z, c4, v1
					    dp3 r1.x, c5, v1
					    dp3 r1.y, c6, v1
					    dp3 r0.y, r1, r1
					    rsq r0.y, r0.y
					    mul r1.xyz, r0.y, r1
					    mov o2.x, r1.z
					    mul r2.xyz, r0.xzww, r1
					    mad r2.xyz, r0.wxzw, r1.yzxw, -r2
					    mul r0.y, c17.w, v1.w
					    mul r2.xyz, r0.y, r2
					    mov o2.y, r2.x
					    mov o2.z, r0.z
					    mov o3.x, r1.x
					    mov o4.x, r1.y
					    mov o3.y, r2.y
					    mov o4.y, r2.z
					    mov o3.z, r0.w
					    mov o4.z, r0.x
					    mov o6, v5
					    mad o0.xy, r6.w, c255, r6
					    mov o0.zw, r6
					
					// approximately 99 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "FOG_EXP2" "GLOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						float _FaceDilate;
						vec4 unused_0_2[6];
						mat4x4 _EnvMatrix;
						vec4 unused_0_4[7];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_10[4];
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_15;
						vec4 _MainTex_ST;
						vec4 _FaceTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[13];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD6;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat4;
					float u_xlat8;
					int u_xlati8;
					vec2 u_xlat9;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z;
					    u_xlat12 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat9.x = floor(u_xlat12);
					    u_xlat9.y = (-u_xlat9.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat1.xy = u_xlat9.xy * _FaceTex_ST.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat8 = dot(in_NORMAL0.xyz, u_xlat1.xyz);
					    u_xlati12 = int((0.0<u_xlat8) ? 0xFFFFFFFFu : uint(0));
					    u_xlati8 = int((u_xlat8<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati8 = (-u_xlati12) + u_xlati8;
					    u_xlat8 = float(u_xlati8);
					    u_xlat1.xyz = vec3(u_xlat8) * in_NORMAL0.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, unity_WorldToObject[2].xyz);
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat2.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat8 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat4.x = u_xlat0.y * glstate_matrix_mvp[1].w;
					    u_xlat0.x = glstate_matrix_mvp[0].w * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = glstate_matrix_mvp[2].w * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_mvp[3].w * in_POSITION0.w + u_xlat0.x;
					    u_xlat4.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat4.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat4.xy;
					    u_xlat4.xy = u_xlat4.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat0.xy = u_xlat0.xx / u_xlat4.xy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat4.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat4.x = u_xlat0.x * 1.5;
					    u_xlat8 = (-_PerspectiveFilter) + 1.0;
					    u_xlat4.x = u_xlat8 * u_xlat4.x;
					    u_xlat0.x = u_xlat0.x * 1.5 + (-u_xlat4.x);
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat1.yzx, u_xlat3.xyz);
					    vs_TEXCOORD5.y = abs(u_xlat8) * u_xlat0.x + u_xlat4.x;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat4.x = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x + _WeightNormal;
					    u_xlat0.x = u_xlat0.x / _GradientScale;
					    u_xlat4.x = _FaceDilate * _ScaleRatioA;
					    vs_TEXCOORD5.x = u_xlat4.x * 0.5 + u_xlat0.x;
					    u_xlat0.xyz = u_xlat2.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyz = _EnvMatrix[0].xyz * u_xlat2.xxx + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = _EnvMatrix[2].xyz * u_xlat2.zzz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "GLOW_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _EnvMatrix;
					//   float _FaceDilate;
					//   float4 _FaceTex_ST;
					//   float _GradientScale;
					//   float4 _MainTex_ST;
					//   float _PerspectiveFilter;
					//   float _ScaleRatioA;
					//   float _ScaleX;
					//   float _ScaleY;
					//   float4 _ScreenParams;
					//   float _VertexOffsetX;
					//   float _VertexOffsetY;
					//   float _WeightBold;
					//   float _WeightNormal;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 glstate_matrix_projection;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   _EnvMatrix                 c10      3
					//   glstate_matrix_projection  c13      2
					//   _WorldSpaceCameraPos       c15      1
					//   _ScreenParams              c16      1
					//   unity_WorldTransformParams c17      1
					//   _FaceDilate                c18      1
					//   _WeightNormal              c19      1
					//   _WeightBold                c20      1
					//   _ScaleRatioA               c21      1
					//   _VertexOffsetX             c22      1
					//   _VertexOffsetY             c23      1
					//   _GradientScale             c24      1
					//   _ScaleX                    c25      1
					//   _ScaleY                    c26      1
					//   _PerspectiveFilter         c27      1
					//   _MainTex_ST                c28      1
					//   _FaceTex_ST                c29      1
					//
					
					    vs_3_0
					    def c30, 0, 1, 1.5, 0.5
					    def c31, 0.000244140625, 4096, 0.001953125, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_color v5
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_color o6
					    dcl_texcoord5 o7.xy
					    dcl_texcoord6 o8.xyz
					    dcl_texcoord7 o9.x
					    mov r0.xy, c30
					    mad r1, c15.xyzx, r0.yyyx, r0.xxxy
					    dp4 r2.x, c7, r1
					    dp4 r2.y, c8, r1
					    dp4 r2.z, c9, r1
					    add r1.x, c22.x, v0.x
					    add r1.y, c23.x, v0.y
					    mov r1.zw, v0
					    add r0.xzw, -r1.xyyz, r2.xyyz
					    dp3 r0.x, v2, r0.xzww
					    slt r0.z, -r0.x, r0.x
					    slt r0.x, r0.x, -r0.x
					    add r0.x, -r0.x, r0.z
					    mul r0.xzw, r0.x, v2.xyyz
					    mul r2.xyz, r0.z, c8.zxyw
					    mad r2.xyz, r0.x, c7.zxyw, r2
					    mad r0.xzw, r0.w, c9.zyxy, r2.xyyz
					    dp3 r2.x, r0.xzww, r0.xzww
					    rsq r2.x, r2.x
					    mul r0.xzw, r0, r2.x
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    add r3.xyz, -r2, c15
					    mov o5.xyz, r2
					    nrm r2.xyz, r3
					    dp3 r2.x, r0.zwxw, r2
					    dp4 r1.w, c3, r1
					    mad r4, r1.xyzx, c30.yyyx, c30.xxxy
					    mov r1.xy, c16
					    mul r2.yz, r1.xxyw, c13.xxyw
					    add r1.z, r2.z, r2.y
					    mul r1.z, r1.z, c25.x
					    rcp r5.x, r1.z
					    mul r1.xy, r1, c14
					    add r1.x, r1.y, r1.x
					    mul r1.x, r1.x, c26.x
					    rcp r5.y, r1.x
					    mul r1.xy, r1.w, r5
					    mul r1.xy, r1, r1
					    add r1.x, r1.y, r1.x
					    rsq r1.x, r1.x
					    mul r1.y, c24.x, v4_abs.y
					    mul r1.x, r1.x, r1.y
					    mul r1.y, r1.x, c30.z
					    add r0.y, r0.y, -c27.x
					    mul r0.y, r0.y, r1.y
					    mad r1.x, r1.x, c30.z, -r0.y
					    mad o7.y, r2_abs.x, r1.x, r0.y
					    sge r0.y, c30.x, v4.y
					    mov r1.x, c19.x
					    add r1.x, -r1.x, c20.x
					    mad r0.y, r0.y, r1.x, c19.x
					    mov r1.x, c18.x
					    mul r1.x, r1.x, c21.x
					    mul r1.x, r1.x, c30.w
					    rcp r1.y, c24.x
					    mad o7.x, r0.y, r1.y, r1.x
					    dp3 o8.x, c10, r3
					    dp3 o8.y, c11, r3
					    dp3 o8.z, c12, r3
					    dp4 r6.x, c0, r4
					    dp4 r6.y, c1, r4
					    dp4 r6.w, c3, r4
					    dp4 r0.y, c2, r4
					    mad o1.xy, v3, c28, c28.zwzw
					    mul r1.x, c31.x, v4.x
					    frc r1.y, r1.x
					    add r1.z, -r1.y, r1.x
					    mad r1.w, r1.z, -c31.y, v4.x
					    mul r1.xy, r1.zwzw, c29
					    mov r1.z, c31.z
					    mad o1.zw, r1.xyxy, r1.z, c29
					    mov r6.z, r0.y
					    mov o9.x, r0.y
					    dp3 r1.z, c4, v1
					    dp3 r1.x, c5, v1
					    dp3 r1.y, c6, v1
					    dp3 r0.y, r1, r1
					    rsq r0.y, r0.y
					    mul r1.xyz, r0.y, r1
					    mov o2.x, r1.z
					    mul r2.xyz, r0.xzww, r1
					    mad r2.xyz, r0.wxzw, r1.yzxw, -r2
					    mul r0.y, c17.w, v1.w
					    mul r2.xyz, r0.y, r2
					    mov o2.y, r2.x
					    mov o2.z, r0.z
					    mov o3.x, r1.x
					    mov o4.x, r1.y
					    mov o3.y, r2.y
					    mov o4.y, r2.z
					    mov o3.z, r0.w
					    mov o4.z, r0.x
					    mov o6, v5
					    mad o0.xy, r6.w, c255, r6
					    mov o0.zw, r6
					
					// approximately 99 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "GLOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						float _FaceDilate;
						vec4 unused_0_2[6];
						mat4x4 _EnvMatrix;
						vec4 unused_0_4[7];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_10[4];
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_15;
						vec4 _MainTex_ST;
						vec4 _FaceTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[13];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD6;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat4;
					float u_xlat8;
					int u_xlati8;
					vec2 u_xlat9;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z;
					    u_xlat12 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat9.x = floor(u_xlat12);
					    u_xlat9.y = (-u_xlat9.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat1.xy = u_xlat9.xy * _FaceTex_ST.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat8 = dot(in_NORMAL0.xyz, u_xlat1.xyz);
					    u_xlati12 = int((0.0<u_xlat8) ? 0xFFFFFFFFu : uint(0));
					    u_xlati8 = int((u_xlat8<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati8 = (-u_xlati12) + u_xlati8;
					    u_xlat8 = float(u_xlati8);
					    u_xlat1.xyz = vec3(u_xlat8) * in_NORMAL0.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, unity_WorldToObject[2].xyz);
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat2.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat8 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat4.x = u_xlat0.y * glstate_matrix_mvp[1].w;
					    u_xlat0.x = glstate_matrix_mvp[0].w * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = glstate_matrix_mvp[2].w * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_mvp[3].w * in_POSITION0.w + u_xlat0.x;
					    u_xlat4.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat4.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat4.xy;
					    u_xlat4.xy = u_xlat4.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat0.xy = u_xlat0.xx / u_xlat4.xy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat4.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat4.x = u_xlat0.x * 1.5;
					    u_xlat8 = (-_PerspectiveFilter) + 1.0;
					    u_xlat4.x = u_xlat8 * u_xlat4.x;
					    u_xlat0.x = u_xlat0.x * 1.5 + (-u_xlat4.x);
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat1.yzx, u_xlat3.xyz);
					    vs_TEXCOORD5.y = abs(u_xlat8) * u_xlat0.x + u_xlat4.x;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat4.x = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x + _WeightNormal;
					    u_xlat0.x = u_xlat0.x / _GradientScale;
					    u_xlat4.x = _FaceDilate * _ScaleRatioA;
					    vs_TEXCOORD5.x = u_xlat4.x * 0.5 + u_xlat0.x;
					    u_xlat0.xyz = u_xlat2.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyz = _EnvMatrix[0].xyz * u_xlat2.xxx + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = _EnvMatrix[2].xyz * u_xlat2.zzz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "SPOT" "FOG_EXP2" "GLOW_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _EnvMatrix;
					//   float _FaceDilate;
					//   float4 _FaceTex_ST;
					//   float _GradientScale;
					//   float4 _MainTex_ST;
					//   float _PerspectiveFilter;
					//   float _ScaleRatioA;
					//   float _ScaleX;
					//   float _ScaleY;
					//   float4 _ScreenParams;
					//   float _VertexOffsetX;
					//   float _VertexOffsetY;
					//   float _WeightBold;
					//   float _WeightNormal;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 glstate_matrix_projection;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   _EnvMatrix                 c10      3
					//   glstate_matrix_projection  c13      2
					//   _WorldSpaceCameraPos       c15      1
					//   _ScreenParams              c16      1
					//   unity_WorldTransformParams c17      1
					//   _FaceDilate                c18      1
					//   _WeightNormal              c19      1
					//   _WeightBold                c20      1
					//   _ScaleRatioA               c21      1
					//   _VertexOffsetX             c22      1
					//   _VertexOffsetY             c23      1
					//   _GradientScale             c24      1
					//   _ScaleX                    c25      1
					//   _ScaleY                    c26      1
					//   _PerspectiveFilter         c27      1
					//   _MainTex_ST                c28      1
					//   _FaceTex_ST                c29      1
					//
					
					    vs_3_0
					    def c30, 0, 1, 1.5, 0.5
					    def c31, 0.000244140625, 4096, 0.001953125, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_color v5
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_color o6
					    dcl_texcoord5 o7.xy
					    dcl_texcoord6 o8.xyz
					    dcl_texcoord7 o9.x
					    mov r0.xy, c30
					    mad r1, c15.xyzx, r0.yyyx, r0.xxxy
					    dp4 r2.x, c7, r1
					    dp4 r2.y, c8, r1
					    dp4 r2.z, c9, r1
					    add r1.x, c22.x, v0.x
					    add r1.y, c23.x, v0.y
					    mov r1.zw, v0
					    add r0.xzw, -r1.xyyz, r2.xyyz
					    dp3 r0.x, v2, r0.xzww
					    slt r0.z, -r0.x, r0.x
					    slt r0.x, r0.x, -r0.x
					    add r0.x, -r0.x, r0.z
					    mul r0.xzw, r0.x, v2.xyyz
					    mul r2.xyz, r0.z, c8.zxyw
					    mad r2.xyz, r0.x, c7.zxyw, r2
					    mad r0.xzw, r0.w, c9.zyxy, r2.xyyz
					    dp3 r2.x, r0.xzww, r0.xzww
					    rsq r2.x, r2.x
					    mul r0.xzw, r0, r2.x
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    add r3.xyz, -r2, c15
					    mov o5.xyz, r2
					    nrm r2.xyz, r3
					    dp3 r2.x, r0.zwxw, r2
					    dp4 r1.w, c3, r1
					    mad r4, r1.xyzx, c30.yyyx, c30.xxxy
					    mov r1.xy, c16
					    mul r2.yz, r1.xxyw, c13.xxyw
					    add r1.z, r2.z, r2.y
					    mul r1.z, r1.z, c25.x
					    rcp r5.x, r1.z
					    mul r1.xy, r1, c14
					    add r1.x, r1.y, r1.x
					    mul r1.x, r1.x, c26.x
					    rcp r5.y, r1.x
					    mul r1.xy, r1.w, r5
					    mul r1.xy, r1, r1
					    add r1.x, r1.y, r1.x
					    rsq r1.x, r1.x
					    mul r1.y, c24.x, v4_abs.y
					    mul r1.x, r1.x, r1.y
					    mul r1.y, r1.x, c30.z
					    add r0.y, r0.y, -c27.x
					    mul r0.y, r0.y, r1.y
					    mad r1.x, r1.x, c30.z, -r0.y
					    mad o7.y, r2_abs.x, r1.x, r0.y
					    sge r0.y, c30.x, v4.y
					    mov r1.x, c19.x
					    add r1.x, -r1.x, c20.x
					    mad r0.y, r0.y, r1.x, c19.x
					    mov r1.x, c18.x
					    mul r1.x, r1.x, c21.x
					    mul r1.x, r1.x, c30.w
					    rcp r1.y, c24.x
					    mad o7.x, r0.y, r1.y, r1.x
					    dp3 o8.x, c10, r3
					    dp3 o8.y, c11, r3
					    dp3 o8.z, c12, r3
					    dp4 r6.x, c0, r4
					    dp4 r6.y, c1, r4
					    dp4 r6.w, c3, r4
					    dp4 r0.y, c2, r4
					    mad o1.xy, v3, c28, c28.zwzw
					    mul r1.x, c31.x, v4.x
					    frc r1.y, r1.x
					    add r1.z, -r1.y, r1.x
					    mad r1.w, r1.z, -c31.y, v4.x
					    mul r1.xy, r1.zwzw, c29
					    mov r1.z, c31.z
					    mad o1.zw, r1.xyxy, r1.z, c29
					    mov r6.z, r0.y
					    mov o9.x, r0.y
					    dp3 r1.z, c4, v1
					    dp3 r1.x, c5, v1
					    dp3 r1.y, c6, v1
					    dp3 r0.y, r1, r1
					    rsq r0.y, r0.y
					    mul r1.xyz, r0.y, r1
					    mov o2.x, r1.z
					    mul r2.xyz, r0.xzww, r1
					    mad r2.xyz, r0.wxzw, r1.yzxw, -r2
					    mul r0.y, c17.w, v1.w
					    mul r2.xyz, r0.y, r2
					    mov o2.y, r2.x
					    mov o2.z, r0.z
					    mov o3.x, r1.x
					    mov o4.x, r1.y
					    mov o3.y, r2.y
					    mov o4.y, r2.z
					    mov o3.z, r0.w
					    mov o4.z, r0.x
					    mov o6, v5
					    mad o0.xy, r6.w, c255, r6
					    mov o0.zw, r6
					
					// approximately 99 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "FOG_EXP2" "GLOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						float _FaceDilate;
						vec4 unused_0_2[6];
						mat4x4 _EnvMatrix;
						vec4 unused_0_4[7];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_10[4];
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_15;
						vec4 _MainTex_ST;
						vec4 _FaceTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[13];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD6;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat4;
					float u_xlat8;
					int u_xlati8;
					vec2 u_xlat9;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z;
					    u_xlat12 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat9.x = floor(u_xlat12);
					    u_xlat9.y = (-u_xlat9.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat1.xy = u_xlat9.xy * _FaceTex_ST.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat8 = dot(in_NORMAL0.xyz, u_xlat1.xyz);
					    u_xlati12 = int((0.0<u_xlat8) ? 0xFFFFFFFFu : uint(0));
					    u_xlati8 = int((u_xlat8<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati8 = (-u_xlati12) + u_xlati8;
					    u_xlat8 = float(u_xlati8);
					    u_xlat1.xyz = vec3(u_xlat8) * in_NORMAL0.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, unity_WorldToObject[2].xyz);
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat2.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat8 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat4.x = u_xlat0.y * glstate_matrix_mvp[1].w;
					    u_xlat0.x = glstate_matrix_mvp[0].w * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = glstate_matrix_mvp[2].w * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_mvp[3].w * in_POSITION0.w + u_xlat0.x;
					    u_xlat4.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat4.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat4.xy;
					    u_xlat4.xy = u_xlat4.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat0.xy = u_xlat0.xx / u_xlat4.xy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat4.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat4.x = u_xlat0.x * 1.5;
					    u_xlat8 = (-_PerspectiveFilter) + 1.0;
					    u_xlat4.x = u_xlat8 * u_xlat4.x;
					    u_xlat0.x = u_xlat0.x * 1.5 + (-u_xlat4.x);
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat1.yzx, u_xlat3.xyz);
					    vs_TEXCOORD5.y = abs(u_xlat8) * u_xlat0.x + u_xlat4.x;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat4.x = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x + _WeightNormal;
					    u_xlat0.x = u_xlat0.x / _GradientScale;
					    u_xlat4.x = _FaceDilate * _ScaleRatioA;
					    vs_TEXCOORD5.x = u_xlat4.x * 0.5 + u_xlat0.x;
					    u_xlat0.xyz = u_xlat2.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyz = _EnvMatrix[0].xyz * u_xlat2.xxx + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = _EnvMatrix[2].xyz * u_xlat2.zzz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT_COOKIE" "FOG_EXP2" "GLOW_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _EnvMatrix;
					//   float _FaceDilate;
					//   float4 _FaceTex_ST;
					//   float _GradientScale;
					//   float4 _MainTex_ST;
					//   float _PerspectiveFilter;
					//   float _ScaleRatioA;
					//   float _ScaleX;
					//   float _ScaleY;
					//   float4 _ScreenParams;
					//   float _VertexOffsetX;
					//   float _VertexOffsetY;
					//   float _WeightBold;
					//   float _WeightNormal;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 glstate_matrix_projection;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   _EnvMatrix                 c10      3
					//   glstate_matrix_projection  c13      2
					//   _WorldSpaceCameraPos       c15      1
					//   _ScreenParams              c16      1
					//   unity_WorldTransformParams c17      1
					//   _FaceDilate                c18      1
					//   _WeightNormal              c19      1
					//   _WeightBold                c20      1
					//   _ScaleRatioA               c21      1
					//   _VertexOffsetX             c22      1
					//   _VertexOffsetY             c23      1
					//   _GradientScale             c24      1
					//   _ScaleX                    c25      1
					//   _ScaleY                    c26      1
					//   _PerspectiveFilter         c27      1
					//   _MainTex_ST                c28      1
					//   _FaceTex_ST                c29      1
					//
					
					    vs_3_0
					    def c30, 0, 1, 1.5, 0.5
					    def c31, 0.000244140625, 4096, 0.001953125, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_color v5
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_color o6
					    dcl_texcoord5 o7.xy
					    dcl_texcoord6 o8.xyz
					    dcl_texcoord7 o9.x
					    mov r0.xy, c30
					    mad r1, c15.xyzx, r0.yyyx, r0.xxxy
					    dp4 r2.x, c7, r1
					    dp4 r2.y, c8, r1
					    dp4 r2.z, c9, r1
					    add r1.x, c22.x, v0.x
					    add r1.y, c23.x, v0.y
					    mov r1.zw, v0
					    add r0.xzw, -r1.xyyz, r2.xyyz
					    dp3 r0.x, v2, r0.xzww
					    slt r0.z, -r0.x, r0.x
					    slt r0.x, r0.x, -r0.x
					    add r0.x, -r0.x, r0.z
					    mul r0.xzw, r0.x, v2.xyyz
					    mul r2.xyz, r0.z, c8.zxyw
					    mad r2.xyz, r0.x, c7.zxyw, r2
					    mad r0.xzw, r0.w, c9.zyxy, r2.xyyz
					    dp3 r2.x, r0.xzww, r0.xzww
					    rsq r2.x, r2.x
					    mul r0.xzw, r0, r2.x
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    add r3.xyz, -r2, c15
					    mov o5.xyz, r2
					    nrm r2.xyz, r3
					    dp3 r2.x, r0.zwxw, r2
					    dp4 r1.w, c3, r1
					    mad r4, r1.xyzx, c30.yyyx, c30.xxxy
					    mov r1.xy, c16
					    mul r2.yz, r1.xxyw, c13.xxyw
					    add r1.z, r2.z, r2.y
					    mul r1.z, r1.z, c25.x
					    rcp r5.x, r1.z
					    mul r1.xy, r1, c14
					    add r1.x, r1.y, r1.x
					    mul r1.x, r1.x, c26.x
					    rcp r5.y, r1.x
					    mul r1.xy, r1.w, r5
					    mul r1.xy, r1, r1
					    add r1.x, r1.y, r1.x
					    rsq r1.x, r1.x
					    mul r1.y, c24.x, v4_abs.y
					    mul r1.x, r1.x, r1.y
					    mul r1.y, r1.x, c30.z
					    add r0.y, r0.y, -c27.x
					    mul r0.y, r0.y, r1.y
					    mad r1.x, r1.x, c30.z, -r0.y
					    mad o7.y, r2_abs.x, r1.x, r0.y
					    sge r0.y, c30.x, v4.y
					    mov r1.x, c19.x
					    add r1.x, -r1.x, c20.x
					    mad r0.y, r0.y, r1.x, c19.x
					    mov r1.x, c18.x
					    mul r1.x, r1.x, c21.x
					    mul r1.x, r1.x, c30.w
					    rcp r1.y, c24.x
					    mad o7.x, r0.y, r1.y, r1.x
					    dp3 o8.x, c10, r3
					    dp3 o8.y, c11, r3
					    dp3 o8.z, c12, r3
					    dp4 r6.x, c0, r4
					    dp4 r6.y, c1, r4
					    dp4 r6.w, c3, r4
					    dp4 r0.y, c2, r4
					    mad o1.xy, v3, c28, c28.zwzw
					    mul r1.x, c31.x, v4.x
					    frc r1.y, r1.x
					    add r1.z, -r1.y, r1.x
					    mad r1.w, r1.z, -c31.y, v4.x
					    mul r1.xy, r1.zwzw, c29
					    mov r1.z, c31.z
					    mad o1.zw, r1.xyxy, r1.z, c29
					    mov r6.z, r0.y
					    mov o9.x, r0.y
					    dp3 r1.z, c4, v1
					    dp3 r1.x, c5, v1
					    dp3 r1.y, c6, v1
					    dp3 r0.y, r1, r1
					    rsq r0.y, r0.y
					    mul r1.xyz, r0.y, r1
					    mov o2.x, r1.z
					    mul r2.xyz, r0.xzww, r1
					    mad r2.xyz, r0.wxzw, r1.yzxw, -r2
					    mul r0.y, c17.w, v1.w
					    mul r2.xyz, r0.y, r2
					    mov o2.y, r2.x
					    mov o2.z, r0.z
					    mov o3.x, r1.x
					    mov o4.x, r1.y
					    mov o3.y, r2.y
					    mov o4.y, r2.z
					    mov o3.z, r0.w
					    mov o4.z, r0.x
					    mov o6, v5
					    mad o0.xy, r6.w, c255, r6
					    mov o0.zw, r6
					
					// approximately 99 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "FOG_EXP2" "GLOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						float _FaceDilate;
						vec4 unused_0_2[6];
						mat4x4 _EnvMatrix;
						vec4 unused_0_4[7];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_10[4];
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_15;
						vec4 _MainTex_ST;
						vec4 _FaceTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[13];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD6;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat4;
					float u_xlat8;
					int u_xlati8;
					vec2 u_xlat9;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z;
					    u_xlat12 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat9.x = floor(u_xlat12);
					    u_xlat9.y = (-u_xlat9.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat1.xy = u_xlat9.xy * _FaceTex_ST.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat8 = dot(in_NORMAL0.xyz, u_xlat1.xyz);
					    u_xlati12 = int((0.0<u_xlat8) ? 0xFFFFFFFFu : uint(0));
					    u_xlati8 = int((u_xlat8<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati8 = (-u_xlati12) + u_xlati8;
					    u_xlat8 = float(u_xlati8);
					    u_xlat1.xyz = vec3(u_xlat8) * in_NORMAL0.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, unity_WorldToObject[2].xyz);
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat2.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat8 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat4.x = u_xlat0.y * glstate_matrix_mvp[1].w;
					    u_xlat0.x = glstate_matrix_mvp[0].w * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = glstate_matrix_mvp[2].w * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_mvp[3].w * in_POSITION0.w + u_xlat0.x;
					    u_xlat4.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat4.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat4.xy;
					    u_xlat4.xy = u_xlat4.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat0.xy = u_xlat0.xx / u_xlat4.xy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat4.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat4.x = u_xlat0.x * 1.5;
					    u_xlat8 = (-_PerspectiveFilter) + 1.0;
					    u_xlat4.x = u_xlat8 * u_xlat4.x;
					    u_xlat0.x = u_xlat0.x * 1.5 + (-u_xlat4.x);
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat1.yzx, u_xlat3.xyz);
					    vs_TEXCOORD5.y = abs(u_xlat8) * u_xlat0.x + u_xlat4.x;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat4.x = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x + _WeightNormal;
					    u_xlat0.x = u_xlat0.x / _GradientScale;
					    u_xlat4.x = _FaceDilate * _ScaleRatioA;
					    vs_TEXCOORD5.x = u_xlat4.x * 0.5 + u_xlat0.x;
					    u_xlat0.xyz = u_xlat2.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyz = _EnvMatrix[0].xyz * u_xlat2.xxx + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = _EnvMatrix[2].xyz * u_xlat2.zzz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" "GLOW_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 _EnvMatrix;
					//   float _FaceDilate;
					//   float4 _FaceTex_ST;
					//   float _GradientScale;
					//   float4 _MainTex_ST;
					//   float _PerspectiveFilter;
					//   float _ScaleRatioA;
					//   float _ScaleX;
					//   float _ScaleY;
					//   float4 _ScreenParams;
					//   float _VertexOffsetX;
					//   float _VertexOffsetY;
					//   float _WeightBold;
					//   float _WeightNormal;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 glstate_matrix_projection;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   glstate_matrix_mvp         c0       4
					//   unity_ObjectToWorld        c4       3
					//   unity_WorldToObject        c7       3
					//   _EnvMatrix                 c10      3
					//   glstate_matrix_projection  c13      2
					//   _WorldSpaceCameraPos       c15      1
					//   _ScreenParams              c16      1
					//   unity_WorldTransformParams c17      1
					//   _FaceDilate                c18      1
					//   _WeightNormal              c19      1
					//   _WeightBold                c20      1
					//   _ScaleRatioA               c21      1
					//   _VertexOffsetX             c22      1
					//   _VertexOffsetY             c23      1
					//   _GradientScale             c24      1
					//   _ScaleX                    c25      1
					//   _ScaleY                    c26      1
					//   _PerspectiveFilter         c27      1
					//   _MainTex_ST                c28      1
					//   _FaceTex_ST                c29      1
					//
					
					    vs_3_0
					    def c30, 0, 1, 1.5, 0.5
					    def c31, 0.000244140625, 4096, 0.001953125, 0
					    dcl_position v0
					    dcl_tangent v1
					    dcl_normal v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_color v5
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2.xyz
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_color o6
					    dcl_texcoord5 o7.xy
					    dcl_texcoord6 o8.xyz
					    dcl_texcoord7 o9.x
					    mov r0.xy, c30
					    mad r1, c15.xyzx, r0.yyyx, r0.xxxy
					    dp4 r2.x, c7, r1
					    dp4 r2.y, c8, r1
					    dp4 r2.z, c9, r1
					    add r1.x, c22.x, v0.x
					    add r1.y, c23.x, v0.y
					    mov r1.zw, v0
					    add r0.xzw, -r1.xyyz, r2.xyyz
					    dp3 r0.x, v2, r0.xzww
					    slt r0.z, -r0.x, r0.x
					    slt r0.x, r0.x, -r0.x
					    add r0.x, -r0.x, r0.z
					    mul r0.xzw, r0.x, v2.xyyz
					    mul r2.xyz, r0.z, c8.zxyw
					    mad r2.xyz, r0.x, c7.zxyw, r2
					    mad r0.xzw, r0.w, c9.zyxy, r2.xyyz
					    dp3 r2.x, r0.xzww, r0.xzww
					    rsq r2.x, r2.x
					    mul r0.xzw, r0, r2.x
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    add r3.xyz, -r2, c15
					    mov o5.xyz, r2
					    nrm r2.xyz, r3
					    dp3 r2.x, r0.zwxw, r2
					    dp4 r1.w, c3, r1
					    mad r4, r1.xyzx, c30.yyyx, c30.xxxy
					    mov r1.xy, c16
					    mul r2.yz, r1.xxyw, c13.xxyw
					    add r1.z, r2.z, r2.y
					    mul r1.z, r1.z, c25.x
					    rcp r5.x, r1.z
					    mul r1.xy, r1, c14
					    add r1.x, r1.y, r1.x
					    mul r1.x, r1.x, c26.x
					    rcp r5.y, r1.x
					    mul r1.xy, r1.w, r5
					    mul r1.xy, r1, r1
					    add r1.x, r1.y, r1.x
					    rsq r1.x, r1.x
					    mul r1.y, c24.x, v4_abs.y
					    mul r1.x, r1.x, r1.y
					    mul r1.y, r1.x, c30.z
					    add r0.y, r0.y, -c27.x
					    mul r0.y, r0.y, r1.y
					    mad r1.x, r1.x, c30.z, -r0.y
					    mad o7.y, r2_abs.x, r1.x, r0.y
					    sge r0.y, c30.x, v4.y
					    mov r1.x, c19.x
					    add r1.x, -r1.x, c20.x
					    mad r0.y, r0.y, r1.x, c19.x
					    mov r1.x, c18.x
					    mul r1.x, r1.x, c21.x
					    mul r1.x, r1.x, c30.w
					    rcp r1.y, c24.x
					    mad o7.x, r0.y, r1.y, r1.x
					    dp3 o8.x, c10, r3
					    dp3 o8.y, c11, r3
					    dp3 o8.z, c12, r3
					    dp4 r6.x, c0, r4
					    dp4 r6.y, c1, r4
					    dp4 r6.w, c3, r4
					    dp4 r0.y, c2, r4
					    mad o1.xy, v3, c28, c28.zwzw
					    mul r1.x, c31.x, v4.x
					    frc r1.y, r1.x
					    add r1.z, -r1.y, r1.x
					    mad r1.w, r1.z, -c31.y, v4.x
					    mul r1.xy, r1.zwzw, c29
					    mov r1.z, c31.z
					    mad o1.zw, r1.xyxy, r1.z, c29
					    mov r6.z, r0.y
					    mov o9.x, r0.y
					    dp3 r1.z, c4, v1
					    dp3 r1.x, c5, v1
					    dp3 r1.y, c6, v1
					    dp3 r0.y, r1, r1
					    rsq r0.y, r0.y
					    mul r1.xyz, r0.y, r1
					    mov o2.x, r1.z
					    mul r2.xyz, r0.xzww, r1
					    mad r2.xyz, r0.wxzw, r1.yzxw, -r2
					    mul r0.y, c17.w, v1.w
					    mul r2.xyz, r0.y, r2
					    mov o2.y, r2.x
					    mov o2.z, r0.z
					    mov o3.x, r1.x
					    mov o4.x, r1.y
					    mov o3.y, r2.y
					    mov o4.y, r2.z
					    mov o3.z, r0.w
					    mov o4.z, r0.x
					    mov o6, v5
					    mad o0.xy, r6.w, c255, r6
					    mov o0.zw, r6
					
					// approximately 99 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" "GLOW_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[10];
						float _FaceDilate;
						vec4 unused_0_2[6];
						mat4x4 _EnvMatrix;
						vec4 unused_0_4[7];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_10[4];
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 unused_0_15;
						vec4 _MainTex_ST;
						vec4 _FaceTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[13];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TANGENT0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_COLOR0;
					out vec4 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD7;
					out vec3 vs_TEXCOORD6;
					vec3 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec2 u_xlat4;
					float u_xlat8;
					int u_xlati8;
					vec2 u_xlat9;
					float u_xlat12;
					int u_xlati12;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + glstate_matrix_mvp[3];
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z;
					    u_xlat12 = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat9.x = floor(u_xlat12);
					    u_xlat9.y = (-u_xlat9.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat1.xy = u_xlat9.xy * _FaceTex_ST.xy;
					    vs_TEXCOORD0.zw = u_xlat1.xy * vec2(0.001953125, 0.001953125) + _FaceTex_ST.zw;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1.xyz = _WorldSpaceCameraPos.yyy * unity_WorldToObject[1].xyz;
					    u_xlat1.xyz = unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToObject[3].xyz;
					    u_xlat0.z = in_POSITION0.z;
					    u_xlat1.xyz = (-u_xlat0.xyz) + u_xlat1.xyz;
					    u_xlat8 = dot(in_NORMAL0.xyz, u_xlat1.xyz);
					    u_xlati12 = int((0.0<u_xlat8) ? 0xFFFFFFFFu : uint(0));
					    u_xlati8 = int((u_xlat8<0.0) ? 0xFFFFFFFFu : uint(0));
					    u_xlati8 = (-u_xlati12) + u_xlati8;
					    u_xlat8 = float(u_xlati8);
					    u_xlat1.xyz = vec3(u_xlat8) * in_NORMAL0.xyz;
					    u_xlat2.y = dot(u_xlat1.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(u_xlat1.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(u_xlat1.xyz, unity_WorldToObject[2].xyz);
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat1.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat2.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat8 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
					    vs_TEXCOORD4.xyz = u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat4.x = u_xlat0.y * glstate_matrix_mvp[1].w;
					    u_xlat0.x = glstate_matrix_mvp[0].w * u_xlat0.x + u_xlat4.x;
					    u_xlat0.x = glstate_matrix_mvp[2].w * in_POSITION0.z + u_xlat0.x;
					    u_xlat0.x = glstate_matrix_mvp[3].w * in_POSITION0.w + u_xlat0.x;
					    u_xlat4.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat4.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat4.xy;
					    u_xlat4.xy = u_xlat4.xy * vec2(_ScaleX, _ScaleY);
					    u_xlat0.xy = u_xlat0.xx / u_xlat4.xy;
					    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat4.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x;
					    u_xlat4.x = u_xlat0.x * 1.5;
					    u_xlat8 = (-_PerspectiveFilter) + 1.0;
					    u_xlat4.x = u_xlat8 * u_xlat4.x;
					    u_xlat0.x = u_xlat0.x * 1.5 + (-u_xlat4.x);
					    u_xlat8 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8 = inversesqrt(u_xlat8);
					    u_xlat3.xyz = vec3(u_xlat8) * u_xlat2.xyz;
					    u_xlat8 = dot(u_xlat1.yzx, u_xlat3.xyz);
					    vs_TEXCOORD5.y = abs(u_xlat8) * u_xlat0.x + u_xlat4.x;
					    u_xlatb0 = 0.0>=in_TEXCOORD1.y;
					    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat4.x = (-_WeightNormal) + _WeightBold;
					    u_xlat0.x = u_xlat0.x * u_xlat4.x + _WeightNormal;
					    u_xlat0.x = u_xlat0.x / _GradientScale;
					    u_xlat4.x = _FaceDilate * _ScaleRatioA;
					    vs_TEXCOORD5.x = u_xlat4.x * 0.5 + u_xlat0.x;
					    u_xlat0.xyz = u_xlat2.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyz = _EnvMatrix[0].xyz * u_xlat2.xxx + u_xlat0.xyz;
					    vs_TEXCOORD6.xyz = _EnvMatrix[2].xyz * u_xlat2.zzz + u_xlat0.xyz;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					Keywords { "POINT" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Bevel;
					//   float _BevelClamp;
					//   float _BevelOffset;
					//   float _BevelRoundness;
					//   float _BevelWidth;
					//   float _BumpFace;
					//   sampler2D _BumpMap;
					//   float _BumpOutline;
					//   float4 _FaceColor;
					//   float _FaceShininess;
					//   sampler2D _FaceTex;
					//   float _FaceUVSpeedX;
					//   float _FaceUVSpeedY;
					//   float _GradientScale;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float4 _OutlineColor;
					//   float _OutlineShininess;
					//   float _OutlineSoftness;
					//   sampler2D _OutlineTex;
					//   float _OutlineUVSpeedX;
					//   float _OutlineUVSpeedY;
					//   float _OutlineWidth;
					//   float _ScaleRatioA;
					//   float _ShaderFlags;
					//   float4 _SpecColor;
					//   float _TextureHeight;
					//   float _TextureWidth;
					//   float4 _Time;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       3
					//   _Time                c3       1
					//   _WorldSpaceCameraPos c4       1
					//   _WorldSpaceLightPos0 c5       1
					//   _LightColor0         c6       1
					//   _SpecColor           c7       1
					//   _FaceUVSpeedX        c8       1
					//   _FaceUVSpeedY        c9       1
					//   _FaceColor           c10      1
					//   _OutlineSoftness     c11      1
					//   _OutlineUVSpeedX     c12      1
					//   _OutlineUVSpeedY     c13      1
					//   _OutlineColor        c14      1
					//   _OutlineWidth        c15      1
					//   _Bevel               c16      1
					//   _BevelOffset         c17      1
					//   _BevelWidth          c18      1
					//   _BevelClamp          c19      1
					//   _BevelRoundness      c20      1
					//   _BumpOutline         c21      1
					//   _BumpFace            c22      1
					//   _ShaderFlags         c23      1
					//   _ScaleRatioA         c24      1
					//   _TextureWidth        c25      1
					//   _TextureHeight       c26      1
					//   _GradientScale       c27      1
					//   _FaceShininess       c28      1
					//   _OutlineShininess    c29      1
					//   _LightTexture0       s0       1
					//   _FaceTex             s1       1
					//   _OutlineTex          s2       1
					//   _BumpMap             s3       1
					//   _MainTex             s4       1
					//
					
					    ps_3_0
					    def c30, 10000, 0.00999999978, 2, -1
					    def c31, 0.249999955, 0.25, 6.28318548, -3.14159274
					    def c32, -2.52398507e-007, 2.47609005e-005, -0.00138883968, 0.0416666418
					    def c33, 128, 0, 0, 0
					    def c34, 0, 0.5, 1, -9.99999975e-005
					    dcl_texcoord v0
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_color_pp v5
					    dcl_texcoord5 v6.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    add r0.x, c17.x, v6.x
					    rcp r1.x, c25.x
					    rcp r1.w, c26.x
					    mov r1.yz, c34.x
					    add r2, -r1, v0.xyxy
					    add r1, r1, v0.xyxy
					    texld r3, r2, s4
					    texld r2, r2.zwzw, s4
					    mov r2.z, r2.w
					    mov r2.x, r3.w
					    texld r3, r1, s4
					    texld r1, r1.zwzw, s4
					    mov r2.w, r1.w
					    mov r2.y, r3.w
					    add r0, r0.x, r2
					    mov r1.x, c15.x
					    add r1.y, r1.x, c18.x
					    max r2.x, c30.y, r1.y
					    rcp r1.y, r2.x
					    mul r1.z, r2.x, c16.x
					    mul r1.z, r1.z, c27.x
					    mul r1.z, r1.z, -c30.z
					    lrp_sat r2, r1.y, r0, c34.y
					    mad r0, r2, c30.z, c30.w
					    add r0, -r0_abs, c34.z
					    mov r3.yz, c34
					    mul r1.y, r3.y, c23.x
					    frc r1.y, r1_abs.y
					    cmp r1.y, c23.x, r1.y, -r1.y
					    add r1.y, r1.y, -c34.y
					    cmp r0, r1.y, r0, r2
					    mad r2, r0, c31.x, c31.y
					    frc r2, r2
					    mad r2, r2, c31.z, c31.w
					    mul r2, r2, r2
					    mad r4, r2, c32.x, c32.y
					    mad r4, r2, r4, c32.z
					    mad r4, r2, r4, c32.w
					    mad r4, r2, r4, -c34.y
					    mad r2, r2, r4, c34.z
					    lrp r4, c20.x, r2, r0
					    add r0.x, r3.z, -c19.x
					    min r2, r0.x, r4
					    mul r0.xy, r1.z, r2.xzzw
					    mad r0.xy, r2.ywzw, r1.z, -r0
					    mov r0.w, -c34.z
					    dp2add r1.y, r0.wyzw, r0.wyzw, c34.x
					    mul r2.xyz, r0.wyww, c34.zzxw
					    rsq r0.y, r1.y
					    mul r1.yzw, r0.y, r2.xxyz
					    mov r0.z, c34.z
					    dp2add r0.y, r0.zxzw, r0.zxzw, c34.x
					    rsq r0.y, r0.y
					    mul r2.x, r0.y, r0.x
					    mul r2.yz, r0.y, c34.xzxw
					    mul r0.xyz, r1.yzww, r2
					    mad r0.xyz, r2.zxyw, r1.zwyw, -r0
					    mov r1.y, c3.y
					    mad r2.x, c12.x, r1.y, v0.z
					    mad r2.y, c13.x, r1.y, v0.w
					    texld r2, r2, s2
					    mul_pp r2.xyz, r2, c14
					    mul r0.w, c14.w, v5.w
					    mul_pp r3.w, r2.w, r0.w
					    mul_pp r3.xyz, r2, r3.w
					    mad r2.x, c8.x, r1.y, v0.z
					    mad r2.y, c9.x, r1.y, v0.w
					    texld r2, r2, s1
					    mul r4, c10, v5
					    mul_pp r2, r2, r4
					    mul_pp r2.xyz, r2.w, r2
					    mul r0.w, r1.x, c24.x
					    mad r1.x, r0.w, -v6.y, c34.z
					    mul_pp r0.w, r0.w, v6.y
					    rsq r1.y, r0.w
					    rcp_pp r1.y, r1.y
					    cmp_pp r1.x, r1.x, r1.y, c34.z
					    texld r4, v0, s4
					    add r1.y, -r4.w, c34.y
					    add r1.y, r1.y, -v6.x
					    mad_pp r1.y, r1.y, v6.y, c34.y
					    mad_sat_pp r1.z, r0.w, c34.y, r1.y
					    mad_pp r0.w, r0.w, -c34.y, r1.y
					    mul_pp r1.x, r1.x, r1.z
					    lrp_pp r4, r1.x, r3, r2
					    mov r1.x, c24.x
					    mul r1.x, r1.x, c11.x
					    mul_pp r1.y, r1.x, v6.y
					    mad_pp r1.x, r1.x, v6.y, c34.z
					    rcp r1.x, r1.x
					    mad_pp r0.w, r1.y, c34.y, r0.w
					    mul_sat_pp r0.w, r1.x, r0.w
					    add_pp r0.w, -r0.w, c34.z
					    mul_pp r2, r0.w, r4
					    mad r0.w, r4.w, r0.w, c34.w
					    mov r1.x, c22.x
					    add r1.x, -r1.x, c21.x
					    mad r1.x, r1.z, r1.x, c22.x
					    texld_pp r3, v0.zwzw, s3
					    mad_pp r3.xy, r3.wyzw, c30.z, c30.w
					    dp2add_sat_pp r1.y, r3, r3, c34.x
					    add_pp r1.y, -r1.y, c34.z
					    rsq_pp r1.y, r1.y
					    rcp_pp r3.z, r1.y
					    mad r1.xyw, r3.xyzz, r1.x, -c34.xxzz
					    mad r1.xyw, r2.w, r1, c34.xxzz
					    add r0.xyz, r0, -r1.xyww
					    nrm_pp r3.xyz, r0
					    dp3_pp r0.x, v1, -r3
					    dp3_pp r0.y, v2, -r3
					    dp3_pp r0.z, v3, -r3
					    add r1.xyw, c4.xyzz, -v4.xyzz
					    dp3 r3.x, r1.xyww, r1.xyww
					    rsq r3.x, r3.x
					    add r3.yzw, c5.xxyz, -v4.xxyz
					    nrm_pp r4.xyz, r3.yzww
					    mad_pp r1.xyw, r1, r3.x, r4.xyzz
					    dp3_pp r3.x, r0, r4
					    max_pp r4.x, r3.x, c34.x
					    nrm_pp r3.xyz, r1.xyww
					    dp3_pp r0.x, r0, r3
					    max r1.x, r0.x, c34.x
					    mov r0.x, c28.x
					    add r0.x, -r0.x, c29.x
					    mad_pp r0.x, r1.z, r0.x, c28.x
					    mul r0.x, r0.x, c33.x
					    pow r3.x, r1.x, r0.x
					    mad r1, v4.xyzx, c34.zzzx, c34.xxxz
					    dp4 r0.x, c0, r1
					    dp4 r0.y, c1, r1
					    dp4 r0.z, c2, r1
					    dp3 r0.x, r0, r0
					    texld_pp r1, r0.x, s0
					    mul_pp r0.xyz, r1.x, c6
					    mul r1.xyz, r0, c7
					    mul r1.xyz, r3.x, r1
					    rcp r1.w, r2.w
					    cmp r0.w, r0.w, r1.w, c30.x
					    mul_pp r2.xyz, r0.w, r2
					    mov_pp oC0.w, r2.w
					    mul_pp r0.xyz, r0, r2
					    mad_pp oC0.xyz, r0, r4.x, r1
					
					// approximately 153 instruction slots used (9 texture, 144 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						float _FaceUVSpeedX;
						float _FaceUVSpeedY;
						vec4 _FaceColor;
						float _OutlineSoftness;
						float _OutlineUVSpeedX;
						float _OutlineUVSpeedY;
						vec4 _OutlineColor;
						float _OutlineWidth;
						float _Bevel;
						float _BevelOffset;
						float _BevelWidth;
						float _BevelClamp;
						float _BevelRoundness;
						float _BumpOutline;
						float _BumpFace;
						vec4 unused_0_19[14];
						float _ShaderFlags;
						float _ScaleRatioA;
						vec4 unused_0_22[4];
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _FaceShininess;
						float _OutlineShininess;
						vec4 unused_0_28[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _FaceTex;
					uniform  sampler2D _OutlineTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat7;
					float u_xlat8;
					float u_xlat10;
					bool u_xlatb11;
					float u_xlat13;
					float u_xlat15;
					float u_xlat17;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD5.x + _BevelOffset;
					    u_xlat1.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);
					    u_xlat1.z = 0.0;
					    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy).wxyz;
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.z = u_xlat2.w;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.w = u_xlat1.w;
					    u_xlat3.y = u_xlat2.w;
					    u_xlat0 = u_xlat0.xxxx + u_xlat3;
					    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat1.x = _BevelWidth + _OutlineWidth;
					    u_xlat1.x = max(u_xlat1.x, 0.00999999978);
					    u_xlat0 = u_xlat0 / u_xlat1.xxxx;
					    u_xlat1.x = u_xlat1.x * _Bevel;
					    u_xlat1.x = u_xlat1.x * _GradientScale;
					    u_xlat1.x = u_xlat1.x * -2.0;
					    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat6 = _ShaderFlags * 0.5;
					    u_xlatb11 = u_xlat6>=(-u_xlat6);
					    u_xlat6 = fract(abs(u_xlat6));
					    u_xlat6 = (u_xlatb11) ? u_xlat6 : (-u_xlat6);
					    u_xlatb6 = u_xlat6>=0.5;
					    u_xlat0 = (bool(u_xlatb6)) ? u_xlat2 : u_xlat0;
					    u_xlat2 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);
					    u_xlat2 = sin(u_xlat2);
					    u_xlat2 = (-u_xlat0) + u_xlat2;
					    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;
					    u_xlat6 = (-_BevelClamp) + 1.0;
					    u_xlat0 = min(u_xlat0, vec4(u_xlat6));
					    u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;
					    u_xlat0.yz = u_xlat0.wy * u_xlat1.xx + (-u_xlat0.zx);
					    u_xlat0.x = float(-1.0);
					    u_xlat0.w = float(1.0);
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat15 = dot(u_xlat0.zw, u_xlat0.zw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.x = u_xlat15 * u_xlat0.z;
					    u_xlat2.yz = vec2(u_xlat15) * vec2(1.0, 0.0);
					    u_xlat0.z = 0.0;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat1.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat1 = texture(_OutlineTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _OutlineColor.xyz;
					    u_xlat15 = vs_COLOR0.w * _OutlineColor.w;
					    u_xlat2.w = u_xlat1.w * u_xlat15;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.www;
					    u_xlat1.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat1 = texture(_FaceTex, u_xlat1.xy);
					    u_xlat3 = vs_COLOR0 * _FaceColor;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2 = (-u_xlat1) + u_xlat2;
					    u_xlat15 = _OutlineWidth * _ScaleRatioA;
					    u_xlat15 = u_xlat15 * vs_TEXCOORD5.y;
					    u_xlat3.x = min(u_xlat15, 1.0);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8 = (-u_xlat4.w) + 0.5;
					    u_xlat8 = u_xlat8 + (-vs_TEXCOORD5.x);
					    u_xlat8 = u_xlat8 * vs_TEXCOORD5.y + 0.5;
					    u_xlat13 = u_xlat15 * 0.5 + u_xlat8;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) * 0.5 + u_xlat8;
					    u_xlat3.x = u_xlat3.x * u_xlat13;
					    u_xlat1 = u_xlat3.xxxx * u_xlat2 + u_xlat1;
					    u_xlat2.x = _OutlineSoftness * _ScaleRatioA;
					    u_xlat7 = u_xlat2.x * vs_TEXCOORD5.y;
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD5.y + 1.0;
					    u_xlat15 = u_xlat7 * 0.5 + u_xlat15;
					    u_xlat15 = u_xlat15 / u_xlat2.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1 = vec4(u_xlat15) * u_xlat1;
					    u_xlat15 = (-_BumpFace) + _BumpOutline;
					    u_xlat15 = u_xlat13 * u_xlat15 + _BumpFace;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.zw);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat17 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat17 = min(u_xlat17, 1.0);
					    u_xlat17 = (-u_xlat17) + 1.0;
					    u_xlat2.z = sqrt(u_xlat17);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat15) + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.xyz = u_xlat1.www * u_xlat2.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, (-u_xlat0.xyz));
					    u_xlat2.y = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));
					    u_xlat2.z = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat3.xyw = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat3.xyw, u_xlat3.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyw = u_xlat3.xyw * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat5.x = dot(u_xlat3.xyw, u_xlat3.xyw);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat3.xyw;
					    u_xlat0.y = dot(u_xlat2.xyz, u_xlat5.xyz);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat5.x = log2(u_xlat0.y);
					    u_xlat10 = (-_FaceShininess) + _OutlineShininess;
					    u_xlat10 = u_xlat13 * u_xlat10 + _FaceShininess;
					    u_xlat10 = u_xlat10 * 128.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat5.x = exp2(u_xlat5.x);
					    u_xlat2.xyz = vs_TEXCOORD4.yyy * unity_WorldToLight[1].xyz;
					    u_xlat2.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_WorldToLight[3].xyz;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2 = texture(_LightTexture0, vec2(u_xlat10));
					    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * _SpecColor.xyz;
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat3.xyz;
					    u_xlat17 = max(u_xlat1.w, 9.99999975e-05);
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat17);
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat5.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Bevel;
					//   float _BevelClamp;
					//   float _BevelOffset;
					//   float _BevelRoundness;
					//   float _BevelWidth;
					//   float _BumpFace;
					//   sampler2D _BumpMap;
					//   float _BumpOutline;
					//   float4 _FaceColor;
					//   float _FaceShininess;
					//   sampler2D _FaceTex;
					//   float _FaceUVSpeedX;
					//   float _FaceUVSpeedY;
					//   float _GradientScale;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float4 _OutlineColor;
					//   float _OutlineShininess;
					//   float _OutlineSoftness;
					//   sampler2D _OutlineTex;
					//   float _OutlineUVSpeedX;
					//   float _OutlineUVSpeedY;
					//   float _OutlineWidth;
					//   float _ScaleRatioA;
					//   float _ShaderFlags;
					//   float4 _SpecColor;
					//   float _TextureHeight;
					//   float _TextureWidth;
					//   float4 _Time;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _Time                c0       1
					//   _WorldSpaceCameraPos c1       1
					//   _WorldSpaceLightPos0 c2       1
					//   _LightColor0         c3       1
					//   _SpecColor           c4       1
					//   _FaceUVSpeedX        c5       1
					//   _FaceUVSpeedY        c6       1
					//   _FaceColor           c7       1
					//   _OutlineSoftness     c8       1
					//   _OutlineUVSpeedX     c9       1
					//   _OutlineUVSpeedY     c10      1
					//   _OutlineColor        c11      1
					//   _OutlineWidth        c12      1
					//   _Bevel               c13      1
					//   _BevelOffset         c14      1
					//   _BevelWidth          c15      1
					//   _BevelClamp          c16      1
					//   _BevelRoundness      c17      1
					//   _BumpOutline         c18      1
					//   _BumpFace            c19      1
					//   _ShaderFlags         c20      1
					//   _ScaleRatioA         c21      1
					//   _TextureWidth        c22      1
					//   _TextureHeight       c23      1
					//   _GradientScale       c24      1
					//   _FaceShininess       c25      1
					//   _OutlineShininess    c26      1
					//   _FaceTex             s0       1
					//   _OutlineTex          s1       1
					//   _BumpMap             s2       1
					//   _MainTex             s3       1
					//
					
					    ps_3_0
					    def c27, 10000, 0.00999999978, 2, -1
					    def c28, 0.249999955, 0.25, 6.28318548, -3.14159274
					    def c29, -2.52398507e-007, 2.47609005e-005, -0.00138883968, 0.0416666418
					    def c30, 1, -1, 128, 0
					    def c31, 0, 0.5, 1, -9.99999975e-005
					    dcl_texcoord v0
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_color_pp v5
					    dcl_texcoord5 v6.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    add r0.x, c14.x, v6.x
					    rcp r1.x, c22.x
					    rcp r1.w, c23.x
					    mov r1.yz, c31.x
					    add r2, -r1, v0.xyxy
					    add r1, r1, v0.xyxy
					    texld r3, r2, s3
					    texld r2, r2.zwzw, s3
					    mov r2.z, r2.w
					    mov r2.x, r3.w
					    texld r3, r1, s3
					    texld r1, r1.zwzw, s3
					    mov r2.w, r1.w
					    mov r2.y, r3.w
					    add r0, r0.x, r2
					    mov r1.x, c12.x
					    add r1.y, r1.x, c15.x
					    max r2.x, c27.y, r1.y
					    rcp r1.y, r2.x
					    mul r1.z, r2.x, c13.x
					    mul r1.z, r1.z, c24.x
					    mul r1.z, r1.z, -c27.z
					    lrp_sat r2, r1.y, r0, c31.y
					    mad r0, r2, c27.z, c27.w
					    add r0, -r0_abs, c31.z
					    mov r3.yz, c31
					    mul r1.y, r3.y, c20.x
					    frc r1.y, r1_abs.y
					    cmp r1.y, c20.x, r1.y, -r1.y
					    add r1.y, r1.y, -c31.y
					    cmp r0, r1.y, r0, r2
					    mad r2, r0, c28.x, c28.y
					    frc r2, r2
					    mad r2, r2, c28.z, c28.w
					    mul r2, r2, r2
					    mad r4, r2, c29.x, c29.y
					    mad r4, r2, r4, c29.z
					    mad r4, r2, r4, c29.w
					    mad r4, r2, r4, -c31.y
					    mad r2, r2, r4, c31.z
					    lrp r4, c17.x, r2, r0
					    add r0.x, r3.z, -c16.x
					    min r2, r0.x, r4
					    mul r0.xy, r1.z, r2.xzzw
					    mad r0.xy, r2.ywzw, r1.z, -r0
					    mov r0.zw, c30.xyxy
					    dp2add r1.y, r0.wyzw, r0.wyzw, c31.x
					    rsq r1.y, r1.y
					    mul r2.xyz, r0.wyww, c31.zzxw
					    dp2add r0.y, r0.zxzw, r0.zxzw, c31.x
					    rsq r0.y, r0.y
					    mul r3.x, r0.y, r0.x
					    mul r3.yz, r0.y, c31.xzxw
					    mul r0.xyz, r1.y, r2
					    mul r1.yzw, r0.xxyz, r3.xxyz
					    mad r0.xyz, r3.zxyw, r0.yzxw, -r1.yzww
					    mov r1.y, c0.y
					    mad r2.x, c9.x, r1.y, v0.z
					    mad r2.y, c10.x, r1.y, v0.w
					    texld r2, r2, s1
					    mul_pp r2.xyz, r2, c11
					    mul r0.w, c11.w, v5.w
					    mul_pp r3.w, r2.w, r0.w
					    mul_pp r3.xyz, r2, r3.w
					    mad r2.x, c5.x, r1.y, v0.z
					    mad r2.y, c6.x, r1.y, v0.w
					    texld r2, r2, s0
					    mul r4, c7, v5
					    mul_pp r2, r2, r4
					    mul_pp r2.xyz, r2.w, r2
					    mul r0.w, r1.x, c21.x
					    mad r1.x, r0.w, -v6.y, c31.z
					    mul_pp r0.w, r0.w, v6.y
					    rsq r1.y, r0.w
					    rcp_pp r1.y, r1.y
					    cmp_pp r1.x, r1.x, r1.y, c31.z
					    texld r4, v0, s3
					    add r1.y, -r4.w, c31.y
					    add r1.y, r1.y, -v6.x
					    mad_pp r1.y, r1.y, v6.y, c31.y
					    mad_sat_pp r1.z, r0.w, c31.y, r1.y
					    mad_pp r0.w, r0.w, -c31.y, r1.y
					    mul_pp r1.x, r1.x, r1.z
					    lrp_pp r4, r1.x, r3, r2
					    mov r1.x, c21.x
					    mul r1.x, r1.x, c8.x
					    mul_pp r1.y, r1.x, v6.y
					    mad_pp r1.x, r1.x, v6.y, c31.z
					    rcp r1.x, r1.x
					    mad_pp r0.w, r1.y, c31.y, r0.w
					    mul_sat_pp r0.w, r1.x, r0.w
					    add_pp r0.w, -r0.w, c31.z
					    mul_pp r2, r0.w, r4
					    mad r0.w, r4.w, r0.w, c31.w
					    mov r1.x, c19.x
					    add r1.x, -r1.x, c18.x
					    mad r1.x, r1.z, r1.x, c19.x
					    texld_pp r3, v0.zwzw, s2
					    mad_pp r3.xy, r3.wyzw, c27.z, c27.w
					    dp2add_sat_pp r1.y, r3, r3, c31.x
					    add_pp r1.y, -r1.y, c31.z
					    rsq_pp r1.y, r1.y
					    rcp_pp r3.z, r1.y
					    mad r1.xyw, r3.xyzz, r1.x, -c31.xxzz
					    mad r1.xyw, r2.w, r1, c31.xxzz
					    add r0.xyz, r0, -r1.xyww
					    nrm_pp r3.xyz, r0
					    dp3_pp r0.x, v1, -r3
					    dp3_pp r0.y, v2, -r3
					    dp3_pp r0.z, v3, -r3
					    add r1.xyw, c1.xyzz, -v4.xyzz
					    dp3 r3.x, r1.xyww, r1.xyww
					    rsq r3.x, r3.x
					    mad_pp r1.xyw, r1, r3.x, c2.xyzz
					    nrm_pp r3.xyz, r1.xyww
					    dp3_pp r1.x, r0, r3
					    dp3_pp r0.x, r0, c2
					    max_pp r1.y, r0.x, c31.x
					    max r0.x, r1.x, c31.x
					    mov r1.x, c25.x
					    add r0.y, -r1.x, c26.x
					    mad_pp r0.y, r1.z, r0.y, c25.x
					    mul r0.y, r0.y, c30.z
					    pow r1.x, r0.x, r0.y
					    mov r0.xyz, c3
					    mul r0.xyz, r0, c4
					    mul r0.xyz, r1.x, r0
					    rcp r1.x, r2.w
					    cmp r0.w, r0.w, r1.x, c27.x
					    mul_pp r1.xzw, r0.w, r2.xyyz
					    mov_pp oC0.w, r2.w
					    mul_pp r1.xzw, r1, c3.xyyz
					    mad_pp oC0.xyz, r1.xzww, r1.y, r0
					
					// approximately 142 instruction slots used (8 texture, 134 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						float _FaceUVSpeedX;
						float _FaceUVSpeedY;
						vec4 _FaceColor;
						float _OutlineSoftness;
						float _OutlineUVSpeedX;
						float _OutlineUVSpeedY;
						vec4 _OutlineColor;
						float _OutlineWidth;
						float _Bevel;
						float _BevelOffset;
						float _BevelWidth;
						float _BevelClamp;
						float _BevelRoundness;
						float _BumpOutline;
						float _BumpFace;
						vec4 unused_0_18[14];
						float _ShaderFlags;
						float _ScaleRatioA;
						vec4 unused_0_21[4];
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _FaceShininess;
						float _OutlineShininess;
						vec4 unused_0_27[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _FaceTex;
					uniform  sampler2D _OutlineTex;
					uniform  sampler2D _BumpMap;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat7;
					float u_xlat8;
					float u_xlat10;
					bool u_xlatb11;
					float u_xlat13;
					float u_xlat15;
					float u_xlat17;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD5.x + _BevelOffset;
					    u_xlat1.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);
					    u_xlat1.z = 0.0;
					    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy).wxyz;
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.z = u_xlat2.w;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.w = u_xlat1.w;
					    u_xlat3.y = u_xlat2.w;
					    u_xlat0 = u_xlat0.xxxx + u_xlat3;
					    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat1.x = _BevelWidth + _OutlineWidth;
					    u_xlat1.x = max(u_xlat1.x, 0.00999999978);
					    u_xlat0 = u_xlat0 / u_xlat1.xxxx;
					    u_xlat1.x = u_xlat1.x * _Bevel;
					    u_xlat1.x = u_xlat1.x * _GradientScale;
					    u_xlat1.x = u_xlat1.x * -2.0;
					    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat6 = _ShaderFlags * 0.5;
					    u_xlatb11 = u_xlat6>=(-u_xlat6);
					    u_xlat6 = fract(abs(u_xlat6));
					    u_xlat6 = (u_xlatb11) ? u_xlat6 : (-u_xlat6);
					    u_xlatb6 = u_xlat6>=0.5;
					    u_xlat0 = (bool(u_xlatb6)) ? u_xlat2 : u_xlat0;
					    u_xlat2 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);
					    u_xlat2 = sin(u_xlat2);
					    u_xlat2 = (-u_xlat0) + u_xlat2;
					    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;
					    u_xlat6 = (-_BevelClamp) + 1.0;
					    u_xlat0 = min(u_xlat0, vec4(u_xlat6));
					    u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;
					    u_xlat0.yz = u_xlat0.wy * u_xlat1.xx + (-u_xlat0.zx);
					    u_xlat0.x = float(-1.0);
					    u_xlat0.w = float(1.0);
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat15 = dot(u_xlat0.zw, u_xlat0.zw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.x = u_xlat15 * u_xlat0.z;
					    u_xlat2.yz = vec2(u_xlat15) * vec2(1.0, 0.0);
					    u_xlat0.z = 0.0;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat1.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat1 = texture(_OutlineTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _OutlineColor.xyz;
					    u_xlat15 = vs_COLOR0.w * _OutlineColor.w;
					    u_xlat2.w = u_xlat1.w * u_xlat15;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.www;
					    u_xlat1.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat1 = texture(_FaceTex, u_xlat1.xy);
					    u_xlat3 = vs_COLOR0 * _FaceColor;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2 = (-u_xlat1) + u_xlat2;
					    u_xlat15 = _OutlineWidth * _ScaleRatioA;
					    u_xlat15 = u_xlat15 * vs_TEXCOORD5.y;
					    u_xlat3.x = min(u_xlat15, 1.0);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8 = (-u_xlat4.w) + 0.5;
					    u_xlat8 = u_xlat8 + (-vs_TEXCOORD5.x);
					    u_xlat8 = u_xlat8 * vs_TEXCOORD5.y + 0.5;
					    u_xlat13 = u_xlat15 * 0.5 + u_xlat8;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) * 0.5 + u_xlat8;
					    u_xlat3.x = u_xlat3.x * u_xlat13;
					    u_xlat1 = u_xlat3.xxxx * u_xlat2 + u_xlat1;
					    u_xlat2.x = _OutlineSoftness * _ScaleRatioA;
					    u_xlat7 = u_xlat2.x * vs_TEXCOORD5.y;
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD5.y + 1.0;
					    u_xlat15 = u_xlat7 * 0.5 + u_xlat15;
					    u_xlat15 = u_xlat15 / u_xlat2.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1 = vec4(u_xlat15) * u_xlat1;
					    u_xlat15 = (-_BumpFace) + _BumpOutline;
					    u_xlat15 = u_xlat13 * u_xlat15 + _BumpFace;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.zw);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat17 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat17 = min(u_xlat17, 1.0);
					    u_xlat17 = (-u_xlat17) + 1.0;
					    u_xlat2.z = sqrt(u_xlat17);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat15) + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.xyz = u_xlat1.www * u_xlat2.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, (-u_xlat0.xyz));
					    u_xlat2.y = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));
					    u_xlat2.z = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat10 = (-_FaceShininess) + _OutlineShininess;
					    u_xlat10 = u_xlat13 * u_xlat10 + _FaceShininess;
					    u_xlat10 = u_xlat10 * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat10;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.x = max(u_xlat1.w, 9.99999975e-05);
					    u_xlat1.xyz = u_xlat1.xyz / u_xlat2.xxx;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.yyy + u_xlat0.xzw;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "SPOT" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Bevel;
					//   float _BevelClamp;
					//   float _BevelOffset;
					//   float _BevelRoundness;
					//   float _BevelWidth;
					//   float _BumpFace;
					//   sampler2D _BumpMap;
					//   float _BumpOutline;
					//   float4 _FaceColor;
					//   float _FaceShininess;
					//   sampler2D _FaceTex;
					//   float _FaceUVSpeedX;
					//   float _FaceUVSpeedY;
					//   float _GradientScale;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float4 _OutlineColor;
					//   float _OutlineShininess;
					//   float _OutlineSoftness;
					//   sampler2D _OutlineTex;
					//   float _OutlineUVSpeedX;
					//   float _OutlineUVSpeedY;
					//   float _OutlineWidth;
					//   float _ScaleRatioA;
					//   float _ShaderFlags;
					//   float4 _SpecColor;
					//   float _TextureHeight;
					//   float _TextureWidth;
					//   float4 _Time;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       4
					//   _Time                c4       1
					//   _WorldSpaceCameraPos c5       1
					//   _WorldSpaceLightPos0 c6       1
					//   _LightColor0         c7       1
					//   _SpecColor           c8       1
					//   _FaceUVSpeedX        c9       1
					//   _FaceUVSpeedY        c10      1
					//   _FaceColor           c11      1
					//   _OutlineSoftness     c12      1
					//   _OutlineUVSpeedX     c13      1
					//   _OutlineUVSpeedY     c14      1
					//   _OutlineColor        c15      1
					//   _OutlineWidth        c16      1
					//   _Bevel               c17      1
					//   _BevelOffset         c18      1
					//   _BevelWidth          c19      1
					//   _BevelClamp          c20      1
					//   _BevelRoundness      c21      1
					//   _BumpOutline         c22      1
					//   _BumpFace            c23      1
					//   _ShaderFlags         c24      1
					//   _ScaleRatioA         c25      1
					//   _TextureWidth        c26      1
					//   _TextureHeight       c27      1
					//   _GradientScale       c28      1
					//   _FaceShininess       c29      1
					//   _OutlineShininess    c30      1
					//   _LightTexture0       s0       1
					//   _LightTextureB0      s1       1
					//   _FaceTex             s2       1
					//   _OutlineTex          s3       1
					//   _BumpMap             s4       1
					//   _MainTex             s5       1
					//
					
					    ps_3_0
					    def c31, 10000, 0.00999999978, 2, -1
					    def c32, 0.249999955, 0.25, 6.28318548, -3.14159274
					    def c33, -2.52398507e-007, 2.47609005e-005, -0.00138883968, 0.0416666418
					    def c34, 128, 0, 0, 0
					    def c35, 0, 0.5, 1, -9.99999975e-005
					    dcl_texcoord v0
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_color_pp v5
					    dcl_texcoord5 v6.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    add r0.x, c18.x, v6.x
					    rcp r1.x, c26.x
					    rcp r1.w, c27.x
					    mov r1.yz, c35.x
					    add r2, -r1, v0.xyxy
					    add r1, r1, v0.xyxy
					    texld r3, r2, s5
					    texld r2, r2.zwzw, s5
					    mov r2.z, r2.w
					    mov r2.x, r3.w
					    texld r3, r1, s5
					    texld r1, r1.zwzw, s5
					    mov r2.w, r1.w
					    mov r2.y, r3.w
					    add r0, r0.x, r2
					    mov r1.x, c16.x
					    add r1.y, r1.x, c19.x
					    max r2.x, c31.y, r1.y
					    rcp r1.y, r2.x
					    mul r1.z, r2.x, c17.x
					    mul r1.z, r1.z, c28.x
					    mul r1.z, r1.z, -c31.z
					    lrp_sat r2, r1.y, r0, c35.y
					    mad r0, r2, c31.z, c31.w
					    add r0, -r0_abs, c35.z
					    mov r3.yz, c35
					    mul r1.y, r3.y, c24.x
					    frc r1.y, r1_abs.y
					    cmp r1.y, c24.x, r1.y, -r1.y
					    add r1.y, r1.y, -c35.y
					    cmp r0, r1.y, r0, r2
					    mad r2, r0, c32.x, c32.y
					    frc r2, r2
					    mad r2, r2, c32.z, c32.w
					    mul r2, r2, r2
					    mad r4, r2, c33.x, c33.y
					    mad r4, r2, r4, c33.z
					    mad r4, r2, r4, c33.w
					    mad r4, r2, r4, -c35.y
					    mad r2, r2, r4, c35.z
					    lrp r4, c21.x, r2, r0
					    add r0.x, r3.z, -c20.x
					    min r2, r0.x, r4
					    mul r0.xy, r1.z, r2.xzzw
					    mad r0.xy, r2.ywzw, r1.z, -r0
					    mov r0.w, -c35.z
					    dp2add r1.y, r0.wyzw, r0.wyzw, c35.x
					    mul r2.xyz, r0.wyww, c35.zzxw
					    rsq r0.y, r1.y
					    mul r1.yzw, r0.y, r2.xxyz
					    mov r0.z, c35.z
					    dp2add r0.y, r0.zxzw, r0.zxzw, c35.x
					    rsq r0.y, r0.y
					    mul r2.x, r0.y, r0.x
					    mul r2.yz, r0.y, c35.xzxw
					    mul r0.xyz, r1.yzww, r2
					    mad r0.xyz, r2.zxyw, r1.zwyw, -r0
					    mov r1.y, c4.y
					    mad r2.x, c13.x, r1.y, v0.z
					    mad r2.y, c14.x, r1.y, v0.w
					    texld r2, r2, s3
					    mul_pp r2.xyz, r2, c15
					    mul r0.w, c15.w, v5.w
					    mul_pp r3.w, r2.w, r0.w
					    mul_pp r3.xyz, r2, r3.w
					    mad r2.x, c9.x, r1.y, v0.z
					    mad r2.y, c10.x, r1.y, v0.w
					    texld r2, r2, s2
					    mul r4, c11, v5
					    mul_pp r2, r2, r4
					    mul_pp r2.xyz, r2.w, r2
					    mul r0.w, r1.x, c25.x
					    mad r1.x, r0.w, -v6.y, c35.z
					    mul_pp r0.w, r0.w, v6.y
					    rsq r1.y, r0.w
					    rcp_pp r1.y, r1.y
					    cmp_pp r1.x, r1.x, r1.y, c35.z
					    texld r4, v0, s5
					    add r1.y, -r4.w, c35.y
					    add r1.y, r1.y, -v6.x
					    mad_pp r1.y, r1.y, v6.y, c35.y
					    mad_sat_pp r1.z, r0.w, c35.y, r1.y
					    mad_pp r0.w, r0.w, -c35.y, r1.y
					    mul_pp r1.x, r1.x, r1.z
					    lrp_pp r4, r1.x, r3, r2
					    mov r1.x, c25.x
					    mul r1.x, r1.x, c12.x
					    mul_pp r1.y, r1.x, v6.y
					    mad_pp r1.x, r1.x, v6.y, c35.z
					    rcp r1.x, r1.x
					    mad_pp r0.w, r1.y, c35.y, r0.w
					    mul_sat_pp r0.w, r1.x, r0.w
					    add_pp r0.w, -r0.w, c35.z
					    mul_pp r2, r0.w, r4
					    mad r0.w, r4.w, r0.w, c35.w
					    mov r1.x, c23.x
					    add r1.x, -r1.x, c22.x
					    mad r1.x, r1.z, r1.x, c23.x
					    texld_pp r3, v0.zwzw, s4
					    mad_pp r3.xy, r3.wyzw, c31.z, c31.w
					    dp2add_sat_pp r1.y, r3, r3, c35.x
					    add_pp r1.y, -r1.y, c35.z
					    rsq_pp r1.y, r1.y
					    rcp_pp r3.z, r1.y
					    mad r1.xyw, r3.xyzz, r1.x, -c35.xxzz
					    mad r1.xyw, r2.w, r1, c35.xxzz
					    add r0.xyz, r0, -r1.xyww
					    nrm_pp r3.xyz, r0
					    dp3_pp r0.x, v1, -r3
					    dp3_pp r0.y, v2, -r3
					    dp3_pp r0.z, v3, -r3
					    add r1.xyw, c5.xyzz, -v4.xyzz
					    dp3 r3.x, r1.xyww, r1.xyww
					    rsq r3.x, r3.x
					    add r3.yzw, c6.xxyz, -v4.xxyz
					    nrm_pp r4.xyz, r3.yzww
					    mad_pp r1.xyw, r1, r3.x, r4.xyzz
					    dp3_pp r3.x, r0, r4
					    max_pp r4.x, r3.x, c35.x
					    nrm_pp r3.xyz, r1.xyww
					    dp3_pp r0.x, r0, r3
					    max r1.x, r0.x, c35.x
					    mov r0.x, c29.x
					    add r0.x, -r0.x, c30.x
					    mad_pp r0.x, r1.z, r0.x, c29.x
					    mul r0.x, r0.x, c34.x
					    pow r3.x, r1.x, r0.x
					    mad r1, v4.xyzx, c35.zzzx, c35.xxxz
					    dp4 r0.x, c3, r1
					    rcp r0.x, r0.x
					    dp4 r5.x, c0, r1
					    dp4 r5.y, c1, r1
					    dp4 r5.z, c2, r1
					    mad r0.xy, r5, r0.x, c35.y
					    dp3 r0.z, r5, r5
					    texld_pp r1, r0.z, s1
					    texld_pp r6, r0, s0
					    mul r0.x, r1.x, r6.w
					    mul_pp r0.xyz, r0.x, c7
					    cmp_pp r0.xyz, -r5.z, c35.x, r0
					    mul r1.xyz, r0, c8
					    mul r1.xyz, r3.x, r1
					    rcp r1.w, r2.w
					    cmp r0.w, r0.w, r1.w, c31.x
					    mul_pp r2.xyz, r0.w, r2
					    mov_pp oC0.w, r2.w
					    mul_pp r0.xyz, r0, r2
					    mad_pp oC0.xyz, r0, r4.x, r1
					
					// approximately 159 instruction slots used (10 texture, 149 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						float _FaceUVSpeedX;
						float _FaceUVSpeedY;
						vec4 _FaceColor;
						float _OutlineSoftness;
						float _OutlineUVSpeedX;
						float _OutlineUVSpeedY;
						vec4 _OutlineColor;
						float _OutlineWidth;
						float _Bevel;
						float _BevelOffset;
						float _BevelWidth;
						float _BevelClamp;
						float _BevelRoundness;
						float _BumpOutline;
						float _BumpFace;
						vec4 unused_0_19[14];
						float _ShaderFlags;
						float _ScaleRatioA;
						vec4 unused_0_22[4];
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _FaceShininess;
						float _OutlineShininess;
						vec4 unused_0_28[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _FaceTex;
					uniform  sampler2D _OutlineTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat7;
					float u_xlat8;
					vec2 u_xlat10;
					bool u_xlatb10;
					bool u_xlatb11;
					float u_xlat13;
					float u_xlat15;
					float u_xlat17;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD5.x + _BevelOffset;
					    u_xlat1.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);
					    u_xlat1.z = 0.0;
					    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy).wxyz;
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.z = u_xlat2.w;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.w = u_xlat1.w;
					    u_xlat3.y = u_xlat2.w;
					    u_xlat0 = u_xlat0.xxxx + u_xlat3;
					    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat1.x = _BevelWidth + _OutlineWidth;
					    u_xlat1.x = max(u_xlat1.x, 0.00999999978);
					    u_xlat0 = u_xlat0 / u_xlat1.xxxx;
					    u_xlat1.x = u_xlat1.x * _Bevel;
					    u_xlat1.x = u_xlat1.x * _GradientScale;
					    u_xlat1.x = u_xlat1.x * -2.0;
					    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat6 = _ShaderFlags * 0.5;
					    u_xlatb11 = u_xlat6>=(-u_xlat6);
					    u_xlat6 = fract(abs(u_xlat6));
					    u_xlat6 = (u_xlatb11) ? u_xlat6 : (-u_xlat6);
					    u_xlatb6 = u_xlat6>=0.5;
					    u_xlat0 = (bool(u_xlatb6)) ? u_xlat2 : u_xlat0;
					    u_xlat2 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);
					    u_xlat2 = sin(u_xlat2);
					    u_xlat2 = (-u_xlat0) + u_xlat2;
					    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;
					    u_xlat6 = (-_BevelClamp) + 1.0;
					    u_xlat0 = min(u_xlat0, vec4(u_xlat6));
					    u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;
					    u_xlat0.yz = u_xlat0.wy * u_xlat1.xx + (-u_xlat0.zx);
					    u_xlat0.x = float(-1.0);
					    u_xlat0.w = float(1.0);
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat15 = dot(u_xlat0.zw, u_xlat0.zw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.x = u_xlat15 * u_xlat0.z;
					    u_xlat2.yz = vec2(u_xlat15) * vec2(1.0, 0.0);
					    u_xlat0.z = 0.0;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat1.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat1 = texture(_OutlineTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _OutlineColor.xyz;
					    u_xlat15 = vs_COLOR0.w * _OutlineColor.w;
					    u_xlat2.w = u_xlat1.w * u_xlat15;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.www;
					    u_xlat1.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat1 = texture(_FaceTex, u_xlat1.xy);
					    u_xlat3 = vs_COLOR0 * _FaceColor;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2 = (-u_xlat1) + u_xlat2;
					    u_xlat15 = _OutlineWidth * _ScaleRatioA;
					    u_xlat15 = u_xlat15 * vs_TEXCOORD5.y;
					    u_xlat3.x = min(u_xlat15, 1.0);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8 = (-u_xlat4.w) + 0.5;
					    u_xlat8 = u_xlat8 + (-vs_TEXCOORD5.x);
					    u_xlat8 = u_xlat8 * vs_TEXCOORD5.y + 0.5;
					    u_xlat13 = u_xlat15 * 0.5 + u_xlat8;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) * 0.5 + u_xlat8;
					    u_xlat3.x = u_xlat3.x * u_xlat13;
					    u_xlat1 = u_xlat3.xxxx * u_xlat2 + u_xlat1;
					    u_xlat2.x = _OutlineSoftness * _ScaleRatioA;
					    u_xlat7 = u_xlat2.x * vs_TEXCOORD5.y;
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD5.y + 1.0;
					    u_xlat15 = u_xlat7 * 0.5 + u_xlat15;
					    u_xlat15 = u_xlat15 / u_xlat2.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1 = vec4(u_xlat15) * u_xlat1;
					    u_xlat15 = (-_BumpFace) + _BumpOutline;
					    u_xlat15 = u_xlat13 * u_xlat15 + _BumpFace;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.zw);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat17 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat17 = min(u_xlat17, 1.0);
					    u_xlat17 = (-u_xlat17) + 1.0;
					    u_xlat2.z = sqrt(u_xlat17);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat15) + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.xyz = u_xlat1.www * u_xlat2.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, (-u_xlat0.xyz));
					    u_xlat2.y = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));
					    u_xlat2.z = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat3.xyw = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat3.xyw, u_xlat3.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyw = u_xlat3.xyw * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat5.x = dot(u_xlat3.xyw, u_xlat3.xyw);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat3.xyw;
					    u_xlat0.y = dot(u_xlat2.xyz, u_xlat5.xyz);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat5.x = log2(u_xlat0.y);
					    u_xlat10.x = (-_FaceShininess) + _OutlineShininess;
					    u_xlat10.x = u_xlat13 * u_xlat10.x + _FaceShininess;
					    u_xlat10.x = u_xlat10.x * 128.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10.x;
					    u_xlat5.x = exp2(u_xlat5.x);
					    u_xlat2 = vs_TEXCOORD4.yyyy * unity_WorldToLight[1];
					    u_xlat2 = unity_WorldToLight[0] * vs_TEXCOORD4.xxxx + u_xlat2;
					    u_xlat2 = unity_WorldToLight[2] * vs_TEXCOORD4.zzzz + u_xlat2;
					    u_xlat2 = u_xlat2 + unity_WorldToLight[3];
					    u_xlat10.xy = u_xlat2.xy / u_xlat2.ww;
					    u_xlat10.xy = u_xlat10.xy + vec2(0.5, 0.5);
					    u_xlat3 = texture(_LightTexture0, u_xlat10.xy);
					    u_xlatb10 = 0.0<u_xlat2.z;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat15));
					    u_xlat10.x = u_xlatb10 ? 1.0 : float(0.0);
					    u_xlat10.x = u_xlat3.w * u_xlat10.x;
					    u_xlat10.x = u_xlat2.x * u_xlat10.x;
					    u_xlat2.xyz = u_xlat10.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * _SpecColor.xyz;
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat3.xyz;
					    u_xlat17 = max(u_xlat1.w, 9.99999975e-05);
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat17);
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat5.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT_COOKIE" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Bevel;
					//   float _BevelClamp;
					//   float _BevelOffset;
					//   float _BevelRoundness;
					//   float _BevelWidth;
					//   float _BumpFace;
					//   sampler2D _BumpMap;
					//   float _BumpOutline;
					//   float4 _FaceColor;
					//   float _FaceShininess;
					//   sampler2D _FaceTex;
					//   float _FaceUVSpeedX;
					//   float _FaceUVSpeedY;
					//   float _GradientScale;
					//   float4 _LightColor0;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float4 _OutlineColor;
					//   float _OutlineShininess;
					//   float _OutlineSoftness;
					//   sampler2D _OutlineTex;
					//   float _OutlineUVSpeedX;
					//   float _OutlineUVSpeedY;
					//   float _OutlineWidth;
					//   float _ScaleRatioA;
					//   float _ShaderFlags;
					//   float4 _SpecColor;
					//   float _TextureHeight;
					//   float _TextureWidth;
					//   float4 _Time;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       3
					//   _Time                c3       1
					//   _WorldSpaceCameraPos c4       1
					//   _WorldSpaceLightPos0 c5       1
					//   _LightColor0         c6       1
					//   _SpecColor           c7       1
					//   _FaceUVSpeedX        c8       1
					//   _FaceUVSpeedY        c9       1
					//   _FaceColor           c10      1
					//   _OutlineSoftness     c11      1
					//   _OutlineUVSpeedX     c12      1
					//   _OutlineUVSpeedY     c13      1
					//   _OutlineColor        c14      1
					//   _OutlineWidth        c15      1
					//   _Bevel               c16      1
					//   _BevelOffset         c17      1
					//   _BevelWidth          c18      1
					//   _BevelClamp          c19      1
					//   _BevelRoundness      c20      1
					//   _BumpOutline         c21      1
					//   _BumpFace            c22      1
					//   _ShaderFlags         c23      1
					//   _ScaleRatioA         c24      1
					//   _TextureWidth        c25      1
					//   _TextureHeight       c26      1
					//   _GradientScale       c27      1
					//   _FaceShininess       c28      1
					//   _OutlineShininess    c29      1
					//   _LightTexture0       s0       1
					//   _LightTextureB0      s1       1
					//   _FaceTex             s2       1
					//   _OutlineTex          s3       1
					//   _BumpMap             s4       1
					//   _MainTex             s5       1
					//
					
					    ps_3_0
					    def c30, 10000, 0.00999999978, 2, -1
					    def c31, 0.249999955, 0.25, 6.28318548, -3.14159274
					    def c32, -2.52398507e-007, 2.47609005e-005, -0.00138883968, 0.0416666418
					    def c33, 128, 0, 0, 0
					    def c34, 0, 0.5, 1, -9.99999975e-005
					    dcl_texcoord v0
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_color_pp v5
					    dcl_texcoord5 v6.xy
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    add r0.x, c17.x, v6.x
					    rcp r1.x, c25.x
					    rcp r1.w, c26.x
					    mov r1.yz, c34.x
					    add r2, -r1, v0.xyxy
					    add r1, r1, v0.xyxy
					    texld r3, r2, s5
					    texld r2, r2.zwzw, s5
					    mov r2.z, r2.w
					    mov r2.x, r3.w
					    texld r3, r1, s5
					    texld r1, r1.zwzw, s5
					    mov r2.w, r1.w
					    mov r2.y, r3.w
					    add r0, r0.x, r2
					    mov r1.x, c15.x
					    add r1.y, r1.x, c18.x
					    max r2.x, c30.y, r1.y
					    rcp r1.y, r2.x
					    mul r1.z, r2.x, c16.x
					    mul r1.z, r1.z, c27.x
					    mul r1.z, r1.z, -c30.z
					    lrp_sat r2, r1.y, r0, c34.y
					    mad r0, r2, c30.z, c30.w
					    add r0, -r0_abs, c34.z
					    mov r3.yz, c34
					    mul r1.y, r3.y, c23.x
					    frc r1.y, r1_abs.y
					    cmp r1.y, c23.x, r1.y, -r1.y
					    add r1.y, r1.y, -c34.y
					    cmp r0, r1.y, r0, r2
					    mad r2, r0, c31.x, c31.y
					    frc r2, r2
					    mad r2, r2, c31.z, c31.w
					    mul r2, r2, r2
					    mad r4, r2, c32.x, c32.y
					    mad r4, r2, r4, c32.z
					    mad r4, r2, r4, c32.w
					    mad r4, r2, r4, -c34.y
					    mad r2, r2, r4, c34.z
					    lrp r4, c20.x, r2, r0
					    add r0.x, r3.z, -c19.x
					    min r2, r0.x, r4
					    mul r0.xy, r1.z, r2.xzzw
					    mad r0.xy, r2.ywzw, r1.z, -r0
					    mov r0.w, -c34.z
					    dp2add r1.y, r0.wyzw, r0.wyzw, c34.x
					    mul r2.xyz, r0.wyww, c34.zzxw
					    rsq r0.y, r1.y
					    mul r1.yzw, r0.y, r2.xxyz
					    mov r0.z, c34.z
					    dp2add r0.y, r0.zxzw, r0.zxzw, c34.x
					    rsq r0.y, r0.y
					    mul r2.x, r0.y, r0.x
					    mul r2.yz, r0.y, c34.xzxw
					    mul r0.xyz, r1.yzww, r2
					    mad r0.xyz, r2.zxyw, r1.zwyw, -r0
					    mov r1.y, c3.y
					    mad r2.x, c12.x, r1.y, v0.z
					    mad r2.y, c13.x, r1.y, v0.w
					    texld r2, r2, s3
					    mul_pp r2.xyz, r2, c14
					    mul r0.w, c14.w, v5.w
					    mul_pp r3.w, r2.w, r0.w
					    mul_pp r3.xyz, r2, r3.w
					    mad r2.x, c8.x, r1.y, v0.z
					    mad r2.y, c9.x, r1.y, v0.w
					    texld r2, r2, s2
					    mul r4, c10, v5
					    mul_pp r2, r2, r4
					    mul_pp r2.xyz, r2.w, r2
					    mul r0.w, r1.x, c24.x
					    mad r1.x, r0.w, -v6.y, c34.z
					    mul_pp r0.w, r0.w, v6.y
					    rsq r1.y, r0.w
					    rcp_pp r1.y, r1.y
					    cmp_pp r1.x, r1.x, r1.y, c34.z
					    texld r4, v0, s5
					    add r1.y, -r4.w, c34.y
					    add r1.y, r1.y, -v6.x
					    mad_pp r1.y, r1.y, v6.y, c34.y
					    mad_sat_pp r1.z, r0.w, c34.y, r1.y
					    mad_pp r0.w, r0.w, -c34.y, r1.y
					    mul_pp r1.x, r1.x, r1.z
					    lrp_pp r4, r1.x, r3, r2
					    mov r1.x, c24.x
					    mul r1.x, r1.x, c11.x
					    mul_pp r1.y, r1.x, v6.y
					    mad_pp r1.x, r1.x, v6.y, c34.z
					    rcp r1.x, r1.x
					    mad_pp r0.w, r1.y, c34.y, r0.w
					    mul_sat_pp r0.w, r1.x, r0.w
					    add_pp r0.w, -r0.w, c34.z
					    mul_pp r2, r0.w, r4
					    mad r0.w, r4.w, r0.w, c34.w
					    mov r1.x, c22.x
					    add r1.x, -r1.x, c21.x
					    mad r1.x, r1.z, r1.x, c22.x
					    texld_pp r3, v0.zwzw, s4
					    mad_pp r3.xy, r3.wyzw, c30.z, c30.w
					    dp2add_sat_pp r1.y, r3, r3, c34.x
					    add_pp r1.y, -r1.y, c34.z
					    rsq_pp r1.y, r1.y
					    rcp_pp r3.z, r1.y
					    mad r1.xyw, r3.xyzz, r1.x, -c34.xxzz
					    mad r1.xyw, r2.w, r1, c34.xxzz
					    add r0.xyz, r0, -r1.xyww
					    nrm_pp r3.xyz, r0
					    dp3_pp r0.x, v1, -r3
					    dp3_pp r0.y, v2, -r3
					    dp3_pp r0.z, v3, -r3
					    add r1.xyw, c4.xyzz, -v4.xyzz
					    dp3 r3.x, r1.xyww, r1.xyww
					    rsq r3.x, r3.x
					    add r3.yzw, c5.xxyz, -v4.xxyz
					    nrm_pp r4.xyz, r3.yzww
					    mad_pp r1.xyw, r1, r3.x, r4.xyzz
					    dp3_pp r3.x, r0, r4
					    max_pp r4.x, r3.x, c34.x
					    nrm_pp r3.xyz, r1.xyww
					    dp3_pp r0.x, r0, r3
					    max r1.x, r0.x, c34.x
					    mov r0.x, c28.x
					    add r0.x, -r0.x, c29.x
					    mad_pp r0.x, r1.z, r0.x, c28.x
					    mul r0.x, r0.x, c33.x
					    pow r3.x, r1.x, r0.x
					    mad r1, v4.xyzx, c34.zzzx, c34.xxxz
					    dp4 r0.x, c0, r1
					    dp4 r0.y, c1, r1
					    dp4 r0.z, c2, r1
					    dp3 r1.x, r0, r0
					    texld r5, r0, s0
					    texld r1, r1.x, s1
					    mul_pp r0.x, r5.w, r1.x
					    mul_pp r0.xyz, r0.x, c6
					    mul r1.xyz, r0, c7
					    mul r1.xyz, r3.x, r1
					    rcp r1.w, r2.w
					    cmp r0.w, r0.w, r1.w, c30.x
					    mul_pp r2.xyz, r0.w, r2
					    mov_pp oC0.w, r2.w
					    mul_pp r0.xyz, r0, r2
					    mad_pp oC0.xyz, r0, r4.x, r1
					
					// approximately 155 instruction slots used (10 texture, 145 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						float _FaceUVSpeedX;
						float _FaceUVSpeedY;
						vec4 _FaceColor;
						float _OutlineSoftness;
						float _OutlineUVSpeedX;
						float _OutlineUVSpeedY;
						vec4 _OutlineColor;
						float _OutlineWidth;
						float _Bevel;
						float _BevelOffset;
						float _BevelWidth;
						float _BevelClamp;
						float _BevelRoundness;
						float _BumpOutline;
						float _BumpFace;
						vec4 unused_0_19[14];
						float _ShaderFlags;
						float _ScaleRatioA;
						vec4 unused_0_22[4];
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _FaceShininess;
						float _OutlineShininess;
						vec4 unused_0_28[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _FaceTex;
					uniform  sampler2D _OutlineTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat7;
					float u_xlat8;
					float u_xlat10;
					bool u_xlatb11;
					float u_xlat13;
					float u_xlat15;
					float u_xlat17;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD5.x + _BevelOffset;
					    u_xlat1.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);
					    u_xlat1.z = 0.0;
					    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy).wxyz;
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.z = u_xlat2.w;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.w = u_xlat1.w;
					    u_xlat3.y = u_xlat2.w;
					    u_xlat0 = u_xlat0.xxxx + u_xlat3;
					    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat1.x = _BevelWidth + _OutlineWidth;
					    u_xlat1.x = max(u_xlat1.x, 0.00999999978);
					    u_xlat0 = u_xlat0 / u_xlat1.xxxx;
					    u_xlat1.x = u_xlat1.x * _Bevel;
					    u_xlat1.x = u_xlat1.x * _GradientScale;
					    u_xlat1.x = u_xlat1.x * -2.0;
					    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat6 = _ShaderFlags * 0.5;
					    u_xlatb11 = u_xlat6>=(-u_xlat6);
					    u_xlat6 = fract(abs(u_xlat6));
					    u_xlat6 = (u_xlatb11) ? u_xlat6 : (-u_xlat6);
					    u_xlatb6 = u_xlat6>=0.5;
					    u_xlat0 = (bool(u_xlatb6)) ? u_xlat2 : u_xlat0;
					    u_xlat2 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);
					    u_xlat2 = sin(u_xlat2);
					    u_xlat2 = (-u_xlat0) + u_xlat2;
					    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;
					    u_xlat6 = (-_BevelClamp) + 1.0;
					    u_xlat0 = min(u_xlat0, vec4(u_xlat6));
					    u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;
					    u_xlat0.yz = u_xlat0.wy * u_xlat1.xx + (-u_xlat0.zx);
					    u_xlat0.x = float(-1.0);
					    u_xlat0.w = float(1.0);
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat15 = dot(u_xlat0.zw, u_xlat0.zw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.x = u_xlat15 * u_xlat0.z;
					    u_xlat2.yz = vec2(u_xlat15) * vec2(1.0, 0.0);
					    u_xlat0.z = 0.0;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat1.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat1 = texture(_OutlineTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _OutlineColor.xyz;
					    u_xlat15 = vs_COLOR0.w * _OutlineColor.w;
					    u_xlat2.w = u_xlat1.w * u_xlat15;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.www;
					    u_xlat1.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat1 = texture(_FaceTex, u_xlat1.xy);
					    u_xlat3 = vs_COLOR0 * _FaceColor;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2 = (-u_xlat1) + u_xlat2;
					    u_xlat15 = _OutlineWidth * _ScaleRatioA;
					    u_xlat15 = u_xlat15 * vs_TEXCOORD5.y;
					    u_xlat3.x = min(u_xlat15, 1.0);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8 = (-u_xlat4.w) + 0.5;
					    u_xlat8 = u_xlat8 + (-vs_TEXCOORD5.x);
					    u_xlat8 = u_xlat8 * vs_TEXCOORD5.y + 0.5;
					    u_xlat13 = u_xlat15 * 0.5 + u_xlat8;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) * 0.5 + u_xlat8;
					    u_xlat3.x = u_xlat3.x * u_xlat13;
					    u_xlat1 = u_xlat3.xxxx * u_xlat2 + u_xlat1;
					    u_xlat2.x = _OutlineSoftness * _ScaleRatioA;
					    u_xlat7 = u_xlat2.x * vs_TEXCOORD5.y;
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD5.y + 1.0;
					    u_xlat15 = u_xlat7 * 0.5 + u_xlat15;
					    u_xlat15 = u_xlat15 / u_xlat2.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1 = vec4(u_xlat15) * u_xlat1;
					    u_xlat15 = (-_BumpFace) + _BumpOutline;
					    u_xlat15 = u_xlat13 * u_xlat15 + _BumpFace;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.zw);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat17 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat17 = min(u_xlat17, 1.0);
					    u_xlat17 = (-u_xlat17) + 1.0;
					    u_xlat2.z = sqrt(u_xlat17);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat15) + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.xyz = u_xlat1.www * u_xlat2.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, (-u_xlat0.xyz));
					    u_xlat2.y = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));
					    u_xlat2.z = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat3.xyw = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat3.xyw, u_xlat3.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyw = u_xlat3.xyw * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat5.x = dot(u_xlat3.xyw, u_xlat3.xyw);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat3.xyw;
					    u_xlat0.y = dot(u_xlat2.xyz, u_xlat5.xyz);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat5.x = log2(u_xlat0.y);
					    u_xlat10 = (-_FaceShininess) + _OutlineShininess;
					    u_xlat10 = u_xlat13 * u_xlat10 + _FaceShininess;
					    u_xlat10 = u_xlat10 * 128.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat5.x = exp2(u_xlat5.x);
					    u_xlat2.xyz = vs_TEXCOORD4.yyy * unity_WorldToLight[1].xyz;
					    u_xlat2.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_WorldToLight[3].xyz;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xyz);
					    u_xlat3 = texture(_LightTextureB0, vec2(u_xlat10));
					    u_xlat10 = u_xlat2.w * u_xlat3.x;
					    u_xlat2.xyz = vec3(u_xlat10) * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * _SpecColor.xyz;
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat3.xyz;
					    u_xlat17 = max(u_xlat1.w, 9.99999975e-05);
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat17);
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat5.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Bevel;
					//   float _BevelClamp;
					//   float _BevelOffset;
					//   float _BevelRoundness;
					//   float _BevelWidth;
					//   float _BumpFace;
					//   sampler2D _BumpMap;
					//   float _BumpOutline;
					//   float4 _FaceColor;
					//   float _FaceShininess;
					//   sampler2D _FaceTex;
					//   float _FaceUVSpeedX;
					//   float _FaceUVSpeedY;
					//   float _GradientScale;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float4 _OutlineColor;
					//   float _OutlineShininess;
					//   float _OutlineSoftness;
					//   sampler2D _OutlineTex;
					//   float _OutlineUVSpeedX;
					//   float _OutlineUVSpeedY;
					//   float _OutlineWidth;
					//   float _ScaleRatioA;
					//   float _ShaderFlags;
					//   float4 _SpecColor;
					//   float _TextureHeight;
					//   float _TextureWidth;
					//   float4 _Time;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       2
					//   _Time                c2       1
					//   _WorldSpaceCameraPos c3       1
					//   _WorldSpaceLightPos0 c4       1
					//   _LightColor0         c5       1
					//   _SpecColor           c6       1
					//   _FaceUVSpeedX        c7       1
					//   _FaceUVSpeedY        c8       1
					//   _FaceColor           c9       1
					//   _OutlineSoftness     c10      1
					//   _OutlineUVSpeedX     c11      1
					//   _OutlineUVSpeedY     c12      1
					//   _OutlineColor        c13      1
					//   _OutlineWidth        c14      1
					//   _Bevel               c15      1
					//   _BevelOffset         c16      1
					//   _BevelWidth          c17      1
					//   _BevelClamp          c18      1
					//   _BevelRoundness      c19      1
					//   _BumpOutline         c20      1
					//   _BumpFace            c21      1
					//   _ShaderFlags         c22      1
					//   _ScaleRatioA         c23      1
					//   _TextureWidth        c24      1
					//   _TextureHeight       c25      1
					//   _GradientScale       c26      1
					//   _FaceShininess       c27      1
					//   _OutlineShininess    c28      1
					//   _LightTexture0       s0       1
					//   _FaceTex             s1       1
					//   _OutlineTex          s2       1
					//   _BumpMap             s3       1
					//   _MainTex             s4       1
					//
					
					    ps_3_0
					    def c29, 10000, 0.00999999978, 2, -1
					    def c30, 0.249999955, 0.25, 6.28318548, -3.14159274
					    def c31, -2.52398507e-007, 2.47609005e-005, -0.00138883968, 0.0416666418
					    def c32, 128, 0, 0, 0
					    def c33, 0, 0.5, 1, -9.99999975e-005
					    dcl_texcoord v0
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_color_pp v5
					    dcl_texcoord5 v6.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    add r0.x, c16.x, v6.x
					    rcp r1.x, c24.x
					    rcp r1.w, c25.x
					    mov r1.yz, c33.x
					    add r2, -r1, v0.xyxy
					    add r1, r1, v0.xyxy
					    texld r3, r2, s4
					    texld r2, r2.zwzw, s4
					    mov r2.z, r2.w
					    mov r2.x, r3.w
					    texld r3, r1, s4
					    texld r1, r1.zwzw, s4
					    mov r2.w, r1.w
					    mov r2.y, r3.w
					    add r0, r0.x, r2
					    mov r1.x, c14.x
					    add r1.y, r1.x, c17.x
					    max r2.x, c29.y, r1.y
					    rcp r1.y, r2.x
					    mul r1.z, r2.x, c15.x
					    mul r1.z, r1.z, c26.x
					    mul r1.z, r1.z, -c29.z
					    lrp_sat r2, r1.y, r0, c33.y
					    mad r0, r2, c29.z, c29.w
					    add r0, -r0_abs, c33.z
					    mov r3.yz, c33
					    mul r1.y, r3.y, c22.x
					    frc r1.y, r1_abs.y
					    cmp r1.y, c22.x, r1.y, -r1.y
					    add r1.y, r1.y, -c33.y
					    cmp r0, r1.y, r0, r2
					    mad r2, r0, c30.x, c30.y
					    frc r2, r2
					    mad r2, r2, c30.z, c30.w
					    mul r2, r2, r2
					    mad r4, r2, c31.x, c31.y
					    mad r4, r2, r4, c31.z
					    mad r4, r2, r4, c31.w
					    mad r4, r2, r4, -c33.y
					    mad r2, r2, r4, c33.z
					    lrp r4, c19.x, r2, r0
					    add r0.x, r3.z, -c18.x
					    min r2, r0.x, r4
					    mul r0.xy, r1.z, r2.xzzw
					    mad r0.xy, r2.ywzw, r1.z, -r0
					    mov r0.w, -c33.z
					    dp2add r1.y, r0.wyzw, r0.wyzw, c33.x
					    mul r2.xyz, r0.wyww, c33.zzxw
					    rsq r0.y, r1.y
					    mul r1.yzw, r0.y, r2.xxyz
					    mov r0.z, c33.z
					    dp2add r0.y, r0.zxzw, r0.zxzw, c33.x
					    rsq r0.y, r0.y
					    mul r2.x, r0.y, r0.x
					    mul r2.yz, r0.y, c33.xzxw
					    mul r0.xyz, r1.yzww, r2
					    mad r0.xyz, r2.zxyw, r1.zwyw, -r0
					    mov r1.y, c2.y
					    mad r2.x, c11.x, r1.y, v0.z
					    mad r2.y, c12.x, r1.y, v0.w
					    texld r2, r2, s2
					    mul_pp r2.xyz, r2, c13
					    mul r0.w, c13.w, v5.w
					    mul_pp r3.w, r2.w, r0.w
					    mul_pp r3.xyz, r2, r3.w
					    mad r2.x, c7.x, r1.y, v0.z
					    mad r2.y, c8.x, r1.y, v0.w
					    texld r2, r2, s1
					    mul r4, c9, v5
					    mul_pp r2, r2, r4
					    mul_pp r2.xyz, r2.w, r2
					    mul r0.w, r1.x, c23.x
					    mad r1.x, r0.w, -v6.y, c33.z
					    mul_pp r0.w, r0.w, v6.y
					    rsq r1.y, r0.w
					    rcp_pp r1.y, r1.y
					    cmp_pp r1.x, r1.x, r1.y, c33.z
					    texld r4, v0, s4
					    add r1.y, -r4.w, c33.y
					    add r1.y, r1.y, -v6.x
					    mad_pp r1.y, r1.y, v6.y, c33.y
					    mad_sat_pp r1.z, r0.w, c33.y, r1.y
					    mad_pp r0.w, r0.w, -c33.y, r1.y
					    mul_pp r1.x, r1.x, r1.z
					    lrp_pp r4, r1.x, r3, r2
					    mov r1.x, c23.x
					    mul r1.x, r1.x, c10.x
					    mul_pp r1.y, r1.x, v6.y
					    mad_pp r1.x, r1.x, v6.y, c33.z
					    rcp r1.x, r1.x
					    mad_pp r0.w, r1.y, c33.y, r0.w
					    mul_sat_pp r0.w, r1.x, r0.w
					    add_pp r0.w, -r0.w, c33.z
					    mul_pp r2, r0.w, r4
					    mad r0.w, r4.w, r0.w, c33.w
					    mov r1.x, c21.x
					    add r1.x, -r1.x, c20.x
					    mad r1.x, r1.z, r1.x, c21.x
					    texld_pp r3, v0.zwzw, s3
					    mad_pp r3.xy, r3.wyzw, c29.z, c29.w
					    dp2add_sat_pp r1.y, r3, r3, c33.x
					    add_pp r1.y, -r1.y, c33.z
					    rsq_pp r1.y, r1.y
					    rcp_pp r3.z, r1.y
					    mad r1.xyw, r3.xyzz, r1.x, -c33.xxzz
					    mad r1.xyw, r2.w, r1, c33.xxzz
					    add r0.xyz, r0, -r1.xyww
					    nrm_pp r3.xyz, r0
					    dp3_pp r0.x, v1, -r3
					    dp3_pp r0.y, v2, -r3
					    dp3_pp r0.z, v3, -r3
					    add r1.xyw, c3.xyzz, -v4.xyzz
					    dp3 r3.x, r1.xyww, r1.xyww
					    rsq r3.x, r3.x
					    mad_pp r1.xyw, r1, r3.x, c4.xyzz
					    nrm_pp r3.xyz, r1.xyww
					    dp3_pp r1.x, r0, r3
					    dp3_pp r0.x, r0, c4
					    max_pp r1.y, r0.x, c33.x
					    max r0.x, r1.x, c33.x
					    mov r1.x, c27.x
					    add r0.y, -r1.x, c28.x
					    mad_pp r0.y, r1.z, r0.y, c27.x
					    mul r0.y, r0.y, c32.x
					    pow r1.x, r0.x, r0.y
					    mad r3, v4.xyzx, c33.zzzx, c33.xxxz
					    dp4 r0.x, c0, r3
					    dp4 r0.y, c1, r3
					    texld_pp r3, r0, s0
					    mul_pp r0.xyz, r3.w, c5
					    mul r3.xyz, r0, c6
					    mul r1.xzw, r1.x, r3.xyyz
					    rcp r3.x, r2.w
					    cmp r0.w, r0.w, r3.x, c29.x
					    mul_pp r2.xyz, r0.w, r2
					    mov_pp oC0.w, r2.w
					    mul_pp r0.xyz, r0, r2
					    mad_pp oC0.xyz, r0, r1.y, r1.xzww
					
					// approximately 147 instruction slots used (9 texture, 138 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						float _FaceUVSpeedX;
						float _FaceUVSpeedY;
						vec4 _FaceColor;
						float _OutlineSoftness;
						float _OutlineUVSpeedX;
						float _OutlineUVSpeedY;
						vec4 _OutlineColor;
						float _OutlineWidth;
						float _Bevel;
						float _BevelOffset;
						float _BevelWidth;
						float _BevelClamp;
						float _BevelRoundness;
						float _BumpOutline;
						float _BumpFace;
						vec4 unused_0_19[14];
						float _ShaderFlags;
						float _ScaleRatioA;
						vec4 unused_0_22[4];
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _FaceShininess;
						float _OutlineShininess;
						vec4 unused_0_28[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _FaceTex;
					uniform  sampler2D _OutlineTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat7;
					float u_xlat8;
					vec2 u_xlat10;
					bool u_xlatb11;
					float u_xlat13;
					float u_xlat15;
					float u_xlat17;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD5.x + _BevelOffset;
					    u_xlat1.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);
					    u_xlat1.z = 0.0;
					    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy).wxyz;
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.z = u_xlat2.w;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.w = u_xlat1.w;
					    u_xlat3.y = u_xlat2.w;
					    u_xlat0 = u_xlat0.xxxx + u_xlat3;
					    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat1.x = _BevelWidth + _OutlineWidth;
					    u_xlat1.x = max(u_xlat1.x, 0.00999999978);
					    u_xlat0 = u_xlat0 / u_xlat1.xxxx;
					    u_xlat1.x = u_xlat1.x * _Bevel;
					    u_xlat1.x = u_xlat1.x * _GradientScale;
					    u_xlat1.x = u_xlat1.x * -2.0;
					    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat6 = _ShaderFlags * 0.5;
					    u_xlatb11 = u_xlat6>=(-u_xlat6);
					    u_xlat6 = fract(abs(u_xlat6));
					    u_xlat6 = (u_xlatb11) ? u_xlat6 : (-u_xlat6);
					    u_xlatb6 = u_xlat6>=0.5;
					    u_xlat0 = (bool(u_xlatb6)) ? u_xlat2 : u_xlat0;
					    u_xlat2 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);
					    u_xlat2 = sin(u_xlat2);
					    u_xlat2 = (-u_xlat0) + u_xlat2;
					    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;
					    u_xlat6 = (-_BevelClamp) + 1.0;
					    u_xlat0 = min(u_xlat0, vec4(u_xlat6));
					    u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;
					    u_xlat0.yz = u_xlat0.wy * u_xlat1.xx + (-u_xlat0.zx);
					    u_xlat0.x = float(-1.0);
					    u_xlat0.w = float(1.0);
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat15 = dot(u_xlat0.zw, u_xlat0.zw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.x = u_xlat15 * u_xlat0.z;
					    u_xlat2.yz = vec2(u_xlat15) * vec2(1.0, 0.0);
					    u_xlat0.z = 0.0;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat1.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat1 = texture(_OutlineTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _OutlineColor.xyz;
					    u_xlat15 = vs_COLOR0.w * _OutlineColor.w;
					    u_xlat2.w = u_xlat1.w * u_xlat15;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.www;
					    u_xlat1.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat1 = texture(_FaceTex, u_xlat1.xy);
					    u_xlat3 = vs_COLOR0 * _FaceColor;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2 = (-u_xlat1) + u_xlat2;
					    u_xlat15 = _OutlineWidth * _ScaleRatioA;
					    u_xlat15 = u_xlat15 * vs_TEXCOORD5.y;
					    u_xlat3.x = min(u_xlat15, 1.0);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8 = (-u_xlat4.w) + 0.5;
					    u_xlat8 = u_xlat8 + (-vs_TEXCOORD5.x);
					    u_xlat8 = u_xlat8 * vs_TEXCOORD5.y + 0.5;
					    u_xlat13 = u_xlat15 * 0.5 + u_xlat8;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) * 0.5 + u_xlat8;
					    u_xlat3.x = u_xlat3.x * u_xlat13;
					    u_xlat1 = u_xlat3.xxxx * u_xlat2 + u_xlat1;
					    u_xlat2.x = _OutlineSoftness * _ScaleRatioA;
					    u_xlat7 = u_xlat2.x * vs_TEXCOORD5.y;
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD5.y + 1.0;
					    u_xlat15 = u_xlat7 * 0.5 + u_xlat15;
					    u_xlat15 = u_xlat15 / u_xlat2.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1 = vec4(u_xlat15) * u_xlat1;
					    u_xlat15 = (-_BumpFace) + _BumpOutline;
					    u_xlat15 = u_xlat13 * u_xlat15 + _BumpFace;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.zw);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat17 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat17 = min(u_xlat17, 1.0);
					    u_xlat17 = (-u_xlat17) + 1.0;
					    u_xlat2.z = sqrt(u_xlat17);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat15) + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.xyz = u_xlat1.www * u_xlat2.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, (-u_xlat0.xyz));
					    u_xlat2.y = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));
					    u_xlat2.z = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat10.x = (-_FaceShininess) + _OutlineShininess;
					    u_xlat10.x = u_xlat13 * u_xlat10.x + _FaceShininess;
					    u_xlat10.x = u_xlat10.x * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat10.xy = vs_TEXCOORD4.yy * unity_WorldToLight[1].xy;
					    u_xlat10.xy = unity_WorldToLight[0].xy * vs_TEXCOORD4.xx + u_xlat10.xy;
					    u_xlat10.xy = unity_WorldToLight[2].xy * vs_TEXCOORD4.zz + u_xlat10.xy;
					    u_xlat10.xy = u_xlat10.xy + unity_WorldToLight[3].xy;
					    u_xlat2 = texture(_LightTexture0, u_xlat10.xy);
					    u_xlat2.xyz = u_xlat2.www * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * _SpecColor.xyz;
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat17 = max(u_xlat1.w, 9.99999975e-05);
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat17);
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.yyy + u_xlat0.xzw;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Bevel;
					//   float _BevelClamp;
					//   float _BevelOffset;
					//   float _BevelRoundness;
					//   float _BevelWidth;
					//   float _BumpFace;
					//   sampler2D _BumpMap;
					//   float _BumpOutline;
					//   float4 _FaceColor;
					//   float _FaceShininess;
					//   sampler2D _FaceTex;
					//   float _FaceUVSpeedX;
					//   float _FaceUVSpeedY;
					//   float _GradientScale;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float4 _OutlineColor;
					//   float _OutlineShininess;
					//   float _OutlineSoftness;
					//   sampler2D _OutlineTex;
					//   float _OutlineUVSpeedX;
					//   float _OutlineUVSpeedY;
					//   float _OutlineWidth;
					//   float _ScaleRatioA;
					//   float _ShaderFlags;
					//   float4 _SpecColor;
					//   float _TextureHeight;
					//   float _TextureWidth;
					//   float4 _Time;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       3
					//   _Time                c3       1
					//   _WorldSpaceCameraPos c4       1
					//   _WorldSpaceLightPos0 c5       1
					//   unity_FogParams      c6       1
					//   _LightColor0         c7       1
					//   _SpecColor           c8       1
					//   _FaceUVSpeedX        c9       1
					//   _FaceUVSpeedY        c10      1
					//   _FaceColor           c11      1
					//   _OutlineSoftness     c12      1
					//   _OutlineUVSpeedX     c13      1
					//   _OutlineUVSpeedY     c14      1
					//   _OutlineColor        c15      1
					//   _OutlineWidth        c16      1
					//   _Bevel               c17      1
					//   _BevelOffset         c18      1
					//   _BevelWidth          c19      1
					//   _BevelClamp          c20      1
					//   _BevelRoundness      c21      1
					//   _BumpOutline         c22      1
					//   _BumpFace            c23      1
					//   _ShaderFlags         c24      1
					//   _ScaleRatioA         c25      1
					//   _TextureWidth        c26      1
					//   _TextureHeight       c27      1
					//   _GradientScale       c28      1
					//   _FaceShininess       c29      1
					//   _OutlineShininess    c30      1
					//   _LightTexture0       s0       1
					//   _FaceTex             s1       1
					//   _OutlineTex          s2       1
					//   _BumpMap             s3       1
					//   _MainTex             s4       1
					//
					
					    ps_3_0
					    def c31, 10000, 0.00999999978, 2, -1
					    def c32, 0.249999955, 0.25, 6.28318548, -3.14159274
					    def c33, -2.52398507e-007, 2.47609005e-005, -0.00138883968, 0.0416666418
					    def c34, 128, 0, 0, 0
					    def c35, 0, 0.5, 1, -9.99999975e-005
					    dcl_texcoord v0
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_color_pp v5
					    dcl_texcoord5 v6.xy
					    dcl_texcoord7 v7.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    add r0.x, c18.x, v6.x
					    rcp r1.x, c26.x
					    rcp r1.w, c27.x
					    mov r1.yz, c35.x
					    add r2, -r1, v0.xyxy
					    add r1, r1, v0.xyxy
					    texld r3, r2, s4
					    texld r2, r2.zwzw, s4
					    mov r2.z, r2.w
					    mov r2.x, r3.w
					    texld r3, r1, s4
					    texld r1, r1.zwzw, s4
					    mov r2.w, r1.w
					    mov r2.y, r3.w
					    add r0, r0.x, r2
					    mov r1.x, c16.x
					    add r1.y, r1.x, c19.x
					    max r2.x, c31.y, r1.y
					    rcp r1.y, r2.x
					    mul r1.z, r2.x, c17.x
					    mul r1.z, r1.z, c28.x
					    mul r1.z, r1.z, -c31.z
					    lrp_sat r2, r1.y, r0, c35.y
					    mad r0, r2, c31.z, c31.w
					    add r0, -r0_abs, c35.z
					    mov r3.yz, c35
					    mul r1.y, r3.y, c24.x
					    frc r1.y, r1_abs.y
					    cmp r1.y, c24.x, r1.y, -r1.y
					    add r1.y, r1.y, -c35.y
					    cmp r0, r1.y, r0, r2
					    mad r2, r0, c32.x, c32.y
					    frc r2, r2
					    mad r2, r2, c32.z, c32.w
					    mul r2, r2, r2
					    mad r4, r2, c33.x, c33.y
					    mad r4, r2, r4, c33.z
					    mad r4, r2, r4, c33.w
					    mad r4, r2, r4, -c35.y
					    mad r2, r2, r4, c35.z
					    lrp r4, c21.x, r2, r0
					    add r0.x, r3.z, -c20.x
					    min r2, r0.x, r4
					    mul r0.xy, r1.z, r2.xzzw
					    mad r0.xy, r2.ywzw, r1.z, -r0
					    mov r0.w, -c35.z
					    dp2add r1.y, r0.wyzw, r0.wyzw, c35.x
					    mul r2.xyz, r0.wyww, c35.zzxw
					    rsq r0.y, r1.y
					    mul r1.yzw, r0.y, r2.xxyz
					    mov r0.z, c35.z
					    dp2add r0.y, r0.zxzw, r0.zxzw, c35.x
					    rsq r0.y, r0.y
					    mul r2.x, r0.y, r0.x
					    mul r2.yz, r0.y, c35.xzxw
					    mul r0.xyz, r1.yzww, r2
					    mad r0.xyz, r2.zxyw, r1.zwyw, -r0
					    mov r1.y, c3.y
					    mad r2.x, c13.x, r1.y, v0.z
					    mad r2.y, c14.x, r1.y, v0.w
					    texld r2, r2, s2
					    mul_pp r2.xyz, r2, c15
					    mul r0.w, c15.w, v5.w
					    mul_pp r3.w, r2.w, r0.w
					    mul_pp r3.xyz, r2, r3.w
					    mad r2.x, c9.x, r1.y, v0.z
					    mad r2.y, c10.x, r1.y, v0.w
					    texld r2, r2, s1
					    mul r4, c11, v5
					    mul_pp r2, r2, r4
					    mul_pp r2.xyz, r2.w, r2
					    mul r0.w, r1.x, c25.x
					    mad r1.x, r0.w, -v6.y, c35.z
					    mul_pp r0.w, r0.w, v6.y
					    rsq r1.y, r0.w
					    rcp_pp r1.y, r1.y
					    cmp_pp r1.x, r1.x, r1.y, c35.z
					    texld r4, v0, s4
					    add r1.y, -r4.w, c35.y
					    add r1.y, r1.y, -v6.x
					    mad_pp r1.y, r1.y, v6.y, c35.y
					    mad_sat_pp r1.z, r0.w, c35.y, r1.y
					    mad_pp r0.w, r0.w, -c35.y, r1.y
					    mul_pp r1.x, r1.x, r1.z
					    lrp_pp r4, r1.x, r3, r2
					    mov r1.x, c25.x
					    mul r1.x, r1.x, c12.x
					    mul_pp r1.y, r1.x, v6.y
					    mad_pp r1.x, r1.x, v6.y, c35.z
					    rcp r1.x, r1.x
					    mad_pp r0.w, r1.y, c35.y, r0.w
					    mul_sat_pp r0.w, r1.x, r0.w
					    add_pp r0.w, -r0.w, c35.z
					    mul_pp r2, r0.w, r4
					    mad r0.w, r4.w, r0.w, c35.w
					    mov r1.x, c23.x
					    add r1.x, -r1.x, c22.x
					    mad r1.x, r1.z, r1.x, c23.x
					    texld_pp r3, v0.zwzw, s3
					    mad_pp r3.xy, r3.wyzw, c31.z, c31.w
					    dp2add_sat_pp r1.y, r3, r3, c35.x
					    add_pp r1.y, -r1.y, c35.z
					    rsq_pp r1.y, r1.y
					    rcp_pp r3.z, r1.y
					    mad r1.xyw, r3.xyzz, r1.x, -c35.xxzz
					    mad r1.xyw, r2.w, r1, c35.xxzz
					    add r0.xyz, r0, -r1.xyww
					    nrm_pp r3.xyz, r0
					    dp3_pp r0.x, v1, -r3
					    dp3_pp r0.y, v2, -r3
					    dp3_pp r0.z, v3, -r3
					    add r1.xyw, c4.xyzz, -v4.xyzz
					    dp3 r3.x, r1.xyww, r1.xyww
					    rsq r3.x, r3.x
					    add r3.yzw, c5.xxyz, -v4.xxyz
					    nrm_pp r4.xyz, r3.yzww
					    mad_pp r1.xyw, r1, r3.x, r4.xyzz
					    dp3_pp r3.x, r0, r4
					    max_pp r4.x, r3.x, c35.x
					    nrm_pp r3.xyz, r1.xyww
					    dp3_pp r0.x, r0, r3
					    max r1.x, r0.x, c35.x
					    mov r0.x, c29.x
					    add r0.x, -r0.x, c30.x
					    mad_pp r0.x, r1.z, r0.x, c29.x
					    mul r0.x, r0.x, c34.x
					    pow r3.x, r1.x, r0.x
					    mad r1, v4.xyzx, c35.zzzx, c35.xxxz
					    dp4 r0.x, c0, r1
					    dp4 r0.y, c1, r1
					    dp4 r0.z, c2, r1
					    dp3 r0.x, r0, r0
					    texld_pp r1, r0.x, s0
					    mul_pp r0.xyz, r1.x, c7
					    mul r1.xyz, r0, c8
					    mul r1.xyz, r3.x, r1
					    rcp r1.w, r2.w
					    cmp r0.w, r0.w, r1.w, c31.x
					    mul_pp r2.xyz, r0.w, r2
					    mov_pp oC0.w, r2.w
					    mul_pp r0.xyz, r0, r2
					    mad_pp r0.xyz, r0, r4.x, r1
					    mul r0.w, c6.x, v7.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 157 instruction slots used (9 texture, 148 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						float _FaceUVSpeedX;
						float _FaceUVSpeedY;
						vec4 _FaceColor;
						float _OutlineSoftness;
						float _OutlineUVSpeedX;
						float _OutlineUVSpeedY;
						vec4 _OutlineColor;
						float _OutlineWidth;
						float _Bevel;
						float _BevelOffset;
						float _BevelWidth;
						float _BevelClamp;
						float _BevelRoundness;
						float _BumpOutline;
						float _BumpFace;
						vec4 unused_0_19[14];
						float _ShaderFlags;
						float _ScaleRatioA;
						vec4 unused_0_22[4];
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _FaceShininess;
						float _OutlineShininess;
						vec4 unused_0_28[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _FaceTex;
					uniform  sampler2D _OutlineTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD5;
					in  float vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat7;
					float u_xlat8;
					float u_xlat10;
					bool u_xlatb11;
					float u_xlat13;
					float u_xlat15;
					float u_xlat17;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD5.x + _BevelOffset;
					    u_xlat1.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);
					    u_xlat1.z = 0.0;
					    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy).wxyz;
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.z = u_xlat2.w;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.w = u_xlat1.w;
					    u_xlat3.y = u_xlat2.w;
					    u_xlat0 = u_xlat0.xxxx + u_xlat3;
					    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat1.x = _BevelWidth + _OutlineWidth;
					    u_xlat1.x = max(u_xlat1.x, 0.00999999978);
					    u_xlat0 = u_xlat0 / u_xlat1.xxxx;
					    u_xlat1.x = u_xlat1.x * _Bevel;
					    u_xlat1.x = u_xlat1.x * _GradientScale;
					    u_xlat1.x = u_xlat1.x * -2.0;
					    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat6 = _ShaderFlags * 0.5;
					    u_xlatb11 = u_xlat6>=(-u_xlat6);
					    u_xlat6 = fract(abs(u_xlat6));
					    u_xlat6 = (u_xlatb11) ? u_xlat6 : (-u_xlat6);
					    u_xlatb6 = u_xlat6>=0.5;
					    u_xlat0 = (bool(u_xlatb6)) ? u_xlat2 : u_xlat0;
					    u_xlat2 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);
					    u_xlat2 = sin(u_xlat2);
					    u_xlat2 = (-u_xlat0) + u_xlat2;
					    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;
					    u_xlat6 = (-_BevelClamp) + 1.0;
					    u_xlat0 = min(u_xlat0, vec4(u_xlat6));
					    u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;
					    u_xlat0.yz = u_xlat0.wy * u_xlat1.xx + (-u_xlat0.zx);
					    u_xlat0.x = float(-1.0);
					    u_xlat0.w = float(1.0);
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat15 = dot(u_xlat0.zw, u_xlat0.zw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.x = u_xlat15 * u_xlat0.z;
					    u_xlat2.yz = vec2(u_xlat15) * vec2(1.0, 0.0);
					    u_xlat0.z = 0.0;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat1.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat1 = texture(_OutlineTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _OutlineColor.xyz;
					    u_xlat15 = vs_COLOR0.w * _OutlineColor.w;
					    u_xlat2.w = u_xlat1.w * u_xlat15;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.www;
					    u_xlat1.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat1 = texture(_FaceTex, u_xlat1.xy);
					    u_xlat3 = vs_COLOR0 * _FaceColor;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2 = (-u_xlat1) + u_xlat2;
					    u_xlat15 = _OutlineWidth * _ScaleRatioA;
					    u_xlat15 = u_xlat15 * vs_TEXCOORD5.y;
					    u_xlat3.x = min(u_xlat15, 1.0);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8 = (-u_xlat4.w) + 0.5;
					    u_xlat8 = u_xlat8 + (-vs_TEXCOORD5.x);
					    u_xlat8 = u_xlat8 * vs_TEXCOORD5.y + 0.5;
					    u_xlat13 = u_xlat15 * 0.5 + u_xlat8;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) * 0.5 + u_xlat8;
					    u_xlat3.x = u_xlat3.x * u_xlat13;
					    u_xlat1 = u_xlat3.xxxx * u_xlat2 + u_xlat1;
					    u_xlat2.x = _OutlineSoftness * _ScaleRatioA;
					    u_xlat7 = u_xlat2.x * vs_TEXCOORD5.y;
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD5.y + 1.0;
					    u_xlat15 = u_xlat7 * 0.5 + u_xlat15;
					    u_xlat15 = u_xlat15 / u_xlat2.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1 = vec4(u_xlat15) * u_xlat1;
					    u_xlat15 = (-_BumpFace) + _BumpOutline;
					    u_xlat15 = u_xlat13 * u_xlat15 + _BumpFace;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.zw);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat17 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat17 = min(u_xlat17, 1.0);
					    u_xlat17 = (-u_xlat17) + 1.0;
					    u_xlat2.z = sqrt(u_xlat17);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat15) + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.xyz = u_xlat1.www * u_xlat2.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, (-u_xlat0.xyz));
					    u_xlat2.y = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));
					    u_xlat2.z = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat3.xyw = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat3.xyw, u_xlat3.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyw = u_xlat3.xyw * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat5.x = dot(u_xlat3.xyw, u_xlat3.xyw);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat3.xyw;
					    u_xlat0.y = dot(u_xlat2.xyz, u_xlat5.xyz);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat5.x = log2(u_xlat0.y);
					    u_xlat10 = (-_FaceShininess) + _OutlineShininess;
					    u_xlat10 = u_xlat13 * u_xlat10 + _FaceShininess;
					    u_xlat10 = u_xlat10 * 128.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat5.x = exp2(u_xlat5.x);
					    u_xlat2.xyz = vs_TEXCOORD4.yyy * unity_WorldToLight[1].xyz;
					    u_xlat2.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_WorldToLight[3].xyz;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2 = texture(_LightTexture0, vec2(u_xlat10));
					    u_xlat2.xyz = u_xlat2.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * _SpecColor.xyz;
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat3.xyz;
					    u_xlat17 = max(u_xlat1.w, 9.99999975e-05);
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat17);
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat5.xyz;
					    u_xlat15 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Bevel;
					//   float _BevelClamp;
					//   float _BevelOffset;
					//   float _BevelRoundness;
					//   float _BevelWidth;
					//   float _BumpFace;
					//   sampler2D _BumpMap;
					//   float _BumpOutline;
					//   float4 _FaceColor;
					//   float _FaceShininess;
					//   sampler2D _FaceTex;
					//   float _FaceUVSpeedX;
					//   float _FaceUVSpeedY;
					//   float _GradientScale;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float4 _OutlineColor;
					//   float _OutlineShininess;
					//   float _OutlineSoftness;
					//   sampler2D _OutlineTex;
					//   float _OutlineUVSpeedX;
					//   float _OutlineUVSpeedY;
					//   float _OutlineWidth;
					//   float _ScaleRatioA;
					//   float _ShaderFlags;
					//   float4 _SpecColor;
					//   float _TextureHeight;
					//   float _TextureWidth;
					//   float4 _Time;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _Time                c0       1
					//   _WorldSpaceCameraPos c1       1
					//   _WorldSpaceLightPos0 c2       1
					//   unity_FogParams      c3       1
					//   _LightColor0         c4       1
					//   _SpecColor           c5       1
					//   _FaceUVSpeedX        c6       1
					//   _FaceUVSpeedY        c7       1
					//   _FaceColor           c8       1
					//   _OutlineSoftness     c9       1
					//   _OutlineUVSpeedX     c10      1
					//   _OutlineUVSpeedY     c11      1
					//   _OutlineColor        c12      1
					//   _OutlineWidth        c13      1
					//   _Bevel               c14      1
					//   _BevelOffset         c15      1
					//   _BevelWidth          c16      1
					//   _BevelClamp          c17      1
					//   _BevelRoundness      c18      1
					//   _BumpOutline         c19      1
					//   _BumpFace            c20      1
					//   _ShaderFlags         c21      1
					//   _ScaleRatioA         c22      1
					//   _TextureWidth        c23      1
					//   _TextureHeight       c24      1
					//   _GradientScale       c25      1
					//   _FaceShininess       c26      1
					//   _OutlineShininess    c27      1
					//   _FaceTex             s0       1
					//   _OutlineTex          s1       1
					//   _BumpMap             s2       1
					//   _MainTex             s3       1
					//
					
					    ps_3_0
					    def c28, 10000, 0.00999999978, 2, -1
					    def c29, 0.249999955, 0.25, 6.28318548, -3.14159274
					    def c30, -2.52398507e-007, 2.47609005e-005, -0.00138883968, 0.0416666418
					    def c31, 1, -1, 128, 0
					    def c32, 0, 0.5, 1, -9.99999975e-005
					    dcl_texcoord v0
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_color_pp v5
					    dcl_texcoord5 v6.xy
					    dcl_texcoord7 v7.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    add r0.x, c15.x, v6.x
					    rcp r1.x, c23.x
					    rcp r1.w, c24.x
					    mov r1.yz, c32.x
					    add r2, -r1, v0.xyxy
					    add r1, r1, v0.xyxy
					    texld r3, r2, s3
					    texld r2, r2.zwzw, s3
					    mov r2.z, r2.w
					    mov r2.x, r3.w
					    texld r3, r1, s3
					    texld r1, r1.zwzw, s3
					    mov r2.w, r1.w
					    mov r2.y, r3.w
					    add r0, r0.x, r2
					    mov r1.x, c13.x
					    add r1.y, r1.x, c16.x
					    max r2.x, c28.y, r1.y
					    rcp r1.y, r2.x
					    mul r1.z, r2.x, c14.x
					    mul r1.z, r1.z, c25.x
					    mul r1.z, r1.z, -c28.z
					    lrp_sat r2, r1.y, r0, c32.y
					    mad r0, r2, c28.z, c28.w
					    add r0, -r0_abs, c32.z
					    mov r3.yz, c32
					    mul r1.y, r3.y, c21.x
					    frc r1.y, r1_abs.y
					    cmp r1.y, c21.x, r1.y, -r1.y
					    add r1.y, r1.y, -c32.y
					    cmp r0, r1.y, r0, r2
					    mad r2, r0, c29.x, c29.y
					    frc r2, r2
					    mad r2, r2, c29.z, c29.w
					    mul r2, r2, r2
					    mad r4, r2, c30.x, c30.y
					    mad r4, r2, r4, c30.z
					    mad r4, r2, r4, c30.w
					    mad r4, r2, r4, -c32.y
					    mad r2, r2, r4, c32.z
					    lrp r4, c18.x, r2, r0
					    add r0.x, r3.z, -c17.x
					    min r2, r0.x, r4
					    mul r0.xy, r1.z, r2.xzzw
					    mad r0.xy, r2.ywzw, r1.z, -r0
					    mov r0.zw, c31.xyxy
					    dp2add r1.y, r0.wyzw, r0.wyzw, c32.x
					    rsq r1.y, r1.y
					    mul r2.xyz, r0.wyww, c32.zzxw
					    dp2add r0.y, r0.zxzw, r0.zxzw, c32.x
					    rsq r0.y, r0.y
					    mul r3.x, r0.y, r0.x
					    mul r3.yz, r0.y, c32.xzxw
					    mul r0.xyz, r1.y, r2
					    mul r1.yzw, r0.xxyz, r3.xxyz
					    mad r0.xyz, r3.zxyw, r0.yzxw, -r1.yzww
					    mov r1.y, c0.y
					    mad r2.x, c10.x, r1.y, v0.z
					    mad r2.y, c11.x, r1.y, v0.w
					    texld r2, r2, s1
					    mul_pp r2.xyz, r2, c12
					    mul r0.w, c12.w, v5.w
					    mul_pp r3.w, r2.w, r0.w
					    mul_pp r3.xyz, r2, r3.w
					    mad r2.x, c6.x, r1.y, v0.z
					    mad r2.y, c7.x, r1.y, v0.w
					    texld r2, r2, s0
					    mul r4, c8, v5
					    mul_pp r2, r2, r4
					    mul_pp r2.xyz, r2.w, r2
					    mul r0.w, r1.x, c22.x
					    mad r1.x, r0.w, -v6.y, c32.z
					    mul_pp r0.w, r0.w, v6.y
					    rsq r1.y, r0.w
					    rcp_pp r1.y, r1.y
					    cmp_pp r1.x, r1.x, r1.y, c32.z
					    texld r4, v0, s3
					    add r1.y, -r4.w, c32.y
					    add r1.y, r1.y, -v6.x
					    mad_pp r1.y, r1.y, v6.y, c32.y
					    mad_sat_pp r1.z, r0.w, c32.y, r1.y
					    mad_pp r0.w, r0.w, -c32.y, r1.y
					    mul_pp r1.x, r1.x, r1.z
					    lrp_pp r4, r1.x, r3, r2
					    mov r1.x, c22.x
					    mul r1.x, r1.x, c9.x
					    mul_pp r1.y, r1.x, v6.y
					    mad_pp r1.x, r1.x, v6.y, c32.z
					    rcp r1.x, r1.x
					    mad_pp r0.w, r1.y, c32.y, r0.w
					    mul_sat_pp r0.w, r1.x, r0.w
					    add_pp r0.w, -r0.w, c32.z
					    mul_pp r2, r0.w, r4
					    mad r0.w, r4.w, r0.w, c32.w
					    mov r1.x, c20.x
					    add r1.x, -r1.x, c19.x
					    mad r1.x, r1.z, r1.x, c20.x
					    texld_pp r3, v0.zwzw, s2
					    mad_pp r3.xy, r3.wyzw, c28.z, c28.w
					    dp2add_sat_pp r1.y, r3, r3, c32.x
					    add_pp r1.y, -r1.y, c32.z
					    rsq_pp r1.y, r1.y
					    rcp_pp r3.z, r1.y
					    mad r1.xyw, r3.xyzz, r1.x, -c32.xxzz
					    mad r1.xyw, r2.w, r1, c32.xxzz
					    add r0.xyz, r0, -r1.xyww
					    nrm_pp r3.xyz, r0
					    dp3_pp r0.x, v1, -r3
					    dp3_pp r0.y, v2, -r3
					    dp3_pp r0.z, v3, -r3
					    add r1.xyw, c1.xyzz, -v4.xyzz
					    dp3 r3.x, r1.xyww, r1.xyww
					    rsq r3.x, r3.x
					    mad_pp r1.xyw, r1, r3.x, c2.xyzz
					    nrm_pp r3.xyz, r1.xyww
					    dp3_pp r1.x, r0, r3
					    dp3_pp r0.x, r0, c2
					    max_pp r1.y, r0.x, c32.x
					    max r0.x, r1.x, c32.x
					    mov r1.x, c26.x
					    add r0.y, -r1.x, c27.x
					    mad_pp r0.y, r1.z, r0.y, c26.x
					    mul r0.y, r0.y, c31.z
					    pow r1.x, r0.x, r0.y
					    mov r0.xyz, c4
					    mul r0.xyz, r0, c5
					    mul r0.xyz, r1.x, r0
					    rcp r1.x, r2.w
					    cmp r0.w, r0.w, r1.x, c28.x
					    mul_pp r1.xzw, r0.w, r2.xyyz
					    mov_pp oC0.w, r2.w
					    mul_pp r1.xzw, r1, c4.xyyz
					    mad_pp r0.xyz, r1.xzww, r1.y, r0
					    mul r0.w, c3.x, v7.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 146 instruction slots used (8 texture, 138 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						float _FaceUVSpeedX;
						float _FaceUVSpeedY;
						vec4 _FaceColor;
						float _OutlineSoftness;
						float _OutlineUVSpeedX;
						float _OutlineUVSpeedY;
						vec4 _OutlineColor;
						float _OutlineWidth;
						float _Bevel;
						float _BevelOffset;
						float _BevelWidth;
						float _BevelClamp;
						float _BevelRoundness;
						float _BumpOutline;
						float _BumpFace;
						vec4 unused_0_18[14];
						float _ShaderFlags;
						float _ScaleRatioA;
						vec4 unused_0_21[4];
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _FaceShininess;
						float _OutlineShininess;
						vec4 unused_0_27[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _FaceTex;
					uniform  sampler2D _OutlineTex;
					uniform  sampler2D _BumpMap;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD5;
					in  float vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat7;
					float u_xlat8;
					float u_xlat10;
					bool u_xlatb11;
					float u_xlat13;
					float u_xlat15;
					float u_xlat17;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD5.x + _BevelOffset;
					    u_xlat1.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);
					    u_xlat1.z = 0.0;
					    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy).wxyz;
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.z = u_xlat2.w;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.w = u_xlat1.w;
					    u_xlat3.y = u_xlat2.w;
					    u_xlat0 = u_xlat0.xxxx + u_xlat3;
					    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat1.x = _BevelWidth + _OutlineWidth;
					    u_xlat1.x = max(u_xlat1.x, 0.00999999978);
					    u_xlat0 = u_xlat0 / u_xlat1.xxxx;
					    u_xlat1.x = u_xlat1.x * _Bevel;
					    u_xlat1.x = u_xlat1.x * _GradientScale;
					    u_xlat1.x = u_xlat1.x * -2.0;
					    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat6 = _ShaderFlags * 0.5;
					    u_xlatb11 = u_xlat6>=(-u_xlat6);
					    u_xlat6 = fract(abs(u_xlat6));
					    u_xlat6 = (u_xlatb11) ? u_xlat6 : (-u_xlat6);
					    u_xlatb6 = u_xlat6>=0.5;
					    u_xlat0 = (bool(u_xlatb6)) ? u_xlat2 : u_xlat0;
					    u_xlat2 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);
					    u_xlat2 = sin(u_xlat2);
					    u_xlat2 = (-u_xlat0) + u_xlat2;
					    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;
					    u_xlat6 = (-_BevelClamp) + 1.0;
					    u_xlat0 = min(u_xlat0, vec4(u_xlat6));
					    u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;
					    u_xlat0.yz = u_xlat0.wy * u_xlat1.xx + (-u_xlat0.zx);
					    u_xlat0.x = float(-1.0);
					    u_xlat0.w = float(1.0);
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat15 = dot(u_xlat0.zw, u_xlat0.zw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.x = u_xlat15 * u_xlat0.z;
					    u_xlat2.yz = vec2(u_xlat15) * vec2(1.0, 0.0);
					    u_xlat0.z = 0.0;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat1.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat1 = texture(_OutlineTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _OutlineColor.xyz;
					    u_xlat15 = vs_COLOR0.w * _OutlineColor.w;
					    u_xlat2.w = u_xlat1.w * u_xlat15;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.www;
					    u_xlat1.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat1 = texture(_FaceTex, u_xlat1.xy);
					    u_xlat3 = vs_COLOR0 * _FaceColor;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2 = (-u_xlat1) + u_xlat2;
					    u_xlat15 = _OutlineWidth * _ScaleRatioA;
					    u_xlat15 = u_xlat15 * vs_TEXCOORD5.y;
					    u_xlat3.x = min(u_xlat15, 1.0);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8 = (-u_xlat4.w) + 0.5;
					    u_xlat8 = u_xlat8 + (-vs_TEXCOORD5.x);
					    u_xlat8 = u_xlat8 * vs_TEXCOORD5.y + 0.5;
					    u_xlat13 = u_xlat15 * 0.5 + u_xlat8;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) * 0.5 + u_xlat8;
					    u_xlat3.x = u_xlat3.x * u_xlat13;
					    u_xlat1 = u_xlat3.xxxx * u_xlat2 + u_xlat1;
					    u_xlat2.x = _OutlineSoftness * _ScaleRatioA;
					    u_xlat7 = u_xlat2.x * vs_TEXCOORD5.y;
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD5.y + 1.0;
					    u_xlat15 = u_xlat7 * 0.5 + u_xlat15;
					    u_xlat15 = u_xlat15 / u_xlat2.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1 = vec4(u_xlat15) * u_xlat1;
					    u_xlat15 = (-_BumpFace) + _BumpOutline;
					    u_xlat15 = u_xlat13 * u_xlat15 + _BumpFace;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.zw);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat17 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat17 = min(u_xlat17, 1.0);
					    u_xlat17 = (-u_xlat17) + 1.0;
					    u_xlat2.z = sqrt(u_xlat17);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat15) + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.xyz = u_xlat1.www * u_xlat2.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, (-u_xlat0.xyz));
					    u_xlat2.y = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));
					    u_xlat2.z = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat10 = (-_FaceShininess) + _OutlineShininess;
					    u_xlat10 = u_xlat13 * u_xlat10 + _FaceShininess;
					    u_xlat10 = u_xlat10 * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat10;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat2.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat2.x = max(u_xlat1.w, 9.99999975e-05);
					    u_xlat1.xyz = u_xlat1.xyz / u_xlat2.xxx;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat1.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.yyy + u_xlat0.xzw;
					    u_xlat15 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "SPOT" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Bevel;
					//   float _BevelClamp;
					//   float _BevelOffset;
					//   float _BevelRoundness;
					//   float _BevelWidth;
					//   float _BumpFace;
					//   sampler2D _BumpMap;
					//   float _BumpOutline;
					//   float4 _FaceColor;
					//   float _FaceShininess;
					//   sampler2D _FaceTex;
					//   float _FaceUVSpeedX;
					//   float _FaceUVSpeedY;
					//   float _GradientScale;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float4 _OutlineColor;
					//   float _OutlineShininess;
					//   float _OutlineSoftness;
					//   sampler2D _OutlineTex;
					//   float _OutlineUVSpeedX;
					//   float _OutlineUVSpeedY;
					//   float _OutlineWidth;
					//   float _ScaleRatioA;
					//   float _ShaderFlags;
					//   float4 _SpecColor;
					//   float _TextureHeight;
					//   float _TextureWidth;
					//   float4 _Time;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       4
					//   _Time                c4       1
					//   _WorldSpaceCameraPos c5       1
					//   _WorldSpaceLightPos0 c6       1
					//   unity_FogParams      c7       1
					//   _LightColor0         c8       1
					//   _SpecColor           c9       1
					//   _FaceUVSpeedX        c10      1
					//   _FaceUVSpeedY        c11      1
					//   _FaceColor           c12      1
					//   _OutlineSoftness     c13      1
					//   _OutlineUVSpeedX     c14      1
					//   _OutlineUVSpeedY     c15      1
					//   _OutlineColor        c16      1
					//   _OutlineWidth        c17      1
					//   _Bevel               c18      1
					//   _BevelOffset         c19      1
					//   _BevelWidth          c20      1
					//   _BevelClamp          c21      1
					//   _BevelRoundness      c22      1
					//   _BumpOutline         c23      1
					//   _BumpFace            c24      1
					//   _ShaderFlags         c25      1
					//   _ScaleRatioA         c26      1
					//   _TextureWidth        c27      1
					//   _TextureHeight       c28      1
					//   _GradientScale       c29      1
					//   _FaceShininess       c30      1
					//   _OutlineShininess    c31      1
					//   _LightTexture0       s0       1
					//   _LightTextureB0      s1       1
					//   _FaceTex             s2       1
					//   _OutlineTex          s3       1
					//   _BumpMap             s4       1
					//   _MainTex             s5       1
					//
					
					    ps_3_0
					    def c32, 10000, 0.00999999978, 2, -1
					    def c33, 0.249999955, 0.25, 6.28318548, -3.14159274
					    def c34, -2.52398507e-007, 2.47609005e-005, -0.00138883968, 0.0416666418
					    def c35, 128, 0, 0, 0
					    def c36, 0, 0.5, 1, -9.99999975e-005
					    dcl_texcoord v0
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_color_pp v5
					    dcl_texcoord5 v6.xy
					    dcl_texcoord7 v7.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    add r0.x, c19.x, v6.x
					    rcp r1.x, c27.x
					    rcp r1.w, c28.x
					    mov r1.yz, c36.x
					    add r2, -r1, v0.xyxy
					    add r1, r1, v0.xyxy
					    texld r3, r2, s5
					    texld r2, r2.zwzw, s5
					    mov r2.z, r2.w
					    mov r2.x, r3.w
					    texld r3, r1, s5
					    texld r1, r1.zwzw, s5
					    mov r2.w, r1.w
					    mov r2.y, r3.w
					    add r0, r0.x, r2
					    mov r1.x, c17.x
					    add r1.y, r1.x, c20.x
					    max r2.x, c32.y, r1.y
					    rcp r1.y, r2.x
					    mul r1.z, r2.x, c18.x
					    mul r1.z, r1.z, c29.x
					    mul r1.z, r1.z, -c32.z
					    lrp_sat r2, r1.y, r0, c36.y
					    mad r0, r2, c32.z, c32.w
					    add r0, -r0_abs, c36.z
					    mov r3.yz, c36
					    mul r1.y, r3.y, c25.x
					    frc r1.y, r1_abs.y
					    cmp r1.y, c25.x, r1.y, -r1.y
					    add r1.y, r1.y, -c36.y
					    cmp r0, r1.y, r0, r2
					    mad r2, r0, c33.x, c33.y
					    frc r2, r2
					    mad r2, r2, c33.z, c33.w
					    mul r2, r2, r2
					    mad r4, r2, c34.x, c34.y
					    mad r4, r2, r4, c34.z
					    mad r4, r2, r4, c34.w
					    mad r4, r2, r4, -c36.y
					    mad r2, r2, r4, c36.z
					    lrp r4, c22.x, r2, r0
					    add r0.x, r3.z, -c21.x
					    min r2, r0.x, r4
					    mul r0.xy, r1.z, r2.xzzw
					    mad r0.xy, r2.ywzw, r1.z, -r0
					    mov r0.w, -c36.z
					    dp2add r1.y, r0.wyzw, r0.wyzw, c36.x
					    mul r2.xyz, r0.wyww, c36.zzxw
					    rsq r0.y, r1.y
					    mul r1.yzw, r0.y, r2.xxyz
					    mov r0.z, c36.z
					    dp2add r0.y, r0.zxzw, r0.zxzw, c36.x
					    rsq r0.y, r0.y
					    mul r2.x, r0.y, r0.x
					    mul r2.yz, r0.y, c36.xzxw
					    mul r0.xyz, r1.yzww, r2
					    mad r0.xyz, r2.zxyw, r1.zwyw, -r0
					    mov r1.y, c4.y
					    mad r2.x, c14.x, r1.y, v0.z
					    mad r2.y, c15.x, r1.y, v0.w
					    texld r2, r2, s3
					    mul_pp r2.xyz, r2, c16
					    mul r0.w, c16.w, v5.w
					    mul_pp r3.w, r2.w, r0.w
					    mul_pp r3.xyz, r2, r3.w
					    mad r2.x, c10.x, r1.y, v0.z
					    mad r2.y, c11.x, r1.y, v0.w
					    texld r2, r2, s2
					    mul r4, c12, v5
					    mul_pp r2, r2, r4
					    mul_pp r2.xyz, r2.w, r2
					    mul r0.w, r1.x, c26.x
					    mad r1.x, r0.w, -v6.y, c36.z
					    mul_pp r0.w, r0.w, v6.y
					    rsq r1.y, r0.w
					    rcp_pp r1.y, r1.y
					    cmp_pp r1.x, r1.x, r1.y, c36.z
					    texld r4, v0, s5
					    add r1.y, -r4.w, c36.y
					    add r1.y, r1.y, -v6.x
					    mad_pp r1.y, r1.y, v6.y, c36.y
					    mad_sat_pp r1.z, r0.w, c36.y, r1.y
					    mad_pp r0.w, r0.w, -c36.y, r1.y
					    mul_pp r1.x, r1.x, r1.z
					    lrp_pp r4, r1.x, r3, r2
					    mov r1.x, c26.x
					    mul r1.x, r1.x, c13.x
					    mul_pp r1.y, r1.x, v6.y
					    mad_pp r1.x, r1.x, v6.y, c36.z
					    rcp r1.x, r1.x
					    mad_pp r0.w, r1.y, c36.y, r0.w
					    mul_sat_pp r0.w, r1.x, r0.w
					    add_pp r0.w, -r0.w, c36.z
					    mul_pp r2, r0.w, r4
					    mad r0.w, r4.w, r0.w, c36.w
					    mov r1.x, c24.x
					    add r1.x, -r1.x, c23.x
					    mad r1.x, r1.z, r1.x, c24.x
					    texld_pp r3, v0.zwzw, s4
					    mad_pp r3.xy, r3.wyzw, c32.z, c32.w
					    dp2add_sat_pp r1.y, r3, r3, c36.x
					    add_pp r1.y, -r1.y, c36.z
					    rsq_pp r1.y, r1.y
					    rcp_pp r3.z, r1.y
					    mad r1.xyw, r3.xyzz, r1.x, -c36.xxzz
					    mad r1.xyw, r2.w, r1, c36.xxzz
					    add r0.xyz, r0, -r1.xyww
					    nrm_pp r3.xyz, r0
					    dp3_pp r0.x, v1, -r3
					    dp3_pp r0.y, v2, -r3
					    dp3_pp r0.z, v3, -r3
					    add r1.xyw, c5.xyzz, -v4.xyzz
					    dp3 r3.x, r1.xyww, r1.xyww
					    rsq r3.x, r3.x
					    add r3.yzw, c6.xxyz, -v4.xxyz
					    nrm_pp r4.xyz, r3.yzww
					    mad_pp r1.xyw, r1, r3.x, r4.xyzz
					    dp3_pp r3.x, r0, r4
					    max_pp r4.x, r3.x, c36.x
					    nrm_pp r3.xyz, r1.xyww
					    dp3_pp r0.x, r0, r3
					    max r1.x, r0.x, c36.x
					    mov r0.x, c30.x
					    add r0.x, -r0.x, c31.x
					    mad_pp r0.x, r1.z, r0.x, c30.x
					    mul r0.x, r0.x, c35.x
					    pow r3.x, r1.x, r0.x
					    mad r1, v4.xyzx, c36.zzzx, c36.xxxz
					    dp4 r0.x, c3, r1
					    rcp r0.x, r0.x
					    dp4 r5.x, c0, r1
					    dp4 r5.y, c1, r1
					    dp4 r5.z, c2, r1
					    mad r0.xy, r5, r0.x, c36.y
					    dp3 r0.z, r5, r5
					    texld_pp r1, r0.z, s1
					    texld_pp r6, r0, s0
					    mul r0.x, r1.x, r6.w
					    mul_pp r0.xyz, r0.x, c8
					    cmp_pp r0.xyz, -r5.z, c36.x, r0
					    mul r1.xyz, r0, c9
					    mul r1.xyz, r3.x, r1
					    rcp r1.w, r2.w
					    cmp r0.w, r0.w, r1.w, c32.x
					    mul_pp r2.xyz, r0.w, r2
					    mov_pp oC0.w, r2.w
					    mul_pp r0.xyz, r0, r2
					    mad_pp r0.xyz, r0, r4.x, r1
					    mul r0.w, c7.x, v7.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 163 instruction slots used (10 texture, 153 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						float _FaceUVSpeedX;
						float _FaceUVSpeedY;
						vec4 _FaceColor;
						float _OutlineSoftness;
						float _OutlineUVSpeedX;
						float _OutlineUVSpeedY;
						vec4 _OutlineColor;
						float _OutlineWidth;
						float _Bevel;
						float _BevelOffset;
						float _BevelWidth;
						float _BevelClamp;
						float _BevelRoundness;
						float _BumpOutline;
						float _BumpFace;
						vec4 unused_0_19[14];
						float _ShaderFlags;
						float _ScaleRatioA;
						vec4 unused_0_22[4];
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _FaceShininess;
						float _OutlineShininess;
						vec4 unused_0_28[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _FaceTex;
					uniform  sampler2D _OutlineTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD5;
					in  float vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat7;
					float u_xlat8;
					vec2 u_xlat10;
					bool u_xlatb10;
					bool u_xlatb11;
					float u_xlat13;
					float u_xlat15;
					float u_xlat17;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD5.x + _BevelOffset;
					    u_xlat1.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);
					    u_xlat1.z = 0.0;
					    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy).wxyz;
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.z = u_xlat2.w;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.w = u_xlat1.w;
					    u_xlat3.y = u_xlat2.w;
					    u_xlat0 = u_xlat0.xxxx + u_xlat3;
					    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat1.x = _BevelWidth + _OutlineWidth;
					    u_xlat1.x = max(u_xlat1.x, 0.00999999978);
					    u_xlat0 = u_xlat0 / u_xlat1.xxxx;
					    u_xlat1.x = u_xlat1.x * _Bevel;
					    u_xlat1.x = u_xlat1.x * _GradientScale;
					    u_xlat1.x = u_xlat1.x * -2.0;
					    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat6 = _ShaderFlags * 0.5;
					    u_xlatb11 = u_xlat6>=(-u_xlat6);
					    u_xlat6 = fract(abs(u_xlat6));
					    u_xlat6 = (u_xlatb11) ? u_xlat6 : (-u_xlat6);
					    u_xlatb6 = u_xlat6>=0.5;
					    u_xlat0 = (bool(u_xlatb6)) ? u_xlat2 : u_xlat0;
					    u_xlat2 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);
					    u_xlat2 = sin(u_xlat2);
					    u_xlat2 = (-u_xlat0) + u_xlat2;
					    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;
					    u_xlat6 = (-_BevelClamp) + 1.0;
					    u_xlat0 = min(u_xlat0, vec4(u_xlat6));
					    u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;
					    u_xlat0.yz = u_xlat0.wy * u_xlat1.xx + (-u_xlat0.zx);
					    u_xlat0.x = float(-1.0);
					    u_xlat0.w = float(1.0);
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat15 = dot(u_xlat0.zw, u_xlat0.zw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.x = u_xlat15 * u_xlat0.z;
					    u_xlat2.yz = vec2(u_xlat15) * vec2(1.0, 0.0);
					    u_xlat0.z = 0.0;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat1.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat1 = texture(_OutlineTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _OutlineColor.xyz;
					    u_xlat15 = vs_COLOR0.w * _OutlineColor.w;
					    u_xlat2.w = u_xlat1.w * u_xlat15;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.www;
					    u_xlat1.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat1 = texture(_FaceTex, u_xlat1.xy);
					    u_xlat3 = vs_COLOR0 * _FaceColor;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2 = (-u_xlat1) + u_xlat2;
					    u_xlat15 = _OutlineWidth * _ScaleRatioA;
					    u_xlat15 = u_xlat15 * vs_TEXCOORD5.y;
					    u_xlat3.x = min(u_xlat15, 1.0);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8 = (-u_xlat4.w) + 0.5;
					    u_xlat8 = u_xlat8 + (-vs_TEXCOORD5.x);
					    u_xlat8 = u_xlat8 * vs_TEXCOORD5.y + 0.5;
					    u_xlat13 = u_xlat15 * 0.5 + u_xlat8;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) * 0.5 + u_xlat8;
					    u_xlat3.x = u_xlat3.x * u_xlat13;
					    u_xlat1 = u_xlat3.xxxx * u_xlat2 + u_xlat1;
					    u_xlat2.x = _OutlineSoftness * _ScaleRatioA;
					    u_xlat7 = u_xlat2.x * vs_TEXCOORD5.y;
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD5.y + 1.0;
					    u_xlat15 = u_xlat7 * 0.5 + u_xlat15;
					    u_xlat15 = u_xlat15 / u_xlat2.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1 = vec4(u_xlat15) * u_xlat1;
					    u_xlat15 = (-_BumpFace) + _BumpOutline;
					    u_xlat15 = u_xlat13 * u_xlat15 + _BumpFace;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.zw);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat17 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat17 = min(u_xlat17, 1.0);
					    u_xlat17 = (-u_xlat17) + 1.0;
					    u_xlat2.z = sqrt(u_xlat17);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat15) + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.xyz = u_xlat1.www * u_xlat2.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, (-u_xlat0.xyz));
					    u_xlat2.y = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));
					    u_xlat2.z = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat3.xyw = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat3.xyw, u_xlat3.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyw = u_xlat3.xyw * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat5.x = dot(u_xlat3.xyw, u_xlat3.xyw);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat3.xyw;
					    u_xlat0.y = dot(u_xlat2.xyz, u_xlat5.xyz);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat5.x = log2(u_xlat0.y);
					    u_xlat10.x = (-_FaceShininess) + _OutlineShininess;
					    u_xlat10.x = u_xlat13 * u_xlat10.x + _FaceShininess;
					    u_xlat10.x = u_xlat10.x * 128.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10.x;
					    u_xlat5.x = exp2(u_xlat5.x);
					    u_xlat2 = vs_TEXCOORD4.yyyy * unity_WorldToLight[1];
					    u_xlat2 = unity_WorldToLight[0] * vs_TEXCOORD4.xxxx + u_xlat2;
					    u_xlat2 = unity_WorldToLight[2] * vs_TEXCOORD4.zzzz + u_xlat2;
					    u_xlat2 = u_xlat2 + unity_WorldToLight[3];
					    u_xlat10.xy = u_xlat2.xy / u_xlat2.ww;
					    u_xlat10.xy = u_xlat10.xy + vec2(0.5, 0.5);
					    u_xlat3 = texture(_LightTexture0, u_xlat10.xy);
					    u_xlatb10 = 0.0<u_xlat2.z;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2 = texture(_LightTextureB0, vec2(u_xlat15));
					    u_xlat10.x = u_xlatb10 ? 1.0 : float(0.0);
					    u_xlat10.x = u_xlat3.w * u_xlat10.x;
					    u_xlat10.x = u_xlat2.x * u_xlat10.x;
					    u_xlat2.xyz = u_xlat10.xxx * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * _SpecColor.xyz;
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat3.xyz;
					    u_xlat17 = max(u_xlat1.w, 9.99999975e-05);
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat17);
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat5.xyz;
					    u_xlat15 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT_COOKIE" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Bevel;
					//   float _BevelClamp;
					//   float _BevelOffset;
					//   float _BevelRoundness;
					//   float _BevelWidth;
					//   float _BumpFace;
					//   sampler2D _BumpMap;
					//   float _BumpOutline;
					//   float4 _FaceColor;
					//   float _FaceShininess;
					//   sampler2D _FaceTex;
					//   float _FaceUVSpeedX;
					//   float _FaceUVSpeedY;
					//   float _GradientScale;
					//   float4 _LightColor0;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float4 _OutlineColor;
					//   float _OutlineShininess;
					//   float _OutlineSoftness;
					//   sampler2D _OutlineTex;
					//   float _OutlineUVSpeedX;
					//   float _OutlineUVSpeedY;
					//   float _OutlineWidth;
					//   float _ScaleRatioA;
					//   float _ShaderFlags;
					//   float4 _SpecColor;
					//   float _TextureHeight;
					//   float _TextureWidth;
					//   float4 _Time;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       3
					//   _Time                c3       1
					//   _WorldSpaceCameraPos c4       1
					//   _WorldSpaceLightPos0 c5       1
					//   unity_FogParams      c6       1
					//   _LightColor0         c7       1
					//   _SpecColor           c8       1
					//   _FaceUVSpeedX        c9       1
					//   _FaceUVSpeedY        c10      1
					//   _FaceColor           c11      1
					//   _OutlineSoftness     c12      1
					//   _OutlineUVSpeedX     c13      1
					//   _OutlineUVSpeedY     c14      1
					//   _OutlineColor        c15      1
					//   _OutlineWidth        c16      1
					//   _Bevel               c17      1
					//   _BevelOffset         c18      1
					//   _BevelWidth          c19      1
					//   _BevelClamp          c20      1
					//   _BevelRoundness      c21      1
					//   _BumpOutline         c22      1
					//   _BumpFace            c23      1
					//   _ShaderFlags         c24      1
					//   _ScaleRatioA         c25      1
					//   _TextureWidth        c26      1
					//   _TextureHeight       c27      1
					//   _GradientScale       c28      1
					//   _FaceShininess       c29      1
					//   _OutlineShininess    c30      1
					//   _LightTexture0       s0       1
					//   _LightTextureB0      s1       1
					//   _FaceTex             s2       1
					//   _OutlineTex          s3       1
					//   _BumpMap             s4       1
					//   _MainTex             s5       1
					//
					
					    ps_3_0
					    def c31, 10000, 0.00999999978, 2, -1
					    def c32, 0.249999955, 0.25, 6.28318548, -3.14159274
					    def c33, -2.52398507e-007, 2.47609005e-005, -0.00138883968, 0.0416666418
					    def c34, 128, 0, 0, 0
					    def c35, 0, 0.5, 1, -9.99999975e-005
					    dcl_texcoord v0
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_color_pp v5
					    dcl_texcoord5 v6.xy
					    dcl_texcoord7 v7.x
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    add r0.x, c18.x, v6.x
					    rcp r1.x, c26.x
					    rcp r1.w, c27.x
					    mov r1.yz, c35.x
					    add r2, -r1, v0.xyxy
					    add r1, r1, v0.xyxy
					    texld r3, r2, s5
					    texld r2, r2.zwzw, s5
					    mov r2.z, r2.w
					    mov r2.x, r3.w
					    texld r3, r1, s5
					    texld r1, r1.zwzw, s5
					    mov r2.w, r1.w
					    mov r2.y, r3.w
					    add r0, r0.x, r2
					    mov r1.x, c16.x
					    add r1.y, r1.x, c19.x
					    max r2.x, c31.y, r1.y
					    rcp r1.y, r2.x
					    mul r1.z, r2.x, c17.x
					    mul r1.z, r1.z, c28.x
					    mul r1.z, r1.z, -c31.z
					    lrp_sat r2, r1.y, r0, c35.y
					    mad r0, r2, c31.z, c31.w
					    add r0, -r0_abs, c35.z
					    mov r3.yz, c35
					    mul r1.y, r3.y, c24.x
					    frc r1.y, r1_abs.y
					    cmp r1.y, c24.x, r1.y, -r1.y
					    add r1.y, r1.y, -c35.y
					    cmp r0, r1.y, r0, r2
					    mad r2, r0, c32.x, c32.y
					    frc r2, r2
					    mad r2, r2, c32.z, c32.w
					    mul r2, r2, r2
					    mad r4, r2, c33.x, c33.y
					    mad r4, r2, r4, c33.z
					    mad r4, r2, r4, c33.w
					    mad r4, r2, r4, -c35.y
					    mad r2, r2, r4, c35.z
					    lrp r4, c21.x, r2, r0
					    add r0.x, r3.z, -c20.x
					    min r2, r0.x, r4
					    mul r0.xy, r1.z, r2.xzzw
					    mad r0.xy, r2.ywzw, r1.z, -r0
					    mov r0.w, -c35.z
					    dp2add r1.y, r0.wyzw, r0.wyzw, c35.x
					    mul r2.xyz, r0.wyww, c35.zzxw
					    rsq r0.y, r1.y
					    mul r1.yzw, r0.y, r2.xxyz
					    mov r0.z, c35.z
					    dp2add r0.y, r0.zxzw, r0.zxzw, c35.x
					    rsq r0.y, r0.y
					    mul r2.x, r0.y, r0.x
					    mul r2.yz, r0.y, c35.xzxw
					    mul r0.xyz, r1.yzww, r2
					    mad r0.xyz, r2.zxyw, r1.zwyw, -r0
					    mov r1.y, c3.y
					    mad r2.x, c13.x, r1.y, v0.z
					    mad r2.y, c14.x, r1.y, v0.w
					    texld r2, r2, s3
					    mul_pp r2.xyz, r2, c15
					    mul r0.w, c15.w, v5.w
					    mul_pp r3.w, r2.w, r0.w
					    mul_pp r3.xyz, r2, r3.w
					    mad r2.x, c9.x, r1.y, v0.z
					    mad r2.y, c10.x, r1.y, v0.w
					    texld r2, r2, s2
					    mul r4, c11, v5
					    mul_pp r2, r2, r4
					    mul_pp r2.xyz, r2.w, r2
					    mul r0.w, r1.x, c25.x
					    mad r1.x, r0.w, -v6.y, c35.z
					    mul_pp r0.w, r0.w, v6.y
					    rsq r1.y, r0.w
					    rcp_pp r1.y, r1.y
					    cmp_pp r1.x, r1.x, r1.y, c35.z
					    texld r4, v0, s5
					    add r1.y, -r4.w, c35.y
					    add r1.y, r1.y, -v6.x
					    mad_pp r1.y, r1.y, v6.y, c35.y
					    mad_sat_pp r1.z, r0.w, c35.y, r1.y
					    mad_pp r0.w, r0.w, -c35.y, r1.y
					    mul_pp r1.x, r1.x, r1.z
					    lrp_pp r4, r1.x, r3, r2
					    mov r1.x, c25.x
					    mul r1.x, r1.x, c12.x
					    mul_pp r1.y, r1.x, v6.y
					    mad_pp r1.x, r1.x, v6.y, c35.z
					    rcp r1.x, r1.x
					    mad_pp r0.w, r1.y, c35.y, r0.w
					    mul_sat_pp r0.w, r1.x, r0.w
					    add_pp r0.w, -r0.w, c35.z
					    mul_pp r2, r0.w, r4
					    mad r0.w, r4.w, r0.w, c35.w
					    mov r1.x, c23.x
					    add r1.x, -r1.x, c22.x
					    mad r1.x, r1.z, r1.x, c23.x
					    texld_pp r3, v0.zwzw, s4
					    mad_pp r3.xy, r3.wyzw, c31.z, c31.w
					    dp2add_sat_pp r1.y, r3, r3, c35.x
					    add_pp r1.y, -r1.y, c35.z
					    rsq_pp r1.y, r1.y
					    rcp_pp r3.z, r1.y
					    mad r1.xyw, r3.xyzz, r1.x, -c35.xxzz
					    mad r1.xyw, r2.w, r1, c35.xxzz
					    add r0.xyz, r0, -r1.xyww
					    nrm_pp r3.xyz, r0
					    dp3_pp r0.x, v1, -r3
					    dp3_pp r0.y, v2, -r3
					    dp3_pp r0.z, v3, -r3
					    add r1.xyw, c4.xyzz, -v4.xyzz
					    dp3 r3.x, r1.xyww, r1.xyww
					    rsq r3.x, r3.x
					    add r3.yzw, c5.xxyz, -v4.xxyz
					    nrm_pp r4.xyz, r3.yzww
					    mad_pp r1.xyw, r1, r3.x, r4.xyzz
					    dp3_pp r3.x, r0, r4
					    max_pp r4.x, r3.x, c35.x
					    nrm_pp r3.xyz, r1.xyww
					    dp3_pp r0.x, r0, r3
					    max r1.x, r0.x, c35.x
					    mov r0.x, c29.x
					    add r0.x, -r0.x, c30.x
					    mad_pp r0.x, r1.z, r0.x, c29.x
					    mul r0.x, r0.x, c34.x
					    pow r3.x, r1.x, r0.x
					    mad r1, v4.xyzx, c35.zzzx, c35.xxxz
					    dp4 r0.x, c0, r1
					    dp4 r0.y, c1, r1
					    dp4 r0.z, c2, r1
					    dp3 r1.x, r0, r0
					    texld r5, r0, s0
					    texld r1, r1.x, s1
					    mul_pp r0.x, r5.w, r1.x
					    mul_pp r0.xyz, r0.x, c7
					    mul r1.xyz, r0, c8
					    mul r1.xyz, r3.x, r1
					    rcp r1.w, r2.w
					    cmp r0.w, r0.w, r1.w, c31.x
					    mul_pp r2.xyz, r0.w, r2
					    mov_pp oC0.w, r2.w
					    mul_pp r0.xyz, r0, r2
					    mad_pp r0.xyz, r0, r4.x, r1
					    mul r0.w, c6.x, v7.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 159 instruction slots used (10 texture, 149 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						float _FaceUVSpeedX;
						float _FaceUVSpeedY;
						vec4 _FaceColor;
						float _OutlineSoftness;
						float _OutlineUVSpeedX;
						float _OutlineUVSpeedY;
						vec4 _OutlineColor;
						float _OutlineWidth;
						float _Bevel;
						float _BevelOffset;
						float _BevelWidth;
						float _BevelClamp;
						float _BevelRoundness;
						float _BumpOutline;
						float _BumpFace;
						vec4 unused_0_19[14];
						float _ShaderFlags;
						float _ScaleRatioA;
						vec4 unused_0_22[4];
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _FaceShininess;
						float _OutlineShininess;
						vec4 unused_0_28[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _FaceTex;
					uniform  sampler2D _OutlineTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD5;
					in  float vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat7;
					float u_xlat8;
					float u_xlat10;
					bool u_xlatb11;
					float u_xlat13;
					float u_xlat15;
					float u_xlat17;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD5.x + _BevelOffset;
					    u_xlat1.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);
					    u_xlat1.z = 0.0;
					    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy).wxyz;
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.z = u_xlat2.w;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.w = u_xlat1.w;
					    u_xlat3.y = u_xlat2.w;
					    u_xlat0 = u_xlat0.xxxx + u_xlat3;
					    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat1.x = _BevelWidth + _OutlineWidth;
					    u_xlat1.x = max(u_xlat1.x, 0.00999999978);
					    u_xlat0 = u_xlat0 / u_xlat1.xxxx;
					    u_xlat1.x = u_xlat1.x * _Bevel;
					    u_xlat1.x = u_xlat1.x * _GradientScale;
					    u_xlat1.x = u_xlat1.x * -2.0;
					    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat6 = _ShaderFlags * 0.5;
					    u_xlatb11 = u_xlat6>=(-u_xlat6);
					    u_xlat6 = fract(abs(u_xlat6));
					    u_xlat6 = (u_xlatb11) ? u_xlat6 : (-u_xlat6);
					    u_xlatb6 = u_xlat6>=0.5;
					    u_xlat0 = (bool(u_xlatb6)) ? u_xlat2 : u_xlat0;
					    u_xlat2 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);
					    u_xlat2 = sin(u_xlat2);
					    u_xlat2 = (-u_xlat0) + u_xlat2;
					    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;
					    u_xlat6 = (-_BevelClamp) + 1.0;
					    u_xlat0 = min(u_xlat0, vec4(u_xlat6));
					    u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;
					    u_xlat0.yz = u_xlat0.wy * u_xlat1.xx + (-u_xlat0.zx);
					    u_xlat0.x = float(-1.0);
					    u_xlat0.w = float(1.0);
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat15 = dot(u_xlat0.zw, u_xlat0.zw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.x = u_xlat15 * u_xlat0.z;
					    u_xlat2.yz = vec2(u_xlat15) * vec2(1.0, 0.0);
					    u_xlat0.z = 0.0;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat1.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat1 = texture(_OutlineTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _OutlineColor.xyz;
					    u_xlat15 = vs_COLOR0.w * _OutlineColor.w;
					    u_xlat2.w = u_xlat1.w * u_xlat15;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.www;
					    u_xlat1.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat1 = texture(_FaceTex, u_xlat1.xy);
					    u_xlat3 = vs_COLOR0 * _FaceColor;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2 = (-u_xlat1) + u_xlat2;
					    u_xlat15 = _OutlineWidth * _ScaleRatioA;
					    u_xlat15 = u_xlat15 * vs_TEXCOORD5.y;
					    u_xlat3.x = min(u_xlat15, 1.0);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8 = (-u_xlat4.w) + 0.5;
					    u_xlat8 = u_xlat8 + (-vs_TEXCOORD5.x);
					    u_xlat8 = u_xlat8 * vs_TEXCOORD5.y + 0.5;
					    u_xlat13 = u_xlat15 * 0.5 + u_xlat8;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) * 0.5 + u_xlat8;
					    u_xlat3.x = u_xlat3.x * u_xlat13;
					    u_xlat1 = u_xlat3.xxxx * u_xlat2 + u_xlat1;
					    u_xlat2.x = _OutlineSoftness * _ScaleRatioA;
					    u_xlat7 = u_xlat2.x * vs_TEXCOORD5.y;
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD5.y + 1.0;
					    u_xlat15 = u_xlat7 * 0.5 + u_xlat15;
					    u_xlat15 = u_xlat15 / u_xlat2.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1 = vec4(u_xlat15) * u_xlat1;
					    u_xlat15 = (-_BumpFace) + _BumpOutline;
					    u_xlat15 = u_xlat13 * u_xlat15 + _BumpFace;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.zw);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat17 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat17 = min(u_xlat17, 1.0);
					    u_xlat17 = (-u_xlat17) + 1.0;
					    u_xlat2.z = sqrt(u_xlat17);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat15) + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.xyz = u_xlat1.www * u_xlat2.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, (-u_xlat0.xyz));
					    u_xlat2.y = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));
					    u_xlat2.z = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat3.xyw = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat3.xyw, u_xlat3.xyw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyw = u_xlat3.xyw * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat5.x = dot(u_xlat3.xyw, u_xlat3.xyw);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat3.xyw;
					    u_xlat0.y = dot(u_xlat2.xyz, u_xlat5.xyz);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat5.x = log2(u_xlat0.y);
					    u_xlat10 = (-_FaceShininess) + _OutlineShininess;
					    u_xlat10 = u_xlat13 * u_xlat10 + _FaceShininess;
					    u_xlat10 = u_xlat10 * 128.0;
					    u_xlat5.x = u_xlat5.x * u_xlat10;
					    u_xlat5.x = exp2(u_xlat5.x);
					    u_xlat2.xyz = vs_TEXCOORD4.yyy * unity_WorldToLight[1].xyz;
					    u_xlat2.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + unity_WorldToLight[3].xyz;
					    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat2 = texture(_LightTexture0, u_xlat2.xyz);
					    u_xlat3 = texture(_LightTextureB0, vec2(u_xlat10));
					    u_xlat10 = u_xlat2.w * u_xlat3.x;
					    u_xlat2.xyz = vec3(u_xlat10) * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * _SpecColor.xyz;
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat3.xyz;
					    u_xlat17 = max(u_xlat1.w, 9.99999975e-05);
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat17);
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.xxx + u_xlat5.xyz;
					    u_xlat15 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Bevel;
					//   float _BevelClamp;
					//   float _BevelOffset;
					//   float _BevelRoundness;
					//   float _BevelWidth;
					//   float _BumpFace;
					//   sampler2D _BumpMap;
					//   float _BumpOutline;
					//   float4 _FaceColor;
					//   float _FaceShininess;
					//   sampler2D _FaceTex;
					//   float _FaceUVSpeedX;
					//   float _FaceUVSpeedY;
					//   float _GradientScale;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float4 _OutlineColor;
					//   float _OutlineShininess;
					//   float _OutlineSoftness;
					//   sampler2D _OutlineTex;
					//   float _OutlineUVSpeedX;
					//   float _OutlineUVSpeedY;
					//   float _OutlineWidth;
					//   float _ScaleRatioA;
					//   float _ShaderFlags;
					//   float4 _SpecColor;
					//   float _TextureHeight;
					//   float _TextureWidth;
					//   float4 _Time;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       2
					//   _Time                c2       1
					//   _WorldSpaceCameraPos c3       1
					//   _WorldSpaceLightPos0 c4       1
					//   unity_FogParams      c5       1
					//   _LightColor0         c6       1
					//   _SpecColor           c7       1
					//   _FaceUVSpeedX        c8       1
					//   _FaceUVSpeedY        c9       1
					//   _FaceColor           c10      1
					//   _OutlineSoftness     c11      1
					//   _OutlineUVSpeedX     c12      1
					//   _OutlineUVSpeedY     c13      1
					//   _OutlineColor        c14      1
					//   _OutlineWidth        c15      1
					//   _Bevel               c16      1
					//   _BevelOffset         c17      1
					//   _BevelWidth          c18      1
					//   _BevelClamp          c19      1
					//   _BevelRoundness      c20      1
					//   _BumpOutline         c21      1
					//   _BumpFace            c22      1
					//   _ShaderFlags         c23      1
					//   _ScaleRatioA         c24      1
					//   _TextureWidth        c25      1
					//   _TextureHeight       c26      1
					//   _GradientScale       c27      1
					//   _FaceShininess       c28      1
					//   _OutlineShininess    c29      1
					//   _LightTexture0       s0       1
					//   _FaceTex             s1       1
					//   _OutlineTex          s2       1
					//   _BumpMap             s3       1
					//   _MainTex             s4       1
					//
					
					    ps_3_0
					    def c30, 10000, 0.00999999978, 2, -1
					    def c31, 0.249999955, 0.25, 6.28318548, -3.14159274
					    def c32, -2.52398507e-007, 2.47609005e-005, -0.00138883968, 0.0416666418
					    def c33, 128, 0, 0, 0
					    def c34, 0, 0.5, 1, -9.99999975e-005
					    dcl_texcoord v0
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_color_pp v5
					    dcl_texcoord5 v6.xy
					    dcl_texcoord7 v7.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    add r0.x, c17.x, v6.x
					    rcp r1.x, c25.x
					    rcp r1.w, c26.x
					    mov r1.yz, c34.x
					    add r2, -r1, v0.xyxy
					    add r1, r1, v0.xyxy
					    texld r3, r2, s4
					    texld r2, r2.zwzw, s4
					    mov r2.z, r2.w
					    mov r2.x, r3.w
					    texld r3, r1, s4
					    texld r1, r1.zwzw, s4
					    mov r2.w, r1.w
					    mov r2.y, r3.w
					    add r0, r0.x, r2
					    mov r1.x, c15.x
					    add r1.y, r1.x, c18.x
					    max r2.x, c30.y, r1.y
					    rcp r1.y, r2.x
					    mul r1.z, r2.x, c16.x
					    mul r1.z, r1.z, c27.x
					    mul r1.z, r1.z, -c30.z
					    lrp_sat r2, r1.y, r0, c34.y
					    mad r0, r2, c30.z, c30.w
					    add r0, -r0_abs, c34.z
					    mov r3.yz, c34
					    mul r1.y, r3.y, c23.x
					    frc r1.y, r1_abs.y
					    cmp r1.y, c23.x, r1.y, -r1.y
					    add r1.y, r1.y, -c34.y
					    cmp r0, r1.y, r0, r2
					    mad r2, r0, c31.x, c31.y
					    frc r2, r2
					    mad r2, r2, c31.z, c31.w
					    mul r2, r2, r2
					    mad r4, r2, c32.x, c32.y
					    mad r4, r2, r4, c32.z
					    mad r4, r2, r4, c32.w
					    mad r4, r2, r4, -c34.y
					    mad r2, r2, r4, c34.z
					    lrp r4, c20.x, r2, r0
					    add r0.x, r3.z, -c19.x
					    min r2, r0.x, r4
					    mul r0.xy, r1.z, r2.xzzw
					    mad r0.xy, r2.ywzw, r1.z, -r0
					    mov r0.w, -c34.z
					    dp2add r1.y, r0.wyzw, r0.wyzw, c34.x
					    mul r2.xyz, r0.wyww, c34.zzxw
					    rsq r0.y, r1.y
					    mul r1.yzw, r0.y, r2.xxyz
					    mov r0.z, c34.z
					    dp2add r0.y, r0.zxzw, r0.zxzw, c34.x
					    rsq r0.y, r0.y
					    mul r2.x, r0.y, r0.x
					    mul r2.yz, r0.y, c34.xzxw
					    mul r0.xyz, r1.yzww, r2
					    mad r0.xyz, r2.zxyw, r1.zwyw, -r0
					    mov r1.y, c2.y
					    mad r2.x, c12.x, r1.y, v0.z
					    mad r2.y, c13.x, r1.y, v0.w
					    texld r2, r2, s2
					    mul_pp r2.xyz, r2, c14
					    mul r0.w, c14.w, v5.w
					    mul_pp r3.w, r2.w, r0.w
					    mul_pp r3.xyz, r2, r3.w
					    mad r2.x, c8.x, r1.y, v0.z
					    mad r2.y, c9.x, r1.y, v0.w
					    texld r2, r2, s1
					    mul r4, c10, v5
					    mul_pp r2, r2, r4
					    mul_pp r2.xyz, r2.w, r2
					    mul r0.w, r1.x, c24.x
					    mad r1.x, r0.w, -v6.y, c34.z
					    mul_pp r0.w, r0.w, v6.y
					    rsq r1.y, r0.w
					    rcp_pp r1.y, r1.y
					    cmp_pp r1.x, r1.x, r1.y, c34.z
					    texld r4, v0, s4
					    add r1.y, -r4.w, c34.y
					    add r1.y, r1.y, -v6.x
					    mad_pp r1.y, r1.y, v6.y, c34.y
					    mad_sat_pp r1.z, r0.w, c34.y, r1.y
					    mad_pp r0.w, r0.w, -c34.y, r1.y
					    mul_pp r1.x, r1.x, r1.z
					    lrp_pp r4, r1.x, r3, r2
					    mov r1.x, c24.x
					    mul r1.x, r1.x, c11.x
					    mul_pp r1.y, r1.x, v6.y
					    mad_pp r1.x, r1.x, v6.y, c34.z
					    rcp r1.x, r1.x
					    mad_pp r0.w, r1.y, c34.y, r0.w
					    mul_sat_pp r0.w, r1.x, r0.w
					    add_pp r0.w, -r0.w, c34.z
					    mul_pp r2, r0.w, r4
					    mad r0.w, r4.w, r0.w, c34.w
					    mov r1.x, c22.x
					    add r1.x, -r1.x, c21.x
					    mad r1.x, r1.z, r1.x, c22.x
					    texld_pp r3, v0.zwzw, s3
					    mad_pp r3.xy, r3.wyzw, c30.z, c30.w
					    dp2add_sat_pp r1.y, r3, r3, c34.x
					    add_pp r1.y, -r1.y, c34.z
					    rsq_pp r1.y, r1.y
					    rcp_pp r3.z, r1.y
					    mad r1.xyw, r3.xyzz, r1.x, -c34.xxzz
					    mad r1.xyw, r2.w, r1, c34.xxzz
					    add r0.xyz, r0, -r1.xyww
					    nrm_pp r3.xyz, r0
					    dp3_pp r0.x, v1, -r3
					    dp3_pp r0.y, v2, -r3
					    dp3_pp r0.z, v3, -r3
					    add r1.xyw, c3.xyzz, -v4.xyzz
					    dp3 r3.x, r1.xyww, r1.xyww
					    rsq r3.x, r3.x
					    mad_pp r1.xyw, r1, r3.x, c4.xyzz
					    nrm_pp r3.xyz, r1.xyww
					    dp3_pp r1.x, r0, r3
					    dp3_pp r0.x, r0, c4
					    max_pp r1.y, r0.x, c34.x
					    max r0.x, r1.x, c34.x
					    mov r1.x, c28.x
					    add r0.y, -r1.x, c29.x
					    mad_pp r0.y, r1.z, r0.y, c28.x
					    mul r0.y, r0.y, c33.x
					    pow r1.x, r0.x, r0.y
					    mad r3, v4.xyzx, c34.zzzx, c34.xxxz
					    dp4 r0.x, c0, r3
					    dp4 r0.y, c1, r3
					    texld_pp r3, r0, s0
					    mul_pp r0.xyz, r3.w, c6
					    mul r3.xyz, r0, c7
					    mul r1.xzw, r1.x, r3.xyyz
					    rcp r3.x, r2.w
					    cmp r0.w, r0.w, r3.x, c30.x
					    mul_pp r2.xyz, r0.w, r2
					    mov_pp oC0.w, r2.w
					    mul_pp r0.xyz, r0, r2
					    mad_pp r0.xyz, r0, r1.y, r1.xzww
					    mul r0.w, c5.x, v7.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 151 instruction slots used (9 texture, 142 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						float _FaceUVSpeedX;
						float _FaceUVSpeedY;
						vec4 _FaceColor;
						float _OutlineSoftness;
						float _OutlineUVSpeedX;
						float _OutlineUVSpeedY;
						vec4 _OutlineColor;
						float _OutlineWidth;
						float _Bevel;
						float _BevelOffset;
						float _BevelWidth;
						float _BevelClamp;
						float _BevelRoundness;
						float _BumpOutline;
						float _BumpFace;
						vec4 unused_0_19[14];
						float _ShaderFlags;
						float _ScaleRatioA;
						vec4 unused_0_22[4];
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _FaceShininess;
						float _OutlineShininess;
						vec4 unused_0_28[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _FaceTex;
					uniform  sampler2D _OutlineTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD5;
					in  float vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat7;
					float u_xlat8;
					vec2 u_xlat10;
					bool u_xlatb11;
					float u_xlat13;
					float u_xlat15;
					float u_xlat17;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD5.x + _BevelOffset;
					    u_xlat1.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);
					    u_xlat1.z = 0.0;
					    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy).wxyz;
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.z = u_xlat2.w;
					    u_xlat2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.w = u_xlat1.w;
					    u_xlat3.y = u_xlat2.w;
					    u_xlat0 = u_xlat0.xxxx + u_xlat3;
					    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat1.x = _BevelWidth + _OutlineWidth;
					    u_xlat1.x = max(u_xlat1.x, 0.00999999978);
					    u_xlat0 = u_xlat0 / u_xlat1.xxxx;
					    u_xlat1.x = u_xlat1.x * _Bevel;
					    u_xlat1.x = u_xlat1.x * _GradientScale;
					    u_xlat1.x = u_xlat1.x * -2.0;
					    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat6 = _ShaderFlags * 0.5;
					    u_xlatb11 = u_xlat6>=(-u_xlat6);
					    u_xlat6 = fract(abs(u_xlat6));
					    u_xlat6 = (u_xlatb11) ? u_xlat6 : (-u_xlat6);
					    u_xlatb6 = u_xlat6>=0.5;
					    u_xlat0 = (bool(u_xlatb6)) ? u_xlat2 : u_xlat0;
					    u_xlat2 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);
					    u_xlat2 = sin(u_xlat2);
					    u_xlat2 = (-u_xlat0) + u_xlat2;
					    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;
					    u_xlat6 = (-_BevelClamp) + 1.0;
					    u_xlat0 = min(u_xlat0, vec4(u_xlat6));
					    u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;
					    u_xlat0.yz = u_xlat0.wy * u_xlat1.xx + (-u_xlat0.zx);
					    u_xlat0.x = float(-1.0);
					    u_xlat0.w = float(1.0);
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat15 = dot(u_xlat0.zw, u_xlat0.zw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.x = u_xlat15 * u_xlat0.z;
					    u_xlat2.yz = vec2(u_xlat15) * vec2(1.0, 0.0);
					    u_xlat0.z = 0.0;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat1.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat1 = texture(_OutlineTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _OutlineColor.xyz;
					    u_xlat15 = vs_COLOR0.w * _OutlineColor.w;
					    u_xlat2.w = u_xlat1.w * u_xlat15;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.www;
					    u_xlat1.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat1 = texture(_FaceTex, u_xlat1.xy);
					    u_xlat3 = vs_COLOR0 * _FaceColor;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2 = (-u_xlat1) + u_xlat2;
					    u_xlat15 = _OutlineWidth * _ScaleRatioA;
					    u_xlat15 = u_xlat15 * vs_TEXCOORD5.y;
					    u_xlat3.x = min(u_xlat15, 1.0);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8 = (-u_xlat4.w) + 0.5;
					    u_xlat8 = u_xlat8 + (-vs_TEXCOORD5.x);
					    u_xlat8 = u_xlat8 * vs_TEXCOORD5.y + 0.5;
					    u_xlat13 = u_xlat15 * 0.5 + u_xlat8;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) * 0.5 + u_xlat8;
					    u_xlat3.x = u_xlat3.x * u_xlat13;
					    u_xlat1 = u_xlat3.xxxx * u_xlat2 + u_xlat1;
					    u_xlat2.x = _OutlineSoftness * _ScaleRatioA;
					    u_xlat7 = u_xlat2.x * vs_TEXCOORD5.y;
					    u_xlat2.x = u_xlat2.x * vs_TEXCOORD5.y + 1.0;
					    u_xlat15 = u_xlat7 * 0.5 + u_xlat15;
					    u_xlat15 = u_xlat15 / u_xlat2.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat1 = vec4(u_xlat15) * u_xlat1;
					    u_xlat15 = (-_BumpFace) + _BumpOutline;
					    u_xlat15 = u_xlat13 * u_xlat15 + _BumpFace;
					    u_xlat2 = texture(_BumpMap, vs_TEXCOORD0.zw);
					    u_xlat2.xy = u_xlat2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat17 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat17 = min(u_xlat17, 1.0);
					    u_xlat17 = (-u_xlat17) + 1.0;
					    u_xlat2.z = sqrt(u_xlat17);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat15) + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.xyz = u_xlat1.www * u_xlat2.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, (-u_xlat0.xyz));
					    u_xlat2.y = dot(vs_TEXCOORD2.xyz, (-u_xlat0.xyz));
					    u_xlat2.z = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));
					    u_xlat0.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.y = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat10.x = (-_FaceShininess) + _OutlineShininess;
					    u_xlat10.x = u_xlat13 * u_xlat10.x + _FaceShininess;
					    u_xlat10.x = u_xlat10.x * 128.0;
					    u_xlat0.x = u_xlat0.x * u_xlat10.x;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat10.xy = vs_TEXCOORD4.yy * unity_WorldToLight[1].xy;
					    u_xlat10.xy = unity_WorldToLight[0].xy * vs_TEXCOORD4.xx + u_xlat10.xy;
					    u_xlat10.xy = unity_WorldToLight[2].xy * vs_TEXCOORD4.zz + u_xlat10.xy;
					    u_xlat10.xy = u_xlat10.xy + unity_WorldToLight[3].xy;
					    u_xlat2 = texture(_LightTexture0, u_xlat10.xy);
					    u_xlat2.xyz = u_xlat2.www * _LightColor0.xyz;
					    u_xlat3.xyz = u_xlat2.xyz * _SpecColor.xyz;
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat17 = max(u_xlat1.w, 9.99999975e-05);
					    u_xlat1.xyz = u_xlat1.xyz / vec3(u_xlat17);
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.yyy + u_xlat0.xzw;
					    u_xlat15 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat15 = u_xlat15 * _ProjectionParams.z;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat15 = u_xlat15 * unity_FogParams.x;
					    u_xlat15 = u_xlat15 * (-u_xlat15);
					    u_xlat15 = exp2(u_xlat15);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat15);
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT" "GLOW_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Bevel;
					//   float _BevelClamp;
					//   float _BevelOffset;
					//   float _BevelRoundness;
					//   float _BevelWidth;
					//   float _BumpFace;
					//   sampler2D _BumpMap;
					//   float _BumpOutline;
					//   float4 _FaceColor;
					//   float _FaceShininess;
					//   sampler2D _FaceTex;
					//   float _FaceUVSpeedX;
					//   float _FaceUVSpeedY;
					//   float4 _GlowColor;
					//   float _GlowInner;
					//   float _GlowOffset;
					//   float _GlowOuter;
					//   float _GlowPower;
					//   float _GradientScale;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float4 _OutlineColor;
					//   float _OutlineShininess;
					//   float _OutlineSoftness;
					//   sampler2D _OutlineTex;
					//   float _OutlineUVSpeedX;
					//   float _OutlineUVSpeedY;
					//   float _OutlineWidth;
					//   float _ScaleRatioA;
					//   float _ScaleRatioB;
					//   float _ShaderFlags;
					//   float4 _SpecColor;
					//   float _TextureHeight;
					//   float _TextureWidth;
					//   float4 _Time;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       3
					//   _Time                c3       1
					//   _WorldSpaceCameraPos c4       1
					//   _WorldSpaceLightPos0 c5       1
					//   _LightColor0         c6       1
					//   _SpecColor           c7       1
					//   _FaceUVSpeedX        c8       1
					//   _FaceUVSpeedY        c9       1
					//   _FaceColor           c10      1
					//   _OutlineSoftness     c11      1
					//   _OutlineUVSpeedX     c12      1
					//   _OutlineUVSpeedY     c13      1
					//   _OutlineColor        c14      1
					//   _OutlineWidth        c15      1
					//   _Bevel               c16      1
					//   _BevelOffset         c17      1
					//   _BevelWidth          c18      1
					//   _BevelClamp          c19      1
					//   _BevelRoundness      c20      1
					//   _BumpOutline         c21      1
					//   _BumpFace            c22      1
					//   _GlowColor           c23      1
					//   _GlowOffset          c24      1
					//   _GlowOuter           c25      1
					//   _GlowInner           c26      1
					//   _GlowPower           c27      1
					//   _ShaderFlags         c28      1
					//   _ScaleRatioA         c29      1
					//   _ScaleRatioB         c30      1
					//   _TextureWidth        c31      1
					//   _TextureHeight       c32      1
					//   _GradientScale       c33      1
					//   _FaceShininess       c34      1
					//   _OutlineShininess    c35      1
					//   _LightTexture0       s0       1
					//   _FaceTex             s1       1
					//   _OutlineTex          s2       1
					//   _BumpMap             s3       1
					//   _MainTex             s4       1
					//
					
					    ps_3_0
					    def c36, 10000, 0.00999999978, 2, -1
					    def c37, 0.249999955, 0.25, 6.28318548, -3.14159274
					    def c38, -2.52398507e-007, 2.47609005e-005, -0.00138883968, 0.0416666418
					    def c39, 128, 0, 0, 0
					    def c40, 0, 0.5, 1, -9.99999975e-005
					    dcl_texcoord v0
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_color_pp v5
					    dcl_texcoord5 v6.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    mov r0.x, c30.x
					    mul r0.y, r0.x, c24.x
					    mul r0.y, r0.y, v6.y
					    texld r1, v0, s4
					    add r0.z, -r1.w, c40.y
					    add r0.z, r0.z, -v6.x
					    mad_pp r0.z, r0.z, v6.y, c40.y
					    mad r0.y, r0.y, -c40.y, r0.z
					    mul r0.x, r0.x, c25.x
					    cmp r0.x, r0.y, r0.x, c26.x
					    mul r0.x, r0.x, v6.y
					    mad r0.w, r0.x, c40.y, c40.z
					    rcp r0.w, r0.w
					    mul r0.y, r0.w, r0.y
					    abs_sat r0.y, r0.y
					    pow r1.x, r0.y, c27.x
					    add r0.y, -r1.x, c40.z
					    mul r0.w, r0.x, c40.y
					    mad r0.x, r0.x, -c40.y, c40.z
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    cmp r0.x, r0.x, r0.w, c40.z
					    mul r0.x, r0.x, r0.y
					    mov r1.xyz, c40
					    dp2add_sat r0.x, c23.w, r0.x, r1.x
					    mul r0.x, r0.x, v5.w
					    mov r0.y, c3.y
					    mad r2.x, c12.x, r0.y, v0.z
					    mad r2.y, c13.x, r0.y, v0.w
					    texld r2, r2, s2
					    mul_pp r2.xyz, r2, c14
					    mul r0.w, c14.w, v5.w
					    mul_pp r3.w, r2.w, r0.w
					    mul_pp r3.xyz, r2, r3.w
					    mad r2.x, c8.x, r0.y, v0.z
					    mad r2.y, c9.x, r0.y, v0.w
					    texld r2, r2, s1
					    mul r4, c10, v5
					    mul_pp r2, r2, r4
					    mul_pp r2.xyz, r2.w, r2
					    mov r1.x, c15.x
					    mul r0.y, r1.x, c29.x
					    mad r0.w, r0.y, -v6.y, c40.z
					    mul_pp r0.y, r0.y, v6.y
					    rsq r1.w, r0.y
					    rcp_pp r1.w, r1.w
					    cmp_pp r0.w, r0.w, r1.w, c40.z
					    mad_sat_pp r1.w, r0.y, c40.y, r0.z
					    mad_pp r0.y, r0.y, -c40.y, r0.z
					    mul_pp r0.z, r0.w, r1.w
					    lrp_pp r4, r0.z, r3, r2
					    mov r2.x, c29.x
					    mul r0.z, r2.x, c11.x
					    mul_pp r0.w, r0.z, v6.y
					    mad_pp r0.z, r0.z, v6.y, c40.z
					    rcp r0.z, r0.z
					    mad_pp r0.y, r0.w, c40.y, r0.y
					    mul_sat_pp r0.y, r0.z, r0.y
					    add_pp r0.y, -r0.y, c40.z
					    mad r0.z, r4.w, r0.y, c40.w
					    mul_pp r2, r0.y, r4
					    mad r0.y, r4.w, -r0.y, c40.z
					    mad_pp r0.y, r0.y, r0.x, r2.w
					    rcp r0.w, r2.w
					    cmp r0.z, r0.z, r0.w, c36.x
					    mul r2.xyz, r0.z, r2
					    mul r2.xyz, r2.w, r2
					    lrp r3.xyz, r0.x, c23, r2
					    add r0.x, r0.y, c40.w
					    rcp r0.z, r0.y
					    mov_pp oC0.w, r0.y
					    cmp r0.x, r0.x, r0.z, c36.x
					    mul_pp r0.xyz, r0.x, r3
					    mad r3, v4.xyzx, c40.zzzx, c40.xxxz
					    dp4 r2.x, c0, r3
					    dp4 r2.y, c1, r3
					    dp4 r2.z, c2, r3
					    dp3 r0.w, r2, r2
					    texld_pp r3, r0.w, s0
					    mul_pp r2.xyz, r3.x, c6
					    mul_pp r0.xyz, r0, r2
					    mul r2.xyz, r2, c7
					    mov r3.x, c22.x
					    add r0.w, -r3.x, c21.x
					    mad r0.w, r1.w, r0.w, c22.x
					    texld_pp r3, v0.zwzw, s3
					    mad_pp r3.xy, r3.wyzw, c36.z, c36.w
					    dp2add_sat_pp r3.w, r3, r3, c40.x
					    add_pp r3.w, -r3.w, c40.z
					    rsq_pp r3.w, r3.w
					    rcp_pp r3.z, r3.w
					    mad r3.xyz, r3, r0.w, -c40.xxzw
					    mad r3.xyz, r2.w, r3, c40.xxzw
					    add r0.w, c17.x, v6.x
					    rcp r4.x, c31.x
					    rcp r4.w, c32.x
					    mov r4.yz, c40.x
					    add r5, -r4, v0.xyxy
					    add r4, r4, v0.xyxy
					    texld r6, r5, s4
					    texld r5, r5.zwzw, s4
					    mov r5.z, r5.w
					    mov r5.x, r6.w
					    texld r6, r4, s4
					    texld r4, r4.zwzw, s4
					    mov r5.w, r4.w
					    mov r5.y, r6.w
					    add r4, r0.w, r5
					    add r0.w, r1.x, c18.x
					    max r1.x, c36.y, r0.w
					    rcp r0.w, r1.x
					    mul r1.x, r1.x, c16.x
					    mul r1.x, r1.x, c33.x
					    mul r1.x, r1.x, -c36.z
					    lrp_sat r5, r0.w, r4, c40.y
					    mad r4, r5, c36.z, c36.w
					    add r4, -r4_abs, c40.z
					    mul r0.w, r1.y, c28.x
					    frc r0.w, r0_abs.w
					    cmp r0.w, c28.x, r0.w, -r0.w
					    add r0.w, r0.w, -c40.y
					    cmp r4, r0.w, r4, r5
					    mad r5, r4, c37.x, c37.y
					    frc r5, r5
					    mad r5, r5, c37.z, c37.w
					    mul r5, r5, r5
					    mad r6, r5, c38.x, c38.y
					    mad r6, r5, r6, c38.z
					    mad r6, r5, r6, c38.w
					    mad r6, r5, r6, -c40.y
					    mad r5, r5, r6, c40.z
					    lrp r6, c20.x, r5, r4
					    add r0.w, r1.z, -c19.x
					    min r4, r0.w, r6
					    mul r1.yz, r1.x, r4.xxzw
					    mad r4.xy, r4.ywzw, r1.x, -r1.yzzw
					    mov r4.w, -c40.z
					    dp2add r0.w, r4.wyzw, r4.wyzw, c40.x
					    mul r1.xyz, r4.wyww, c40.zzxw
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mov r4.z, c40.z
					    dp2add r0.w, r4.zxzw, r4.zxzw, c40.x
					    rsq r0.w, r0.w
					    mul r4.x, r0.w, r4.x
					    mul r4.yz, r0.w, c40.xzxw
					    mul r5.xyz, r1, r4
					    mad r1.xyz, r4.zxyw, r1.yzxw, -r5
					    add r1.xyz, -r3, r1
					    nrm_pp r3.xyz, r1
					    dp3_pp r1.x, v1, -r3
					    dp3_pp r1.y, v2, -r3
					    dp3_pp r1.z, v3, -r3
					    add r3.xyz, c4, -v4
					    dp3 r0.w, r3, r3
					    rsq r0.w, r0.w
					    add r4.xyz, c5, -v4
					    nrm_pp r5.xyz, r4
					    mad_pp r3.xyz, r3, r0.w, r5
					    dp3_pp r0.w, r1, r5
					    max_pp r2.w, r0.w, c40.x
					    nrm_pp r4.xyz, r3
					    dp3_pp r0.w, r1, r4
					    max r1.x, r0.w, c40.x
					    mov r3.x, c34.x
					    add r0.w, -r3.x, c35.x
					    mad_pp r0.w, r1.w, r0.w, c34.x
					    mul r0.w, r0.w, c39.x
					    pow r3.x, r1.x, r0.w
					    mul r1.xyz, r2, r3.x
					    mad_pp oC0.xyz, r0, r2.w, r1
					
					// approximately 185 instruction slots used (9 texture, 176 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "GLOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						float _FaceUVSpeedX;
						float _FaceUVSpeedY;
						vec4 _FaceColor;
						float _OutlineSoftness;
						float _OutlineUVSpeedX;
						float _OutlineUVSpeedY;
						vec4 _OutlineColor;
						float _OutlineWidth;
						float _Bevel;
						float _BevelOffset;
						float _BevelWidth;
						float _BevelClamp;
						float _BevelRoundness;
						float _BumpOutline;
						float _BumpFace;
						vec4 unused_0_19[12];
						vec4 _GlowColor;
						float _GlowOffset;
						float _GlowOuter;
						float _GlowInner;
						float _GlowPower;
						float _ShaderFlags;
						float _ScaleRatioA;
						float _ScaleRatioB;
						vec4 unused_0_28[3];
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _FaceShininess;
						float _OutlineShininess;
						vec4 unused_0_34[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _FaceTex;
					uniform  sampler2D _OutlineTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					float u_xlat10;
					float u_xlat14;
					bool u_xlatb14;
					float u_xlat21;
					float u_xlat22;
					bool u_xlatb22;
					bool u_xlatb23;
					void main()
					{
					    u_xlat0.x = _GlowOffset * _ScaleRatioB;
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD5.y;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat7 = (-u_xlat1.w) + 0.5;
					    u_xlat7 = u_xlat7 + (-vs_TEXCOORD5.x);
					    u_xlat7 = u_xlat7 * vs_TEXCOORD5.y + 0.5;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat7;
					    u_xlatb14 = u_xlat0.x>=0.0;
					    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat21 = _GlowOuter * _ScaleRatioB + (-_GlowInner);
					    u_xlat14 = u_xlat14 * u_xlat21 + _GlowInner;
					    u_xlat14 = u_xlat14 * vs_TEXCOORD5.y;
					    u_xlat21 = u_xlat14 * 0.5 + 1.0;
					    u_xlat14 = u_xlat14 * 0.5;
					    u_xlat14 = min(u_xlat14, 1.0);
					    u_xlat14 = sqrt(u_xlat14);
					    u_xlat0.x = u_xlat0.x / u_xlat21;
					    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _GlowPower;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat14 * u_xlat0.x;
					    u_xlat0.x = dot(_GlowColor.ww, u_xlat0.xx);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat14 = (-u_xlat0.x) * vs_COLOR0.w + 1.0;
					    u_xlat0.x = u_xlat0.x * vs_COLOR0.w;
					    u_xlat1.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat1 = texture(_OutlineTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _OutlineColor.xyz;
					    u_xlat21 = vs_COLOR0.w * _OutlineColor.w;
					    u_xlat2.w = u_xlat1.w * u_xlat21;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.www;
					    u_xlat1.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat1 = texture(_FaceTex, u_xlat1.xy);
					    u_xlat3 = vs_COLOR0 * _FaceColor;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2 = (-u_xlat1) + u_xlat2;
					    u_xlat21 = _OutlineWidth * _ScaleRatioA;
					    u_xlat21 = u_xlat21 * vs_TEXCOORD5.y;
					    u_xlat3.x = min(u_xlat21, 1.0);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat10 = u_xlat21 * 0.5 + u_xlat7;
					    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
					    u_xlat7 = (-u_xlat21) * 0.5 + u_xlat7;
					    u_xlat21 = u_xlat3.x * u_xlat10;
					    u_xlat1 = vec4(u_xlat21) * u_xlat2 + u_xlat1;
					    u_xlat21 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat2.x = u_xlat21 * vs_TEXCOORD5.y;
					    u_xlat21 = u_xlat21 * vs_TEXCOORD5.y + 1.0;
					    u_xlat7 = u_xlat2.x * 0.5 + u_xlat7;
					    u_xlat7 = u_xlat7 / u_xlat21;
					    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
					    u_xlat7 = (-u_xlat7) + 1.0;
					    u_xlat2 = vec4(u_xlat7) * u_xlat1;
					    u_xlat7 = (-u_xlat1.w) * u_xlat7 + 1.0;
					    u_xlat7 = u_xlat7 * u_xlat0.x + u_xlat2.w;
					    u_xlat21 = max(u_xlat2.w, 9.99999975e-05);
					    u_xlat1.xyz = u_xlat2.xyz / vec3(u_xlat21);
					    u_xlat1.xyz = u_xlat2.www * u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
					    u_xlat0.xzw = _GlowColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.x = max(u_xlat7, 9.99999975e-05);
					    SV_Target0.w = u_xlat7;
					    u_xlat0.xyz = u_xlat0.xzw / u_xlat1.xxx;
					    u_xlat1.xyz = vs_TEXCOORD4.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, vec2(u_xlat21));
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat21 = (-_BumpFace) + _BumpOutline;
					    u_xlat21 = u_xlat10 * u_xlat21 + _BumpFace;
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.zw);
					    u_xlat2.xy = u_xlat4.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat22 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat22 = min(u_xlat22, 1.0);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat2.z = sqrt(u_xlat22);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat21) + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat21 = vs_TEXCOORD5.x + _BevelOffset;
					    u_xlat4.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);
					    u_xlat4.z = 0.0;
					    u_xlat5 = (-u_xlat4.xzzy) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat4.xzzy + vs_TEXCOORD0.xyxy;
					    u_xlat6 = texture(_MainTex, u_xlat5.xy).wxyz;
					    u_xlat5 = texture(_MainTex, u_xlat5.zw);
					    u_xlat6.z = u_xlat5.w;
					    u_xlat5 = texture(_MainTex, u_xlat4.xy);
					    u_xlat4 = texture(_MainTex, u_xlat4.zw);
					    u_xlat6.w = u_xlat4.w;
					    u_xlat6.y = u_xlat5.w;
					    u_xlat4 = vec4(u_xlat21) + u_xlat6;
					    u_xlat4 = u_xlat4 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat21 = _BevelWidth + _OutlineWidth;
					    u_xlat21 = max(u_xlat21, 0.00999999978);
					    u_xlat4 = u_xlat4 / vec4(u_xlat21);
					    u_xlat21 = u_xlat21 * _Bevel;
					    u_xlat21 = u_xlat21 * _GradientScale;
					    u_xlat21 = u_xlat21 * -2.0;
					    u_xlat4 = u_xlat4 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					    u_xlat5 = u_xlat4 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat5 = -abs(u_xlat5) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat22 = _ShaderFlags * 0.5;
					    u_xlatb23 = u_xlat22>=(-u_xlat22);
					    u_xlat22 = fract(abs(u_xlat22));
					    u_xlat22 = (u_xlatb23) ? u_xlat22 : (-u_xlat22);
					    u_xlatb22 = u_xlat22>=0.5;
					    u_xlat4 = (bool(u_xlatb22)) ? u_xlat5 : u_xlat4;
					    u_xlat5 = u_xlat4 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);
					    u_xlat5 = sin(u_xlat5);
					    u_xlat5 = (-u_xlat4) + u_xlat5;
					    u_xlat4 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat5 + u_xlat4;
					    u_xlat22 = (-_BevelClamp) + 1.0;
					    u_xlat4 = min(vec4(u_xlat22), u_xlat4);
					    u_xlat3.xz = vec2(u_xlat21) * u_xlat4.xz;
					    u_xlat4.yz = u_xlat4.wy * vec2(u_xlat21) + (-u_xlat3.zx);
					    u_xlat4.x = float(-1.0);
					    u_xlat4.w = float(1.0);
					    u_xlat21 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat22 = dot(u_xlat4.zw, u_xlat4.zw);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat5.x = u_xlat22 * u_xlat4.z;
					    u_xlat5.yz = vec2(u_xlat22) * vec2(1.0, 0.0);
					    u_xlat4.z = 0.0;
					    u_xlat3.xzw = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xzw * u_xlat5.xyz;
					    u_xlat3.xzw = u_xlat5.zxy * u_xlat3.zwx + (-u_xlat4.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat3.xzw;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, (-u_xlat2.xyz));
					    u_xlat4.y = dot(vs_TEXCOORD2.xyz, (-u_xlat2.xyz));
					    u_xlat4.z = dot(vs_TEXCOORD3.xyz, (-u_xlat2.xyz));
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat3.xzw = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat3.xzw, u_xlat3.xzw);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xzw = u_xlat3.xzw * vec3(u_xlat21) + u_xlat2.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = dot(u_xlat3.xzw, u_xlat3.xzw);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * u_xlat3.xzw;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat22 = max(u_xlat22, 0.0);
					    u_xlat22 = log2(u_xlat22);
					    u_xlat2.x = (-_FaceShininess) + _OutlineShininess;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + _FaceShininess;
					    u_xlat2.x = u_xlat2.x * 128.0;
					    u_xlat22 = u_xlat22 * u_xlat2.x;
					    u_xlat22 = exp2(u_xlat22);
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat21) + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "GLOW_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Bevel;
					//   float _BevelClamp;
					//   float _BevelOffset;
					//   float _BevelRoundness;
					//   float _BevelWidth;
					//   float _BumpFace;
					//   sampler2D _BumpMap;
					//   float _BumpOutline;
					//   float4 _FaceColor;
					//   float _FaceShininess;
					//   sampler2D _FaceTex;
					//   float _FaceUVSpeedX;
					//   float _FaceUVSpeedY;
					//   float4 _GlowColor;
					//   float _GlowInner;
					//   float _GlowOffset;
					//   float _GlowOuter;
					//   float _GlowPower;
					//   float _GradientScale;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float4 _OutlineColor;
					//   float _OutlineShininess;
					//   float _OutlineSoftness;
					//   sampler2D _OutlineTex;
					//   float _OutlineUVSpeedX;
					//   float _OutlineUVSpeedY;
					//   float _OutlineWidth;
					//   float _ScaleRatioA;
					//   float _ScaleRatioB;
					//   float _ShaderFlags;
					//   float4 _SpecColor;
					//   float _TextureHeight;
					//   float _TextureWidth;
					//   float4 _Time;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _Time                c0       1
					//   _WorldSpaceCameraPos c1       1
					//   _WorldSpaceLightPos0 c2       1
					//   _LightColor0         c3       1
					//   _SpecColor           c4       1
					//   _FaceUVSpeedX        c5       1
					//   _FaceUVSpeedY        c6       1
					//   _FaceColor           c7       1
					//   _OutlineSoftness     c8       1
					//   _OutlineUVSpeedX     c9       1
					//   _OutlineUVSpeedY     c10      1
					//   _OutlineColor        c11      1
					//   _OutlineWidth        c12      1
					//   _Bevel               c13      1
					//   _BevelOffset         c14      1
					//   _BevelWidth          c15      1
					//   _BevelClamp          c16      1
					//   _BevelRoundness      c17      1
					//   _BumpOutline         c18      1
					//   _BumpFace            c19      1
					//   _GlowColor           c20      1
					//   _GlowOffset          c21      1
					//   _GlowOuter           c22      1
					//   _GlowInner           c23      1
					//   _GlowPower           c24      1
					//   _ShaderFlags         c25      1
					//   _ScaleRatioA         c26      1
					//   _ScaleRatioB         c27      1
					//   _TextureWidth        c28      1
					//   _TextureHeight       c29      1
					//   _GradientScale       c30      1
					//   _FaceShininess       c31      1
					//   _OutlineShininess    c32      1
					//   _FaceTex             s0       1
					//   _OutlineTex          s1       1
					//   _BumpMap             s2       1
					//   _MainTex             s3       1
					//
					
					    ps_3_0
					    def c33, 10000, 0.00999999978, 2, -1
					    def c34, 0.249999955, 0.25, 6.28318548, -3.14159274
					    def c35, -2.52398507e-007, 2.47609005e-005, -0.00138883968, 0.0416666418
					    def c36, 1, -1, 128, 0
					    def c37, 0, 0.5, 1, -9.99999975e-005
					    dcl_texcoord v0
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_color_pp v5
					    dcl_texcoord5 v6.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    mov r0.x, c27.x
					    mul r0.y, r0.x, c21.x
					    mul r0.y, r0.y, v6.y
					    texld r1, v0, s3
					    add r0.z, -r1.w, c37.y
					    add r0.z, r0.z, -v6.x
					    mad_pp r0.z, r0.z, v6.y, c37.y
					    mad r0.y, r0.y, -c37.y, r0.z
					    mul r0.x, r0.x, c22.x
					    cmp r0.x, r0.y, r0.x, c23.x
					    mul r0.x, r0.x, v6.y
					    mad r0.w, r0.x, c37.y, c37.z
					    rcp r0.w, r0.w
					    mul r0.y, r0.w, r0.y
					    abs_sat r0.y, r0.y
					    pow r1.x, r0.y, c24.x
					    add r0.y, -r1.x, c37.z
					    mul r0.w, r0.x, c37.y
					    mad r0.x, r0.x, -c37.y, c37.z
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    cmp r0.x, r0.x, r0.w, c37.z
					    mul r0.x, r0.x, r0.y
					    mov r1.xyz, c37
					    dp2add_sat r0.x, c20.w, r0.x, r1.x
					    mul r0.x, r0.x, v5.w
					    mov r0.y, c0.y
					    mad r2.x, c9.x, r0.y, v0.z
					    mad r2.y, c10.x, r0.y, v0.w
					    texld r2, r2, s1
					    mul_pp r2.xyz, r2, c11
					    mul r0.w, c11.w, v5.w
					    mul_pp r3.w, r2.w, r0.w
					    mul_pp r3.xyz, r2, r3.w
					    mad r2.x, c5.x, r0.y, v0.z
					    mad r2.y, c6.x, r0.y, v0.w
					    texld r2, r2, s0
					    mul r4, c7, v5
					    mul_pp r2, r2, r4
					    mul_pp r2.xyz, r2.w, r2
					    mov r1.x, c12.x
					    mul r0.y, r1.x, c26.x
					    mad r0.w, r0.y, -v6.y, c37.z
					    mul_pp r0.y, r0.y, v6.y
					    rsq r1.w, r0.y
					    rcp_pp r1.w, r1.w
					    cmp_pp r0.w, r0.w, r1.w, c37.z
					    mad_sat_pp r1.w, r0.y, c37.y, r0.z
					    mad_pp r0.y, r0.y, -c37.y, r0.z
					    mul_pp r0.z, r0.w, r1.w
					    lrp_pp r4, r0.z, r3, r2
					    mov r2.x, c26.x
					    mul r0.z, r2.x, c8.x
					    mul_pp r0.w, r0.z, v6.y
					    mad_pp r0.z, r0.z, v6.y, c37.z
					    rcp r0.z, r0.z
					    mad_pp r0.y, r0.w, c37.y, r0.y
					    mul_sat_pp r0.y, r0.z, r0.y
					    add_pp r0.y, -r0.y, c37.z
					    mad r0.z, r4.w, r0.y, c37.w
					    mul_pp r2, r0.y, r4
					    mad r0.y, r4.w, -r0.y, c37.z
					    mad_pp r0.y, r0.y, r0.x, r2.w
					    rcp r0.w, r2.w
					    cmp r0.z, r0.z, r0.w, c33.x
					    mul r2.xyz, r0.z, r2
					    mul r2.xyz, r2.w, r2
					    lrp r3.xyz, r0.x, c20, r2
					    add r0.x, r0.y, c37.w
					    rcp r0.z, r0.y
					    mov_pp oC0.w, r0.y
					    cmp r0.x, r0.x, r0.z, c33.x
					    mul_pp r0.xyz, r0.x, r3
					    mul_pp r0.xyz, r0, c3
					    mov r2.x, c19.x
					    add r0.w, -r2.x, c18.x
					    mad r0.w, r1.w, r0.w, c19.x
					    texld_pp r3, v0.zwzw, s2
					    mad_pp r2.xy, r3.wyzw, c33.z, c33.w
					    dp2add_sat_pp r3.x, r2, r2, c37.x
					    add_pp r3.x, -r3.x, c37.z
					    rsq_pp r3.x, r3.x
					    rcp_pp r2.z, r3.x
					    mad r2.xyz, r2, r0.w, -c37.xxzw
					    mad r2.xyz, r2.w, r2, c37.xxzw
					    add r0.w, c14.x, v6.x
					    rcp r3.x, c28.x
					    rcp r3.w, c29.x
					    mov r3.yz, c37.x
					    add r4, -r3, v0.xyxy
					    add r3, r3, v0.xyxy
					    texld r5, r4, s3
					    texld r4, r4.zwzw, s3
					    mov r4.z, r4.w
					    mov r4.x, r5.w
					    texld r5, r3, s3
					    texld r3, r3.zwzw, s3
					    mov r4.w, r3.w
					    mov r4.y, r5.w
					    add r3, r0.w, r4
					    add r0.w, r1.x, c15.x
					    max r1.x, c33.y, r0.w
					    rcp r0.w, r1.x
					    mul r1.x, r1.x, c13.x
					    mul r1.x, r1.x, c30.x
					    mul r1.x, r1.x, -c33.z
					    lrp_sat r4, r0.w, r3, c37.y
					    mad r3, r4, c33.z, c33.w
					    add r3, -r3_abs, c37.z
					    mul r0.w, r1.y, c25.x
					    frc r0.w, r0_abs.w
					    cmp r0.w, c25.x, r0.w, -r0.w
					    add r0.w, r0.w, -c37.y
					    cmp r3, r0.w, r3, r4
					    mad r4, r3, c34.x, c34.y
					    frc r4, r4
					    mad r4, r4, c34.z, c34.w
					    mul r4, r4, r4
					    mad r5, r4, c35.x, c35.y
					    mad r5, r4, r5, c35.z
					    mad r5, r4, r5, c35.w
					    mad r5, r4, r5, -c37.y
					    mad r4, r4, r5, c37.z
					    lrp r5, c17.x, r4, r3
					    add r0.w, r1.z, -c16.x
					    min r3, r0.w, r5
					    mul r1.yz, r1.x, r3.xxzw
					    mad r3.xy, r3.ywzw, r1.x, -r1.yzzw
					    mov r3.zw, c36.xyxy
					    dp2add r0.w, r3.wyzw, r3.wyzw, c37.x
					    rsq r0.w, r0.w
					    mul r1.xyz, r3.wyww, c37.zzxw
					    dp2add r2.w, r3.zxzw, r3.zxzw, c37.x
					    rsq r2.w, r2.w
					    mul r3.x, r2.w, r3.x
					    mul r3.yz, r2.w, c37.xzxw
					    mul r1.xyz, r0.w, r1
					    mul r4.xyz, r1, r3
					    mad r1.xyz, r3.zxyw, r1.yzxw, -r4
					    add r1.xyz, -r2, r1
					    nrm_pp r2.xyz, r1
					    dp3_pp r1.x, v1, -r2
					    dp3_pp r1.y, v2, -r2
					    dp3_pp r1.z, v3, -r2
					    add r2.xyz, c1, -v4
					    dp3 r0.w, r2, r2
					    rsq r0.w, r0.w
					    mad_pp r2.xyz, r2, r0.w, c2
					    nrm_pp r3.xyz, r2
					    dp3_pp r0.w, r1, r3
					    dp3_pp r1.x, r1, c2
					    max_pp r2.x, r1.x, c37.x
					    max r1.x, r0.w, c37.x
					    mov r3.x, c31.x
					    add r0.w, -r3.x, c32.x
					    mad_pp r0.w, r1.w, r0.w, c31.x
					    mul r0.w, r0.w, c36.z
					    pow r2.y, r1.x, r0.w
					    mov r1.xyz, c3
					    mul r1.xyz, r1, c4
					    mul r1.xyz, r2.y, r1
					    mad_pp oC0.xyz, r0, r2.x, r1
					
					// approximately 174 instruction slots used (8 texture, 166 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "GLOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						float _FaceUVSpeedX;
						float _FaceUVSpeedY;
						vec4 _FaceColor;
						float _OutlineSoftness;
						float _OutlineUVSpeedX;
						float _OutlineUVSpeedY;
						vec4 _OutlineColor;
						float _OutlineWidth;
						float _Bevel;
						float _BevelOffset;
						float _BevelWidth;
						float _BevelClamp;
						float _BevelRoundness;
						float _BumpOutline;
						float _BumpFace;
						vec4 unused_0_18[12];
						vec4 _GlowColor;
						float _GlowOffset;
						float _GlowOuter;
						float _GlowInner;
						float _GlowPower;
						float _ShaderFlags;
						float _ScaleRatioA;
						float _ScaleRatioB;
						vec4 unused_0_27[3];
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _FaceShininess;
						float _OutlineShininess;
						vec4 unused_0_33[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _FaceTex;
					uniform  sampler2D _OutlineTex;
					uniform  sampler2D _BumpMap;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					vec3 u_xlat7;
					float u_xlat9;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat18;
					float u_xlat19;
					bool u_xlatb19;
					void main()
					{
					    u_xlat0.x = _GlowOffset * _ScaleRatioB;
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD5.y;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat6 = (-u_xlat1.w) + 0.5;
					    u_xlat6 = u_xlat6 + (-vs_TEXCOORD5.x);
					    u_xlat6 = u_xlat6 * vs_TEXCOORD5.y + 0.5;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat6;
					    u_xlatb12 = u_xlat0.x>=0.0;
					    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat18 = _GlowOuter * _ScaleRatioB + (-_GlowInner);
					    u_xlat12 = u_xlat12 * u_xlat18 + _GlowInner;
					    u_xlat12 = u_xlat12 * vs_TEXCOORD5.y;
					    u_xlat18 = u_xlat12 * 0.5 + 1.0;
					    u_xlat12 = u_xlat12 * 0.5;
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat0.x = u_xlat0.x / u_xlat18;
					    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _GlowPower;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat12 * u_xlat0.x;
					    u_xlat0.x = dot(_GlowColor.ww, u_xlat0.xx);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat12 = (-u_xlat0.x) * vs_COLOR0.w + 1.0;
					    u_xlat0.x = u_xlat0.x * vs_COLOR0.w;
					    u_xlat1.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat1 = texture(_OutlineTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _OutlineColor.xyz;
					    u_xlat18 = vs_COLOR0.w * _OutlineColor.w;
					    u_xlat2.w = u_xlat1.w * u_xlat18;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.www;
					    u_xlat1.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat1 = texture(_FaceTex, u_xlat1.xy);
					    u_xlat3 = vs_COLOR0 * _FaceColor;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2 = (-u_xlat1) + u_xlat2;
					    u_xlat18 = _OutlineWidth * _ScaleRatioA;
					    u_xlat18 = u_xlat18 * vs_TEXCOORD5.y;
					    u_xlat3.x = min(u_xlat18, 1.0);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat9 = u_xlat18 * 0.5 + u_xlat6;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat6 = (-u_xlat18) * 0.5 + u_xlat6;
					    u_xlat18 = u_xlat3.x * u_xlat9;
					    u_xlat1 = vec4(u_xlat18) * u_xlat2 + u_xlat1;
					    u_xlat18 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat2.x = u_xlat18 * vs_TEXCOORD5.y;
					    u_xlat18 = u_xlat18 * vs_TEXCOORD5.y + 1.0;
					    u_xlat6 = u_xlat2.x * 0.5 + u_xlat6;
					    u_xlat6 = u_xlat6 / u_xlat18;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat2 = vec4(u_xlat6) * u_xlat1;
					    u_xlat6 = (-u_xlat1.w) * u_xlat6 + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat0.x + u_xlat2.w;
					    u_xlat18 = max(u_xlat2.w, 9.99999975e-05);
					    u_xlat1.xyz = u_xlat2.xyz / vec3(u_xlat18);
					    u_xlat1.xyz = u_xlat2.www * u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat0.xzw = _GlowColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.x = max(u_xlat6, 9.99999975e-05);
					    SV_Target0.w = u_xlat6;
					    u_xlat0.xyz = u_xlat0.xzw / u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat18 = (-_BumpFace) + _BumpOutline;
					    u_xlat18 = u_xlat9 * u_xlat18 + _BumpFace;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.zw);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat19 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat19 = min(u_xlat19, 1.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat1.z = sqrt(u_xlat19);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + vec3(-0.0, -0.0, -1.0);
					    u_xlat1.xyz = u_xlat2.www * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat18 = vs_TEXCOORD5.x + _BevelOffset;
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);
					    u_xlat2.z = 0.0;
					    u_xlat4 = (-u_xlat2.xzzy) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2.xzzy + vs_TEXCOORD0.xyxy;
					    u_xlat5 = texture(_MainTex, u_xlat4.xy).wxyz;
					    u_xlat4 = texture(_MainTex, u_xlat4.zw);
					    u_xlat5.z = u_xlat4.w;
					    u_xlat4 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat5.w = u_xlat2.w;
					    u_xlat5.y = u_xlat4.w;
					    u_xlat2 = vec4(u_xlat18) + u_xlat5;
					    u_xlat2 = u_xlat2 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat18 = _BevelWidth + _OutlineWidth;
					    u_xlat18 = max(u_xlat18, 0.00999999978);
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat18 = u_xlat18 * _Bevel;
					    u_xlat18 = u_xlat18 * _GradientScale;
					    u_xlat18 = u_xlat18 * -2.0;
					    u_xlat2 = u_xlat2 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat4 = u_xlat2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat4 = -abs(u_xlat4) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat19 = _ShaderFlags * 0.5;
					    u_xlatb3 = u_xlat19>=(-u_xlat19);
					    u_xlat19 = fract(abs(u_xlat19));
					    u_xlat19 = (u_xlatb3) ? u_xlat19 : (-u_xlat19);
					    u_xlatb19 = u_xlat19>=0.5;
					    u_xlat2 = (bool(u_xlatb19)) ? u_xlat4 : u_xlat2;
					    u_xlat4 = u_xlat2 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);
					    u_xlat4 = sin(u_xlat4);
					    u_xlat4 = (-u_xlat2) + u_xlat4;
					    u_xlat2 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat4 + u_xlat2;
					    u_xlat19 = (-_BevelClamp) + 1.0;
					    u_xlat2 = min(vec4(u_xlat19), u_xlat2);
					    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
					    u_xlat2.yz = u_xlat2.wy * vec2(u_xlat18) + (-u_xlat2.zx);
					    u_xlat2.x = float(-1.0);
					    u_xlat2.w = float(1.0);
					    u_xlat18 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat19 = dot(u_xlat2.zw, u_xlat2.zw);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.x = u_xlat19 * u_xlat2.z;
					    u_xlat4.yz = vec2(u_xlat19) * vec2(1.0, 0.0);
					    u_xlat2.z = 0.0;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat3.xzw = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat4.zxy * u_xlat2.yzx + (-u_xlat3.xzw);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, (-u_xlat1.xyz));
					    u_xlat2.y = dot(vs_TEXCOORD2.xyz, (-u_xlat1.xyz));
					    u_xlat2.z = dot(vs_TEXCOORD3.xyz, (-u_xlat1.xyz));
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = log2(u_xlat18);
					    u_xlat7.x = (-_FaceShininess) + _OutlineShininess;
					    u_xlat7.x = u_xlat9 * u_xlat7.x + _FaceShininess;
					    u_xlat7.x = u_xlat7.x * 128.0;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat7.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat7.xyz = vec3(u_xlat18) * u_xlat7.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat7.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "SPOT" "GLOW_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Bevel;
					//   float _BevelClamp;
					//   float _BevelOffset;
					//   float _BevelRoundness;
					//   float _BevelWidth;
					//   float _BumpFace;
					//   sampler2D _BumpMap;
					//   float _BumpOutline;
					//   float4 _FaceColor;
					//   float _FaceShininess;
					//   sampler2D _FaceTex;
					//   float _FaceUVSpeedX;
					//   float _FaceUVSpeedY;
					//   float4 _GlowColor;
					//   float _GlowInner;
					//   float _GlowOffset;
					//   float _GlowOuter;
					//   float _GlowPower;
					//   float _GradientScale;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float4 _OutlineColor;
					//   float _OutlineShininess;
					//   float _OutlineSoftness;
					//   sampler2D _OutlineTex;
					//   float _OutlineUVSpeedX;
					//   float _OutlineUVSpeedY;
					//   float _OutlineWidth;
					//   float _ScaleRatioA;
					//   float _ScaleRatioB;
					//   float _ShaderFlags;
					//   float4 _SpecColor;
					//   float _TextureHeight;
					//   float _TextureWidth;
					//   float4 _Time;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       4
					//   _Time                c4       1
					//   _WorldSpaceCameraPos c5       1
					//   _WorldSpaceLightPos0 c6       1
					//   _LightColor0         c7       1
					//   _SpecColor           c8       1
					//   _FaceUVSpeedX        c9       1
					//   _FaceUVSpeedY        c10      1
					//   _FaceColor           c11      1
					//   _OutlineSoftness     c12      1
					//   _OutlineUVSpeedX     c13      1
					//   _OutlineUVSpeedY     c14      1
					//   _OutlineColor        c15      1
					//   _OutlineWidth        c16      1
					//   _Bevel               c17      1
					//   _BevelOffset         c18      1
					//   _BevelWidth          c19      1
					//   _BevelClamp          c20      1
					//   _BevelRoundness      c21      1
					//   _BumpOutline         c22      1
					//   _BumpFace            c23      1
					//   _GlowColor           c24      1
					//   _GlowOffset          c25      1
					//   _GlowOuter           c26      1
					//   _GlowInner           c27      1
					//   _GlowPower           c28      1
					//   _ShaderFlags         c29      1
					//   _ScaleRatioA         c30      1
					//   _ScaleRatioB         c31      1
					//   _TextureWidth        c32      1
					//   _TextureHeight       c33      1
					//   _GradientScale       c34      1
					//   _FaceShininess       c35      1
					//   _OutlineShininess    c36      1
					//   _LightTexture0       s0       1
					//   _LightTextureB0      s1       1
					//   _FaceTex             s2       1
					//   _OutlineTex          s3       1
					//   _BumpMap             s4       1
					//   _MainTex             s5       1
					//
					
					    ps_3_0
					    def c37, 10000, 0.00999999978, 2, -1
					    def c38, 0.249999955, 0.25, 6.28318548, -3.14159274
					    def c39, -2.52398507e-007, 2.47609005e-005, -0.00138883968, 0.0416666418
					    def c40, 128, 0, 0, 0
					    def c41, 0, 0.5, 1, -9.99999975e-005
					    dcl_texcoord v0
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_color_pp v5
					    dcl_texcoord5 v6.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    mov r0.x, c31.x
					    mul r0.y, r0.x, c25.x
					    mul r0.y, r0.y, v6.y
					    texld r1, v0, s5
					    add r0.z, -r1.w, c41.y
					    add r0.z, r0.z, -v6.x
					    mad_pp r0.z, r0.z, v6.y, c41.y
					    mad r0.y, r0.y, -c41.y, r0.z
					    mul r0.x, r0.x, c26.x
					    cmp r0.x, r0.y, r0.x, c27.x
					    mul r0.x, r0.x, v6.y
					    mad r0.w, r0.x, c41.y, c41.z
					    rcp r0.w, r0.w
					    mul r0.y, r0.w, r0.y
					    abs_sat r0.y, r0.y
					    pow r1.x, r0.y, c28.x
					    add r0.y, -r1.x, c41.z
					    mul r0.w, r0.x, c41.y
					    mad r0.x, r0.x, -c41.y, c41.z
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    cmp r0.x, r0.x, r0.w, c41.z
					    mul r0.x, r0.x, r0.y
					    mov r1.xyz, c41
					    dp2add_sat r0.x, c24.w, r0.x, r1.x
					    mul r0.x, r0.x, v5.w
					    mov r0.y, c4.y
					    mad r2.x, c13.x, r0.y, v0.z
					    mad r2.y, c14.x, r0.y, v0.w
					    texld r2, r2, s3
					    mul_pp r2.xyz, r2, c15
					    mul r0.w, c15.w, v5.w
					    mul_pp r3.w, r2.w, r0.w
					    mul_pp r3.xyz, r2, r3.w
					    mad r2.x, c9.x, r0.y, v0.z
					    mad r2.y, c10.x, r0.y, v0.w
					    texld r2, r2, s2
					    mul r4, c11, v5
					    mul_pp r2, r2, r4
					    mul_pp r2.xyz, r2.w, r2
					    mov r1.x, c16.x
					    mul r0.y, r1.x, c30.x
					    mad r0.w, r0.y, -v6.y, c41.z
					    mul_pp r0.y, r0.y, v6.y
					    rsq r1.w, r0.y
					    rcp_pp r1.w, r1.w
					    cmp_pp r0.w, r0.w, r1.w, c41.z
					    mad_sat_pp r1.w, r0.y, c41.y, r0.z
					    mad_pp r0.y, r0.y, -c41.y, r0.z
					    mul_pp r0.z, r0.w, r1.w
					    lrp_pp r4, r0.z, r3, r2
					    mov r2.x, c30.x
					    mul r0.z, r2.x, c12.x
					    mul_pp r0.w, r0.z, v6.y
					    mad_pp r0.z, r0.z, v6.y, c41.z
					    rcp r0.z, r0.z
					    mad_pp r0.y, r0.w, c41.y, r0.y
					    mul_sat_pp r0.y, r0.z, r0.y
					    add_pp r0.y, -r0.y, c41.z
					    mad r0.z, r4.w, r0.y, c41.w
					    mul_pp r2, r0.y, r4
					    mad r0.y, r4.w, -r0.y, c41.z
					    mad_pp r0.y, r0.y, r0.x, r2.w
					    rcp r0.w, r2.w
					    cmp r0.z, r0.z, r0.w, c37.x
					    mul r2.xyz, r0.z, r2
					    mul r2.xyz, r2.w, r2
					    lrp r3.xyz, r0.x, c24, r2
					    add r0.x, r0.y, c41.w
					    rcp r0.z, r0.y
					    mov_pp oC0.w, r0.y
					    cmp r0.x, r0.x, r0.z, c37.x
					    mul_pp r0.xyz, r0.x, r3
					    mad r3, v4.xyzx, c41.zzzx, c41.xxxz
					    dp4 r0.w, c3, r3
					    rcp r0.w, r0.w
					    dp4 r2.x, c0, r3
					    dp4 r2.y, c1, r3
					    dp4 r2.z, c2, r3
					    mad r3.xy, r2, r0.w, c41.y
					    dp3 r0.w, r2, r2
					    texld_pp r4, r0.w, s1
					    texld_pp r3, r3, s0
					    mul r0.w, r4.x, r3.w
					    mul_pp r3.xyz, r0.w, c7
					    cmp_pp r2.xyz, -r2.z, c41.x, r3
					    mul_pp r0.xyz, r0, r2
					    mul r2.xyz, r2, c8
					    mov r3.x, c23.x
					    add r0.w, -r3.x, c22.x
					    mad r0.w, r1.w, r0.w, c23.x
					    texld_pp r3, v0.zwzw, s4
					    mad_pp r3.xy, r3.wyzw, c37.z, c37.w
					    dp2add_sat_pp r3.w, r3, r3, c41.x
					    add_pp r3.w, -r3.w, c41.z
					    rsq_pp r3.w, r3.w
					    rcp_pp r3.z, r3.w
					    mad r3.xyz, r3, r0.w, -c41.xxzw
					    mad r3.xyz, r2.w, r3, c41.xxzw
					    add r0.w, c18.x, v6.x
					    rcp r4.x, c32.x
					    rcp r4.w, c33.x
					    mov r4.yz, c41.x
					    add r5, -r4, v0.xyxy
					    add r4, r4, v0.xyxy
					    texld r6, r5, s5
					    texld r5, r5.zwzw, s5
					    mov r5.z, r5.w
					    mov r5.x, r6.w
					    texld r6, r4, s5
					    texld r4, r4.zwzw, s5
					    mov r5.w, r4.w
					    mov r5.y, r6.w
					    add r4, r0.w, r5
					    add r0.w, r1.x, c19.x
					    max r1.x, c37.y, r0.w
					    rcp r0.w, r1.x
					    mul r1.x, r1.x, c17.x
					    mul r1.x, r1.x, c34.x
					    mul r1.x, r1.x, -c37.z
					    lrp_sat r5, r0.w, r4, c41.y
					    mad r4, r5, c37.z, c37.w
					    add r4, -r4_abs, c41.z
					    mul r0.w, r1.y, c29.x
					    frc r0.w, r0_abs.w
					    cmp r0.w, c29.x, r0.w, -r0.w
					    add r0.w, r0.w, -c41.y
					    cmp r4, r0.w, r4, r5
					    mad r5, r4, c38.x, c38.y
					    frc r5, r5
					    mad r5, r5, c38.z, c38.w
					    mul r5, r5, r5
					    mad r6, r5, c39.x, c39.y
					    mad r6, r5, r6, c39.z
					    mad r6, r5, r6, c39.w
					    mad r6, r5, r6, -c41.y
					    mad r5, r5, r6, c41.z
					    lrp r6, c21.x, r5, r4
					    add r0.w, r1.z, -c20.x
					    min r4, r0.w, r6
					    mul r1.yz, r1.x, r4.xxzw
					    mad r4.xy, r4.ywzw, r1.x, -r1.yzzw
					    mov r4.w, -c41.z
					    dp2add r0.w, r4.wyzw, r4.wyzw, c41.x
					    mul r1.xyz, r4.wyww, c41.zzxw
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mov r4.z, c41.z
					    dp2add r0.w, r4.zxzw, r4.zxzw, c41.x
					    rsq r0.w, r0.w
					    mul r4.x, r0.w, r4.x
					    mul r4.yz, r0.w, c41.xzxw
					    mul r5.xyz, r1, r4
					    mad r1.xyz, r4.zxyw, r1.yzxw, -r5
					    add r1.xyz, -r3, r1
					    nrm_pp r3.xyz, r1
					    dp3_pp r1.x, v1, -r3
					    dp3_pp r1.y, v2, -r3
					    dp3_pp r1.z, v3, -r3
					    add r3.xyz, c5, -v4
					    dp3 r0.w, r3, r3
					    rsq r0.w, r0.w
					    add r4.xyz, c6, -v4
					    nrm_pp r5.xyz, r4
					    mad_pp r3.xyz, r3, r0.w, r5
					    dp3_pp r0.w, r1, r5
					    max_pp r2.w, r0.w, c41.x
					    nrm_pp r4.xyz, r3
					    dp3_pp r0.w, r1, r4
					    max r1.x, r0.w, c41.x
					    mov r3.x, c35.x
					    add r0.w, -r3.x, c36.x
					    mad_pp r0.w, r1.w, r0.w, c35.x
					    mul r0.w, r0.w, c40.x
					    pow r3.x, r1.x, r0.w
					    mul r1.xyz, r2, r3.x
					    mad_pp oC0.xyz, r0, r2.w, r1
					
					// approximately 191 instruction slots used (10 texture, 181 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "GLOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						float _FaceUVSpeedX;
						float _FaceUVSpeedY;
						vec4 _FaceColor;
						float _OutlineSoftness;
						float _OutlineUVSpeedX;
						float _OutlineUVSpeedY;
						vec4 _OutlineColor;
						float _OutlineWidth;
						float _Bevel;
						float _BevelOffset;
						float _BevelWidth;
						float _BevelClamp;
						float _BevelRoundness;
						float _BumpOutline;
						float _BumpFace;
						vec4 unused_0_19[12];
						vec4 _GlowColor;
						float _GlowOffset;
						float _GlowOuter;
						float _GlowInner;
						float _GlowPower;
						float _ShaderFlags;
						float _ScaleRatioA;
						float _ScaleRatioB;
						vec4 unused_0_28[3];
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _FaceShininess;
						float _OutlineShininess;
						vec4 unused_0_34[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _FaceTex;
					uniform  sampler2D _OutlineTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					float u_xlat10;
					float u_xlat14;
					bool u_xlatb14;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					bool u_xlatb22;
					bool u_xlatb23;
					void main()
					{
					    u_xlat0.x = _GlowOffset * _ScaleRatioB;
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD5.y;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat7 = (-u_xlat1.w) + 0.5;
					    u_xlat7 = u_xlat7 + (-vs_TEXCOORD5.x);
					    u_xlat7 = u_xlat7 * vs_TEXCOORD5.y + 0.5;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat7;
					    u_xlatb14 = u_xlat0.x>=0.0;
					    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat21 = _GlowOuter * _ScaleRatioB + (-_GlowInner);
					    u_xlat14 = u_xlat14 * u_xlat21 + _GlowInner;
					    u_xlat14 = u_xlat14 * vs_TEXCOORD5.y;
					    u_xlat21 = u_xlat14 * 0.5 + 1.0;
					    u_xlat14 = u_xlat14 * 0.5;
					    u_xlat14 = min(u_xlat14, 1.0);
					    u_xlat14 = sqrt(u_xlat14);
					    u_xlat0.x = u_xlat0.x / u_xlat21;
					    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _GlowPower;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat14 * u_xlat0.x;
					    u_xlat0.x = dot(_GlowColor.ww, u_xlat0.xx);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat14 = (-u_xlat0.x) * vs_COLOR0.w + 1.0;
					    u_xlat0.x = u_xlat0.x * vs_COLOR0.w;
					    u_xlat1.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat1 = texture(_OutlineTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _OutlineColor.xyz;
					    u_xlat21 = vs_COLOR0.w * _OutlineColor.w;
					    u_xlat2.w = u_xlat1.w * u_xlat21;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.www;
					    u_xlat1.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat1 = texture(_FaceTex, u_xlat1.xy);
					    u_xlat3 = vs_COLOR0 * _FaceColor;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2 = (-u_xlat1) + u_xlat2;
					    u_xlat21 = _OutlineWidth * _ScaleRatioA;
					    u_xlat21 = u_xlat21 * vs_TEXCOORD5.y;
					    u_xlat3.x = min(u_xlat21, 1.0);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat10 = u_xlat21 * 0.5 + u_xlat7;
					    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
					    u_xlat7 = (-u_xlat21) * 0.5 + u_xlat7;
					    u_xlat21 = u_xlat3.x * u_xlat10;
					    u_xlat1 = vec4(u_xlat21) * u_xlat2 + u_xlat1;
					    u_xlat21 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat2.x = u_xlat21 * vs_TEXCOORD5.y;
					    u_xlat21 = u_xlat21 * vs_TEXCOORD5.y + 1.0;
					    u_xlat7 = u_xlat2.x * 0.5 + u_xlat7;
					    u_xlat7 = u_xlat7 / u_xlat21;
					    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
					    u_xlat7 = (-u_xlat7) + 1.0;
					    u_xlat2 = vec4(u_xlat7) * u_xlat1;
					    u_xlat7 = (-u_xlat1.w) * u_xlat7 + 1.0;
					    u_xlat7 = u_xlat7 * u_xlat0.x + u_xlat2.w;
					    u_xlat21 = max(u_xlat2.w, 9.99999975e-05);
					    u_xlat1.xyz = u_xlat2.xyz / vec3(u_xlat21);
					    u_xlat1.xyz = u_xlat2.www * u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
					    u_xlat0.xzw = _GlowColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.x = max(u_xlat7, 9.99999975e-05);
					    SV_Target0.w = u_xlat7;
					    u_xlat0.xyz = u_xlat0.xzw / u_xlat1.xxx;
					    u_xlat1 = vs_TEXCOORD4.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD4.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD4.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat4 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb21 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
					    u_xlat21 = u_xlat4.w * u_xlat21;
					    u_xlat21 = u_xlat1.x * u_xlat21;
					    u_xlat1.xyz = vec3(u_xlat21) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat21 = (-_BumpFace) + _BumpOutline;
					    u_xlat21 = u_xlat10 * u_xlat21 + _BumpFace;
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.zw);
					    u_xlat2.xy = u_xlat4.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat22 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat22 = min(u_xlat22, 1.0);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat2.z = sqrt(u_xlat22);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat21) + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat21 = vs_TEXCOORD5.x + _BevelOffset;
					    u_xlat4.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);
					    u_xlat4.z = 0.0;
					    u_xlat5 = (-u_xlat4.xzzy) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat4.xzzy + vs_TEXCOORD0.xyxy;
					    u_xlat6 = texture(_MainTex, u_xlat5.xy).wxyz;
					    u_xlat5 = texture(_MainTex, u_xlat5.zw);
					    u_xlat6.z = u_xlat5.w;
					    u_xlat5 = texture(_MainTex, u_xlat4.xy);
					    u_xlat4 = texture(_MainTex, u_xlat4.zw);
					    u_xlat6.w = u_xlat4.w;
					    u_xlat6.y = u_xlat5.w;
					    u_xlat4 = vec4(u_xlat21) + u_xlat6;
					    u_xlat4 = u_xlat4 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat21 = _BevelWidth + _OutlineWidth;
					    u_xlat21 = max(u_xlat21, 0.00999999978);
					    u_xlat4 = u_xlat4 / vec4(u_xlat21);
					    u_xlat21 = u_xlat21 * _Bevel;
					    u_xlat21 = u_xlat21 * _GradientScale;
					    u_xlat21 = u_xlat21 * -2.0;
					    u_xlat4 = u_xlat4 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					    u_xlat5 = u_xlat4 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat5 = -abs(u_xlat5) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat22 = _ShaderFlags * 0.5;
					    u_xlatb23 = u_xlat22>=(-u_xlat22);
					    u_xlat22 = fract(abs(u_xlat22));
					    u_xlat22 = (u_xlatb23) ? u_xlat22 : (-u_xlat22);
					    u_xlatb22 = u_xlat22>=0.5;
					    u_xlat4 = (bool(u_xlatb22)) ? u_xlat5 : u_xlat4;
					    u_xlat5 = u_xlat4 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);
					    u_xlat5 = sin(u_xlat5);
					    u_xlat5 = (-u_xlat4) + u_xlat5;
					    u_xlat4 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat5 + u_xlat4;
					    u_xlat22 = (-_BevelClamp) + 1.0;
					    u_xlat4 = min(vec4(u_xlat22), u_xlat4);
					    u_xlat3.xz = vec2(u_xlat21) * u_xlat4.xz;
					    u_xlat4.yz = u_xlat4.wy * vec2(u_xlat21) + (-u_xlat3.zx);
					    u_xlat4.x = float(-1.0);
					    u_xlat4.w = float(1.0);
					    u_xlat21 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat22 = dot(u_xlat4.zw, u_xlat4.zw);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat5.x = u_xlat22 * u_xlat4.z;
					    u_xlat5.yz = vec2(u_xlat22) * vec2(1.0, 0.0);
					    u_xlat4.z = 0.0;
					    u_xlat3.xzw = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xzw * u_xlat5.xyz;
					    u_xlat3.xzw = u_xlat5.zxy * u_xlat3.zwx + (-u_xlat4.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat3.xzw;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, (-u_xlat2.xyz));
					    u_xlat4.y = dot(vs_TEXCOORD2.xyz, (-u_xlat2.xyz));
					    u_xlat4.z = dot(vs_TEXCOORD3.xyz, (-u_xlat2.xyz));
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat3.xzw = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat3.xzw, u_xlat3.xzw);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xzw = u_xlat3.xzw * vec3(u_xlat21) + u_xlat2.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = dot(u_xlat3.xzw, u_xlat3.xzw);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * u_xlat3.xzw;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat22 = max(u_xlat22, 0.0);
					    u_xlat22 = log2(u_xlat22);
					    u_xlat2.x = (-_FaceShininess) + _OutlineShininess;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + _FaceShininess;
					    u_xlat2.x = u_xlat2.x * 128.0;
					    u_xlat22 = u_xlat22 * u_xlat2.x;
					    u_xlat22 = exp2(u_xlat22);
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat21) + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT_COOKIE" "GLOW_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Bevel;
					//   float _BevelClamp;
					//   float _BevelOffset;
					//   float _BevelRoundness;
					//   float _BevelWidth;
					//   float _BumpFace;
					//   sampler2D _BumpMap;
					//   float _BumpOutline;
					//   float4 _FaceColor;
					//   float _FaceShininess;
					//   sampler2D _FaceTex;
					//   float _FaceUVSpeedX;
					//   float _FaceUVSpeedY;
					//   float4 _GlowColor;
					//   float _GlowInner;
					//   float _GlowOffset;
					//   float _GlowOuter;
					//   float _GlowPower;
					//   float _GradientScale;
					//   float4 _LightColor0;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float4 _OutlineColor;
					//   float _OutlineShininess;
					//   float _OutlineSoftness;
					//   sampler2D _OutlineTex;
					//   float _OutlineUVSpeedX;
					//   float _OutlineUVSpeedY;
					//   float _OutlineWidth;
					//   float _ScaleRatioA;
					//   float _ScaleRatioB;
					//   float _ShaderFlags;
					//   float4 _SpecColor;
					//   float _TextureHeight;
					//   float _TextureWidth;
					//   float4 _Time;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       3
					//   _Time                c3       1
					//   _WorldSpaceCameraPos c4       1
					//   _WorldSpaceLightPos0 c5       1
					//   _LightColor0         c6       1
					//   _SpecColor           c7       1
					//   _FaceUVSpeedX        c8       1
					//   _FaceUVSpeedY        c9       1
					//   _FaceColor           c10      1
					//   _OutlineSoftness     c11      1
					//   _OutlineUVSpeedX     c12      1
					//   _OutlineUVSpeedY     c13      1
					//   _OutlineColor        c14      1
					//   _OutlineWidth        c15      1
					//   _Bevel               c16      1
					//   _BevelOffset         c17      1
					//   _BevelWidth          c18      1
					//   _BevelClamp          c19      1
					//   _BevelRoundness      c20      1
					//   _BumpOutline         c21      1
					//   _BumpFace            c22      1
					//   _GlowColor           c23      1
					//   _GlowOffset          c24      1
					//   _GlowOuter           c25      1
					//   _GlowInner           c26      1
					//   _GlowPower           c27      1
					//   _ShaderFlags         c28      1
					//   _ScaleRatioA         c29      1
					//   _ScaleRatioB         c30      1
					//   _TextureWidth        c31      1
					//   _TextureHeight       c32      1
					//   _GradientScale       c33      1
					//   _FaceShininess       c34      1
					//   _OutlineShininess    c35      1
					//   _LightTexture0       s0       1
					//   _LightTextureB0      s1       1
					//   _FaceTex             s2       1
					//   _OutlineTex          s3       1
					//   _BumpMap             s4       1
					//   _MainTex             s5       1
					//
					
					    ps_3_0
					    def c36, 10000, 0.00999999978, 2, -1
					    def c37, 0.249999955, 0.25, 6.28318548, -3.14159274
					    def c38, -2.52398507e-007, 2.47609005e-005, -0.00138883968, 0.0416666418
					    def c39, 128, 0, 0, 0
					    def c40, 0, 0.5, 1, -9.99999975e-005
					    dcl_texcoord v0
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_color_pp v5
					    dcl_texcoord5 v6.xy
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    mov r0.x, c30.x
					    mul r0.y, r0.x, c24.x
					    mul r0.y, r0.y, v6.y
					    texld r1, v0, s5
					    add r0.z, -r1.w, c40.y
					    add r0.z, r0.z, -v6.x
					    mad_pp r0.z, r0.z, v6.y, c40.y
					    mad r0.y, r0.y, -c40.y, r0.z
					    mul r0.x, r0.x, c25.x
					    cmp r0.x, r0.y, r0.x, c26.x
					    mul r0.x, r0.x, v6.y
					    mad r0.w, r0.x, c40.y, c40.z
					    rcp r0.w, r0.w
					    mul r0.y, r0.w, r0.y
					    abs_sat r0.y, r0.y
					    pow r1.x, r0.y, c27.x
					    add r0.y, -r1.x, c40.z
					    mul r0.w, r0.x, c40.y
					    mad r0.x, r0.x, -c40.y, c40.z
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    cmp r0.x, r0.x, r0.w, c40.z
					    mul r0.x, r0.x, r0.y
					    mov r1.xyz, c40
					    dp2add_sat r0.x, c23.w, r0.x, r1.x
					    mul r0.x, r0.x, v5.w
					    mov r0.y, c3.y
					    mad r2.x, c12.x, r0.y, v0.z
					    mad r2.y, c13.x, r0.y, v0.w
					    texld r2, r2, s3
					    mul_pp r2.xyz, r2, c14
					    mul r0.w, c14.w, v5.w
					    mul_pp r3.w, r2.w, r0.w
					    mul_pp r3.xyz, r2, r3.w
					    mad r2.x, c8.x, r0.y, v0.z
					    mad r2.y, c9.x, r0.y, v0.w
					    texld r2, r2, s2
					    mul r4, c10, v5
					    mul_pp r2, r2, r4
					    mul_pp r2.xyz, r2.w, r2
					    mov r1.x, c15.x
					    mul r0.y, r1.x, c29.x
					    mad r0.w, r0.y, -v6.y, c40.z
					    mul_pp r0.y, r0.y, v6.y
					    rsq r1.w, r0.y
					    rcp_pp r1.w, r1.w
					    cmp_pp r0.w, r0.w, r1.w, c40.z
					    mad_sat_pp r1.w, r0.y, c40.y, r0.z
					    mad_pp r0.y, r0.y, -c40.y, r0.z
					    mul_pp r0.z, r0.w, r1.w
					    lrp_pp r4, r0.z, r3, r2
					    mov r2.x, c29.x
					    mul r0.z, r2.x, c11.x
					    mul_pp r0.w, r0.z, v6.y
					    mad_pp r0.z, r0.z, v6.y, c40.z
					    rcp r0.z, r0.z
					    mad_pp r0.y, r0.w, c40.y, r0.y
					    mul_sat_pp r0.y, r0.z, r0.y
					    add_pp r0.y, -r0.y, c40.z
					    mad r0.z, r4.w, r0.y, c40.w
					    mul_pp r2, r0.y, r4
					    mad r0.y, r4.w, -r0.y, c40.z
					    mad_pp r0.y, r0.y, r0.x, r2.w
					    rcp r0.w, r2.w
					    cmp r0.z, r0.z, r0.w, c36.x
					    mul r2.xyz, r0.z, r2
					    mul r2.xyz, r2.w, r2
					    lrp r3.xyz, r0.x, c23, r2
					    add r0.x, r0.y, c40.w
					    rcp r0.z, r0.y
					    mov_pp oC0.w, r0.y
					    cmp r0.x, r0.x, r0.z, c36.x
					    mul_pp r0.xyz, r0.x, r3
					    mad r3, v4.xyzx, c40.zzzx, c40.xxxz
					    dp4 r2.x, c0, r3
					    dp4 r2.y, c1, r3
					    dp4 r2.z, c2, r3
					    dp3 r0.w, r2, r2
					    texld r3, r2, s0
					    texld r4, r0.w, s1
					    mul_pp r0.w, r3.w, r4.x
					    mul_pp r2.xyz, r0.w, c6
					    mul_pp r0.xyz, r0, r2
					    mul r2.xyz, r2, c7
					    mov r3.x, c22.x
					    add r0.w, -r3.x, c21.x
					    mad r0.w, r1.w, r0.w, c22.x
					    texld_pp r3, v0.zwzw, s4
					    mad_pp r3.xy, r3.wyzw, c36.z, c36.w
					    dp2add_sat_pp r3.w, r3, r3, c40.x
					    add_pp r3.w, -r3.w, c40.z
					    rsq_pp r3.w, r3.w
					    rcp_pp r3.z, r3.w
					    mad r3.xyz, r3, r0.w, -c40.xxzw
					    mad r3.xyz, r2.w, r3, c40.xxzw
					    add r0.w, c17.x, v6.x
					    rcp r4.x, c31.x
					    rcp r4.w, c32.x
					    mov r4.yz, c40.x
					    add r5, -r4, v0.xyxy
					    add r4, r4, v0.xyxy
					    texld r6, r5, s5
					    texld r5, r5.zwzw, s5
					    mov r5.z, r5.w
					    mov r5.x, r6.w
					    texld r6, r4, s5
					    texld r4, r4.zwzw, s5
					    mov r5.w, r4.w
					    mov r5.y, r6.w
					    add r4, r0.w, r5
					    add r0.w, r1.x, c18.x
					    max r1.x, c36.y, r0.w
					    rcp r0.w, r1.x
					    mul r1.x, r1.x, c16.x
					    mul r1.x, r1.x, c33.x
					    mul r1.x, r1.x, -c36.z
					    lrp_sat r5, r0.w, r4, c40.y
					    mad r4, r5, c36.z, c36.w
					    add r4, -r4_abs, c40.z
					    mul r0.w, r1.y, c28.x
					    frc r0.w, r0_abs.w
					    cmp r0.w, c28.x, r0.w, -r0.w
					    add r0.w, r0.w, -c40.y
					    cmp r4, r0.w, r4, r5
					    mad r5, r4, c37.x, c37.y
					    frc r5, r5
					    mad r5, r5, c37.z, c37.w
					    mul r5, r5, r5
					    mad r6, r5, c38.x, c38.y
					    mad r6, r5, r6, c38.z
					    mad r6, r5, r6, c38.w
					    mad r6, r5, r6, -c40.y
					    mad r5, r5, r6, c40.z
					    lrp r6, c20.x, r5, r4
					    add r0.w, r1.z, -c19.x
					    min r4, r0.w, r6
					    mul r1.yz, r1.x, r4.xxzw
					    mad r4.xy, r4.ywzw, r1.x, -r1.yzzw
					    mov r4.w, -c40.z
					    dp2add r0.w, r4.wyzw, r4.wyzw, c40.x
					    mul r1.xyz, r4.wyww, c40.zzxw
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mov r4.z, c40.z
					    dp2add r0.w, r4.zxzw, r4.zxzw, c40.x
					    rsq r0.w, r0.w
					    mul r4.x, r0.w, r4.x
					    mul r4.yz, r0.w, c40.xzxw
					    mul r5.xyz, r1, r4
					    mad r1.xyz, r4.zxyw, r1.yzxw, -r5
					    add r1.xyz, -r3, r1
					    nrm_pp r3.xyz, r1
					    dp3_pp r1.x, v1, -r3
					    dp3_pp r1.y, v2, -r3
					    dp3_pp r1.z, v3, -r3
					    add r3.xyz, c4, -v4
					    dp3 r0.w, r3, r3
					    rsq r0.w, r0.w
					    add r4.xyz, c5, -v4
					    nrm_pp r5.xyz, r4
					    mad_pp r3.xyz, r3, r0.w, r5
					    dp3_pp r0.w, r1, r5
					    max_pp r2.w, r0.w, c40.x
					    nrm_pp r4.xyz, r3
					    dp3_pp r0.w, r1, r4
					    max r1.x, r0.w, c40.x
					    mov r3.x, c34.x
					    add r0.w, -r3.x, c35.x
					    mad_pp r0.w, r1.w, r0.w, c34.x
					    mul r0.w, r0.w, c39.x
					    pow r3.x, r1.x, r0.w
					    mul r1.xyz, r2, r3.x
					    mad_pp oC0.xyz, r0, r2.w, r1
					
					// approximately 187 instruction slots used (10 texture, 177 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "GLOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						float _FaceUVSpeedX;
						float _FaceUVSpeedY;
						vec4 _FaceColor;
						float _OutlineSoftness;
						float _OutlineUVSpeedX;
						float _OutlineUVSpeedY;
						vec4 _OutlineColor;
						float _OutlineWidth;
						float _Bevel;
						float _BevelOffset;
						float _BevelWidth;
						float _BevelClamp;
						float _BevelRoundness;
						float _BumpOutline;
						float _BumpFace;
						vec4 unused_0_19[12];
						vec4 _GlowColor;
						float _GlowOffset;
						float _GlowOuter;
						float _GlowInner;
						float _GlowPower;
						float _ShaderFlags;
						float _ScaleRatioA;
						float _ScaleRatioB;
						vec4 unused_0_28[3];
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _FaceShininess;
						float _OutlineShininess;
						vec4 unused_0_34[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _FaceTex;
					uniform  sampler2D _OutlineTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					float u_xlat10;
					float u_xlat14;
					bool u_xlatb14;
					float u_xlat21;
					float u_xlat22;
					bool u_xlatb22;
					bool u_xlatb23;
					void main()
					{
					    u_xlat0.x = _GlowOffset * _ScaleRatioB;
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD5.y;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat7 = (-u_xlat1.w) + 0.5;
					    u_xlat7 = u_xlat7 + (-vs_TEXCOORD5.x);
					    u_xlat7 = u_xlat7 * vs_TEXCOORD5.y + 0.5;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat7;
					    u_xlatb14 = u_xlat0.x>=0.0;
					    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat21 = _GlowOuter * _ScaleRatioB + (-_GlowInner);
					    u_xlat14 = u_xlat14 * u_xlat21 + _GlowInner;
					    u_xlat14 = u_xlat14 * vs_TEXCOORD5.y;
					    u_xlat21 = u_xlat14 * 0.5 + 1.0;
					    u_xlat14 = u_xlat14 * 0.5;
					    u_xlat14 = min(u_xlat14, 1.0);
					    u_xlat14 = sqrt(u_xlat14);
					    u_xlat0.x = u_xlat0.x / u_xlat21;
					    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _GlowPower;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat14 * u_xlat0.x;
					    u_xlat0.x = dot(_GlowColor.ww, u_xlat0.xx);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat14 = (-u_xlat0.x) * vs_COLOR0.w + 1.0;
					    u_xlat0.x = u_xlat0.x * vs_COLOR0.w;
					    u_xlat1.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat1 = texture(_OutlineTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _OutlineColor.xyz;
					    u_xlat21 = vs_COLOR0.w * _OutlineColor.w;
					    u_xlat2.w = u_xlat1.w * u_xlat21;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.www;
					    u_xlat1.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat1 = texture(_FaceTex, u_xlat1.xy);
					    u_xlat3 = vs_COLOR0 * _FaceColor;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2 = (-u_xlat1) + u_xlat2;
					    u_xlat21 = _OutlineWidth * _ScaleRatioA;
					    u_xlat21 = u_xlat21 * vs_TEXCOORD5.y;
					    u_xlat3.x = min(u_xlat21, 1.0);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat10 = u_xlat21 * 0.5 + u_xlat7;
					    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
					    u_xlat7 = (-u_xlat21) * 0.5 + u_xlat7;
					    u_xlat21 = u_xlat3.x * u_xlat10;
					    u_xlat1 = vec4(u_xlat21) * u_xlat2 + u_xlat1;
					    u_xlat21 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat2.x = u_xlat21 * vs_TEXCOORD5.y;
					    u_xlat21 = u_xlat21 * vs_TEXCOORD5.y + 1.0;
					    u_xlat7 = u_xlat2.x * 0.5 + u_xlat7;
					    u_xlat7 = u_xlat7 / u_xlat21;
					    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
					    u_xlat7 = (-u_xlat7) + 1.0;
					    u_xlat2 = vec4(u_xlat7) * u_xlat1;
					    u_xlat7 = (-u_xlat1.w) * u_xlat7 + 1.0;
					    u_xlat7 = u_xlat7 * u_xlat0.x + u_xlat2.w;
					    u_xlat21 = max(u_xlat2.w, 9.99999975e-05);
					    u_xlat1.xyz = u_xlat2.xyz / vec3(u_xlat21);
					    u_xlat1.xyz = u_xlat2.www * u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
					    u_xlat0.xzw = _GlowColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.x = max(u_xlat7, 9.99999975e-05);
					    SV_Target0.w = u_xlat7;
					    u_xlat0.xyz = u_xlat0.xzw / u_xlat1.xxx;
					    u_xlat1.xyz = vs_TEXCOORD4.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xyz);
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat21));
					    u_xlat21 = u_xlat1.w * u_xlat4.x;
					    u_xlat1.xyz = vec3(u_xlat21) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat21 = (-_BumpFace) + _BumpOutline;
					    u_xlat21 = u_xlat10 * u_xlat21 + _BumpFace;
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.zw);
					    u_xlat2.xy = u_xlat4.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat22 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat22 = min(u_xlat22, 1.0);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat2.z = sqrt(u_xlat22);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat21) + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat21 = vs_TEXCOORD5.x + _BevelOffset;
					    u_xlat4.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);
					    u_xlat4.z = 0.0;
					    u_xlat5 = (-u_xlat4.xzzy) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat4.xzzy + vs_TEXCOORD0.xyxy;
					    u_xlat6 = texture(_MainTex, u_xlat5.xy).wxyz;
					    u_xlat5 = texture(_MainTex, u_xlat5.zw);
					    u_xlat6.z = u_xlat5.w;
					    u_xlat5 = texture(_MainTex, u_xlat4.xy);
					    u_xlat4 = texture(_MainTex, u_xlat4.zw);
					    u_xlat6.w = u_xlat4.w;
					    u_xlat6.y = u_xlat5.w;
					    u_xlat4 = vec4(u_xlat21) + u_xlat6;
					    u_xlat4 = u_xlat4 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat21 = _BevelWidth + _OutlineWidth;
					    u_xlat21 = max(u_xlat21, 0.00999999978);
					    u_xlat4 = u_xlat4 / vec4(u_xlat21);
					    u_xlat21 = u_xlat21 * _Bevel;
					    u_xlat21 = u_xlat21 * _GradientScale;
					    u_xlat21 = u_xlat21 * -2.0;
					    u_xlat4 = u_xlat4 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					    u_xlat5 = u_xlat4 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat5 = -abs(u_xlat5) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat22 = _ShaderFlags * 0.5;
					    u_xlatb23 = u_xlat22>=(-u_xlat22);
					    u_xlat22 = fract(abs(u_xlat22));
					    u_xlat22 = (u_xlatb23) ? u_xlat22 : (-u_xlat22);
					    u_xlatb22 = u_xlat22>=0.5;
					    u_xlat4 = (bool(u_xlatb22)) ? u_xlat5 : u_xlat4;
					    u_xlat5 = u_xlat4 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);
					    u_xlat5 = sin(u_xlat5);
					    u_xlat5 = (-u_xlat4) + u_xlat5;
					    u_xlat4 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat5 + u_xlat4;
					    u_xlat22 = (-_BevelClamp) + 1.0;
					    u_xlat4 = min(vec4(u_xlat22), u_xlat4);
					    u_xlat3.xz = vec2(u_xlat21) * u_xlat4.xz;
					    u_xlat4.yz = u_xlat4.wy * vec2(u_xlat21) + (-u_xlat3.zx);
					    u_xlat4.x = float(-1.0);
					    u_xlat4.w = float(1.0);
					    u_xlat21 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat22 = dot(u_xlat4.zw, u_xlat4.zw);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat5.x = u_xlat22 * u_xlat4.z;
					    u_xlat5.yz = vec2(u_xlat22) * vec2(1.0, 0.0);
					    u_xlat4.z = 0.0;
					    u_xlat3.xzw = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xzw * u_xlat5.xyz;
					    u_xlat3.xzw = u_xlat5.zxy * u_xlat3.zwx + (-u_xlat4.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat3.xzw;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, (-u_xlat2.xyz));
					    u_xlat4.y = dot(vs_TEXCOORD2.xyz, (-u_xlat2.xyz));
					    u_xlat4.z = dot(vs_TEXCOORD3.xyz, (-u_xlat2.xyz));
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat3.xzw = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat3.xzw, u_xlat3.xzw);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xzw = u_xlat3.xzw * vec3(u_xlat21) + u_xlat2.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = dot(u_xlat3.xzw, u_xlat3.xzw);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * u_xlat3.xzw;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat22 = max(u_xlat22, 0.0);
					    u_xlat22 = log2(u_xlat22);
					    u_xlat2.x = (-_FaceShininess) + _OutlineShininess;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + _FaceShininess;
					    u_xlat2.x = u_xlat2.x * 128.0;
					    u_xlat22 = u_xlat22 * u_xlat2.x;
					    u_xlat22 = exp2(u_xlat22);
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat21) + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL_COOKIE" "GLOW_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Bevel;
					//   float _BevelClamp;
					//   float _BevelOffset;
					//   float _BevelRoundness;
					//   float _BevelWidth;
					//   float _BumpFace;
					//   sampler2D _BumpMap;
					//   float _BumpOutline;
					//   float4 _FaceColor;
					//   float _FaceShininess;
					//   sampler2D _FaceTex;
					//   float _FaceUVSpeedX;
					//   float _FaceUVSpeedY;
					//   float4 _GlowColor;
					//   float _GlowInner;
					//   float _GlowOffset;
					//   float _GlowOuter;
					//   float _GlowPower;
					//   float _GradientScale;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float4 _OutlineColor;
					//   float _OutlineShininess;
					//   float _OutlineSoftness;
					//   sampler2D _OutlineTex;
					//   float _OutlineUVSpeedX;
					//   float _OutlineUVSpeedY;
					//   float _OutlineWidth;
					//   float _ScaleRatioA;
					//   float _ScaleRatioB;
					//   float _ShaderFlags;
					//   float4 _SpecColor;
					//   float _TextureHeight;
					//   float _TextureWidth;
					//   float4 _Time;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       2
					//   _Time                c2       1
					//   _WorldSpaceCameraPos c3       1
					//   _WorldSpaceLightPos0 c4       1
					//   _LightColor0         c5       1
					//   _SpecColor           c6       1
					//   _FaceUVSpeedX        c7       1
					//   _FaceUVSpeedY        c8       1
					//   _FaceColor           c9       1
					//   _OutlineSoftness     c10      1
					//   _OutlineUVSpeedX     c11      1
					//   _OutlineUVSpeedY     c12      1
					//   _OutlineColor        c13      1
					//   _OutlineWidth        c14      1
					//   _Bevel               c15      1
					//   _BevelOffset         c16      1
					//   _BevelWidth          c17      1
					//   _BevelClamp          c18      1
					//   _BevelRoundness      c19      1
					//   _BumpOutline         c20      1
					//   _BumpFace            c21      1
					//   _GlowColor           c22      1
					//   _GlowOffset          c23      1
					//   _GlowOuter           c24      1
					//   _GlowInner           c25      1
					//   _GlowPower           c26      1
					//   _ShaderFlags         c27      1
					//   _ScaleRatioA         c28      1
					//   _ScaleRatioB         c29      1
					//   _TextureWidth        c30      1
					//   _TextureHeight       c31      1
					//   _GradientScale       c32      1
					//   _FaceShininess       c33      1
					//   _OutlineShininess    c34      1
					//   _LightTexture0       s0       1
					//   _FaceTex             s1       1
					//   _OutlineTex          s2       1
					//   _BumpMap             s3       1
					//   _MainTex             s4       1
					//
					
					    ps_3_0
					    def c35, 10000, 0.00999999978, 2, -1
					    def c36, 0.249999955, 0.25, 6.28318548, -3.14159274
					    def c37, -2.52398507e-007, 2.47609005e-005, -0.00138883968, 0.0416666418
					    def c38, 128, 0, 0, 0
					    def c39, 0, 0.5, 1, -9.99999975e-005
					    dcl_texcoord v0
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_color_pp v5
					    dcl_texcoord5 v6.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    mov r0.x, c29.x
					    mul r0.y, r0.x, c23.x
					    mul r0.y, r0.y, v6.y
					    texld r1, v0, s4
					    add r0.z, -r1.w, c39.y
					    add r0.z, r0.z, -v6.x
					    mad_pp r0.z, r0.z, v6.y, c39.y
					    mad r0.y, r0.y, -c39.y, r0.z
					    mul r0.x, r0.x, c24.x
					    cmp r0.x, r0.y, r0.x, c25.x
					    mul r0.x, r0.x, v6.y
					    mad r0.w, r0.x, c39.y, c39.z
					    rcp r0.w, r0.w
					    mul r0.y, r0.w, r0.y
					    abs_sat r0.y, r0.y
					    pow r1.x, r0.y, c26.x
					    add r0.y, -r1.x, c39.z
					    mul r0.w, r0.x, c39.y
					    mad r0.x, r0.x, -c39.y, c39.z
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    cmp r0.x, r0.x, r0.w, c39.z
					    mul r0.x, r0.x, r0.y
					    mov r1.xyz, c39
					    dp2add_sat r0.x, c22.w, r0.x, r1.x
					    mul r0.x, r0.x, v5.w
					    mov r0.y, c2.y
					    mad r2.x, c11.x, r0.y, v0.z
					    mad r2.y, c12.x, r0.y, v0.w
					    texld r2, r2, s2
					    mul_pp r2.xyz, r2, c13
					    mul r0.w, c13.w, v5.w
					    mul_pp r3.w, r2.w, r0.w
					    mul_pp r3.xyz, r2, r3.w
					    mad r2.x, c7.x, r0.y, v0.z
					    mad r2.y, c8.x, r0.y, v0.w
					    texld r2, r2, s1
					    mul r4, c9, v5
					    mul_pp r2, r2, r4
					    mul_pp r2.xyz, r2.w, r2
					    mov r1.x, c14.x
					    mul r0.y, r1.x, c28.x
					    mad r0.w, r0.y, -v6.y, c39.z
					    mul_pp r0.y, r0.y, v6.y
					    rsq r1.w, r0.y
					    rcp_pp r1.w, r1.w
					    cmp_pp r0.w, r0.w, r1.w, c39.z
					    mad_sat_pp r1.w, r0.y, c39.y, r0.z
					    mad_pp r0.y, r0.y, -c39.y, r0.z
					    mul_pp r0.z, r0.w, r1.w
					    lrp_pp r4, r0.z, r3, r2
					    mov r2.x, c28.x
					    mul r0.z, r2.x, c10.x
					    mul_pp r0.w, r0.z, v6.y
					    mad_pp r0.z, r0.z, v6.y, c39.z
					    rcp r0.z, r0.z
					    mad_pp r0.y, r0.w, c39.y, r0.y
					    mul_sat_pp r0.y, r0.z, r0.y
					    add_pp r0.y, -r0.y, c39.z
					    mad r0.z, r4.w, r0.y, c39.w
					    mul_pp r2, r0.y, r4
					    mad r0.y, r4.w, -r0.y, c39.z
					    mad_pp r0.y, r0.y, r0.x, r2.w
					    rcp r0.w, r2.w
					    cmp r0.z, r0.z, r0.w, c35.x
					    mul r2.xyz, r0.z, r2
					    mul r2.xyz, r2.w, r2
					    lrp r3.xyz, r0.x, c22, r2
					    add r0.x, r0.y, c39.w
					    rcp r0.z, r0.y
					    mov_pp oC0.w, r0.y
					    cmp r0.x, r0.x, r0.z, c35.x
					    mul_pp r0.xyz, r0.x, r3
					    mad r3, v4.xyzx, c39.zzzx, c39.xxxz
					    dp4 r2.x, c0, r3
					    dp4 r2.y, c1, r3
					    texld_pp r3, r2, s0
					    mul_pp r2.xyz, r3.w, c5
					    mul_pp r0.xyz, r0, r2
					    mul r2.xyz, r2, c6
					    mov r3.x, c21.x
					    add r0.w, -r3.x, c20.x
					    mad r0.w, r1.w, r0.w, c21.x
					    texld_pp r3, v0.zwzw, s3
					    mad_pp r3.xy, r3.wyzw, c35.z, c35.w
					    dp2add_sat_pp r3.w, r3, r3, c39.x
					    add_pp r3.w, -r3.w, c39.z
					    rsq_pp r3.w, r3.w
					    rcp_pp r3.z, r3.w
					    mad r3.xyz, r3, r0.w, -c39.xxzw
					    mad r3.xyz, r2.w, r3, c39.xxzw
					    add r0.w, c16.x, v6.x
					    rcp r4.x, c30.x
					    rcp r4.w, c31.x
					    mov r4.yz, c39.x
					    add r5, -r4, v0.xyxy
					    add r4, r4, v0.xyxy
					    texld r6, r5, s4
					    texld r5, r5.zwzw, s4
					    mov r5.z, r5.w
					    mov r5.x, r6.w
					    texld r6, r4, s4
					    texld r4, r4.zwzw, s4
					    mov r5.w, r4.w
					    mov r5.y, r6.w
					    add r4, r0.w, r5
					    add r0.w, r1.x, c17.x
					    max r1.x, c35.y, r0.w
					    rcp r0.w, r1.x
					    mul r1.x, r1.x, c15.x
					    mul r1.x, r1.x, c32.x
					    mul r1.x, r1.x, -c35.z
					    lrp_sat r5, r0.w, r4, c39.y
					    mad r4, r5, c35.z, c35.w
					    add r4, -r4_abs, c39.z
					    mul r0.w, r1.y, c27.x
					    frc r0.w, r0_abs.w
					    cmp r0.w, c27.x, r0.w, -r0.w
					    add r0.w, r0.w, -c39.y
					    cmp r4, r0.w, r4, r5
					    mad r5, r4, c36.x, c36.y
					    frc r5, r5
					    mad r5, r5, c36.z, c36.w
					    mul r5, r5, r5
					    mad r6, r5, c37.x, c37.y
					    mad r6, r5, r6, c37.z
					    mad r6, r5, r6, c37.w
					    mad r6, r5, r6, -c39.y
					    mad r5, r5, r6, c39.z
					    lrp r6, c19.x, r5, r4
					    add r0.w, r1.z, -c18.x
					    min r4, r0.w, r6
					    mul r1.yz, r1.x, r4.xxzw
					    mad r4.xy, r4.ywzw, r1.x, -r1.yzzw
					    mov r4.w, -c39.z
					    dp2add r0.w, r4.wyzw, r4.wyzw, c39.x
					    mul r1.xyz, r4.wyww, c39.zzxw
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mov r4.z, c39.z
					    dp2add r0.w, r4.zxzw, r4.zxzw, c39.x
					    rsq r0.w, r0.w
					    mul r4.x, r0.w, r4.x
					    mul r4.yz, r0.w, c39.xzxw
					    mul r5.xyz, r1, r4
					    mad r1.xyz, r4.zxyw, r1.yzxw, -r5
					    add r1.xyz, -r3, r1
					    nrm_pp r3.xyz, r1
					    dp3_pp r1.x, v1, -r3
					    dp3_pp r1.y, v2, -r3
					    dp3_pp r1.z, v3, -r3
					    add r3.xyz, c3, -v4
					    dp3 r0.w, r3, r3
					    rsq r0.w, r0.w
					    mad_pp r3.xyz, r3, r0.w, c4
					    nrm_pp r4.xyz, r3
					    dp3_pp r0.w, r1, r4
					    dp3_pp r1.x, r1, c4
					    max_pp r2.w, r1.x, c39.x
					    max r1.x, r0.w, c39.x
					    mov r3.x, c33.x
					    add r0.w, -r3.x, c34.x
					    mad_pp r0.w, r1.w, r0.w, c33.x
					    mul r0.w, r0.w, c38.x
					    pow r3.x, r1.x, r0.w
					    mul r1.xyz, r2, r3.x
					    mad_pp oC0.xyz, r0, r2.w, r1
					
					// approximately 179 instruction slots used (9 texture, 170 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "GLOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						float _FaceUVSpeedX;
						float _FaceUVSpeedY;
						vec4 _FaceColor;
						float _OutlineSoftness;
						float _OutlineUVSpeedX;
						float _OutlineUVSpeedY;
						vec4 _OutlineColor;
						float _OutlineWidth;
						float _Bevel;
						float _BevelOffset;
						float _BevelWidth;
						float _BevelClamp;
						float _BevelRoundness;
						float _BumpOutline;
						float _BumpFace;
						vec4 unused_0_19[12];
						vec4 _GlowColor;
						float _GlowOffset;
						float _GlowOuter;
						float _GlowInner;
						float _GlowPower;
						float _ShaderFlags;
						float _ScaleRatioA;
						float _ScaleRatioB;
						vec4 unused_0_28[3];
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _FaceShininess;
						float _OutlineShininess;
						vec4 unused_0_34[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_3[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _FaceTex;
					uniform  sampler2D _OutlineTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					float u_xlat10;
					float u_xlat14;
					bool u_xlatb14;
					float u_xlat21;
					float u_xlat22;
					bool u_xlatb22;
					bool u_xlatb23;
					void main()
					{
					    u_xlat0.x = _GlowOffset * _ScaleRatioB;
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD5.y;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat7 = (-u_xlat1.w) + 0.5;
					    u_xlat7 = u_xlat7 + (-vs_TEXCOORD5.x);
					    u_xlat7 = u_xlat7 * vs_TEXCOORD5.y + 0.5;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat7;
					    u_xlatb14 = u_xlat0.x>=0.0;
					    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat21 = _GlowOuter * _ScaleRatioB + (-_GlowInner);
					    u_xlat14 = u_xlat14 * u_xlat21 + _GlowInner;
					    u_xlat14 = u_xlat14 * vs_TEXCOORD5.y;
					    u_xlat21 = u_xlat14 * 0.5 + 1.0;
					    u_xlat14 = u_xlat14 * 0.5;
					    u_xlat14 = min(u_xlat14, 1.0);
					    u_xlat14 = sqrt(u_xlat14);
					    u_xlat0.x = u_xlat0.x / u_xlat21;
					    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _GlowPower;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat14 * u_xlat0.x;
					    u_xlat0.x = dot(_GlowColor.ww, u_xlat0.xx);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat14 = (-u_xlat0.x) * vs_COLOR0.w + 1.0;
					    u_xlat0.x = u_xlat0.x * vs_COLOR0.w;
					    u_xlat1.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat1 = texture(_OutlineTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _OutlineColor.xyz;
					    u_xlat21 = vs_COLOR0.w * _OutlineColor.w;
					    u_xlat2.w = u_xlat1.w * u_xlat21;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.www;
					    u_xlat1.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat1 = texture(_FaceTex, u_xlat1.xy);
					    u_xlat3 = vs_COLOR0 * _FaceColor;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2 = (-u_xlat1) + u_xlat2;
					    u_xlat21 = _OutlineWidth * _ScaleRatioA;
					    u_xlat21 = u_xlat21 * vs_TEXCOORD5.y;
					    u_xlat3.x = min(u_xlat21, 1.0);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat10 = u_xlat21 * 0.5 + u_xlat7;
					    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
					    u_xlat7 = (-u_xlat21) * 0.5 + u_xlat7;
					    u_xlat21 = u_xlat3.x * u_xlat10;
					    u_xlat1 = vec4(u_xlat21) * u_xlat2 + u_xlat1;
					    u_xlat21 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat2.x = u_xlat21 * vs_TEXCOORD5.y;
					    u_xlat21 = u_xlat21 * vs_TEXCOORD5.y + 1.0;
					    u_xlat7 = u_xlat2.x * 0.5 + u_xlat7;
					    u_xlat7 = u_xlat7 / u_xlat21;
					    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
					    u_xlat7 = (-u_xlat7) + 1.0;
					    u_xlat2 = vec4(u_xlat7) * u_xlat1;
					    u_xlat7 = (-u_xlat1.w) * u_xlat7 + 1.0;
					    u_xlat7 = u_xlat7 * u_xlat0.x + u_xlat2.w;
					    u_xlat21 = max(u_xlat2.w, 9.99999975e-05);
					    u_xlat1.xyz = u_xlat2.xyz / vec3(u_xlat21);
					    u_xlat1.xyz = u_xlat2.www * u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
					    u_xlat0.xzw = _GlowColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.x = max(u_xlat7, 9.99999975e-05);
					    SV_Target0.w = u_xlat7;
					    u_xlat0.xyz = u_xlat0.xzw / u_xlat1.xxx;
					    u_xlat1.xy = vs_TEXCOORD4.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * vs_TEXCOORD4.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * vs_TEXCOORD4.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + unity_WorldToLight[3].xy;
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.www * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat21 = (-_BumpFace) + _BumpOutline;
					    u_xlat21 = u_xlat10 * u_xlat21 + _BumpFace;
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.zw);
					    u_xlat2.xy = u_xlat4.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat22 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat22 = min(u_xlat22, 1.0);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat2.z = sqrt(u_xlat22);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat21) + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat21 = vs_TEXCOORD5.x + _BevelOffset;
					    u_xlat4.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);
					    u_xlat4.z = 0.0;
					    u_xlat5 = (-u_xlat4.xzzy) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat4.xzzy + vs_TEXCOORD0.xyxy;
					    u_xlat6 = texture(_MainTex, u_xlat5.xy).wxyz;
					    u_xlat5 = texture(_MainTex, u_xlat5.zw);
					    u_xlat6.z = u_xlat5.w;
					    u_xlat5 = texture(_MainTex, u_xlat4.xy);
					    u_xlat4 = texture(_MainTex, u_xlat4.zw);
					    u_xlat6.w = u_xlat4.w;
					    u_xlat6.y = u_xlat5.w;
					    u_xlat4 = vec4(u_xlat21) + u_xlat6;
					    u_xlat4 = u_xlat4 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat21 = _BevelWidth + _OutlineWidth;
					    u_xlat21 = max(u_xlat21, 0.00999999978);
					    u_xlat4 = u_xlat4 / vec4(u_xlat21);
					    u_xlat21 = u_xlat21 * _Bevel;
					    u_xlat21 = u_xlat21 * _GradientScale;
					    u_xlat21 = u_xlat21 * -2.0;
					    u_xlat4 = u_xlat4 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					    u_xlat5 = u_xlat4 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat5 = -abs(u_xlat5) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat22 = _ShaderFlags * 0.5;
					    u_xlatb23 = u_xlat22>=(-u_xlat22);
					    u_xlat22 = fract(abs(u_xlat22));
					    u_xlat22 = (u_xlatb23) ? u_xlat22 : (-u_xlat22);
					    u_xlatb22 = u_xlat22>=0.5;
					    u_xlat4 = (bool(u_xlatb22)) ? u_xlat5 : u_xlat4;
					    u_xlat5 = u_xlat4 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);
					    u_xlat5 = sin(u_xlat5);
					    u_xlat5 = (-u_xlat4) + u_xlat5;
					    u_xlat4 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat5 + u_xlat4;
					    u_xlat22 = (-_BevelClamp) + 1.0;
					    u_xlat4 = min(vec4(u_xlat22), u_xlat4);
					    u_xlat3.xz = vec2(u_xlat21) * u_xlat4.xz;
					    u_xlat4.yz = u_xlat4.wy * vec2(u_xlat21) + (-u_xlat3.zx);
					    u_xlat4.x = float(-1.0);
					    u_xlat4.w = float(1.0);
					    u_xlat21 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat22 = dot(u_xlat4.zw, u_xlat4.zw);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat5.x = u_xlat22 * u_xlat4.z;
					    u_xlat5.yz = vec2(u_xlat22) * vec2(1.0, 0.0);
					    u_xlat4.z = 0.0;
					    u_xlat3.xzw = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xzw * u_xlat5.xyz;
					    u_xlat3.xzw = u_xlat5.zxy * u_xlat3.zwx + (-u_xlat4.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat3.xzw;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, (-u_xlat2.xyz));
					    u_xlat4.y = dot(vs_TEXCOORD2.xyz, (-u_xlat2.xyz));
					    u_xlat4.z = dot(vs_TEXCOORD3.xyz, (-u_xlat2.xyz));
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat22 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat22 = max(u_xlat22, 0.0);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = log2(u_xlat21);
					    u_xlat2.x = (-_FaceShininess) + _OutlineShininess;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + _FaceShininess;
					    u_xlat2.x = u_xlat2.x * 128.0;
					    u_xlat21 = u_xlat21 * u_xlat2.x;
					    u_xlat21 = exp2(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat22) + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT" "FOG_EXP2" "GLOW_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Bevel;
					//   float _BevelClamp;
					//   float _BevelOffset;
					//   float _BevelRoundness;
					//   float _BevelWidth;
					//   float _BumpFace;
					//   sampler2D _BumpMap;
					//   float _BumpOutline;
					//   float4 _FaceColor;
					//   float _FaceShininess;
					//   sampler2D _FaceTex;
					//   float _FaceUVSpeedX;
					//   float _FaceUVSpeedY;
					//   float4 _GlowColor;
					//   float _GlowInner;
					//   float _GlowOffset;
					//   float _GlowOuter;
					//   float _GlowPower;
					//   float _GradientScale;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float4 _OutlineColor;
					//   float _OutlineShininess;
					//   float _OutlineSoftness;
					//   sampler2D _OutlineTex;
					//   float _OutlineUVSpeedX;
					//   float _OutlineUVSpeedY;
					//   float _OutlineWidth;
					//   float _ScaleRatioA;
					//   float _ScaleRatioB;
					//   float _ShaderFlags;
					//   float4 _SpecColor;
					//   float _TextureHeight;
					//   float _TextureWidth;
					//   float4 _Time;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       3
					//   _Time                c3       1
					//   _WorldSpaceCameraPos c4       1
					//   _WorldSpaceLightPos0 c5       1
					//   unity_FogParams      c6       1
					//   _LightColor0         c7       1
					//   _SpecColor           c8       1
					//   _FaceUVSpeedX        c9       1
					//   _FaceUVSpeedY        c10      1
					//   _FaceColor           c11      1
					//   _OutlineSoftness     c12      1
					//   _OutlineUVSpeedX     c13      1
					//   _OutlineUVSpeedY     c14      1
					//   _OutlineColor        c15      1
					//   _OutlineWidth        c16      1
					//   _Bevel               c17      1
					//   _BevelOffset         c18      1
					//   _BevelWidth          c19      1
					//   _BevelClamp          c20      1
					//   _BevelRoundness      c21      1
					//   _BumpOutline         c22      1
					//   _BumpFace            c23      1
					//   _GlowColor           c24      1
					//   _GlowOffset          c25      1
					//   _GlowOuter           c26      1
					//   _GlowInner           c27      1
					//   _GlowPower           c28      1
					//   _ShaderFlags         c29      1
					//   _ScaleRatioA         c30      1
					//   _ScaleRatioB         c31      1
					//   _TextureWidth        c32      1
					//   _TextureHeight       c33      1
					//   _GradientScale       c34      1
					//   _FaceShininess       c35      1
					//   _OutlineShininess    c36      1
					//   _LightTexture0       s0       1
					//   _FaceTex             s1       1
					//   _OutlineTex          s2       1
					//   _BumpMap             s3       1
					//   _MainTex             s4       1
					//
					
					    ps_3_0
					    def c37, 10000, 0.00999999978, 2, -1
					    def c38, 0.249999955, 0.25, 6.28318548, -3.14159274
					    def c39, -2.52398507e-007, 2.47609005e-005, -0.00138883968, 0.0416666418
					    def c40, 128, 0, 0, 0
					    def c41, 0, 0.5, 1, -9.99999975e-005
					    dcl_texcoord v0
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_color_pp v5
					    dcl_texcoord5 v6.xy
					    dcl_texcoord7 v7.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    mov r0.x, c31.x
					    mul r0.y, r0.x, c25.x
					    mul r0.y, r0.y, v6.y
					    texld r1, v0, s4
					    add r0.z, -r1.w, c41.y
					    add r0.z, r0.z, -v6.x
					    mad_pp r0.z, r0.z, v6.y, c41.y
					    mad r0.y, r0.y, -c41.y, r0.z
					    mul r0.x, r0.x, c26.x
					    cmp r0.x, r0.y, r0.x, c27.x
					    mul r0.x, r0.x, v6.y
					    mad r0.w, r0.x, c41.y, c41.z
					    rcp r0.w, r0.w
					    mul r0.y, r0.w, r0.y
					    abs_sat r0.y, r0.y
					    pow r1.x, r0.y, c28.x
					    add r0.y, -r1.x, c41.z
					    mul r0.w, r0.x, c41.y
					    mad r0.x, r0.x, -c41.y, c41.z
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    cmp r0.x, r0.x, r0.w, c41.z
					    mul r0.x, r0.x, r0.y
					    mov r1.xyz, c41
					    dp2add_sat r0.x, c24.w, r0.x, r1.x
					    mul r0.x, r0.x, v5.w
					    mov r0.y, c3.y
					    mad r2.x, c13.x, r0.y, v0.z
					    mad r2.y, c14.x, r0.y, v0.w
					    texld r2, r2, s2
					    mul_pp r2.xyz, r2, c15
					    mul r0.w, c15.w, v5.w
					    mul_pp r3.w, r2.w, r0.w
					    mul_pp r3.xyz, r2, r3.w
					    mad r2.x, c9.x, r0.y, v0.z
					    mad r2.y, c10.x, r0.y, v0.w
					    texld r2, r2, s1
					    mul r4, c11, v5
					    mul_pp r2, r2, r4
					    mul_pp r2.xyz, r2.w, r2
					    mov r1.x, c16.x
					    mul r0.y, r1.x, c30.x
					    mad r0.w, r0.y, -v6.y, c41.z
					    mul_pp r0.y, r0.y, v6.y
					    rsq r1.w, r0.y
					    rcp_pp r1.w, r1.w
					    cmp_pp r0.w, r0.w, r1.w, c41.z
					    mad_sat_pp r1.w, r0.y, c41.y, r0.z
					    mad_pp r0.y, r0.y, -c41.y, r0.z
					    mul_pp r0.z, r0.w, r1.w
					    lrp_pp r4, r0.z, r3, r2
					    mov r2.x, c30.x
					    mul r0.z, r2.x, c12.x
					    mul_pp r0.w, r0.z, v6.y
					    mad_pp r0.z, r0.z, v6.y, c41.z
					    rcp r0.z, r0.z
					    mad_pp r0.y, r0.w, c41.y, r0.y
					    mul_sat_pp r0.y, r0.z, r0.y
					    add_pp r0.y, -r0.y, c41.z
					    mad r0.z, r4.w, r0.y, c41.w
					    mul_pp r2, r0.y, r4
					    mad r0.y, r4.w, -r0.y, c41.z
					    mad_pp r0.y, r0.y, r0.x, r2.w
					    rcp r0.w, r2.w
					    cmp r0.z, r0.z, r0.w, c37.x
					    mul r2.xyz, r0.z, r2
					    mul r2.xyz, r2.w, r2
					    lrp r3.xyz, r0.x, c24, r2
					    add r0.x, r0.y, c41.w
					    rcp r0.z, r0.y
					    mov_pp oC0.w, r0.y
					    cmp r0.x, r0.x, r0.z, c37.x
					    mul_pp r0.xyz, r0.x, r3
					    mad r3, v4.xyzx, c41.zzzx, c41.xxxz
					    dp4 r2.x, c0, r3
					    dp4 r2.y, c1, r3
					    dp4 r2.z, c2, r3
					    dp3 r0.w, r2, r2
					    texld_pp r3, r0.w, s0
					    mul_pp r2.xyz, r3.x, c7
					    mul_pp r0.xyz, r0, r2
					    mul r2.xyz, r2, c8
					    mov r3.x, c23.x
					    add r0.w, -r3.x, c22.x
					    mad r0.w, r1.w, r0.w, c23.x
					    texld_pp r3, v0.zwzw, s3
					    mad_pp r3.xy, r3.wyzw, c37.z, c37.w
					    dp2add_sat_pp r3.w, r3, r3, c41.x
					    add_pp r3.w, -r3.w, c41.z
					    rsq_pp r3.w, r3.w
					    rcp_pp r3.z, r3.w
					    mad r3.xyz, r3, r0.w, -c41.xxzw
					    mad r3.xyz, r2.w, r3, c41.xxzw
					    add r0.w, c18.x, v6.x
					    rcp r4.x, c32.x
					    rcp r4.w, c33.x
					    mov r4.yz, c41.x
					    add r5, -r4, v0.xyxy
					    add r4, r4, v0.xyxy
					    texld r6, r5, s4
					    texld r5, r5.zwzw, s4
					    mov r5.z, r5.w
					    mov r5.x, r6.w
					    texld r6, r4, s4
					    texld r4, r4.zwzw, s4
					    mov r5.w, r4.w
					    mov r5.y, r6.w
					    add r4, r0.w, r5
					    add r0.w, r1.x, c19.x
					    max r1.x, c37.y, r0.w
					    rcp r0.w, r1.x
					    mul r1.x, r1.x, c17.x
					    mul r1.x, r1.x, c34.x
					    mul r1.x, r1.x, -c37.z
					    lrp_sat r5, r0.w, r4, c41.y
					    mad r4, r5, c37.z, c37.w
					    add r4, -r4_abs, c41.z
					    mul r0.w, r1.y, c29.x
					    frc r0.w, r0_abs.w
					    cmp r0.w, c29.x, r0.w, -r0.w
					    add r0.w, r0.w, -c41.y
					    cmp r4, r0.w, r4, r5
					    mad r5, r4, c38.x, c38.y
					    frc r5, r5
					    mad r5, r5, c38.z, c38.w
					    mul r5, r5, r5
					    mad r6, r5, c39.x, c39.y
					    mad r6, r5, r6, c39.z
					    mad r6, r5, r6, c39.w
					    mad r6, r5, r6, -c41.y
					    mad r5, r5, r6, c41.z
					    lrp r6, c21.x, r5, r4
					    add r0.w, r1.z, -c20.x
					    min r4, r0.w, r6
					    mul r1.yz, r1.x, r4.xxzw
					    mad r4.xy, r4.ywzw, r1.x, -r1.yzzw
					    mov r4.w, -c41.z
					    dp2add r0.w, r4.wyzw, r4.wyzw, c41.x
					    mul r1.xyz, r4.wyww, c41.zzxw
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mov r4.z, c41.z
					    dp2add r0.w, r4.zxzw, r4.zxzw, c41.x
					    rsq r0.w, r0.w
					    mul r4.x, r0.w, r4.x
					    mul r4.yz, r0.w, c41.xzxw
					    mul r5.xyz, r1, r4
					    mad r1.xyz, r4.zxyw, r1.yzxw, -r5
					    add r1.xyz, -r3, r1
					    nrm_pp r3.xyz, r1
					    dp3_pp r1.x, v1, -r3
					    dp3_pp r1.y, v2, -r3
					    dp3_pp r1.z, v3, -r3
					    add r3.xyz, c4, -v4
					    dp3 r0.w, r3, r3
					    rsq r0.w, r0.w
					    add r4.xyz, c5, -v4
					    nrm_pp r5.xyz, r4
					    mad_pp r3.xyz, r3, r0.w, r5
					    dp3_pp r0.w, r1, r5
					    max_pp r2.w, r0.w, c41.x
					    nrm_pp r4.xyz, r3
					    dp3_pp r0.w, r1, r4
					    max r1.x, r0.w, c41.x
					    mov r3.x, c35.x
					    add r0.w, -r3.x, c36.x
					    mad_pp r0.w, r1.w, r0.w, c35.x
					    mul r0.w, r0.w, c40.x
					    pow r3.x, r1.x, r0.w
					    mul r1.xyz, r2, r3.x
					    mad_pp r0.xyz, r0, r2.w, r1
					    mul r0.w, c6.x, v7.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 189 instruction slots used (9 texture, 180 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "FOG_EXP2" "GLOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						float _FaceUVSpeedX;
						float _FaceUVSpeedY;
						vec4 _FaceColor;
						float _OutlineSoftness;
						float _OutlineUVSpeedX;
						float _OutlineUVSpeedY;
						vec4 _OutlineColor;
						float _OutlineWidth;
						float _Bevel;
						float _BevelOffset;
						float _BevelWidth;
						float _BevelClamp;
						float _BevelRoundness;
						float _BumpOutline;
						float _BumpFace;
						vec4 unused_0_19[12];
						vec4 _GlowColor;
						float _GlowOffset;
						float _GlowOuter;
						float _GlowInner;
						float _GlowPower;
						float _ShaderFlags;
						float _ScaleRatioA;
						float _ScaleRatioB;
						vec4 unused_0_28[3];
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _FaceShininess;
						float _OutlineShininess;
						vec4 unused_0_34[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _FaceTex;
					uniform  sampler2D _OutlineTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD5;
					in  float vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					float u_xlat10;
					float u_xlat14;
					bool u_xlatb14;
					float u_xlat21;
					float u_xlat22;
					bool u_xlatb22;
					bool u_xlatb23;
					void main()
					{
					    u_xlat0.x = _GlowOffset * _ScaleRatioB;
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD5.y;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat7 = (-u_xlat1.w) + 0.5;
					    u_xlat7 = u_xlat7 + (-vs_TEXCOORD5.x);
					    u_xlat7 = u_xlat7 * vs_TEXCOORD5.y + 0.5;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat7;
					    u_xlatb14 = u_xlat0.x>=0.0;
					    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat21 = _GlowOuter * _ScaleRatioB + (-_GlowInner);
					    u_xlat14 = u_xlat14 * u_xlat21 + _GlowInner;
					    u_xlat14 = u_xlat14 * vs_TEXCOORD5.y;
					    u_xlat21 = u_xlat14 * 0.5 + 1.0;
					    u_xlat14 = u_xlat14 * 0.5;
					    u_xlat14 = min(u_xlat14, 1.0);
					    u_xlat14 = sqrt(u_xlat14);
					    u_xlat0.x = u_xlat0.x / u_xlat21;
					    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _GlowPower;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat14 * u_xlat0.x;
					    u_xlat0.x = dot(_GlowColor.ww, u_xlat0.xx);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat14 = (-u_xlat0.x) * vs_COLOR0.w + 1.0;
					    u_xlat0.x = u_xlat0.x * vs_COLOR0.w;
					    u_xlat1.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat1 = texture(_OutlineTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _OutlineColor.xyz;
					    u_xlat21 = vs_COLOR0.w * _OutlineColor.w;
					    u_xlat2.w = u_xlat1.w * u_xlat21;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.www;
					    u_xlat1.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat1 = texture(_FaceTex, u_xlat1.xy);
					    u_xlat3 = vs_COLOR0 * _FaceColor;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2 = (-u_xlat1) + u_xlat2;
					    u_xlat21 = _OutlineWidth * _ScaleRatioA;
					    u_xlat21 = u_xlat21 * vs_TEXCOORD5.y;
					    u_xlat3.x = min(u_xlat21, 1.0);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat10 = u_xlat21 * 0.5 + u_xlat7;
					    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
					    u_xlat7 = (-u_xlat21) * 0.5 + u_xlat7;
					    u_xlat21 = u_xlat3.x * u_xlat10;
					    u_xlat1 = vec4(u_xlat21) * u_xlat2 + u_xlat1;
					    u_xlat21 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat2.x = u_xlat21 * vs_TEXCOORD5.y;
					    u_xlat21 = u_xlat21 * vs_TEXCOORD5.y + 1.0;
					    u_xlat7 = u_xlat2.x * 0.5 + u_xlat7;
					    u_xlat7 = u_xlat7 / u_xlat21;
					    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
					    u_xlat7 = (-u_xlat7) + 1.0;
					    u_xlat2 = vec4(u_xlat7) * u_xlat1;
					    u_xlat7 = (-u_xlat1.w) * u_xlat7 + 1.0;
					    u_xlat7 = u_xlat7 * u_xlat0.x + u_xlat2.w;
					    u_xlat21 = max(u_xlat2.w, 9.99999975e-05);
					    u_xlat1.xyz = u_xlat2.xyz / vec3(u_xlat21);
					    u_xlat1.xyz = u_xlat2.www * u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
					    u_xlat0.xzw = _GlowColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.x = max(u_xlat7, 9.99999975e-05);
					    SV_Target0.w = u_xlat7;
					    u_xlat0.xyz = u_xlat0.xzw / u_xlat1.xxx;
					    u_xlat1.xyz = vs_TEXCOORD4.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, vec2(u_xlat21));
					    u_xlat1.xyz = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat21 = (-_BumpFace) + _BumpOutline;
					    u_xlat21 = u_xlat10 * u_xlat21 + _BumpFace;
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.zw);
					    u_xlat2.xy = u_xlat4.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat22 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat22 = min(u_xlat22, 1.0);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat2.z = sqrt(u_xlat22);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat21) + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat21 = vs_TEXCOORD5.x + _BevelOffset;
					    u_xlat4.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);
					    u_xlat4.z = 0.0;
					    u_xlat5 = (-u_xlat4.xzzy) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat4.xzzy + vs_TEXCOORD0.xyxy;
					    u_xlat6 = texture(_MainTex, u_xlat5.xy).wxyz;
					    u_xlat5 = texture(_MainTex, u_xlat5.zw);
					    u_xlat6.z = u_xlat5.w;
					    u_xlat5 = texture(_MainTex, u_xlat4.xy);
					    u_xlat4 = texture(_MainTex, u_xlat4.zw);
					    u_xlat6.w = u_xlat4.w;
					    u_xlat6.y = u_xlat5.w;
					    u_xlat4 = vec4(u_xlat21) + u_xlat6;
					    u_xlat4 = u_xlat4 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat21 = _BevelWidth + _OutlineWidth;
					    u_xlat21 = max(u_xlat21, 0.00999999978);
					    u_xlat4 = u_xlat4 / vec4(u_xlat21);
					    u_xlat21 = u_xlat21 * _Bevel;
					    u_xlat21 = u_xlat21 * _GradientScale;
					    u_xlat21 = u_xlat21 * -2.0;
					    u_xlat4 = u_xlat4 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					    u_xlat5 = u_xlat4 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat5 = -abs(u_xlat5) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat22 = _ShaderFlags * 0.5;
					    u_xlatb23 = u_xlat22>=(-u_xlat22);
					    u_xlat22 = fract(abs(u_xlat22));
					    u_xlat22 = (u_xlatb23) ? u_xlat22 : (-u_xlat22);
					    u_xlatb22 = u_xlat22>=0.5;
					    u_xlat4 = (bool(u_xlatb22)) ? u_xlat5 : u_xlat4;
					    u_xlat5 = u_xlat4 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);
					    u_xlat5 = sin(u_xlat5);
					    u_xlat5 = (-u_xlat4) + u_xlat5;
					    u_xlat4 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat5 + u_xlat4;
					    u_xlat22 = (-_BevelClamp) + 1.0;
					    u_xlat4 = min(vec4(u_xlat22), u_xlat4);
					    u_xlat3.xz = vec2(u_xlat21) * u_xlat4.xz;
					    u_xlat4.yz = u_xlat4.wy * vec2(u_xlat21) + (-u_xlat3.zx);
					    u_xlat4.x = float(-1.0);
					    u_xlat4.w = float(1.0);
					    u_xlat21 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat22 = dot(u_xlat4.zw, u_xlat4.zw);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat5.x = u_xlat22 * u_xlat4.z;
					    u_xlat5.yz = vec2(u_xlat22) * vec2(1.0, 0.0);
					    u_xlat4.z = 0.0;
					    u_xlat3.xzw = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xzw * u_xlat5.xyz;
					    u_xlat3.xzw = u_xlat5.zxy * u_xlat3.zwx + (-u_xlat4.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat3.xzw;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, (-u_xlat2.xyz));
					    u_xlat4.y = dot(vs_TEXCOORD2.xyz, (-u_xlat2.xyz));
					    u_xlat4.z = dot(vs_TEXCOORD3.xyz, (-u_xlat2.xyz));
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat3.xzw = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat3.xzw, u_xlat3.xzw);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xzw = u_xlat3.xzw * vec3(u_xlat21) + u_xlat2.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = dot(u_xlat3.xzw, u_xlat3.xzw);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * u_xlat3.xzw;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat22 = max(u_xlat22, 0.0);
					    u_xlat22 = log2(u_xlat22);
					    u_xlat2.x = (-_FaceShininess) + _OutlineShininess;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + _FaceShininess;
					    u_xlat2.x = u_xlat2.x * 128.0;
					    u_xlat22 = u_xlat22 * u_xlat2.x;
					    u_xlat22 = exp2(u_xlat22);
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21) + u_xlat1.xyz;
					    u_xlat21 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat21 = u_xlat21 * _ProjectionParams.z;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = u_xlat21 * unity_FogParams.x;
					    u_xlat21 = u_xlat21 * (-u_xlat21);
					    u_xlat21 = exp2(u_xlat21);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat21);
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "GLOW_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Bevel;
					//   float _BevelClamp;
					//   float _BevelOffset;
					//   float _BevelRoundness;
					//   float _BevelWidth;
					//   float _BumpFace;
					//   sampler2D _BumpMap;
					//   float _BumpOutline;
					//   float4 _FaceColor;
					//   float _FaceShininess;
					//   sampler2D _FaceTex;
					//   float _FaceUVSpeedX;
					//   float _FaceUVSpeedY;
					//   float4 _GlowColor;
					//   float _GlowInner;
					//   float _GlowOffset;
					//   float _GlowOuter;
					//   float _GlowPower;
					//   float _GradientScale;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float4 _OutlineColor;
					//   float _OutlineShininess;
					//   float _OutlineSoftness;
					//   sampler2D _OutlineTex;
					//   float _OutlineUVSpeedX;
					//   float _OutlineUVSpeedY;
					//   float _OutlineWidth;
					//   float _ScaleRatioA;
					//   float _ScaleRatioB;
					//   float _ShaderFlags;
					//   float4 _SpecColor;
					//   float _TextureHeight;
					//   float _TextureWidth;
					//   float4 _Time;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _Time                c0       1
					//   _WorldSpaceCameraPos c1       1
					//   _WorldSpaceLightPos0 c2       1
					//   unity_FogParams      c3       1
					//   _LightColor0         c4       1
					//   _SpecColor           c5       1
					//   _FaceUVSpeedX        c6       1
					//   _FaceUVSpeedY        c7       1
					//   _FaceColor           c8       1
					//   _OutlineSoftness     c9       1
					//   _OutlineUVSpeedX     c10      1
					//   _OutlineUVSpeedY     c11      1
					//   _OutlineColor        c12      1
					//   _OutlineWidth        c13      1
					//   _Bevel               c14      1
					//   _BevelOffset         c15      1
					//   _BevelWidth          c16      1
					//   _BevelClamp          c17      1
					//   _BevelRoundness      c18      1
					//   _BumpOutline         c19      1
					//   _BumpFace            c20      1
					//   _GlowColor           c21      1
					//   _GlowOffset          c22      1
					//   _GlowOuter           c23      1
					//   _GlowInner           c24      1
					//   _GlowPower           c25      1
					//   _ShaderFlags         c26      1
					//   _ScaleRatioA         c27      1
					//   _ScaleRatioB         c28      1
					//   _TextureWidth        c29      1
					//   _TextureHeight       c30      1
					//   _GradientScale       c31      1
					//   _FaceShininess       c32      1
					//   _OutlineShininess    c33      1
					//   _FaceTex             s0       1
					//   _OutlineTex          s1       1
					//   _BumpMap             s2       1
					//   _MainTex             s3       1
					//
					
					    ps_3_0
					    def c34, 10000, 0.00999999978, 2, -1
					    def c35, 0.249999955, 0.25, 6.28318548, -3.14159274
					    def c36, -2.52398507e-007, 2.47609005e-005, -0.00138883968, 0.0416666418
					    def c37, 1, -1, 128, 0
					    def c38, 0, 0.5, 1, -9.99999975e-005
					    dcl_texcoord v0
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_color_pp v5
					    dcl_texcoord5 v6.xy
					    dcl_texcoord7 v7.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    mov r0.x, c28.x
					    mul r0.y, r0.x, c22.x
					    mul r0.y, r0.y, v6.y
					    texld r1, v0, s3
					    add r0.z, -r1.w, c38.y
					    add r0.z, r0.z, -v6.x
					    mad_pp r0.z, r0.z, v6.y, c38.y
					    mad r0.y, r0.y, -c38.y, r0.z
					    mul r0.x, r0.x, c23.x
					    cmp r0.x, r0.y, r0.x, c24.x
					    mul r0.x, r0.x, v6.y
					    mad r0.w, r0.x, c38.y, c38.z
					    rcp r0.w, r0.w
					    mul r0.y, r0.w, r0.y
					    abs_sat r0.y, r0.y
					    pow r1.x, r0.y, c25.x
					    add r0.y, -r1.x, c38.z
					    mul r0.w, r0.x, c38.y
					    mad r0.x, r0.x, -c38.y, c38.z
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    cmp r0.x, r0.x, r0.w, c38.z
					    mul r0.x, r0.x, r0.y
					    mov r1.xyz, c38
					    dp2add_sat r0.x, c21.w, r0.x, r1.x
					    mul r0.x, r0.x, v5.w
					    mov r0.y, c0.y
					    mad r2.x, c10.x, r0.y, v0.z
					    mad r2.y, c11.x, r0.y, v0.w
					    texld r2, r2, s1
					    mul_pp r2.xyz, r2, c12
					    mul r0.w, c12.w, v5.w
					    mul_pp r3.w, r2.w, r0.w
					    mul_pp r3.xyz, r2, r3.w
					    mad r2.x, c6.x, r0.y, v0.z
					    mad r2.y, c7.x, r0.y, v0.w
					    texld r2, r2, s0
					    mul r4, c8, v5
					    mul_pp r2, r2, r4
					    mul_pp r2.xyz, r2.w, r2
					    mov r1.x, c13.x
					    mul r0.y, r1.x, c27.x
					    mad r0.w, r0.y, -v6.y, c38.z
					    mul_pp r0.y, r0.y, v6.y
					    rsq r1.w, r0.y
					    rcp_pp r1.w, r1.w
					    cmp_pp r0.w, r0.w, r1.w, c38.z
					    mad_sat_pp r1.w, r0.y, c38.y, r0.z
					    mad_pp r0.y, r0.y, -c38.y, r0.z
					    mul_pp r0.z, r0.w, r1.w
					    lrp_pp r4, r0.z, r3, r2
					    mov r2.x, c27.x
					    mul r0.z, r2.x, c9.x
					    mul_pp r0.w, r0.z, v6.y
					    mad_pp r0.z, r0.z, v6.y, c38.z
					    rcp r0.z, r0.z
					    mad_pp r0.y, r0.w, c38.y, r0.y
					    mul_sat_pp r0.y, r0.z, r0.y
					    add_pp r0.y, -r0.y, c38.z
					    mad r0.z, r4.w, r0.y, c38.w
					    mul_pp r2, r0.y, r4
					    mad r0.y, r4.w, -r0.y, c38.z
					    mad_pp r0.y, r0.y, r0.x, r2.w
					    rcp r0.w, r2.w
					    cmp r0.z, r0.z, r0.w, c34.x
					    mul r2.xyz, r0.z, r2
					    mul r2.xyz, r2.w, r2
					    lrp r3.xyz, r0.x, c21, r2
					    add r0.x, r0.y, c38.w
					    rcp r0.z, r0.y
					    mov_pp oC0.w, r0.y
					    cmp r0.x, r0.x, r0.z, c34.x
					    mul_pp r0.xyz, r0.x, r3
					    mul_pp r0.xyz, r0, c4
					    mov r2.x, c20.x
					    add r0.w, -r2.x, c19.x
					    mad r0.w, r1.w, r0.w, c20.x
					    texld_pp r3, v0.zwzw, s2
					    mad_pp r2.xy, r3.wyzw, c34.z, c34.w
					    dp2add_sat_pp r3.x, r2, r2, c38.x
					    add_pp r3.x, -r3.x, c38.z
					    rsq_pp r3.x, r3.x
					    rcp_pp r2.z, r3.x
					    mad r2.xyz, r2, r0.w, -c38.xxzw
					    mad r2.xyz, r2.w, r2, c38.xxzw
					    add r0.w, c15.x, v6.x
					    rcp r3.x, c29.x
					    rcp r3.w, c30.x
					    mov r3.yz, c38.x
					    add r4, -r3, v0.xyxy
					    add r3, r3, v0.xyxy
					    texld r5, r4, s3
					    texld r4, r4.zwzw, s3
					    mov r4.z, r4.w
					    mov r4.x, r5.w
					    texld r5, r3, s3
					    texld r3, r3.zwzw, s3
					    mov r4.w, r3.w
					    mov r4.y, r5.w
					    add r3, r0.w, r4
					    add r0.w, r1.x, c16.x
					    max r1.x, c34.y, r0.w
					    rcp r0.w, r1.x
					    mul r1.x, r1.x, c14.x
					    mul r1.x, r1.x, c31.x
					    mul r1.x, r1.x, -c34.z
					    lrp_sat r4, r0.w, r3, c38.y
					    mad r3, r4, c34.z, c34.w
					    add r3, -r3_abs, c38.z
					    mul r0.w, r1.y, c26.x
					    frc r0.w, r0_abs.w
					    cmp r0.w, c26.x, r0.w, -r0.w
					    add r0.w, r0.w, -c38.y
					    cmp r3, r0.w, r3, r4
					    mad r4, r3, c35.x, c35.y
					    frc r4, r4
					    mad r4, r4, c35.z, c35.w
					    mul r4, r4, r4
					    mad r5, r4, c36.x, c36.y
					    mad r5, r4, r5, c36.z
					    mad r5, r4, r5, c36.w
					    mad r5, r4, r5, -c38.y
					    mad r4, r4, r5, c38.z
					    lrp r5, c18.x, r4, r3
					    add r0.w, r1.z, -c17.x
					    min r3, r0.w, r5
					    mul r1.yz, r1.x, r3.xxzw
					    mad r3.xy, r3.ywzw, r1.x, -r1.yzzw
					    mov r3.zw, c37.xyxy
					    dp2add r0.w, r3.wyzw, r3.wyzw, c38.x
					    rsq r0.w, r0.w
					    mul r1.xyz, r3.wyww, c38.zzxw
					    dp2add r2.w, r3.zxzw, r3.zxzw, c38.x
					    rsq r2.w, r2.w
					    mul r3.x, r2.w, r3.x
					    mul r3.yz, r2.w, c38.xzxw
					    mul r1.xyz, r0.w, r1
					    mul r4.xyz, r1, r3
					    mad r1.xyz, r3.zxyw, r1.yzxw, -r4
					    add r1.xyz, -r2, r1
					    nrm_pp r2.xyz, r1
					    dp3_pp r1.x, v1, -r2
					    dp3_pp r1.y, v2, -r2
					    dp3_pp r1.z, v3, -r2
					    add r2.xyz, c1, -v4
					    dp3 r0.w, r2, r2
					    rsq r0.w, r0.w
					    mad_pp r2.xyz, r2, r0.w, c2
					    nrm_pp r3.xyz, r2
					    dp3_pp r0.w, r1, r3
					    dp3_pp r1.x, r1, c2
					    max_pp r2.x, r1.x, c38.x
					    max r1.x, r0.w, c38.x
					    mov r3.x, c32.x
					    add r0.w, -r3.x, c33.x
					    mad_pp r0.w, r1.w, r0.w, c32.x
					    mul r0.w, r0.w, c37.z
					    pow r2.y, r1.x, r0.w
					    mov r1.xyz, c4
					    mul r1.xyz, r1, c5
					    mul r1.xyz, r2.y, r1
					    mad_pp r0.xyz, r0, r2.x, r1
					    mul r0.w, c3.x, v7.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 178 instruction slots used (8 texture, 170 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FOG_EXP2" "GLOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						float _FaceUVSpeedX;
						float _FaceUVSpeedY;
						vec4 _FaceColor;
						float _OutlineSoftness;
						float _OutlineUVSpeedX;
						float _OutlineUVSpeedY;
						vec4 _OutlineColor;
						float _OutlineWidth;
						float _Bevel;
						float _BevelOffset;
						float _BevelWidth;
						float _BevelClamp;
						float _BevelRoundness;
						float _BumpOutline;
						float _BumpFace;
						vec4 unused_0_18[12];
						vec4 _GlowColor;
						float _GlowOffset;
						float _GlowOuter;
						float _GlowInner;
						float _GlowPower;
						float _ShaderFlags;
						float _ScaleRatioA;
						float _ScaleRatioB;
						vec4 unused_0_27[3];
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _FaceShininess;
						float _OutlineShininess;
						vec4 unused_0_33[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _FaceTex;
					uniform  sampler2D _OutlineTex;
					uniform  sampler2D _BumpMap;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD5;
					in  float vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					bool u_xlatb3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					vec3 u_xlat7;
					float u_xlat9;
					float u_xlat12;
					bool u_xlatb12;
					float u_xlat18;
					float u_xlat19;
					bool u_xlatb19;
					void main()
					{
					    u_xlat0.x = _GlowOffset * _ScaleRatioB;
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD5.y;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat6 = (-u_xlat1.w) + 0.5;
					    u_xlat6 = u_xlat6 + (-vs_TEXCOORD5.x);
					    u_xlat6 = u_xlat6 * vs_TEXCOORD5.y + 0.5;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat6;
					    u_xlatb12 = u_xlat0.x>=0.0;
					    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat18 = _GlowOuter * _ScaleRatioB + (-_GlowInner);
					    u_xlat12 = u_xlat12 * u_xlat18 + _GlowInner;
					    u_xlat12 = u_xlat12 * vs_TEXCOORD5.y;
					    u_xlat18 = u_xlat12 * 0.5 + 1.0;
					    u_xlat12 = u_xlat12 * 0.5;
					    u_xlat12 = min(u_xlat12, 1.0);
					    u_xlat12 = sqrt(u_xlat12);
					    u_xlat0.x = u_xlat0.x / u_xlat18;
					    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _GlowPower;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat12 * u_xlat0.x;
					    u_xlat0.x = dot(_GlowColor.ww, u_xlat0.xx);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat12 = (-u_xlat0.x) * vs_COLOR0.w + 1.0;
					    u_xlat0.x = u_xlat0.x * vs_COLOR0.w;
					    u_xlat1.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat1 = texture(_OutlineTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _OutlineColor.xyz;
					    u_xlat18 = vs_COLOR0.w * _OutlineColor.w;
					    u_xlat2.w = u_xlat1.w * u_xlat18;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.www;
					    u_xlat1.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat1 = texture(_FaceTex, u_xlat1.xy);
					    u_xlat3 = vs_COLOR0 * _FaceColor;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2 = (-u_xlat1) + u_xlat2;
					    u_xlat18 = _OutlineWidth * _ScaleRatioA;
					    u_xlat18 = u_xlat18 * vs_TEXCOORD5.y;
					    u_xlat3.x = min(u_xlat18, 1.0);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat9 = u_xlat18 * 0.5 + u_xlat6;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat6 = (-u_xlat18) * 0.5 + u_xlat6;
					    u_xlat18 = u_xlat3.x * u_xlat9;
					    u_xlat1 = vec4(u_xlat18) * u_xlat2 + u_xlat1;
					    u_xlat18 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat2.x = u_xlat18 * vs_TEXCOORD5.y;
					    u_xlat18 = u_xlat18 * vs_TEXCOORD5.y + 1.0;
					    u_xlat6 = u_xlat2.x * 0.5 + u_xlat6;
					    u_xlat6 = u_xlat6 / u_xlat18;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat6 = (-u_xlat6) + 1.0;
					    u_xlat2 = vec4(u_xlat6) * u_xlat1;
					    u_xlat6 = (-u_xlat1.w) * u_xlat6 + 1.0;
					    u_xlat6 = u_xlat6 * u_xlat0.x + u_xlat2.w;
					    u_xlat18 = max(u_xlat2.w, 9.99999975e-05);
					    u_xlat1.xyz = u_xlat2.xyz / vec3(u_xlat18);
					    u_xlat1.xyz = u_xlat2.www * u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat0.xzw = _GlowColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.x = max(u_xlat6, 9.99999975e-05);
					    SV_Target0.w = u_xlat6;
					    u_xlat0.xyz = u_xlat0.xzw / u_xlat1.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat18 = (-_BumpFace) + _BumpOutline;
					    u_xlat18 = u_xlat9 * u_xlat18 + _BumpFace;
					    u_xlat1 = texture(_BumpMap, vs_TEXCOORD0.zw);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat19 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat19 = min(u_xlat19, 1.0);
					    u_xlat19 = (-u_xlat19) + 1.0;
					    u_xlat1.z = sqrt(u_xlat19);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + vec3(-0.0, -0.0, -1.0);
					    u_xlat1.xyz = u_xlat2.www * u_xlat1.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat18 = vs_TEXCOORD5.x + _BevelOffset;
					    u_xlat2.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);
					    u_xlat2.z = 0.0;
					    u_xlat4 = (-u_xlat2.xzzy) + vs_TEXCOORD0.xyxy;
					    u_xlat2 = u_xlat2.xzzy + vs_TEXCOORD0.xyxy;
					    u_xlat5 = texture(_MainTex, u_xlat4.xy).wxyz;
					    u_xlat4 = texture(_MainTex, u_xlat4.zw);
					    u_xlat5.z = u_xlat4.w;
					    u_xlat4 = texture(_MainTex, u_xlat2.xy);
					    u_xlat2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat5.w = u_xlat2.w;
					    u_xlat5.y = u_xlat4.w;
					    u_xlat2 = vec4(u_xlat18) + u_xlat5;
					    u_xlat2 = u_xlat2 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat18 = _BevelWidth + _OutlineWidth;
					    u_xlat18 = max(u_xlat18, 0.00999999978);
					    u_xlat2 = u_xlat2 / vec4(u_xlat18);
					    u_xlat18 = u_xlat18 * _Bevel;
					    u_xlat18 = u_xlat18 * _GradientScale;
					    u_xlat18 = u_xlat18 * -2.0;
					    u_xlat2 = u_xlat2 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
					    u_xlat4 = u_xlat2 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat4 = -abs(u_xlat4) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat19 = _ShaderFlags * 0.5;
					    u_xlatb3 = u_xlat19>=(-u_xlat19);
					    u_xlat19 = fract(abs(u_xlat19));
					    u_xlat19 = (u_xlatb3) ? u_xlat19 : (-u_xlat19);
					    u_xlatb19 = u_xlat19>=0.5;
					    u_xlat2 = (bool(u_xlatb19)) ? u_xlat4 : u_xlat2;
					    u_xlat4 = u_xlat2 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);
					    u_xlat4 = sin(u_xlat4);
					    u_xlat4 = (-u_xlat2) + u_xlat4;
					    u_xlat2 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat4 + u_xlat2;
					    u_xlat19 = (-_BevelClamp) + 1.0;
					    u_xlat2 = min(vec4(u_xlat19), u_xlat2);
					    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
					    u_xlat2.yz = u_xlat2.wy * vec2(u_xlat18) + (-u_xlat2.zx);
					    u_xlat2.x = float(-1.0);
					    u_xlat2.w = float(1.0);
					    u_xlat18 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat19 = dot(u_xlat2.zw, u_xlat2.zw);
					    u_xlat19 = inversesqrt(u_xlat19);
					    u_xlat4.x = u_xlat19 * u_xlat2.z;
					    u_xlat4.yz = vec2(u_xlat19) * vec2(1.0, 0.0);
					    u_xlat2.z = 0.0;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat3.xzw = u_xlat2.xyz * u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat4.zxy * u_xlat2.yzx + (-u_xlat3.xzw);
					    u_xlat1.xyz = (-u_xlat1.xyz) + u_xlat2.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD1.xyz, (-u_xlat1.xyz));
					    u_xlat2.y = dot(vs_TEXCOORD2.xyz, (-u_xlat1.xyz));
					    u_xlat2.z = dot(vs_TEXCOORD3.xyz, (-u_xlat1.xyz));
					    u_xlat1.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;
					    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = log2(u_xlat18);
					    u_xlat7.x = (-_FaceShininess) + _OutlineShininess;
					    u_xlat7.x = u_xlat9 * u_xlat7.x + _FaceShininess;
					    u_xlat7.x = u_xlat7.x * 128.0;
					    u_xlat18 = u_xlat18 * u_xlat7.x;
					    u_xlat18 = exp2(u_xlat18);
					    u_xlat7.xyz = _LightColor0.xyz * _SpecColor.xyz;
					    u_xlat7.xyz = vec3(u_xlat18) * u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat7.xyz;
					    u_xlat18 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.x;
					    u_xlat18 = u_xlat18 * (-u_xlat18);
					    u_xlat18 = exp2(u_xlat18);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "SPOT" "FOG_EXP2" "GLOW_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Bevel;
					//   float _BevelClamp;
					//   float _BevelOffset;
					//   float _BevelRoundness;
					//   float _BevelWidth;
					//   float _BumpFace;
					//   sampler2D _BumpMap;
					//   float _BumpOutline;
					//   float4 _FaceColor;
					//   float _FaceShininess;
					//   sampler2D _FaceTex;
					//   float _FaceUVSpeedX;
					//   float _FaceUVSpeedY;
					//   float4 _GlowColor;
					//   float _GlowInner;
					//   float _GlowOffset;
					//   float _GlowOuter;
					//   float _GlowPower;
					//   float _GradientScale;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float4 _OutlineColor;
					//   float _OutlineShininess;
					//   float _OutlineSoftness;
					//   sampler2D _OutlineTex;
					//   float _OutlineUVSpeedX;
					//   float _OutlineUVSpeedY;
					//   float _OutlineWidth;
					//   float _ScaleRatioA;
					//   float _ScaleRatioB;
					//   float _ShaderFlags;
					//   float4 _SpecColor;
					//   float _TextureHeight;
					//   float _TextureWidth;
					//   float4 _Time;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       4
					//   _Time                c4       1
					//   _WorldSpaceCameraPos c5       1
					//   _WorldSpaceLightPos0 c6       1
					//   unity_FogParams      c7       1
					//   _LightColor0         c8       1
					//   _SpecColor           c9       1
					//   _FaceUVSpeedX        c10      1
					//   _FaceUVSpeedY        c11      1
					//   _FaceColor           c12      1
					//   _OutlineSoftness     c13      1
					//   _OutlineUVSpeedX     c14      1
					//   _OutlineUVSpeedY     c15      1
					//   _OutlineColor        c16      1
					//   _OutlineWidth        c17      1
					//   _Bevel               c18      1
					//   _BevelOffset         c19      1
					//   _BevelWidth          c20      1
					//   _BevelClamp          c21      1
					//   _BevelRoundness      c22      1
					//   _BumpOutline         c23      1
					//   _BumpFace            c24      1
					//   _GlowColor           c25      1
					//   _GlowOffset          c26      1
					//   _GlowOuter           c27      1
					//   _GlowInner           c28      1
					//   _GlowPower           c29      1
					//   _ShaderFlags         c30      1
					//   _ScaleRatioA         c31      1
					//   _ScaleRatioB         c32      1
					//   _TextureWidth        c33      1
					//   _TextureHeight       c34      1
					//   _GradientScale       c35      1
					//   _FaceShininess       c36      1
					//   _OutlineShininess    c37      1
					//   _LightTexture0       s0       1
					//   _LightTextureB0      s1       1
					//   _FaceTex             s2       1
					//   _OutlineTex          s3       1
					//   _BumpMap             s4       1
					//   _MainTex             s5       1
					//
					
					    ps_3_0
					    def c38, 10000, 0.00999999978, 2, -1
					    def c39, 0.249999955, 0.25, 6.28318548, -3.14159274
					    def c40, -2.52398507e-007, 2.47609005e-005, -0.00138883968, 0.0416666418
					    def c41, 128, 0, 0, 0
					    def c42, 0, 0.5, 1, -9.99999975e-005
					    dcl_texcoord v0
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_color_pp v5
					    dcl_texcoord5 v6.xy
					    dcl_texcoord7 v7.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    mov r0.x, c32.x
					    mul r0.y, r0.x, c26.x
					    mul r0.y, r0.y, v6.y
					    texld r1, v0, s5
					    add r0.z, -r1.w, c42.y
					    add r0.z, r0.z, -v6.x
					    mad_pp r0.z, r0.z, v6.y, c42.y
					    mad r0.y, r0.y, -c42.y, r0.z
					    mul r0.x, r0.x, c27.x
					    cmp r0.x, r0.y, r0.x, c28.x
					    mul r0.x, r0.x, v6.y
					    mad r0.w, r0.x, c42.y, c42.z
					    rcp r0.w, r0.w
					    mul r0.y, r0.w, r0.y
					    abs_sat r0.y, r0.y
					    pow r1.x, r0.y, c29.x
					    add r0.y, -r1.x, c42.z
					    mul r0.w, r0.x, c42.y
					    mad r0.x, r0.x, -c42.y, c42.z
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    cmp r0.x, r0.x, r0.w, c42.z
					    mul r0.x, r0.x, r0.y
					    mov r1.xyz, c42
					    dp2add_sat r0.x, c25.w, r0.x, r1.x
					    mul r0.x, r0.x, v5.w
					    mov r0.y, c4.y
					    mad r2.x, c14.x, r0.y, v0.z
					    mad r2.y, c15.x, r0.y, v0.w
					    texld r2, r2, s3
					    mul_pp r2.xyz, r2, c16
					    mul r0.w, c16.w, v5.w
					    mul_pp r3.w, r2.w, r0.w
					    mul_pp r3.xyz, r2, r3.w
					    mad r2.x, c10.x, r0.y, v0.z
					    mad r2.y, c11.x, r0.y, v0.w
					    texld r2, r2, s2
					    mul r4, c12, v5
					    mul_pp r2, r2, r4
					    mul_pp r2.xyz, r2.w, r2
					    mov r1.x, c17.x
					    mul r0.y, r1.x, c31.x
					    mad r0.w, r0.y, -v6.y, c42.z
					    mul_pp r0.y, r0.y, v6.y
					    rsq r1.w, r0.y
					    rcp_pp r1.w, r1.w
					    cmp_pp r0.w, r0.w, r1.w, c42.z
					    mad_sat_pp r1.w, r0.y, c42.y, r0.z
					    mad_pp r0.y, r0.y, -c42.y, r0.z
					    mul_pp r0.z, r0.w, r1.w
					    lrp_pp r4, r0.z, r3, r2
					    mov r2.x, c31.x
					    mul r0.z, r2.x, c13.x
					    mul_pp r0.w, r0.z, v6.y
					    mad_pp r0.z, r0.z, v6.y, c42.z
					    rcp r0.z, r0.z
					    mad_pp r0.y, r0.w, c42.y, r0.y
					    mul_sat_pp r0.y, r0.z, r0.y
					    add_pp r0.y, -r0.y, c42.z
					    mad r0.z, r4.w, r0.y, c42.w
					    mul_pp r2, r0.y, r4
					    mad r0.y, r4.w, -r0.y, c42.z
					    mad_pp r0.y, r0.y, r0.x, r2.w
					    rcp r0.w, r2.w
					    cmp r0.z, r0.z, r0.w, c38.x
					    mul r2.xyz, r0.z, r2
					    mul r2.xyz, r2.w, r2
					    lrp r3.xyz, r0.x, c25, r2
					    add r0.x, r0.y, c42.w
					    rcp r0.z, r0.y
					    mov_pp oC0.w, r0.y
					    cmp r0.x, r0.x, r0.z, c38.x
					    mul_pp r0.xyz, r0.x, r3
					    mad r3, v4.xyzx, c42.zzzx, c42.xxxz
					    dp4 r0.w, c3, r3
					    rcp r0.w, r0.w
					    dp4 r2.x, c0, r3
					    dp4 r2.y, c1, r3
					    dp4 r2.z, c2, r3
					    mad r3.xy, r2, r0.w, c42.y
					    dp3 r0.w, r2, r2
					    texld_pp r4, r0.w, s1
					    texld_pp r3, r3, s0
					    mul r0.w, r4.x, r3.w
					    mul_pp r3.xyz, r0.w, c8
					    cmp_pp r2.xyz, -r2.z, c42.x, r3
					    mul_pp r0.xyz, r0, r2
					    mul r2.xyz, r2, c9
					    mov r3.x, c24.x
					    add r0.w, -r3.x, c23.x
					    mad r0.w, r1.w, r0.w, c24.x
					    texld_pp r3, v0.zwzw, s4
					    mad_pp r3.xy, r3.wyzw, c38.z, c38.w
					    dp2add_sat_pp r3.w, r3, r3, c42.x
					    add_pp r3.w, -r3.w, c42.z
					    rsq_pp r3.w, r3.w
					    rcp_pp r3.z, r3.w
					    mad r3.xyz, r3, r0.w, -c42.xxzw
					    mad r3.xyz, r2.w, r3, c42.xxzw
					    add r0.w, c19.x, v6.x
					    rcp r4.x, c33.x
					    rcp r4.w, c34.x
					    mov r4.yz, c42.x
					    add r5, -r4, v0.xyxy
					    add r4, r4, v0.xyxy
					    texld r6, r5, s5
					    texld r5, r5.zwzw, s5
					    mov r5.z, r5.w
					    mov r5.x, r6.w
					    texld r6, r4, s5
					    texld r4, r4.zwzw, s5
					    mov r5.w, r4.w
					    mov r5.y, r6.w
					    add r4, r0.w, r5
					    add r0.w, r1.x, c20.x
					    max r1.x, c38.y, r0.w
					    rcp r0.w, r1.x
					    mul r1.x, r1.x, c18.x
					    mul r1.x, r1.x, c35.x
					    mul r1.x, r1.x, -c38.z
					    lrp_sat r5, r0.w, r4, c42.y
					    mad r4, r5, c38.z, c38.w
					    add r4, -r4_abs, c42.z
					    mul r0.w, r1.y, c30.x
					    frc r0.w, r0_abs.w
					    cmp r0.w, c30.x, r0.w, -r0.w
					    add r0.w, r0.w, -c42.y
					    cmp r4, r0.w, r4, r5
					    mad r5, r4, c39.x, c39.y
					    frc r5, r5
					    mad r5, r5, c39.z, c39.w
					    mul r5, r5, r5
					    mad r6, r5, c40.x, c40.y
					    mad r6, r5, r6, c40.z
					    mad r6, r5, r6, c40.w
					    mad r6, r5, r6, -c42.y
					    mad r5, r5, r6, c42.z
					    lrp r6, c22.x, r5, r4
					    add r0.w, r1.z, -c21.x
					    min r4, r0.w, r6
					    mul r1.yz, r1.x, r4.xxzw
					    mad r4.xy, r4.ywzw, r1.x, -r1.yzzw
					    mov r4.w, -c42.z
					    dp2add r0.w, r4.wyzw, r4.wyzw, c42.x
					    mul r1.xyz, r4.wyww, c42.zzxw
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mov r4.z, c42.z
					    dp2add r0.w, r4.zxzw, r4.zxzw, c42.x
					    rsq r0.w, r0.w
					    mul r4.x, r0.w, r4.x
					    mul r4.yz, r0.w, c42.xzxw
					    mul r5.xyz, r1, r4
					    mad r1.xyz, r4.zxyw, r1.yzxw, -r5
					    add r1.xyz, -r3, r1
					    nrm_pp r3.xyz, r1
					    dp3_pp r1.x, v1, -r3
					    dp3_pp r1.y, v2, -r3
					    dp3_pp r1.z, v3, -r3
					    add r3.xyz, c5, -v4
					    dp3 r0.w, r3, r3
					    rsq r0.w, r0.w
					    add r4.xyz, c6, -v4
					    nrm_pp r5.xyz, r4
					    mad_pp r3.xyz, r3, r0.w, r5
					    dp3_pp r0.w, r1, r5
					    max_pp r2.w, r0.w, c42.x
					    nrm_pp r4.xyz, r3
					    dp3_pp r0.w, r1, r4
					    max r1.x, r0.w, c42.x
					    mov r3.x, c36.x
					    add r0.w, -r3.x, c37.x
					    mad_pp r0.w, r1.w, r0.w, c36.x
					    mul r0.w, r0.w, c41.x
					    pow r3.x, r1.x, r0.w
					    mul r1.xyz, r2, r3.x
					    mad_pp r0.xyz, r0, r2.w, r1
					    mul r0.w, c7.x, v7.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 195 instruction slots used (10 texture, 185 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "FOG_EXP2" "GLOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						float _FaceUVSpeedX;
						float _FaceUVSpeedY;
						vec4 _FaceColor;
						float _OutlineSoftness;
						float _OutlineUVSpeedX;
						float _OutlineUVSpeedY;
						vec4 _OutlineColor;
						float _OutlineWidth;
						float _Bevel;
						float _BevelOffset;
						float _BevelWidth;
						float _BevelClamp;
						float _BevelRoundness;
						float _BumpOutline;
						float _BumpFace;
						vec4 unused_0_19[12];
						vec4 _GlowColor;
						float _GlowOffset;
						float _GlowOuter;
						float _GlowInner;
						float _GlowPower;
						float _ShaderFlags;
						float _ScaleRatioA;
						float _ScaleRatioB;
						vec4 unused_0_28[3];
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _FaceShininess;
						float _OutlineShininess;
						vec4 unused_0_34[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _FaceTex;
					uniform  sampler2D _OutlineTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD5;
					in  float vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					float u_xlat10;
					float u_xlat14;
					bool u_xlatb14;
					float u_xlat21;
					bool u_xlatb21;
					float u_xlat22;
					bool u_xlatb22;
					bool u_xlatb23;
					void main()
					{
					    u_xlat0.x = _GlowOffset * _ScaleRatioB;
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD5.y;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat7 = (-u_xlat1.w) + 0.5;
					    u_xlat7 = u_xlat7 + (-vs_TEXCOORD5.x);
					    u_xlat7 = u_xlat7 * vs_TEXCOORD5.y + 0.5;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat7;
					    u_xlatb14 = u_xlat0.x>=0.0;
					    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat21 = _GlowOuter * _ScaleRatioB + (-_GlowInner);
					    u_xlat14 = u_xlat14 * u_xlat21 + _GlowInner;
					    u_xlat14 = u_xlat14 * vs_TEXCOORD5.y;
					    u_xlat21 = u_xlat14 * 0.5 + 1.0;
					    u_xlat14 = u_xlat14 * 0.5;
					    u_xlat14 = min(u_xlat14, 1.0);
					    u_xlat14 = sqrt(u_xlat14);
					    u_xlat0.x = u_xlat0.x / u_xlat21;
					    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _GlowPower;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat14 * u_xlat0.x;
					    u_xlat0.x = dot(_GlowColor.ww, u_xlat0.xx);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat14 = (-u_xlat0.x) * vs_COLOR0.w + 1.0;
					    u_xlat0.x = u_xlat0.x * vs_COLOR0.w;
					    u_xlat1.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat1 = texture(_OutlineTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _OutlineColor.xyz;
					    u_xlat21 = vs_COLOR0.w * _OutlineColor.w;
					    u_xlat2.w = u_xlat1.w * u_xlat21;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.www;
					    u_xlat1.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat1 = texture(_FaceTex, u_xlat1.xy);
					    u_xlat3 = vs_COLOR0 * _FaceColor;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2 = (-u_xlat1) + u_xlat2;
					    u_xlat21 = _OutlineWidth * _ScaleRatioA;
					    u_xlat21 = u_xlat21 * vs_TEXCOORD5.y;
					    u_xlat3.x = min(u_xlat21, 1.0);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat10 = u_xlat21 * 0.5 + u_xlat7;
					    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
					    u_xlat7 = (-u_xlat21) * 0.5 + u_xlat7;
					    u_xlat21 = u_xlat3.x * u_xlat10;
					    u_xlat1 = vec4(u_xlat21) * u_xlat2 + u_xlat1;
					    u_xlat21 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat2.x = u_xlat21 * vs_TEXCOORD5.y;
					    u_xlat21 = u_xlat21 * vs_TEXCOORD5.y + 1.0;
					    u_xlat7 = u_xlat2.x * 0.5 + u_xlat7;
					    u_xlat7 = u_xlat7 / u_xlat21;
					    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
					    u_xlat7 = (-u_xlat7) + 1.0;
					    u_xlat2 = vec4(u_xlat7) * u_xlat1;
					    u_xlat7 = (-u_xlat1.w) * u_xlat7 + 1.0;
					    u_xlat7 = u_xlat7 * u_xlat0.x + u_xlat2.w;
					    u_xlat21 = max(u_xlat2.w, 9.99999975e-05);
					    u_xlat1.xyz = u_xlat2.xyz / vec3(u_xlat21);
					    u_xlat1.xyz = u_xlat2.www * u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
					    u_xlat0.xzw = _GlowColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.x = max(u_xlat7, 9.99999975e-05);
					    SV_Target0.w = u_xlat7;
					    u_xlat0.xyz = u_xlat0.xzw / u_xlat1.xxx;
					    u_xlat1 = vs_TEXCOORD4.yyyy * unity_WorldToLight[1];
					    u_xlat1 = unity_WorldToLight[0] * vs_TEXCOORD4.xxxx + u_xlat1;
					    u_xlat1 = unity_WorldToLight[2] * vs_TEXCOORD4.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + unity_WorldToLight[3];
					    u_xlat2.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
					    u_xlat4 = texture(_LightTexture0, u_xlat2.xy);
					    u_xlatb21 = 0.0<u_xlat1.z;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTextureB0, u_xlat1.xx);
					    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
					    u_xlat21 = u_xlat4.w * u_xlat21;
					    u_xlat21 = u_xlat1.x * u_xlat21;
					    u_xlat1.xyz = vec3(u_xlat21) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat21 = (-_BumpFace) + _BumpOutline;
					    u_xlat21 = u_xlat10 * u_xlat21 + _BumpFace;
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.zw);
					    u_xlat2.xy = u_xlat4.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat22 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat22 = min(u_xlat22, 1.0);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat2.z = sqrt(u_xlat22);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat21) + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat21 = vs_TEXCOORD5.x + _BevelOffset;
					    u_xlat4.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);
					    u_xlat4.z = 0.0;
					    u_xlat5 = (-u_xlat4.xzzy) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat4.xzzy + vs_TEXCOORD0.xyxy;
					    u_xlat6 = texture(_MainTex, u_xlat5.xy).wxyz;
					    u_xlat5 = texture(_MainTex, u_xlat5.zw);
					    u_xlat6.z = u_xlat5.w;
					    u_xlat5 = texture(_MainTex, u_xlat4.xy);
					    u_xlat4 = texture(_MainTex, u_xlat4.zw);
					    u_xlat6.w = u_xlat4.w;
					    u_xlat6.y = u_xlat5.w;
					    u_xlat4 = vec4(u_xlat21) + u_xlat6;
					    u_xlat4 = u_xlat4 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat21 = _BevelWidth + _OutlineWidth;
					    u_xlat21 = max(u_xlat21, 0.00999999978);
					    u_xlat4 = u_xlat4 / vec4(u_xlat21);
					    u_xlat21 = u_xlat21 * _Bevel;
					    u_xlat21 = u_xlat21 * _GradientScale;
					    u_xlat21 = u_xlat21 * -2.0;
					    u_xlat4 = u_xlat4 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					    u_xlat5 = u_xlat4 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat5 = -abs(u_xlat5) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat22 = _ShaderFlags * 0.5;
					    u_xlatb23 = u_xlat22>=(-u_xlat22);
					    u_xlat22 = fract(abs(u_xlat22));
					    u_xlat22 = (u_xlatb23) ? u_xlat22 : (-u_xlat22);
					    u_xlatb22 = u_xlat22>=0.5;
					    u_xlat4 = (bool(u_xlatb22)) ? u_xlat5 : u_xlat4;
					    u_xlat5 = u_xlat4 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);
					    u_xlat5 = sin(u_xlat5);
					    u_xlat5 = (-u_xlat4) + u_xlat5;
					    u_xlat4 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat5 + u_xlat4;
					    u_xlat22 = (-_BevelClamp) + 1.0;
					    u_xlat4 = min(vec4(u_xlat22), u_xlat4);
					    u_xlat3.xz = vec2(u_xlat21) * u_xlat4.xz;
					    u_xlat4.yz = u_xlat4.wy * vec2(u_xlat21) + (-u_xlat3.zx);
					    u_xlat4.x = float(-1.0);
					    u_xlat4.w = float(1.0);
					    u_xlat21 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat22 = dot(u_xlat4.zw, u_xlat4.zw);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat5.x = u_xlat22 * u_xlat4.z;
					    u_xlat5.yz = vec2(u_xlat22) * vec2(1.0, 0.0);
					    u_xlat4.z = 0.0;
					    u_xlat3.xzw = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xzw * u_xlat5.xyz;
					    u_xlat3.xzw = u_xlat5.zxy * u_xlat3.zwx + (-u_xlat4.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat3.xzw;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, (-u_xlat2.xyz));
					    u_xlat4.y = dot(vs_TEXCOORD2.xyz, (-u_xlat2.xyz));
					    u_xlat4.z = dot(vs_TEXCOORD3.xyz, (-u_xlat2.xyz));
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat3.xzw = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat3.xzw, u_xlat3.xzw);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xzw = u_xlat3.xzw * vec3(u_xlat21) + u_xlat2.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = dot(u_xlat3.xzw, u_xlat3.xzw);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * u_xlat3.xzw;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat22 = max(u_xlat22, 0.0);
					    u_xlat22 = log2(u_xlat22);
					    u_xlat2.x = (-_FaceShininess) + _OutlineShininess;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + _FaceShininess;
					    u_xlat2.x = u_xlat2.x * 128.0;
					    u_xlat22 = u_xlat22 * u_xlat2.x;
					    u_xlat22 = exp2(u_xlat22);
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21) + u_xlat1.xyz;
					    u_xlat21 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat21 = u_xlat21 * _ProjectionParams.z;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = u_xlat21 * unity_FogParams.x;
					    u_xlat21 = u_xlat21 * (-u_xlat21);
					    u_xlat21 = exp2(u_xlat21);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat21);
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT_COOKIE" "FOG_EXP2" "GLOW_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Bevel;
					//   float _BevelClamp;
					//   float _BevelOffset;
					//   float _BevelRoundness;
					//   float _BevelWidth;
					//   float _BumpFace;
					//   sampler2D _BumpMap;
					//   float _BumpOutline;
					//   float4 _FaceColor;
					//   float _FaceShininess;
					//   sampler2D _FaceTex;
					//   float _FaceUVSpeedX;
					//   float _FaceUVSpeedY;
					//   float4 _GlowColor;
					//   float _GlowInner;
					//   float _GlowOffset;
					//   float _GlowOuter;
					//   float _GlowPower;
					//   float _GradientScale;
					//   float4 _LightColor0;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _MainTex;
					//   float4 _OutlineColor;
					//   float _OutlineShininess;
					//   float _OutlineSoftness;
					//   sampler2D _OutlineTex;
					//   float _OutlineUVSpeedX;
					//   float _OutlineUVSpeedY;
					//   float _OutlineWidth;
					//   float _ScaleRatioA;
					//   float _ScaleRatioB;
					//   float _ShaderFlags;
					//   float4 _SpecColor;
					//   float _TextureHeight;
					//   float _TextureWidth;
					//   float4 _Time;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       3
					//   _Time                c3       1
					//   _WorldSpaceCameraPos c4       1
					//   _WorldSpaceLightPos0 c5       1
					//   unity_FogParams      c6       1
					//   _LightColor0         c7       1
					//   _SpecColor           c8       1
					//   _FaceUVSpeedX        c9       1
					//   _FaceUVSpeedY        c10      1
					//   _FaceColor           c11      1
					//   _OutlineSoftness     c12      1
					//   _OutlineUVSpeedX     c13      1
					//   _OutlineUVSpeedY     c14      1
					//   _OutlineColor        c15      1
					//   _OutlineWidth        c16      1
					//   _Bevel               c17      1
					//   _BevelOffset         c18      1
					//   _BevelWidth          c19      1
					//   _BevelClamp          c20      1
					//   _BevelRoundness      c21      1
					//   _BumpOutline         c22      1
					//   _BumpFace            c23      1
					//   _GlowColor           c24      1
					//   _GlowOffset          c25      1
					//   _GlowOuter           c26      1
					//   _GlowInner           c27      1
					//   _GlowPower           c28      1
					//   _ShaderFlags         c29      1
					//   _ScaleRatioA         c30      1
					//   _ScaleRatioB         c31      1
					//   _TextureWidth        c32      1
					//   _TextureHeight       c33      1
					//   _GradientScale       c34      1
					//   _FaceShininess       c35      1
					//   _OutlineShininess    c36      1
					//   _LightTexture0       s0       1
					//   _LightTextureB0      s1       1
					//   _FaceTex             s2       1
					//   _OutlineTex          s3       1
					//   _BumpMap             s4       1
					//   _MainTex             s5       1
					//
					
					    ps_3_0
					    def c37, 10000, 0.00999999978, 2, -1
					    def c38, 0.249999955, 0.25, 6.28318548, -3.14159274
					    def c39, -2.52398507e-007, 2.47609005e-005, -0.00138883968, 0.0416666418
					    def c40, 128, 0, 0, 0
					    def c41, 0, 0.5, 1, -9.99999975e-005
					    dcl_texcoord v0
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_color_pp v5
					    dcl_texcoord5 v6.xy
					    dcl_texcoord7 v7.x
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    mov r0.x, c31.x
					    mul r0.y, r0.x, c25.x
					    mul r0.y, r0.y, v6.y
					    texld r1, v0, s5
					    add r0.z, -r1.w, c41.y
					    add r0.z, r0.z, -v6.x
					    mad_pp r0.z, r0.z, v6.y, c41.y
					    mad r0.y, r0.y, -c41.y, r0.z
					    mul r0.x, r0.x, c26.x
					    cmp r0.x, r0.y, r0.x, c27.x
					    mul r0.x, r0.x, v6.y
					    mad r0.w, r0.x, c41.y, c41.z
					    rcp r0.w, r0.w
					    mul r0.y, r0.w, r0.y
					    abs_sat r0.y, r0.y
					    pow r1.x, r0.y, c28.x
					    add r0.y, -r1.x, c41.z
					    mul r0.w, r0.x, c41.y
					    mad r0.x, r0.x, -c41.y, c41.z
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    cmp r0.x, r0.x, r0.w, c41.z
					    mul r0.x, r0.x, r0.y
					    mov r1.xyz, c41
					    dp2add_sat r0.x, c24.w, r0.x, r1.x
					    mul r0.x, r0.x, v5.w
					    mov r0.y, c3.y
					    mad r2.x, c13.x, r0.y, v0.z
					    mad r2.y, c14.x, r0.y, v0.w
					    texld r2, r2, s3
					    mul_pp r2.xyz, r2, c15
					    mul r0.w, c15.w, v5.w
					    mul_pp r3.w, r2.w, r0.w
					    mul_pp r3.xyz, r2, r3.w
					    mad r2.x, c9.x, r0.y, v0.z
					    mad r2.y, c10.x, r0.y, v0.w
					    texld r2, r2, s2
					    mul r4, c11, v5
					    mul_pp r2, r2, r4
					    mul_pp r2.xyz, r2.w, r2
					    mov r1.x, c16.x
					    mul r0.y, r1.x, c30.x
					    mad r0.w, r0.y, -v6.y, c41.z
					    mul_pp r0.y, r0.y, v6.y
					    rsq r1.w, r0.y
					    rcp_pp r1.w, r1.w
					    cmp_pp r0.w, r0.w, r1.w, c41.z
					    mad_sat_pp r1.w, r0.y, c41.y, r0.z
					    mad_pp r0.y, r0.y, -c41.y, r0.z
					    mul_pp r0.z, r0.w, r1.w
					    lrp_pp r4, r0.z, r3, r2
					    mov r2.x, c30.x
					    mul r0.z, r2.x, c12.x
					    mul_pp r0.w, r0.z, v6.y
					    mad_pp r0.z, r0.z, v6.y, c41.z
					    rcp r0.z, r0.z
					    mad_pp r0.y, r0.w, c41.y, r0.y
					    mul_sat_pp r0.y, r0.z, r0.y
					    add_pp r0.y, -r0.y, c41.z
					    mad r0.z, r4.w, r0.y, c41.w
					    mul_pp r2, r0.y, r4
					    mad r0.y, r4.w, -r0.y, c41.z
					    mad_pp r0.y, r0.y, r0.x, r2.w
					    rcp r0.w, r2.w
					    cmp r0.z, r0.z, r0.w, c37.x
					    mul r2.xyz, r0.z, r2
					    mul r2.xyz, r2.w, r2
					    lrp r3.xyz, r0.x, c24, r2
					    add r0.x, r0.y, c41.w
					    rcp r0.z, r0.y
					    mov_pp oC0.w, r0.y
					    cmp r0.x, r0.x, r0.z, c37.x
					    mul_pp r0.xyz, r0.x, r3
					    mad r3, v4.xyzx, c41.zzzx, c41.xxxz
					    dp4 r2.x, c0, r3
					    dp4 r2.y, c1, r3
					    dp4 r2.z, c2, r3
					    dp3 r0.w, r2, r2
					    texld r3, r2, s0
					    texld r4, r0.w, s1
					    mul_pp r0.w, r3.w, r4.x
					    mul_pp r2.xyz, r0.w, c7
					    mul_pp r0.xyz, r0, r2
					    mul r2.xyz, r2, c8
					    mov r3.x, c23.x
					    add r0.w, -r3.x, c22.x
					    mad r0.w, r1.w, r0.w, c23.x
					    texld_pp r3, v0.zwzw, s4
					    mad_pp r3.xy, r3.wyzw, c37.z, c37.w
					    dp2add_sat_pp r3.w, r3, r3, c41.x
					    add_pp r3.w, -r3.w, c41.z
					    rsq_pp r3.w, r3.w
					    rcp_pp r3.z, r3.w
					    mad r3.xyz, r3, r0.w, -c41.xxzw
					    mad r3.xyz, r2.w, r3, c41.xxzw
					    add r0.w, c18.x, v6.x
					    rcp r4.x, c32.x
					    rcp r4.w, c33.x
					    mov r4.yz, c41.x
					    add r5, -r4, v0.xyxy
					    add r4, r4, v0.xyxy
					    texld r6, r5, s5
					    texld r5, r5.zwzw, s5
					    mov r5.z, r5.w
					    mov r5.x, r6.w
					    texld r6, r4, s5
					    texld r4, r4.zwzw, s5
					    mov r5.w, r4.w
					    mov r5.y, r6.w
					    add r4, r0.w, r5
					    add r0.w, r1.x, c19.x
					    max r1.x, c37.y, r0.w
					    rcp r0.w, r1.x
					    mul r1.x, r1.x, c17.x
					    mul r1.x, r1.x, c34.x
					    mul r1.x, r1.x, -c37.z
					    lrp_sat r5, r0.w, r4, c41.y
					    mad r4, r5, c37.z, c37.w
					    add r4, -r4_abs, c41.z
					    mul r0.w, r1.y, c29.x
					    frc r0.w, r0_abs.w
					    cmp r0.w, c29.x, r0.w, -r0.w
					    add r0.w, r0.w, -c41.y
					    cmp r4, r0.w, r4, r5
					    mad r5, r4, c38.x, c38.y
					    frc r5, r5
					    mad r5, r5, c38.z, c38.w
					    mul r5, r5, r5
					    mad r6, r5, c39.x, c39.y
					    mad r6, r5, r6, c39.z
					    mad r6, r5, r6, c39.w
					    mad r6, r5, r6, -c41.y
					    mad r5, r5, r6, c41.z
					    lrp r6, c21.x, r5, r4
					    add r0.w, r1.z, -c20.x
					    min r4, r0.w, r6
					    mul r1.yz, r1.x, r4.xxzw
					    mad r4.xy, r4.ywzw, r1.x, -r1.yzzw
					    mov r4.w, -c41.z
					    dp2add r0.w, r4.wyzw, r4.wyzw, c41.x
					    mul r1.xyz, r4.wyww, c41.zzxw
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mov r4.z, c41.z
					    dp2add r0.w, r4.zxzw, r4.zxzw, c41.x
					    rsq r0.w, r0.w
					    mul r4.x, r0.w, r4.x
					    mul r4.yz, r0.w, c41.xzxw
					    mul r5.xyz, r1, r4
					    mad r1.xyz, r4.zxyw, r1.yzxw, -r5
					    add r1.xyz, -r3, r1
					    nrm_pp r3.xyz, r1
					    dp3_pp r1.x, v1, -r3
					    dp3_pp r1.y, v2, -r3
					    dp3_pp r1.z, v3, -r3
					    add r3.xyz, c4, -v4
					    dp3 r0.w, r3, r3
					    rsq r0.w, r0.w
					    add r4.xyz, c5, -v4
					    nrm_pp r5.xyz, r4
					    mad_pp r3.xyz, r3, r0.w, r5
					    dp3_pp r0.w, r1, r5
					    max_pp r2.w, r0.w, c41.x
					    nrm_pp r4.xyz, r3
					    dp3_pp r0.w, r1, r4
					    max r1.x, r0.w, c41.x
					    mov r3.x, c35.x
					    add r0.w, -r3.x, c36.x
					    mad_pp r0.w, r1.w, r0.w, c35.x
					    mul r0.w, r0.w, c40.x
					    pow r3.x, r1.x, r0.w
					    mul r1.xyz, r2, r3.x
					    mad_pp r0.xyz, r0, r2.w, r1
					    mul r0.w, c6.x, v7.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 191 instruction slots used (10 texture, 181 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "FOG_EXP2" "GLOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						float _FaceUVSpeedX;
						float _FaceUVSpeedY;
						vec4 _FaceColor;
						float _OutlineSoftness;
						float _OutlineUVSpeedX;
						float _OutlineUVSpeedY;
						vec4 _OutlineColor;
						float _OutlineWidth;
						float _Bevel;
						float _BevelOffset;
						float _BevelWidth;
						float _BevelClamp;
						float _BevelRoundness;
						float _BumpOutline;
						float _BumpFace;
						vec4 unused_0_19[12];
						vec4 _GlowColor;
						float _GlowOffset;
						float _GlowOuter;
						float _GlowInner;
						float _GlowPower;
						float _ShaderFlags;
						float _ScaleRatioA;
						float _ScaleRatioB;
						vec4 unused_0_28[3];
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _FaceShininess;
						float _OutlineShininess;
						vec4 unused_0_34[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _FaceTex;
					uniform  sampler2D _OutlineTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD5;
					in  float vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					float u_xlat10;
					float u_xlat14;
					bool u_xlatb14;
					float u_xlat21;
					float u_xlat22;
					bool u_xlatb22;
					bool u_xlatb23;
					void main()
					{
					    u_xlat0.x = _GlowOffset * _ScaleRatioB;
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD5.y;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat7 = (-u_xlat1.w) + 0.5;
					    u_xlat7 = u_xlat7 + (-vs_TEXCOORD5.x);
					    u_xlat7 = u_xlat7 * vs_TEXCOORD5.y + 0.5;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat7;
					    u_xlatb14 = u_xlat0.x>=0.0;
					    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat21 = _GlowOuter * _ScaleRatioB + (-_GlowInner);
					    u_xlat14 = u_xlat14 * u_xlat21 + _GlowInner;
					    u_xlat14 = u_xlat14 * vs_TEXCOORD5.y;
					    u_xlat21 = u_xlat14 * 0.5 + 1.0;
					    u_xlat14 = u_xlat14 * 0.5;
					    u_xlat14 = min(u_xlat14, 1.0);
					    u_xlat14 = sqrt(u_xlat14);
					    u_xlat0.x = u_xlat0.x / u_xlat21;
					    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _GlowPower;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat14 * u_xlat0.x;
					    u_xlat0.x = dot(_GlowColor.ww, u_xlat0.xx);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat14 = (-u_xlat0.x) * vs_COLOR0.w + 1.0;
					    u_xlat0.x = u_xlat0.x * vs_COLOR0.w;
					    u_xlat1.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat1 = texture(_OutlineTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _OutlineColor.xyz;
					    u_xlat21 = vs_COLOR0.w * _OutlineColor.w;
					    u_xlat2.w = u_xlat1.w * u_xlat21;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.www;
					    u_xlat1.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat1 = texture(_FaceTex, u_xlat1.xy);
					    u_xlat3 = vs_COLOR0 * _FaceColor;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2 = (-u_xlat1) + u_xlat2;
					    u_xlat21 = _OutlineWidth * _ScaleRatioA;
					    u_xlat21 = u_xlat21 * vs_TEXCOORD5.y;
					    u_xlat3.x = min(u_xlat21, 1.0);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat10 = u_xlat21 * 0.5 + u_xlat7;
					    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
					    u_xlat7 = (-u_xlat21) * 0.5 + u_xlat7;
					    u_xlat21 = u_xlat3.x * u_xlat10;
					    u_xlat1 = vec4(u_xlat21) * u_xlat2 + u_xlat1;
					    u_xlat21 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat2.x = u_xlat21 * vs_TEXCOORD5.y;
					    u_xlat21 = u_xlat21 * vs_TEXCOORD5.y + 1.0;
					    u_xlat7 = u_xlat2.x * 0.5 + u_xlat7;
					    u_xlat7 = u_xlat7 / u_xlat21;
					    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
					    u_xlat7 = (-u_xlat7) + 1.0;
					    u_xlat2 = vec4(u_xlat7) * u_xlat1;
					    u_xlat7 = (-u_xlat1.w) * u_xlat7 + 1.0;
					    u_xlat7 = u_xlat7 * u_xlat0.x + u_xlat2.w;
					    u_xlat21 = max(u_xlat2.w, 9.99999975e-05);
					    u_xlat1.xyz = u_xlat2.xyz / vec3(u_xlat21);
					    u_xlat1.xyz = u_xlat2.www * u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
					    u_xlat0.xzw = _GlowColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.x = max(u_xlat7, 9.99999975e-05);
					    SV_Target0.w = u_xlat7;
					    u_xlat0.xyz = u_xlat0.xzw / u_xlat1.xxx;
					    u_xlat1.xyz = vs_TEXCOORD4.yyy * unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + unity_WorldToLight[3].xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xyz);
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat21));
					    u_xlat21 = u_xlat1.w * u_xlat4.x;
					    u_xlat1.xyz = vec3(u_xlat21) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat21 = (-_BumpFace) + _BumpOutline;
					    u_xlat21 = u_xlat10 * u_xlat21 + _BumpFace;
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.zw);
					    u_xlat2.xy = u_xlat4.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat22 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat22 = min(u_xlat22, 1.0);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat2.z = sqrt(u_xlat22);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat21) + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat21 = vs_TEXCOORD5.x + _BevelOffset;
					    u_xlat4.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);
					    u_xlat4.z = 0.0;
					    u_xlat5 = (-u_xlat4.xzzy) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat4.xzzy + vs_TEXCOORD0.xyxy;
					    u_xlat6 = texture(_MainTex, u_xlat5.xy).wxyz;
					    u_xlat5 = texture(_MainTex, u_xlat5.zw);
					    u_xlat6.z = u_xlat5.w;
					    u_xlat5 = texture(_MainTex, u_xlat4.xy);
					    u_xlat4 = texture(_MainTex, u_xlat4.zw);
					    u_xlat6.w = u_xlat4.w;
					    u_xlat6.y = u_xlat5.w;
					    u_xlat4 = vec4(u_xlat21) + u_xlat6;
					    u_xlat4 = u_xlat4 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat21 = _BevelWidth + _OutlineWidth;
					    u_xlat21 = max(u_xlat21, 0.00999999978);
					    u_xlat4 = u_xlat4 / vec4(u_xlat21);
					    u_xlat21 = u_xlat21 * _Bevel;
					    u_xlat21 = u_xlat21 * _GradientScale;
					    u_xlat21 = u_xlat21 * -2.0;
					    u_xlat4 = u_xlat4 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					    u_xlat5 = u_xlat4 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat5 = -abs(u_xlat5) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat22 = _ShaderFlags * 0.5;
					    u_xlatb23 = u_xlat22>=(-u_xlat22);
					    u_xlat22 = fract(abs(u_xlat22));
					    u_xlat22 = (u_xlatb23) ? u_xlat22 : (-u_xlat22);
					    u_xlatb22 = u_xlat22>=0.5;
					    u_xlat4 = (bool(u_xlatb22)) ? u_xlat5 : u_xlat4;
					    u_xlat5 = u_xlat4 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);
					    u_xlat5 = sin(u_xlat5);
					    u_xlat5 = (-u_xlat4) + u_xlat5;
					    u_xlat4 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat5 + u_xlat4;
					    u_xlat22 = (-_BevelClamp) + 1.0;
					    u_xlat4 = min(vec4(u_xlat22), u_xlat4);
					    u_xlat3.xz = vec2(u_xlat21) * u_xlat4.xz;
					    u_xlat4.yz = u_xlat4.wy * vec2(u_xlat21) + (-u_xlat3.zx);
					    u_xlat4.x = float(-1.0);
					    u_xlat4.w = float(1.0);
					    u_xlat21 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat22 = dot(u_xlat4.zw, u_xlat4.zw);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat5.x = u_xlat22 * u_xlat4.z;
					    u_xlat5.yz = vec2(u_xlat22) * vec2(1.0, 0.0);
					    u_xlat4.z = 0.0;
					    u_xlat3.xzw = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xzw * u_xlat5.xyz;
					    u_xlat3.xzw = u_xlat5.zxy * u_xlat3.zwx + (-u_xlat4.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat3.xzw;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, (-u_xlat2.xyz));
					    u_xlat4.y = dot(vs_TEXCOORD2.xyz, (-u_xlat2.xyz));
					    u_xlat4.z = dot(vs_TEXCOORD3.xyz, (-u_xlat2.xyz));
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat3.xzw = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat3.xzw, u_xlat3.xzw);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat3.xzw = u_xlat3.xzw * vec3(u_xlat21) + u_xlat2.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat22 = dot(u_xlat3.xzw, u_xlat3.xzw);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2.xyz = vec3(u_xlat22) * u_xlat3.xzw;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat22 = max(u_xlat22, 0.0);
					    u_xlat22 = log2(u_xlat22);
					    u_xlat2.x = (-_FaceShininess) + _OutlineShininess;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + _FaceShininess;
					    u_xlat2.x = u_xlat2.x * 128.0;
					    u_xlat22 = u_xlat22 * u_xlat2.x;
					    u_xlat22 = exp2(u_xlat22);
					    u_xlat1.xyz = vec3(u_xlat22) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21) + u_xlat1.xyz;
					    u_xlat21 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat21 = u_xlat21 * _ProjectionParams.z;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = u_xlat21 * unity_FogParams.x;
					    u_xlat21 = u_xlat21 * (-u_xlat21);
					    u_xlat21 = exp2(u_xlat21);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat21);
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" "GLOW_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Bevel;
					//   float _BevelClamp;
					//   float _BevelOffset;
					//   float _BevelRoundness;
					//   float _BevelWidth;
					//   float _BumpFace;
					//   sampler2D _BumpMap;
					//   float _BumpOutline;
					//   float4 _FaceColor;
					//   float _FaceShininess;
					//   sampler2D _FaceTex;
					//   float _FaceUVSpeedX;
					//   float _FaceUVSpeedY;
					//   float4 _GlowColor;
					//   float _GlowInner;
					//   float _GlowOffset;
					//   float _GlowOuter;
					//   float _GlowPower;
					//   float _GradientScale;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _MainTex;
					//   float4 _OutlineColor;
					//   float _OutlineShininess;
					//   float _OutlineSoftness;
					//   sampler2D _OutlineTex;
					//   float _OutlineUVSpeedX;
					//   float _OutlineUVSpeedY;
					//   float _OutlineWidth;
					//   float _ScaleRatioA;
					//   float _ScaleRatioB;
					//   float _ShaderFlags;
					//   float4 _SpecColor;
					//   float _TextureHeight;
					//   float _TextureWidth;
					//   float4 _Time;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       2
					//   _Time                c2       1
					//   _WorldSpaceCameraPos c3       1
					//   _WorldSpaceLightPos0 c4       1
					//   unity_FogParams      c5       1
					//   _LightColor0         c6       1
					//   _SpecColor           c7       1
					//   _FaceUVSpeedX        c8       1
					//   _FaceUVSpeedY        c9       1
					//   _FaceColor           c10      1
					//   _OutlineSoftness     c11      1
					//   _OutlineUVSpeedX     c12      1
					//   _OutlineUVSpeedY     c13      1
					//   _OutlineColor        c14      1
					//   _OutlineWidth        c15      1
					//   _Bevel               c16      1
					//   _BevelOffset         c17      1
					//   _BevelWidth          c18      1
					//   _BevelClamp          c19      1
					//   _BevelRoundness      c20      1
					//   _BumpOutline         c21      1
					//   _BumpFace            c22      1
					//   _GlowColor           c23      1
					//   _GlowOffset          c24      1
					//   _GlowOuter           c25      1
					//   _GlowInner           c26      1
					//   _GlowPower           c27      1
					//   _ShaderFlags         c28      1
					//   _ScaleRatioA         c29      1
					//   _ScaleRatioB         c30      1
					//   _TextureWidth        c31      1
					//   _TextureHeight       c32      1
					//   _GradientScale       c33      1
					//   _FaceShininess       c34      1
					//   _OutlineShininess    c35      1
					//   _LightTexture0       s0       1
					//   _FaceTex             s1       1
					//   _OutlineTex          s2       1
					//   _BumpMap             s3       1
					//   _MainTex             s4       1
					//
					
					    ps_3_0
					    def c36, 10000, 0.00999999978, 2, -1
					    def c37, 0.249999955, 0.25, 6.28318548, -3.14159274
					    def c38, -2.52398507e-007, 2.47609005e-005, -0.00138883968, 0.0416666418
					    def c39, 128, 0, 0, 0
					    def c40, 0, 0.5, 1, -9.99999975e-005
					    dcl_texcoord v0
					    dcl_texcoord1_pp v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_color_pp v5
					    dcl_texcoord5 v6.xy
					    dcl_texcoord7 v7.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    mov r0.x, c30.x
					    mul r0.y, r0.x, c24.x
					    mul r0.y, r0.y, v6.y
					    texld r1, v0, s4
					    add r0.z, -r1.w, c40.y
					    add r0.z, r0.z, -v6.x
					    mad_pp r0.z, r0.z, v6.y, c40.y
					    mad r0.y, r0.y, -c40.y, r0.z
					    mul r0.x, r0.x, c25.x
					    cmp r0.x, r0.y, r0.x, c26.x
					    mul r0.x, r0.x, v6.y
					    mad r0.w, r0.x, c40.y, c40.z
					    rcp r0.w, r0.w
					    mul r0.y, r0.w, r0.y
					    abs_sat r0.y, r0.y
					    pow r1.x, r0.y, c27.x
					    add r0.y, -r1.x, c40.z
					    mul r0.w, r0.x, c40.y
					    mad r0.x, r0.x, -c40.y, c40.z
					    rsq r0.w, r0.w
					    rcp r0.w, r0.w
					    cmp r0.x, r0.x, r0.w, c40.z
					    mul r0.x, r0.x, r0.y
					    mov r1.xyz, c40
					    dp2add_sat r0.x, c23.w, r0.x, r1.x
					    mul r0.x, r0.x, v5.w
					    mov r0.y, c2.y
					    mad r2.x, c12.x, r0.y, v0.z
					    mad r2.y, c13.x, r0.y, v0.w
					    texld r2, r2, s2
					    mul_pp r2.xyz, r2, c14
					    mul r0.w, c14.w, v5.w
					    mul_pp r3.w, r2.w, r0.w
					    mul_pp r3.xyz, r2, r3.w
					    mad r2.x, c8.x, r0.y, v0.z
					    mad r2.y, c9.x, r0.y, v0.w
					    texld r2, r2, s1
					    mul r4, c10, v5
					    mul_pp r2, r2, r4
					    mul_pp r2.xyz, r2.w, r2
					    mov r1.x, c15.x
					    mul r0.y, r1.x, c29.x
					    mad r0.w, r0.y, -v6.y, c40.z
					    mul_pp r0.y, r0.y, v6.y
					    rsq r1.w, r0.y
					    rcp_pp r1.w, r1.w
					    cmp_pp r0.w, r0.w, r1.w, c40.z
					    mad_sat_pp r1.w, r0.y, c40.y, r0.z
					    mad_pp r0.y, r0.y, -c40.y, r0.z
					    mul_pp r0.z, r0.w, r1.w
					    lrp_pp r4, r0.z, r3, r2
					    mov r2.x, c29.x
					    mul r0.z, r2.x, c11.x
					    mul_pp r0.w, r0.z, v6.y
					    mad_pp r0.z, r0.z, v6.y, c40.z
					    rcp r0.z, r0.z
					    mad_pp r0.y, r0.w, c40.y, r0.y
					    mul_sat_pp r0.y, r0.z, r0.y
					    add_pp r0.y, -r0.y, c40.z
					    mad r0.z, r4.w, r0.y, c40.w
					    mul_pp r2, r0.y, r4
					    mad r0.y, r4.w, -r0.y, c40.z
					    mad_pp r0.y, r0.y, r0.x, r2.w
					    rcp r0.w, r2.w
					    cmp r0.z, r0.z, r0.w, c36.x
					    mul r2.xyz, r0.z, r2
					    mul r2.xyz, r2.w, r2
					    lrp r3.xyz, r0.x, c23, r2
					    add r0.x, r0.y, c40.w
					    rcp r0.z, r0.y
					    mov_pp oC0.w, r0.y
					    cmp r0.x, r0.x, r0.z, c36.x
					    mul_pp r0.xyz, r0.x, r3
					    mad r3, v4.xyzx, c40.zzzx, c40.xxxz
					    dp4 r2.x, c0, r3
					    dp4 r2.y, c1, r3
					    texld_pp r3, r2, s0
					    mul_pp r2.xyz, r3.w, c6
					    mul_pp r0.xyz, r0, r2
					    mul r2.xyz, r2, c7
					    mov r3.x, c22.x
					    add r0.w, -r3.x, c21.x
					    mad r0.w, r1.w, r0.w, c22.x
					    texld_pp r3, v0.zwzw, s3
					    mad_pp r3.xy, r3.wyzw, c36.z, c36.w
					    dp2add_sat_pp r3.w, r3, r3, c40.x
					    add_pp r3.w, -r3.w, c40.z
					    rsq_pp r3.w, r3.w
					    rcp_pp r3.z, r3.w
					    mad r3.xyz, r3, r0.w, -c40.xxzw
					    mad r3.xyz, r2.w, r3, c40.xxzw
					    add r0.w, c17.x, v6.x
					    rcp r4.x, c31.x
					    rcp r4.w, c32.x
					    mov r4.yz, c40.x
					    add r5, -r4, v0.xyxy
					    add r4, r4, v0.xyxy
					    texld r6, r5, s4
					    texld r5, r5.zwzw, s4
					    mov r5.z, r5.w
					    mov r5.x, r6.w
					    texld r6, r4, s4
					    texld r4, r4.zwzw, s4
					    mov r5.w, r4.w
					    mov r5.y, r6.w
					    add r4, r0.w, r5
					    add r0.w, r1.x, c18.x
					    max r1.x, c36.y, r0.w
					    rcp r0.w, r1.x
					    mul r1.x, r1.x, c16.x
					    mul r1.x, r1.x, c33.x
					    mul r1.x, r1.x, -c36.z
					    lrp_sat r5, r0.w, r4, c40.y
					    mad r4, r5, c36.z, c36.w
					    add r4, -r4_abs, c40.z
					    mul r0.w, r1.y, c28.x
					    frc r0.w, r0_abs.w
					    cmp r0.w, c28.x, r0.w, -r0.w
					    add r0.w, r0.w, -c40.y
					    cmp r4, r0.w, r4, r5
					    mad r5, r4, c37.x, c37.y
					    frc r5, r5
					    mad r5, r5, c37.z, c37.w
					    mul r5, r5, r5
					    mad r6, r5, c38.x, c38.y
					    mad r6, r5, r6, c38.z
					    mad r6, r5, r6, c38.w
					    mad r6, r5, r6, -c40.y
					    mad r5, r5, r6, c40.z
					    lrp r6, c20.x, r5, r4
					    add r0.w, r1.z, -c19.x
					    min r4, r0.w, r6
					    mul r1.yz, r1.x, r4.xxzw
					    mad r4.xy, r4.ywzw, r1.x, -r1.yzzw
					    mov r4.w, -c40.z
					    dp2add r0.w, r4.wyzw, r4.wyzw, c40.x
					    mul r1.xyz, r4.wyww, c40.zzxw
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mov r4.z, c40.z
					    dp2add r0.w, r4.zxzw, r4.zxzw, c40.x
					    rsq r0.w, r0.w
					    mul r4.x, r0.w, r4.x
					    mul r4.yz, r0.w, c40.xzxw
					    mul r5.xyz, r1, r4
					    mad r1.xyz, r4.zxyw, r1.yzxw, -r5
					    add r1.xyz, -r3, r1
					    nrm_pp r3.xyz, r1
					    dp3_pp r1.x, v1, -r3
					    dp3_pp r1.y, v2, -r3
					    dp3_pp r1.z, v3, -r3
					    add r3.xyz, c3, -v4
					    dp3 r0.w, r3, r3
					    rsq r0.w, r0.w
					    mad_pp r3.xyz, r3, r0.w, c4
					    nrm_pp r4.xyz, r3
					    dp3_pp r0.w, r1, r4
					    dp3_pp r1.x, r1, c4
					    max_pp r2.w, r1.x, c40.x
					    max r1.x, r0.w, c40.x
					    mov r3.x, c34.x
					    add r0.w, -r3.x, c35.x
					    mad_pp r0.w, r1.w, r0.w, c34.x
					    mul r0.w, r0.w, c39.x
					    pow r3.x, r1.x, r0.w
					    mul r1.xyz, r2, r3.x
					    mad_pp r0.xyz, r0, r2.w, r1
					    mul r0.w, c5.x, v7.x
					    mul r0.w, r0.w, -r0.w
					    exp r0.w, r0.w
					    mul_pp oC0.xyz, r0, r0.w
					
					// approximately 183 instruction slots used (9 texture, 174 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" "GLOW_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						float _FaceUVSpeedX;
						float _FaceUVSpeedY;
						vec4 _FaceColor;
						float _OutlineSoftness;
						float _OutlineUVSpeedX;
						float _OutlineUVSpeedY;
						vec4 _OutlineColor;
						float _OutlineWidth;
						float _Bevel;
						float _BevelOffset;
						float _BevelWidth;
						float _BevelClamp;
						float _BevelRoundness;
						float _BumpOutline;
						float _BumpFace;
						vec4 unused_0_19[12];
						vec4 _GlowColor;
						float _GlowOffset;
						float _GlowOuter;
						float _GlowInner;
						float _GlowPower;
						float _ShaderFlags;
						float _ScaleRatioA;
						float _ScaleRatioB;
						vec4 unused_0_28[3];
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _FaceShininess;
						float _OutlineShininess;
						vec4 unused_0_34[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[3];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_4[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _FaceTex;
					uniform  sampler2D _OutlineTex;
					uniform  sampler2D _BumpMap;
					uniform  sampler2D _LightTexture0;
					in  vec4 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD5;
					in  float vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					float u_xlat7;
					float u_xlat10;
					float u_xlat14;
					bool u_xlatb14;
					float u_xlat21;
					float u_xlat22;
					bool u_xlatb22;
					bool u_xlatb23;
					void main()
					{
					    u_xlat0.x = _GlowOffset * _ScaleRatioB;
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD5.y;
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat7 = (-u_xlat1.w) + 0.5;
					    u_xlat7 = u_xlat7 + (-vs_TEXCOORD5.x);
					    u_xlat7 = u_xlat7 * vs_TEXCOORD5.y + 0.5;
					    u_xlat0.x = (-u_xlat0.x) * 0.5 + u_xlat7;
					    u_xlatb14 = u_xlat0.x>=0.0;
					    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
					    u_xlat21 = _GlowOuter * _ScaleRatioB + (-_GlowInner);
					    u_xlat14 = u_xlat14 * u_xlat21 + _GlowInner;
					    u_xlat14 = u_xlat14 * vs_TEXCOORD5.y;
					    u_xlat21 = u_xlat14 * 0.5 + 1.0;
					    u_xlat14 = u_xlat14 * 0.5;
					    u_xlat14 = min(u_xlat14, 1.0);
					    u_xlat14 = sqrt(u_xlat14);
					    u_xlat0.x = u_xlat0.x / u_xlat21;
					    u_xlat0.x = min(abs(u_xlat0.x), 1.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _GlowPower;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = u_xlat14 * u_xlat0.x;
					    u_xlat0.x = dot(_GlowColor.ww, u_xlat0.xx);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat14 = (-u_xlat0.x) * vs_COLOR0.w + 1.0;
					    u_xlat0.x = u_xlat0.x * vs_COLOR0.w;
					    u_xlat1.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat1 = texture(_OutlineTex, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.xyz * _OutlineColor.xyz;
					    u_xlat21 = vs_COLOR0.w * _OutlineColor.w;
					    u_xlat2.w = u_xlat1.w * u_xlat21;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.www;
					    u_xlat1.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD0.zw;
					    u_xlat1 = texture(_FaceTex, u_xlat1.xy);
					    u_xlat3 = vs_COLOR0 * _FaceColor;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2 = (-u_xlat1) + u_xlat2;
					    u_xlat21 = _OutlineWidth * _ScaleRatioA;
					    u_xlat21 = u_xlat21 * vs_TEXCOORD5.y;
					    u_xlat3.x = min(u_xlat21, 1.0);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat10 = u_xlat21 * 0.5 + u_xlat7;
					    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
					    u_xlat7 = (-u_xlat21) * 0.5 + u_xlat7;
					    u_xlat21 = u_xlat3.x * u_xlat10;
					    u_xlat1 = vec4(u_xlat21) * u_xlat2 + u_xlat1;
					    u_xlat21 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat2.x = u_xlat21 * vs_TEXCOORD5.y;
					    u_xlat21 = u_xlat21 * vs_TEXCOORD5.y + 1.0;
					    u_xlat7 = u_xlat2.x * 0.5 + u_xlat7;
					    u_xlat7 = u_xlat7 / u_xlat21;
					    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
					    u_xlat7 = (-u_xlat7) + 1.0;
					    u_xlat2 = vec4(u_xlat7) * u_xlat1;
					    u_xlat7 = (-u_xlat1.w) * u_xlat7 + 1.0;
					    u_xlat7 = u_xlat7 * u_xlat0.x + u_xlat2.w;
					    u_xlat21 = max(u_xlat2.w, 9.99999975e-05);
					    u_xlat1.xyz = u_xlat2.xyz / vec3(u_xlat21);
					    u_xlat1.xyz = u_xlat2.www * u_xlat1.xyz;
					    u_xlat1.xyz = vec3(u_xlat14) * u_xlat1.xyz;
					    u_xlat0.xzw = _GlowColor.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat1.x = max(u_xlat7, 9.99999975e-05);
					    SV_Target0.w = u_xlat7;
					    u_xlat0.xyz = u_xlat0.xzw / u_xlat1.xxx;
					    u_xlat1.xy = vs_TEXCOORD4.yy * unity_WorldToLight[1].xy;
					    u_xlat1.xy = unity_WorldToLight[0].xy * vs_TEXCOORD4.xx + u_xlat1.xy;
					    u_xlat1.xy = unity_WorldToLight[2].xy * vs_TEXCOORD4.zz + u_xlat1.xy;
					    u_xlat1.xy = u_xlat1.xy + unity_WorldToLight[3].xy;
					    u_xlat1 = texture(_LightTexture0, u_xlat1.xy);
					    u_xlat1.xyz = u_xlat1.www * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat21 = (-_BumpFace) + _BumpOutline;
					    u_xlat21 = u_xlat10 * u_xlat21 + _BumpFace;
					    u_xlat4 = texture(_BumpMap, vs_TEXCOORD0.zw);
					    u_xlat2.xy = u_xlat4.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat22 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat22 = min(u_xlat22, 1.0);
					    u_xlat22 = (-u_xlat22) + 1.0;
					    u_xlat2.z = sqrt(u_xlat22);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat21) + vec3(-0.0, -0.0, -1.0);
					    u_xlat2.xyz = u_xlat2.www * u_xlat2.xyz + vec3(0.0, 0.0, 1.0);
					    u_xlat21 = vs_TEXCOORD5.x + _BevelOffset;
					    u_xlat4.xy = vec2(1.0, 1.0) / vec2(_TextureWidth, _TextureHeight);
					    u_xlat4.z = 0.0;
					    u_xlat5 = (-u_xlat4.xzzy) + vs_TEXCOORD0.xyxy;
					    u_xlat4 = u_xlat4.xzzy + vs_TEXCOORD0.xyxy;
					    u_xlat6 = texture(_MainTex, u_xlat5.xy).wxyz;
					    u_xlat5 = texture(_MainTex, u_xlat5.zw);
					    u_xlat6.z = u_xlat5.w;
					    u_xlat5 = texture(_MainTex, u_xlat4.xy);
					    u_xlat4 = texture(_MainTex, u_xlat4.zw);
					    u_xlat6.w = u_xlat4.w;
					    u_xlat6.y = u_xlat5.w;
					    u_xlat4 = vec4(u_xlat21) + u_xlat6;
					    u_xlat4 = u_xlat4 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat21 = _BevelWidth + _OutlineWidth;
					    u_xlat21 = max(u_xlat21, 0.00999999978);
					    u_xlat4 = u_xlat4 / vec4(u_xlat21);
					    u_xlat21 = u_xlat21 * _Bevel;
					    u_xlat21 = u_xlat21 * _GradientScale;
					    u_xlat21 = u_xlat21 * -2.0;
					    u_xlat4 = u_xlat4 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					    u_xlat5 = u_xlat4 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat5 = -abs(u_xlat5) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat22 = _ShaderFlags * 0.5;
					    u_xlatb23 = u_xlat22>=(-u_xlat22);
					    u_xlat22 = fract(abs(u_xlat22));
					    u_xlat22 = (u_xlatb23) ? u_xlat22 : (-u_xlat22);
					    u_xlatb22 = u_xlat22>=0.5;
					    u_xlat4 = (bool(u_xlatb22)) ? u_xlat5 : u_xlat4;
					    u_xlat5 = u_xlat4 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);
					    u_xlat5 = sin(u_xlat5);
					    u_xlat5 = (-u_xlat4) + u_xlat5;
					    u_xlat4 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat5 + u_xlat4;
					    u_xlat22 = (-_BevelClamp) + 1.0;
					    u_xlat4 = min(vec4(u_xlat22), u_xlat4);
					    u_xlat3.xz = vec2(u_xlat21) * u_xlat4.xz;
					    u_xlat4.yz = u_xlat4.wy * vec2(u_xlat21) + (-u_xlat3.zx);
					    u_xlat4.x = float(-1.0);
					    u_xlat4.w = float(1.0);
					    u_xlat21 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat22 = dot(u_xlat4.zw, u_xlat4.zw);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat5.x = u_xlat22 * u_xlat4.z;
					    u_xlat5.yz = vec2(u_xlat22) * vec2(1.0, 0.0);
					    u_xlat4.z = 0.0;
					    u_xlat3.xzw = vec3(u_xlat21) * u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat3.xzw * u_xlat5.xyz;
					    u_xlat3.xzw = u_xlat5.zxy * u_xlat3.zwx + (-u_xlat4.xyz);
					    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat3.xzw;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat4.x = dot(vs_TEXCOORD1.xyz, (-u_xlat2.xyz));
					    u_xlat4.y = dot(vs_TEXCOORD2.xyz, (-u_xlat2.xyz));
					    u_xlat4.z = dot(vs_TEXCOORD3.xyz, (-u_xlat2.xyz));
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat2.xyz);
					    u_xlat22 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat22 = max(u_xlat22, 0.0);
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = log2(u_xlat21);
					    u_xlat2.x = (-_FaceShininess) + _OutlineShininess;
					    u_xlat2.x = u_xlat10 * u_xlat2.x + _FaceShininess;
					    u_xlat2.x = u_xlat2.x * 128.0;
					    u_xlat21 = u_xlat21 * u_xlat2.x;
					    u_xlat21 = exp2(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat22) + u_xlat1.xyz;
					    u_xlat21 = vs_TEXCOORD7 / _ProjectionParams.y;
					    u_xlat21 = (-u_xlat21) + 1.0;
					    u_xlat21 = u_xlat21 * _ProjectionParams.z;
					    u_xlat21 = max(u_xlat21, 0.0);
					    u_xlat21 = u_xlat21 * unity_FogParams.x;
					    u_xlat21 = u_xlat21 * (-u_xlat21);
					    u_xlat21 = exp2(u_xlat21);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat21);
					    return;
					}"
				}
			}
		}
		Pass {
			Name "CASTER"
			LOD 300
			Tags { "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "SHADOWCASTER" "QUEUE" = "Transparent" "RenderType" = "Transparent" "SHADOWSUPPORT" = "true" }
			ColorMask RGB -1
			ZClip Off
			Cull Off
			Offset 1, 1
			Fog {
				Mode Off
			}
			GpuProgramID 144013
			Program "vp" {
				SubProgram "d3d9 " {
					Keywords { "SHADOWS_DEPTH" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _FaceDilate;
					//   float4 _MainTex_ST;
					//   float _OutlineWidth;
					//   float _ScaleRatioA;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_LightShadowBias;
					//
					//
					// Registers:
					//
					//   Name                  Reg   Size
					//   --------------------- ----- ----
					//   glstate_matrix_mvp    c0       4
					//   unity_LightShadowBias c4       1
					//   _MainTex_ST           c5       1
					//   _OutlineWidth         c6       1
					//   _FaceDilate           c7       1
					//   _ScaleRatioA          c8       1
					//
					
					    vs_3_0
					    def c9, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord1 o1.xy
					    dcl_texcoord2 o2.x
					    mad r0, v0.xyzx, c9.xxxy, c9.yyyx
					    dp4 r2.x, c0, r0
					    dp4 r2.y, c1, r0
					    dp4 r1.x, c2, r0
					    dp4 r0.x, c3, r0
					    rcp r0.y, r0.x
					    mov r2.w, r0.x
					    mul_sat r0.x, r0.y, c4.x
					    add r0.x, r0.x, r1.x
					    max r0.y, r0.x, c9.y
					    add r0.y, -r0.x, r0.y
					    mad r2.z, c4.y, r0.y, r0.x
					    mad o1.xy, v1, c5, c5.zwzw
					    mov r0.x, c9.x
					    mov r1.x, c8.x
					    mad r0.x, c6.x, -r1.x, r0.x
					    mad r0.x, c7.x, -r1.x, r0.x
					    mul o2.x, r0.x, c9.z
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 20 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_DEPTH" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_ST;
						float _OutlineWidth;
						float _FaceDilate;
						float _ScaleRatioA;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_1_2[20];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD2;
					vec4 u_xlat0;
					float u_xlat1;
					float u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat1 = unity_LightShadowBias.x / u_xlat0.w;
					    u_xlat1 = max(u_xlat1, -1.0);
					    u_xlat1 = min(u_xlat1, 0.0);
					    u_xlat4 = u_xlat0.z + u_xlat1;
					    u_xlat1 = min(u_xlat0.w, u_xlat4);
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.x = (-u_xlat4) + u_xlat1;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat4;
					    u_xlat0.x = (-_OutlineWidth) * _ScaleRatioA + 1.0;
					    u_xlat0.x = (-_FaceDilate) * _ScaleRatioA + u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.5;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "SHADOWS_CUBE" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _FaceDilate;
					//   float4 _LightPositionRange;
					//   float4 _MainTex_ST;
					//   float _OutlineWidth;
					//   float _ScaleRatioA;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   glstate_matrix_mvp  c0       4
					//   unity_ObjectToWorld c4       3
					//   _LightPositionRange c7       1
					//   _MainTex_ST         c8       1
					//   _OutlineWidth       c9       1
					//   _FaceDilate         c10      1
					//   _ScaleRatioA        c11      1
					//
					
					    vs_3_0
					    def c12, 1, 0, 0.5, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_texcoord o0.xyz
					    dcl_position o1
					    dcl_texcoord1 o2.xy
					    dcl_texcoord2 o3.x
					    dp4 r0.x, c4, v0
					    dp4 r0.y, c5, v0
					    dp4 r0.z, c6, v0
					    add o0.xyz, r0, -c7
					    mad r0, v0.xyzx, c12.xxxy, c12.yyyx
					    dp4 r2.x, c0, r0
					    dp4 r2.y, c1, r0
					    dp4 r2.z, c2, r0
					    dp4 r2.w, c3, r0
					    mad o2.xy, v1, c8, c8.zwzw
					    mov r0.x, c12.x
					    mov r1.x, c11.x
					    mad r0.x, c9.x, -r1.x, r0.x
					    mad r0.x, c10.x, -r1.x, r0.x
					    mul o3.x, r0.x, c12.z
					    mad o1.xy, r2.w, c255, r2
					    mov o1.zw, r2
					
					// approximately 17 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_CUBE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_ST;
						float _OutlineWidth;
						float _FaceDilate;
						float _ScaleRatioA;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0;
						vec4 _LightPositionRange;
						vec4 unused_1_2[43];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						vec4 unused_2_3[6];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_TEXCOORD0;
					out vec3 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out float vs_TEXCOORD2;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xyz + (-_LightPositionRange.xyz);
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = u_xlat0 + glstate_matrix_mvp[3];
					    u_xlat0.x = (-_OutlineWidth) * _ScaleRatioA + 1.0;
					    u_xlat0.x = (-_FaceDilate) * _ScaleRatioA + u_xlat0.x;
					    vs_TEXCOORD2 = u_xlat0.x * 0.5;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					Keywords { "SHADOWS_DEPTH" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c0, 0, 0, 0, 0
					    dcl_texcoord1 v0.xy
					    dcl_texcoord2 v1.x
					    dcl_2d s0
					    texld_pp r0, v0, s0
					    add r0, r0.w, -v1.x
					    texkill r0
					    mov oC0, c0.x
					
					// approximately 4 instruction slots used (1 texture, 3 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_DEPTH" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat0.x = u_xlat0.w + (-vs_TEXCOORD2);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "SHADOWS_CUBE" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _LightPositionRange;
					//   sampler2D _MainTex;
					//   float4 unity_LightShadowBias;
					//
					//
					// Registers:
					//
					//   Name                  Reg   Size
					//   --------------------- ----- ----
					//   _LightPositionRange   c0       1
					//   unity_LightShadowBias c1       1
					//   _MainTex              s0       1
					//
					
					    ps_3_0
					    dcl_texcoord v0.xyz
					    dcl_texcoord1 v1.xy
					    dcl_texcoord2 v2.x
					    dcl_2d s0
					    texld_pp r0, v1, s0
					    add r0, r0.w, -v2.x
					    texkill r0
					    dp3 r0.x, v0, v0
					    rsq r0.x, r0.x
					    rcp r0.x, r0.x
					    add r0.x, r0.x, c1.x
					    mul oC0, r0.x, c0.w
					
					// approximately 8 instruction slots used (1 texture, 7 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_CUBE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityLighting {
						vec4 unused_0_0;
						vec4 _LightPositionRange;
						vec4 unused_0_2[43];
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_1_0[5];
						vec4 unity_LightShadowBias;
						vec4 unused_1_2[20];
					};
					uniform  sampler2D _MainTex;
					in  vec3 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  float vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bool u_xlatb0;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat0.x = u_xlat0.w + (-vs_TEXCOORD2);
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x + unity_LightShadowBias.x;
					    SV_Target0 = u_xlat0.xxxx * _LightPositionRange.wwww;
					    return;
					}"
				}
			}
		}
	}
	CustomEditor "TMPro.EditorUtilities.TMP_SDFShaderGUI"
}